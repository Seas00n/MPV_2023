
Pros_Ctrl_Normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007288  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b0  080074b0  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b8  080074b8  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074bc  080074bc  000174bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080074c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          0000043c  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000054c  2000054c  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bf5  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d2a  00000000  00000000  00032d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00035a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  000369c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024aaf  00000000  00000000  000377d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f67  00000000  00000000  0005c287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad9f  00000000  00000000  000701ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014af8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004370  00000000  00000000  0014afe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007420 	.word	0x08007420

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	08007420 	.word	0x08007420

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b30:	f000 b974 	b.w	8000e1c <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468e      	mov	lr, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14d      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	d969      	bls.n	8000c34 <__udivmoddi4+0xe8>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b152      	cbz	r2, 8000b7c <__udivmoddi4+0x30>
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	f1c2 0120 	rsb	r1, r2, #32
 8000b6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b76:	ea41 0e03 	orr.w	lr, r1, r3
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	0c21      	lsrs	r1, r4, #16
 8000b82:	fbbe f6f8 	udiv	r6, lr, r8
 8000b86:	fa1f f78c 	uxth.w	r7, ip
 8000b8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b92:	fb06 f107 	mul.w	r1, r6, r7
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ba2:	f080 811f 	bcs.w	8000de4 <__udivmoddi4+0x298>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 811c 	bls.w	8000de4 <__udivmoddi4+0x298>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 f707 	mul.w	r7, r0, r7
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x92>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd0:	f080 810a 	bcs.w	8000de8 <__udivmoddi4+0x29c>
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	f240 8107 	bls.w	8000de8 <__udivmoddi4+0x29c>
 8000bda:	4464      	add	r4, ip
 8000bdc:	3802      	subs	r0, #2
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa4>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	f000 80ef 	beq.w	8000dde <__udivmoddi4+0x292>
 8000c00:	2600      	movs	r6, #0
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	4630      	mov	r0, r6
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	fab3 f683 	clz	r6, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d14a      	bne.n	8000cac <__udivmoddi4+0x160>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xd4>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 80f9 	bhi.w	8000e12 <__udivmoddi4+0x2c6>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb61 0303 	sbc.w	r3, r1, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	469e      	mov	lr, r3
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e0      	beq.n	8000bf0 <__udivmoddi4+0xa4>
 8000c2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c32:	e7dd      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000c34:	b902      	cbnz	r2, 8000c38 <__udivmoddi4+0xec>
 8000c36:	deff      	udf	#255	; 0xff
 8000c38:	fab2 f282 	clz	r2, r2
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f040 8092 	bne.w	8000d66 <__udivmoddi4+0x21a>
 8000c42:	eba1 010c 	sub.w	r1, r1, ip
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2601      	movs	r6, #1
 8000c50:	0c20      	lsrs	r0, r4, #16
 8000c52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c56:	fb07 1113 	mls	r1, r7, r3, r1
 8000c5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5e:	fb0e f003 	mul.w	r0, lr, r3
 8000c62:	4288      	cmp	r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x12c>
 8000c66:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x12a>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2c0>
 8000c76:	4643      	mov	r3, r8
 8000c78:	1a09      	subs	r1, r1, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c80:	fb07 1110 	mls	r1, r7, r0, r1
 8000c84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x156>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x154>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2ca>
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x9a>
 8000cac:	f1c6 0720 	rsb	r7, r6, #32
 8000cb0:	40b3      	lsls	r3, r6
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa20 f407 	lsr.w	r4, r0, r7
 8000cbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	40f9      	lsrs	r1, r7
 8000cc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cca:	fa00 f306 	lsl.w	r3, r0, r6
 8000cce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cd2:	0c20      	lsrs	r0, r4, #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b8>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2bc>
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2bc>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	458e      	cmp	lr, r1
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1e2>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2b4>
 8000d26:	458e      	cmp	lr, r1
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2b4>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4461      	add	r1, ip
 8000d2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d32:	fba0 9402 	umull	r9, r4, r0, r2
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	42a1      	cmp	r1, r4
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46a6      	mov	lr, r4
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x2a4>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x2a0>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x212>
 8000d46:	ebb3 0208 	subs.w	r2, r3, r8
 8000d4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d52:	fa22 f306 	lsr.w	r3, r2, r6
 8000d56:	40f1      	lsrs	r1, r6
 8000d58:	431f      	orrs	r7, r3
 8000d5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1c2 0320 	rsb	r3, r2, #32
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
 8000d74:	4091      	lsls	r1, r2
 8000d76:	4301      	orrs	r1, r0
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d84:	fb07 3610 	mls	r6, r7, r0, r3
 8000d88:	0c0b      	lsrs	r3, r1, #16
 8000d8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d92:	429e      	cmp	r6, r3
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x260>
 8000d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b8>
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b8>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	b289      	uxth	r1, r1
 8000db0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db4:	fb07 3316 	mls	r3, r7, r6, r3
 8000db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x28a>
 8000dc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000dd2:	3e02      	subs	r6, #2
 8000dd4:	4461      	add	r1, ip
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0x104>
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e705      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e3      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6f8      	b.n	8000bde <__udivmoddi4+0x92>
 8000dec:	454b      	cmp	r3, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f8>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f8>
 8000dfc:	4646      	mov	r6, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x28a>
 8000e00:	4620      	mov	r0, r4
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1e2>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x260>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b8>
 8000e0c:	3b02      	subs	r3, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x12c>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e709      	b.n	8000c2a <__udivmoddi4+0xde>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x156>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <debugPrint>:
#include "debug_uart.h"
#include "stdio.h"
#include "stdarg.h"
static char tempBuf[40];
extern UART_HandleTypeDef huart8;
void debugPrint(char *fmt,...){
 8000e20:	b40f      	push	{r0, r1, r2, r3}
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
	//可变长度参数
	va_list argp;
	uint32_t n = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
	// 以fmt为起始地址，获取第一个参数的首地址
	va_start(argp, fmt);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	603b      	str	r3, [r7, #0]
	n = vsprintf((char *) tempBuf, fmt, argp);
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	6939      	ldr	r1, [r7, #16]
 8000e36:	480c      	ldr	r0, [pc, #48]	; (8000e68 <debugPrint+0x48>)
 8000e38:	f005 fe9a 	bl	8006b70 <vsiprintf>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	607b      	str	r3, [r7, #4]
	// argp置0
	va_end(argp);
	if (HAL_UART_Transmit(&huart8, (uint8_t *) tempBuf, n, 1000) != HAL_OK) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <debugPrint+0x48>)
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <debugPrint+0x4c>)
 8000e4c:	f004 fbb9 	bl	80055c2 <HAL_UART_Transmit>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <debugPrint+0x3a>
		/* Transfer error in transmission process */
		Error_Handler();
 8000e56:	f001 fab3 	bl	80023c0 <Error_Handler>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e64:	b004      	add	sp, #16
 8000e66:	4770      	bx	lr
 8000e68:	2000012c 	.word	0x2000012c
 8000e6c:	2000028c 	.word	0x2000028c

08000e70 <CAN_FilterConfig>:
//TODO
//Use to debug
float pos_desired_rtmotor = 0;
float pos_actual_rtmotor = 0;

void CAN_FilterConfig(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTERMODE_IDMASK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow  = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig)!=HAL_OK){
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <CAN_FilterConfig+0x5c>)
 8000e94:	f001 ffca 	bl	8002e2c <HAL_CAN_ConfigFilter>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <CAN_FilterConfig+0x32>
		Error_Handler();
 8000e9e:	f001 fa8f 	bl	80023c0 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan1)!=HAL_OK){
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <CAN_FilterConfig+0x5c>)
 8000ea4:	f002 f8a2 	bl	8002fec <HAL_CAN_Start>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <CAN_FilterConfig+0x42>
		Error_Handler();
 8000eae:	f001 fa87 	bl	80023c0 <Error_Handler>
	}
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING)){
 8000eb2:	2112      	movs	r1, #18
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <CAN_FilterConfig+0x5c>)
 8000eb6:	f002 faff 	bl	80034b8 <HAL_CAN_ActivateNotification>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <CAN_FilterConfig+0x54>
		Error_Handler();
 8000ec0:	f001 fa7e 	bl	80023c0 <Error_Handler>
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000218 	.word	0x20000218

08000ed0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d107      	bne.n	8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxDataBuffer);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000ee8:	f002 f9d4 	bl	8003294 <HAL_CAN_GetRxMessage>
		motor_receive();
 8000eec:	f000 f884 	bl	8000ff8 <motor_receive>
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000218 	.word	0x20000218
 8000efc:	20000160 	.word	0x20000160
 8000f00:	20000184 	.word	0x20000184

08000f04 <CAN_SendMessage>:


void CAN_SendMessage(uint16_t id,uint8_t len){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	80fb      	strh	r3, [r7, #6]
 8000f10:	4613      	mov	r3, r2
 8000f12:	717b      	strb	r3, [r7, #5]
	txHeader.StdId = 0;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_EXT;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	609a      	str	r2, [r3, #8]
	txHeader.ExtId = id;
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f24:	6053      	str	r3, [r2, #4]
	txHeader.RTR = CAN_RTR_DATA;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
	if(len>8){
 8000f2c:	797b      	ldrb	r3, [r7, #5]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d901      	bls.n	8000f36 <CAN_SendMessage+0x32>
		len = 8;
 8000f32:	2308      	movs	r3, #8
 8000f34:	717b      	strb	r3, [r7, #5]
	}
	txHeader.DLC = len;
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f3a:	6113      	str	r3, [r2, #16]
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0){
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <CAN_SendMessage+0x5c>)
 8000f3e:	f002 f974 	bl	800322a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <CAN_SendMessage+0x50>
		HAL_CAN_AddTxMessage(&hcan1, &txHeader, txDataBuffer, &txMailBox);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <CAN_SendMessage+0x60>)
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <CAN_SendMessage+0x64>)
 8000f4c:	4903      	ldr	r1, [pc, #12]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <CAN_SendMessage+0x5c>)
 8000f50:	f002 f890 	bl	8003074 <HAL_CAN_AddTxMessage>
	}
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000016c 	.word	0x2000016c
 8000f60:	20000218 	.word	0x20000218
 8000f64:	200001a0 	.word	0x200001a0
 8000f68:	20000154 	.word	0x20000154

08000f6c <motor_init>:

void motor_init(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	motor_knee.device_id = 0x01;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <motor_init+0x7c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	801a      	strh	r2, [r3, #0]
	motor_ankle.device_id = 0x02;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <motor_init+0x80>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	801a      	strh	r2, [r3, #0]
	motor_knee.state = 0x01;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <motor_init+0x7c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	motor_ankle.state = 0x01;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <motor_init+0x80>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	can_set_pos_spd(motor_knee.device_id, 0,4,30000);
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <motor_init+0x7c>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000ff0 <motor_init+0x84>
 8000f98:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8000f9c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000ff4 <motor_init+0x88>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f9c5 	bl	8001330 <can_set_pos_spd>
	can_set_pos_spd(motor_ankle.device_id,0,4,30000);
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <motor_init+0x80>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8000ff0 <motor_init+0x84>
 8000fb2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8000fb6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000ff4 <motor_init+0x88>
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f9b8 	bl	8001330 <can_set_pos_spd>
	HAL_Delay(2000);
 8000fc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc4:	f001 fe12 	bl	8002bec <HAL_Delay>
	can_set_origin(motor_knee.device_id);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <motor_init+0x7c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fac1 	bl	8001558 <can_set_origin>
	can_set_origin(motor_ankle.device_id);
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <motor_init+0x80>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 faba 	bl	8001558 <can_set_origin>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000030 	.word	0x20000030
 8000ff0:	46ea6000 	.word	0x46ea6000
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <motor_receive>:

void motor_receive(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	if(rxDataBuffer[7]!=0){
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <motor_receive+0x230>)
 8000ffe:	79db      	ldrb	r3, [r3, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <motor_receive+0x24>
		motor_knee.state = 0x00;
 8001004:	4b89      	ldr	r3, [pc, #548]	; (800122c <motor_receive+0x234>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		motor_ankle.state = 0x00;
 800100c:	4b88      	ldr	r3, [pc, #544]	; (8001230 <motor_receive+0x238>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		debugPrint("ERROR");
 8001014:	4887      	ldr	r0, [pc, #540]	; (8001234 <motor_receive+0x23c>)
 8001016:	f7ff ff03 	bl	8000e20 <debugPrint>
			motor_ankle.cur_actual = (float)(cur_int*0.01f);
			motor_ankle.temperature = (float)temp_int;
		}
		Motor_UpdateMessages();
	}
}
 800101a:	e0fe      	b.n	800121a <motor_receive+0x222>
		pos_int = (rxDataBuffer[0]<<8)|rxDataBuffer[1];
 800101c:	4b82      	ldr	r3, [pc, #520]	; (8001228 <motor_receive+0x230>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b80      	ldr	r3, [pc, #512]	; (8001228 <motor_receive+0x230>)
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b82      	ldr	r3, [pc, #520]	; (8001238 <motor_receive+0x240>)
 8001030:	801a      	strh	r2, [r3, #0]
		vel_int = (rxDataBuffer[2]<<8)|rxDataBuffer[3];
 8001032:	4b7d      	ldr	r3, [pc, #500]	; (8001228 <motor_receive+0x230>)
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <motor_receive+0x230>)
 800103c:	78db      	ldrb	r3, [r3, #3]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b7d      	ldr	r3, [pc, #500]	; (800123c <motor_receive+0x244>)
 8001046:	801a      	strh	r2, [r3, #0]
		cur_int = (rxDataBuffer[4]<<8)|rxDataBuffer[5];
 8001048:	4b77      	ldr	r3, [pc, #476]	; (8001228 <motor_receive+0x230>)
 800104a:	791b      	ldrb	r3, [r3, #4]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b75      	ldr	r3, [pc, #468]	; (8001228 <motor_receive+0x230>)
 8001052:	795b      	ldrb	r3, [r3, #5]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <motor_receive+0x248>)
 800105c:	801a      	strh	r2, [r3, #0]
		temp_int = rxDataBuffer[6];
 800105e:	4b72      	ldr	r3, [pc, #456]	; (8001228 <motor_receive+0x230>)
 8001060:	799b      	ldrb	r3, [r3, #6]
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b77      	ldr	r3, [pc, #476]	; (8001244 <motor_receive+0x24c>)
 8001066:	801a      	strh	r2, [r3, #0]
		if(rxHeader.StdId==motor_knee.device_id+0x2900){
 8001068:	4b77      	ldr	r3, [pc, #476]	; (8001248 <motor_receive+0x250>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a6f      	ldr	r2, [pc, #444]	; (800122c <motor_receive+0x234>)
 800106e:	8812      	ldrh	r2, [r2, #0]
 8001070:	b292      	uxth	r2, r2
 8001072:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 8001076:	4293      	cmp	r3, r2
 8001078:	d162      	bne.n	8001140 <motor_receive+0x148>
			motor_knee.pos_actual = (float)(pos_int*0.1f);
 800107a:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <motor_receive+0x240>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800124c <motor_receive+0x254>
 800108c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001090:	4b66      	ldr	r3, [pc, #408]	; (800122c <motor_receive+0x234>)
 8001092:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_knee.vel_actual = (float)(vel_int*10.0f);
 8001096:	4b69      	ldr	r3, [pc, #420]	; (800123c <motor_receive+0x244>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	4b5f      	ldr	r3, [pc, #380]	; (800122c <motor_receive+0x234>)
 80010ae:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_knee.vel_actual = ERPM_TO_RADs(motor_knee.vel_actual);
 80010b2:	4b5e      	ldr	r3, [pc, #376]	; (800122c <motor_receive+0x234>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4e 	bl	8000558 <__aeabi_f2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b63      	ldr	r3, [pc, #396]	; (8001250 <motor_receive+0x258>)
 80010c2:	f7ff fbcb 	bl	800085c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b60      	ldr	r3, [pc, #384]	; (8001254 <motor_receive+0x25c>)
 80010d4:	f7ff fbc2 	bl	800085c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	a34f      	add	r3, pc, #316	; (adr r3, 8001220 <motor_receive+0x228>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fa8f 	bl	8000608 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <motor_receive+0x260>)
 80010f8:	f7ff fbb0 	bl	800085c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fcba 	bl	8000a7c <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	4a48      	ldr	r2, [pc, #288]	; (800122c <motor_receive+0x234>)
 800110c:	6093      	str	r3, [r2, #8]
			motor_knee.cur_actual = (float)(cur_int*0.01f);
 800110e:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <motor_receive+0x248>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800125c <motor_receive+0x264>
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <motor_receive+0x234>)
 8001126:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_knee.temperature = (float)temp_int;
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <motor_receive+0x24c>)
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <motor_receive+0x234>)
 800113a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 800113e:	e06a      	b.n	8001216 <motor_receive+0x21e>
		}else if (rxHeader.StdId==motor_ankle.device_id+0x2900){
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <motor_receive+0x250>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <motor_receive+0x238>)
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	b292      	uxth	r2, r2
 800114a:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 800114e:	4293      	cmp	r3, r2
 8001150:	d161      	bne.n	8001216 <motor_receive+0x21e>
			motor_ankle.pos_actual = (float)(pos_int*0.1f);
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <motor_receive+0x240>)
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800124c <motor_receive+0x254>
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <motor_receive+0x238>)
 800116a:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_ankle.vel_actual = (float)(vel_int*10.0f);
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <motor_receive+0x244>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <motor_receive+0x238>)
 8001186:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_ankle.vel_actual = ERPM_TO_RADs(motor_ankle.vel_actual);
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <motor_receive+0x238>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9e2 	bl	8000558 <__aeabi_f2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <motor_receive+0x258>)
 800119a:	f7ff fb5f 	bl	800085c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <motor_receive+0x25c>)
 80011ac:	f7ff fb56 	bl	800085c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	a319      	add	r3, pc, #100	; (adr r3, 8001220 <motor_receive+0x228>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa23 	bl	8000608 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <motor_receive+0x260>)
 80011d0:	f7ff fb44 	bl	800085c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc4e 	bl	8000a7c <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <motor_receive+0x238>)
 80011e4:	6093      	str	r3, [r2, #8]
			motor_ankle.cur_actual = (float)(cur_int*0.01f);
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <motor_receive+0x248>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800125c <motor_receive+0x264>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <motor_receive+0x238>)
 80011fe:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_ankle.temperature = (float)temp_int;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <motor_receive+0x24c>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <motor_receive+0x238>)
 8001212:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		Motor_UpdateMessages();
 8001216:	f000 f9bd 	bl	8001594 <Motor_UpdateMessages>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	54442eea 	.word	0x54442eea
 8001224:	400921fb 	.word	0x400921fb
 8001228:	20000160 	.word	0x20000160
 800122c:	20000000 	.word	0x20000000
 8001230:	20000030 	.word	0x20000030
 8001234:	08007438 	.word	0x08007438
 8001238:	200001a8 	.word	0x200001a8
 800123c:	200001aa 	.word	0x200001aa
 8001240:	200001ac 	.word	0x200001ac
 8001244:	200001ae 	.word	0x200001ae
 8001248:	20000184 	.word	0x20000184
 800124c:	3dcccccd 	.word	0x3dcccccd
 8001250:	40350000 	.word	0x40350000
 8001254:	40500000 	.word	0x40500000
 8001258:	403e0000 	.word	0x403e0000
 800125c:	3c23d70a 	.word	0x3c23d70a

08001260 <buffer_append_int32>:


void buffer_append_int32(uint8_t* buffer, int32_t number, uint8_t *index) {
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1619      	asrs	r1, r3, #24
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	b2d0      	uxtb	r0, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	7010      	strb	r0, [r2, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1419      	asrs	r1, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	b2d0      	uxtb	r0, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	7010      	strb	r0, [r2, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	b2ca      	uxtb	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1219      	asrs	r1, r3, #8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	b2d0      	uxtb	r0, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	7010      	strb	r0, [r2, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	b2d1      	uxtb	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	7011      	strb	r1, [r2, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <buffer_append_int16>:
void buffer_append_int16(uint8_t* buffer, int16_t number, uint8_t *index) {
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	460b      	mov	r3, r1
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	817b      	strh	r3, [r7, #10]
	buffer[(*index)++] = number >> 8;
 80012ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f0:	121b      	asrs	r3, r3, #8
 80012f2:	b219      	sxth	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	b2d0      	uxtb	r0, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	7010      	strb	r0, [r2, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	b2d1      	uxtb	r1, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	7011      	strb	r1, [r2, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	897a      	ldrh	r2, [r7, #10]
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <can_set_pos_spd>:
	buffer_append_int32(txDataBuffer, (int32_t)(current * 1000.0), &send_idx);
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_CURRENT<<8);
	CAN_SendMessage(msg_ext_id,send_idx);
}

void can_set_pos_spd(uint8_t controller_id, float pos,float vel,float accel ){
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	; 0x40
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	ed87 0a02 	vstr	s0, [r7, #8]
 800133c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001340:	ed87 1a00 	vstr	s2, [r7]
 8001344:	73fb      	strb	r3, [r7, #15]
	send_idx = 0;
 8001346:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <can_set_pos_spd+0x200>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
	pos = MAX(MIN(pos, pos_max),-pos_max);
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001350:	4b78      	ldr	r3, [pc, #480]	; (8001534 <can_set_pos_spd+0x204>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
 8001356:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800135a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800135e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d501      	bpl.n	800136c <can_set_pos_spd+0x3c>
 8001368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136a:	e000      	b.n	800136e <can_set_pos_spd+0x3e>
 800136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
 8001370:	4b70      	ldr	r3, [pc, #448]	; (8001534 <can_set_pos_spd+0x204>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eef1 7a67 	vneg.f32	s15, s15
 800137a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800137e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001382:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dd01      	ble.n	8001394 <can_set_pos_spd+0x64>
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	e000      	b.n	8001396 <can_set_pos_spd+0x66>
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	60bb      	str	r3, [r7, #8]
	buffer_append_int32(txDataBuffer, (int32_t)(pos * 10000.0), &send_idx);
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff f8dd 	bl	8000558 <__aeabi_f2d>
 800139e:	a360      	add	r3, pc, #384	; (adr r3, 8001520 <can_set_pos_spd+0x1f0>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff f930 	bl	8000608 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fb3c 	bl	8000a2c <__aeabi_d2iz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <can_set_pos_spd+0x200>)
 80013b8:	4619      	mov	r1, r3
 80013ba:	485f      	ldr	r0, [pc, #380]	; (8001538 <can_set_pos_spd+0x208>)
 80013bc:	f7ff ff50 	bl	8001260 <buffer_append_int32>
	vel = MAX(MIN(vel,vel_max),-vel_max);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c4:	4b5d      	ldr	r3, [pc, #372]	; (800153c <can_set_pos_spd+0x20c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d501      	bpl.n	80013e0 <can_set_pos_spd+0xb0>
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	e000      	b.n	80013e2 <can_set_pos_spd+0xb2>
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	4b55      	ldr	r3, [pc, #340]	; (800153c <can_set_pos_spd+0x20c>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eef1 7a67 	vneg.f32	s15, s15
 80013ee:	edc7 7a08 	vstr	s15, [r7, #32]
 80013f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dd01      	ble.n	8001408 <can_set_pos_spd+0xd8>
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	e000      	b.n	800140a <can_set_pos_spd+0xda>
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	607b      	str	r3, [r7, #4]
	vel = RADs_TO_ERPM(vel);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f8a3 	bl	8000558 <__aeabi_f2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <can_set_pos_spd+0x210>)
 8001418:	f7ff f8f6 	bl	8000608 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	a340      	add	r3, pc, #256	; (adr r3, 8001528 <can_set_pos_spd+0x1f8>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff fa17 	bl	800085c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b42      	ldr	r3, [pc, #264]	; (8001544 <can_set_pos_spd+0x214>)
 800143c:	f7ff f8e4 	bl	8000608 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <can_set_pos_spd+0x218>)
 800144e:	f7ff f8db 	bl	8000608 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb0f 	bl	8000a7c <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	607b      	str	r3, [r7, #4]
	buffer_append_int16(txDataBuffer,(int16_t)(vel/10.0), & send_idx);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff f878 	bl	8000558 <__aeabi_f2d>
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <can_set_pos_spd+0x21c>)
 800146e:	f7ff f9f5 	bl	800085c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fad7 	bl	8000a2c <__aeabi_d2iz>
 800147e:	4603      	mov	r3, r0
 8001480:	b21b      	sxth	r3, r3
 8001482:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <can_set_pos_spd+0x200>)
 8001484:	4619      	mov	r1, r3
 8001486:	482c      	ldr	r0, [pc, #176]	; (8001538 <can_set_pos_spd+0x208>)
 8001488:	f7ff ff29 	bl	80012de <buffer_append_int16>
	accel = MAX(MIN(accel,accel_max),0);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <can_set_pos_spd+0x220>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	ed97 7a07 	vldr	s14, [r7, #28]
 800149a:	edd7 7a06 	vldr	s15, [r7, #24]
 800149e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d501      	bpl.n	80014ac <can_set_pos_spd+0x17c>
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	e000      	b.n	80014ae <can_set_pos_spd+0x17e>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed97 7a05 	vldr	s14, [r7, #20]
 80014c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	dd02      	ble.n	80014d2 <can_set_pos_spd+0x1a2>
 80014cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d0:	e004      	b.n	80014dc <can_set_pos_spd+0x1ac>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	edc7 7a00 	vstr	s15, [r7]
	buffer_append_int16(txDataBuffer,(int16_t)accel, & send_idx);
 80014e0:	edd7 7a00 	vldr	s15, [r7]
 80014e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e8:	ee17 3a90 	vmov	r3, s15
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <can_set_pos_spd+0x200>)
 80014f0:	4619      	mov	r1, r3
 80014f2:	4811      	ldr	r0, [pc, #68]	; (8001538 <can_set_pos_spd+0x208>)
 80014f4:	f7ff fef3 	bl	80012de <buffer_append_int16>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_POS_SPD<<8);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <can_set_pos_spd+0x224>)
 8001504:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <can_set_pos_spd+0x224>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <can_set_pos_spd+0x200>)
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fcf7 	bl	8000f04 <CAN_SendMessage>
}
 8001516:	bf00      	nop
 8001518:	3740      	adds	r7, #64	; 0x40
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	00000000 	.word	0x00000000
 8001524:	40c38800 	.word	0x40c38800
 8001528:	54442eea 	.word	0x54442eea
 800152c:	400921fb 	.word	0x400921fb
 8001530:	200001a4 	.word	0x200001a4
 8001534:	20000060 	.word	0x20000060
 8001538:	20000154 	.word	0x20000154
 800153c:	20000064 	.word	0x20000064
 8001540:	403e0000 	.word	0x403e0000
 8001544:	40350000 	.word	0x40350000
 8001548:	40500000 	.word	0x40500000
 800154c:	40240000 	.word	0x40240000
 8001550:	20000068 	.word	0x20000068
 8001554:	200001a6 	.word	0x200001a6

08001558 <can_set_origin>:

void can_set_origin(uint8_t controller_id) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_ORIGIN_HERE<<8);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	b29b      	uxth	r3, r3
 8001566:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <can_set_origin+0x34>)
 800156e:	801a      	strh	r2, [r3, #0]
	txDataBuffer[0] = 0x01;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <can_set_origin+0x38>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,1);
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <can_set_origin+0x34>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fcc1 	bl	8000f04 <CAN_SendMessage>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001a6 	.word	0x200001a6
 8001590:	20000154 	.word	0x20000154

08001594 <Motor_UpdateMessages>:
	buffer_append_int32(txDataBuffer,(int32_t)(vel), &send_idx);
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_RPM<<8);
	CAN_SendMessage(msg_ext_id,send_idx);
}

void Motor_UpdateMessages(){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
	m2p.head = 0x01;
 800159a:	4b7c      	ldr	r3, [pc, #496]	; (800178c <Motor_UpdateMessages+0x1f8>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
	uint16_t temp1 = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	80fb      	strh	r3, [r7, #6]
	uint16_t temp2 = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	80bb      	strh	r3, [r7, #4]
	temp1 = (uint16_t)(motor_knee.pos_actual*k_float2int12+b_float2int12);
 80015a8:	4b79      	ldr	r3, [pc, #484]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 80015aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80015ae:	4b79      	ldr	r3, [pc, #484]	; (8001794 <Motor_UpdateMessages+0x200>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b8:	4b77      	ldr	r3, [pc, #476]	; (8001798 <Motor_UpdateMessages+0x204>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c6:	ee17 3a90 	vmov	r3, s15
 80015ca:	80fb      	strh	r3, [r7, #6]
	temp2 = (uint16_t)(motor_knee.vel_actual*k_float2int12+b_float2int12);
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 80015ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80015d2:	4b70      	ldr	r3, [pc, #448]	; (8001794 <Motor_UpdateMessages+0x200>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015dc:	4b6e      	ldr	r3, [pc, #440]	; (8001798 <Motor_UpdateMessages+0x204>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ea:	ee17 3a90 	vmov	r3, s15
 80015ee:	80bb      	strh	r3, [r7, #4]
	m2p.value1 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b60      	ldr	r3, [pc, #384]	; (800178c <Motor_UpdateMessages+0x1f8>)
 800160c:	805a      	strh	r2, [r3, #2]
	pos_actual_rtmotor = motor_knee.pos_actual;
 800160e:	4b60      	ldr	r3, [pc, #384]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a62      	ldr	r2, [pc, #392]	; (800179c <Motor_UpdateMessages+0x208>)
 8001614:	6013      	str	r3, [r2, #0]

	temp1 = (uint16_t)(motor_ankle.pos_actual*k_float2int12+b_float2int12);
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <Motor_UpdateMessages+0x20c>)
 8001618:	ed93 7a01 	vldr	s14, [r3, #4]
 800161c:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <Motor_UpdateMessages+0x200>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <Motor_UpdateMessages+0x204>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001634:	ee17 3a90 	vmov	r3, s15
 8001638:	80fb      	strh	r3, [r7, #6]
	m2p.value2 = (uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21a      	sxth	r2, r3
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	b29b      	uxth	r3, r3
 8001646:	b21b      	sxth	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b4e      	ldr	r3, [pc, #312]	; (800178c <Motor_UpdateMessages+0x1f8>)
 8001654:	809a      	strh	r2, [r3, #4]

	temp2 = (uint16_t)(motor_ankle.vel_actual*k_float2int12+b_float2int12);
 8001656:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <Motor_UpdateMessages+0x20c>)
 8001658:	ed93 7a02 	vldr	s14, [r3, #8]
 800165c:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <Motor_UpdateMessages+0x200>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001666:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <Motor_UpdateMessages+0x204>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	80bb      	strh	r3, [r7, #4]
	m2p.value3 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	031b      	lsls	r3, r3, #12
 800167e:	b21a      	sxth	r2, r3
 8001680:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <Motor_UpdateMessages+0x1f8>)
 8001692:	80da      	strh	r2, [r3, #6]

	temp1 = (uint16_t)(motor_knee.cur_actual*k_float2int12+b_float2int12);
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 8001696:	ed93 7a03 	vldr	s14, [r3, #12]
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <Motor_UpdateMessages+0x200>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a4:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <Motor_UpdateMessages+0x204>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b2:	ee17 3a90 	vmov	r3, s15
 80016b6:	80fb      	strh	r3, [r7, #6]
	temp2 = (uint16_t)(motor_ankle.cur_actual*k_float2int12+b_float2int12);
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <Motor_UpdateMessages+0x20c>)
 80016ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80016be:	4b35      	ldr	r3, [pc, #212]	; (8001794 <Motor_UpdateMessages+0x200>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c8:	4b33      	ldr	r3, [pc, #204]	; (8001798 <Motor_UpdateMessages+0x204>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d6:	ee17 3a90 	vmov	r3, s15
 80016da:	80bb      	strh	r3, [r7, #4]
	m2p.value4 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <Motor_UpdateMessages+0x1f8>)
 80016f8:	811a      	strh	r2, [r3, #8]

	temp1 = (uint16_t)(motor_knee.temperature*k_float2int12+b_float2int12);
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 80016fc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <Motor_UpdateMessages+0x200>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <Motor_UpdateMessages+0x204>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001718:	ee17 3a90 	vmov	r3, s15
 800171c:	80fb      	strh	r3, [r7, #6]
	m2p.value5  =(uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	b29b      	uxth	r3, r3
 800172a:	b21b      	sxth	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21b      	sxth	r3, r3
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <Motor_UpdateMessages+0x1f8>)
 8001738:	815a      	strh	r2, [r3, #10]

	temp2 = (uint16_t)(motor_ankle.temperature*k_float2int12+b_float2int12);
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <Motor_UpdateMessages+0x20c>)
 800173c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <Motor_UpdateMessages+0x200>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <Motor_UpdateMessages+0x204>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	80bb      	strh	r3, [r7, #4]
	m2p.value6 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	031b      	lsls	r3, r3, #12
 8001762:	b21a      	sxth	r2, r3
 8001764:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	b21b      	sxth	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b21b      	sxth	r3, r3
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <Motor_UpdateMessages+0x1f8>)
 8001776:	819a      	strh	r2, [r3, #12]
	m2p.head = 0xFC;
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <Motor_UpdateMessages+0x1f8>)
 800177a:	22fc      	movs	r2, #252	; 0xfc
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000008c 	.word	0x2000008c
 8001790:	20000000 	.word	0x20000000
 8001794:	20000074 	.word	0x20000074
 8001798:	20000078 	.word	0x20000078
 800179c:	200001b0 	.word	0x200001b0
 80017a0:	20000030 	.word	0x20000030

080017a4 <Motor_Debug_CMDUnpack>:
				can_set_current(motor_ankle.device_id, motor_ankle.cur_desired);
			}else{}
		}else{}//end p2m.id
	}else{}//end p2m.head
}
void Motor_Debug_CMDUnpack(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
	uint16_t temp;
		if(p2m.head==0xFC){
 80017aa:	4b90      	ldr	r3, [pc, #576]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2bfc      	cmp	r3, #252	; 0xfc
 80017b2:	f040 826e 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
			if(p2m.id==CMD_QUICK_STOP){
 80017b6:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 80017b8:	789b      	ldrb	r3, [r3, #2]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d118      	bne.n	80017f2 <Motor_Debug_CMDUnpack+0x4e>
				motor_knee.state = 0x00;
 80017c0:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				motor_ankle.state = 0x00;
 80017c8:	4b8a      	ldr	r3, [pc, #552]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				motor_knee.pos_actual = 0;
 80017d0:	4b87      	ldr	r3, [pc, #540]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
				motor_ankle.pos_actual = 0;
 80017d8:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
				motor_knee.vel_actual = 0;
 80017e0:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
				motor_ankle.vel_actual =0;
 80017e8:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e24f      	b.n	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
			}else if(p2m.id==CMD_POSITION_CTRL){
 80017f2:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13e      	bne.n	800187a <Motor_Debug_CMDUnpack+0xd6>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 80017fc:	4b7c      	ldr	r3, [pc, #496]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80017fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	f040 8244 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 800180c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	f040 823d 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.pos_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001818:	4b74      	ldr	r3, [pc, #464]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 800181a:	889b      	ldrh	r3, [r3, #4]
 800181c:	b29b      	uxth	r3, r3
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001826:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183a:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 800183c:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_ankle.pos_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 8001842:	88db      	ldrh	r3, [r3, #6]
 8001844:	b29b      	uxth	r3, r3
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184e:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001858:	4b68      	ldr	r3, [pc, #416]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 8001864:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_knee.pos_actual = motor_knee.pos_desired;
 8001868:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	4a60      	ldr	r2, [pc, #384]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 800186e:	6053      	str	r3, [r2, #4]
					motor_ankle.pos_actual = motor_ankle.pos_desired;
 8001870:	4b60      	ldr	r3, [pc, #384]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a5f      	ldr	r2, [pc, #380]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 8001876:	6053      	str	r3, [r2, #4]
 8001878:	e20b      	b.n	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
				}else{}
			}else if(p2m.id==CMD_VELOCITY_CTRL){
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 800187c:	789b      	ldrb	r3, [r3, #2]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d13e      	bne.n	8001902 <Motor_Debug_CMDUnpack+0x15e>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 8001886:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	f040 8200 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 8001894:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	f040 81f9 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.vel_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 80018a0:	4b52      	ldr	r3, [pc, #328]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 80018a2:	889b      	ldrh	r3, [r3, #4]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ae:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c2:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80018c4:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_ankle.vel_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 80018c8:	4b48      	ldr	r3, [pc, #288]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 80018ca:	88db      	ldrh	r3, [r3, #6]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d6:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 80018e2:	ed93 7a00 	vldr	s14, [r3]
 80018e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80018ec:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_knee.vel_actual = motor_knee.vel_desired;
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	4a3e      	ldr	r2, [pc, #248]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80018f6:	6093      	str	r3, [r2, #8]
					motor_ankle.vel_actual = motor_ankle.vel_desired;
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	4a3d      	ldr	r2, [pc, #244]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80018fe:	6093      	str	r3, [r2, #8]
 8001900:	e1c7      	b.n	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
				}else{}
			}else if(p2m.id==CMD_POSITION_AND_VELOCITY){
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 8001904:	789b      	ldrb	r3, [r3, #2]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d179      	bne.n	8001a00 <Motor_Debug_CMDUnpack+0x25c>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 800190e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	f040 81bc 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 800191c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b01      	cmp	r3, #1
 8001924:	f040 81b5 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.pos_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 800192a:	889b      	ldrh	r3, [r3, #4]
 800192c:	b29b      	uxth	r3, r3
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 800194c:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_knee.vel_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 8001952:	88db      	ldrh	r3, [r3, #6]
 8001954:	b29b      	uxth	r3, r3
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 8001974:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_ankle.pos_desired = (float)((p2m.value3-b_float2int16)/k_float2int16);
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 800197a:	891b      	ldrh	r3, [r3, #8]
 800197c:	b29b      	uxth	r3, r3
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 800199c:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_ankle.vel_desired = (float)((p2m.value4-b_float2int16)/k_float2int16);
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <Motor_Debug_CMDUnpack+0x248>)
 80019a2:	895b      	ldrh	r3, [r3, #10]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <Motor_Debug_CMDUnpack+0x254>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <Motor_Debug_CMDUnpack+0x258>)
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80019c4:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_knee.pos_actual = motor_knee.pos_desired;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80019ce:	6053      	str	r3, [r2, #4]
					motor_ankle.pos_actual = motor_ankle.pos_desired;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80019d6:	6053      	str	r3, [r2, #4]
					motor_knee.vel_actual = motor_knee.vel_desired;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <Motor_Debug_CMDUnpack+0x24c>)
 80019de:	6093      	str	r3, [r2, #8]
					motor_ankle.vel_actual = motor_ankle.vel_desired;
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <Motor_Debug_CMDUnpack+0x250>)
 80019e6:	6093      	str	r3, [r2, #8]
 80019e8:	e153      	b.n	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
 80019ea:	bf00      	nop
 80019ec:	2000007c 	.word	0x2000007c
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000030 	.word	0x20000030
 80019f8:	20000070 	.word	0x20000070
 80019fc:	2000006c 	.word	0x2000006c
				}else{}
			}else if(p2m.id==CMD_TORQUE_CTRL){
 8001a00:	4ba7      	ldr	r3, [pc, #668]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001a02:	789b      	ldrb	r3, [r3, #2]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d13e      	bne.n	8001a88 <Motor_Debug_CMDUnpack+0x2e4>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001a0a:	4ba6      	ldr	r3, [pc, #664]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001a0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 813d 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
 8001a18:	4ba3      	ldr	r3, [pc, #652]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	f040 8136 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.cur_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001a26:	4b9e      	ldr	r3, [pc, #632]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001a28:	889b      	ldrh	r3, [r3, #4]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	4b9d      	ldr	r3, [pc, #628]	; (8001cac <Motor_Debug_CMDUnpack+0x508>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a3e:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <Motor_Debug_CMDUnpack+0x50c>)
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a48:	4b96      	ldr	r3, [pc, #600]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001a4a:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_ankle.cur_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001a4e:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001a50:	88db      	ldrh	r3, [r3, #6]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5c:	4b93      	ldr	r3, [pc, #588]	; (8001cac <Motor_Debug_CMDUnpack+0x508>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a66:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <Motor_Debug_CMDUnpack+0x50c>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a70:	4b8d      	ldr	r3, [pc, #564]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001a72:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_knee.cur_actual = motor_knee.cur_desired;
 8001a76:	4b8b      	ldr	r3, [pc, #556]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a8a      	ldr	r2, [pc, #552]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001a7c:	60d3      	str	r3, [r2, #12]
					motor_ankle.cur_actual = motor_ankle.cur_desired;
 8001a7e:	4b8a      	ldr	r3, [pc, #552]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a89      	ldr	r2, [pc, #548]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001a84:	60d3      	str	r3, [r2, #12]
 8001a86:	e104      	b.n	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
				}else{}
			}else if(p2m.id==CMD_IMPEDANCE){
 8001a88:	4b85      	ldr	r3, [pc, #532]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001a8a:	789b      	ldrb	r3, [r3, #2]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	f040 80ff 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001a94:	4b83      	ldr	r3, [pc, #524]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001a96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	f040 80f8 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
 8001aa2:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001aa4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 80f1 	bne.w	8001c92 <Motor_Debug_CMDUnpack+0x4ee>
					temp = (uint16_t)(p2m.value1>>4&0xfff);
 8001ab0:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001ab2:	889b      	ldrh	r3, [r3, #4]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abe:	80fb      	strh	r3, [r7, #6]
					motor_knee.Kp =(float) (temp-b_float2int12)/k_float2int12;
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aca:	4b7a      	ldr	r3, [pc, #488]	; (8001cb4 <Motor_Debug_CMDUnpack+0x510>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ad4:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <Motor_Debug_CMDUnpack+0x514>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ade:	4b71      	ldr	r3, [pc, #452]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001ae0:	edc3 7a07 	vstr	s15, [r3, #28]
					temp = (uint16_t)((p2m.value1&0xf<<8)|(p2m.value2>>8&0xff));
 8001ae4:	4b6e      	ldr	r3, [pc, #440]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001ae6:	889b      	ldrh	r3, [r3, #4]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	4b6b      	ldr	r3, [pc, #428]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001af4:	88db      	ldrh	r3, [r3, #6]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	80fb      	strh	r3, [r7, #6]
					motor_ankle.Kp = (float) (temp-b_float2int12)/k_float2int12;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b12:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <Motor_Debug_CMDUnpack+0x510>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b1c:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <Motor_Debug_CMDUnpack+0x514>)
 8001b1e:	ed93 7a00 	vldr	s14, [r3]
 8001b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b26:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001b28:	edc3 7a07 	vstr	s15, [r3, #28]
					temp = (uint16_t)((p2m.value2&0xff<<4)|(p2m.value3>>12&0xf));
 8001b2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001b3c:	891b      	ldrh	r3, [r3, #8]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	0b1b      	lsrs	r3, r3, #12
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	80fb      	strh	r3, [r7, #6]
					motor_knee.Kb = (float) (temp-b_float2int12)/k_float2int12;
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b5c:	4b55      	ldr	r3, [pc, #340]	; (8001cb4 <Motor_Debug_CMDUnpack+0x510>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b66:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <Motor_Debug_CMDUnpack+0x514>)
 8001b68:	ed93 7a00 	vldr	s14, [r3]
 8001b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001b72:	edc3 7a08 	vstr	s15, [r3, #32]
					temp = (uint16_t)(p2m.value3&0xfff);
 8001b76:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001b78:	891b      	ldrh	r3, [r3, #8]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	80fb      	strh	r3, [r7, #6]
					motor_ankle.Kb = (float) (temp-b_float2int12)/k_float2int12;
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <Motor_Debug_CMDUnpack+0x510>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b96:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <Motor_Debug_CMDUnpack+0x514>)
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba0:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001ba2:	edc3 7a08 	vstr	s15, [r3, #32]
					temp = (uint16_t)(p2m.value4>>4&0xfff);
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001ba8:	895b      	ldrh	r3, [r3, #10]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	80fb      	strh	r3, [r7, #6]
					motor_knee.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <Motor_Debug_CMDUnpack+0x510>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <Motor_Debug_CMDUnpack+0x514>)
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001bd6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					temp = (uint16_t)((p2m.value4&0xf<<8)|(p2m.ext_value));
 8001bda:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001bdc:	895b      	ldrh	r3, [r3, #10]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <Motor_Debug_CMDUnpack+0x4fc>)
 8001bea:	7b1b      	ldrb	r3, [r3, #12]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	80fb      	strh	r3, [r7, #6]
					motor_ankle.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <Motor_Debug_CMDUnpack+0x510>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <Motor_Debug_CMDUnpack+0x514>)
 8001c0c:	ed93 7a00 	vldr	s14, [r3]
 8001c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c16:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					motor_knee.cur_desired = motor_knee.Kp*(motor_knee.pos_actual-motor_knee.Angle_eq)+motor_knee.Kb*motor_knee.vel_actual;
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c20:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c22:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c28:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c36:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c4a:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_ankle.cur_desired = motor_ankle.Kp*(motor_ankle.pos_actual-motor_ankle.Angle_eq)+motor_ankle.Kb*motor_ankle.vel_actual;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c50:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c56:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c5c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c6a:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c7e:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_knee.cur_actual = motor_knee.cur_desired;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <Motor_Debug_CMDUnpack+0x500>)
 8001c88:	60d3      	str	r3, [r2, #12]
					motor_ankle.cur_actual = motor_ankle.cur_desired;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <Motor_Debug_CMDUnpack+0x504>)
 8001c90:	60d3      	str	r3, [r2, #12]
				}else{}
			}else{}//end p2m.id
		}else{}//end p2m.head
		Motor_UpdateMessages();
 8001c92:	f7ff fc7f 	bl	8001594 <Motor_UpdateMessages>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000007c 	.word	0x2000007c
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000030 	.word	0x20000030
 8001cac:	20000070 	.word	0x20000070
 8001cb0:	2000006c 	.word	0x2000006c
 8001cb4:	20000078 	.word	0x20000078
 8001cb8:	20000074 	.word	0x20000074

08001cbc <m2pmsg_memcpy>:
volatile M2P m2p = {0x01,0xFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000};//

void p2mmsg_memcpy(uint8_t* buffer,volatile P2M p2m){
	//TODO
}
void m2pmsg_memcpy(uint8_t* buffer,volatile M2P m2p){
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	f107 0014 	add.w	r0, r7, #20
 8001cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	buffer[0] = m2p.head;
 8001cce:	7d3b      	ldrb	r3, [r7, #20]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	701a      	strb	r2, [r3, #0]
	buffer[1] = m2p.value1>>8&0xff;
 8001cd6:	8afb      	ldrh	r3, [r7, #22]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]
	buffer[2] = m2p.value1&0xff;
 8001ce6:	8afb      	ldrh	r3, [r7, #22]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3302      	adds	r3, #2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
	buffer[3] = m2p.value2>>8&0xff;
 8001cf2:	8b3b      	ldrh	r3, [r7, #24]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
	buffer[4] = m2p.value2&0xff;
 8001d02:	8b3b      	ldrh	r3, [r7, #24]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
	buffer[5] = m2p.value3>>8&0xff;
 8001d0e:	8b7b      	ldrh	r3, [r7, #26]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3305      	adds	r3, #5
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
	buffer[6] = m2p.value3&0xff;
 8001d1e:	8b7b      	ldrh	r3, [r7, #26]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3306      	adds	r3, #6
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
	buffer[7] = m2p.value4>>8&0xff;
 8001d2a:	8bbb      	ldrh	r3, [r7, #28]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3307      	adds	r3, #7
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
	buffer[8] = m2p.value4&0xff;
 8001d3a:	8bbb      	ldrh	r3, [r7, #28]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3308      	adds	r3, #8
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
	buffer[9] = m2p.value5>>8&0xff;
 8001d46:	8bfb      	ldrh	r3, [r7, #30]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3309      	adds	r3, #9
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
	buffer[10] = m2p.value5&0xff;
 8001d56:	8bfb      	ldrh	r3, [r7, #30]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	330a      	adds	r3, #10
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
	buffer[11] = m2p.value6>>8&0xff;
 8001d62:	8c3b      	ldrh	r3, [r7, #32]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	330b      	adds	r3, #11
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]
	buffer[12] = m2p.value6&0xff;
 8001d72:	8c3b      	ldrh	r3, [r7, #32]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]
	buffer[13] = m2p.end;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	330d      	adds	r3, #13
 8001d82:	7d7a      	ldrb	r2, [r7, #21]
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	b004      	add	sp, #16
 8001d94:	4770      	bx	lr
	...

08001d98 <Start_PCReceiveIT>:

//TODO
uint8_t sbus_rx_buffer[2][10];


void Start_PCReceiveIT(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
//	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxDataBuffer));
	HAL_UART_Receive_DMA(&huart6, rxDataBuffer,10);
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	4903      	ldr	r1, [pc, #12]	; (8001dac <Start_PCReceiveIT+0x14>)
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <Start_PCReceiveIT+0x18>)
 8001da2:	f003 fd1f 	bl	80057e4 <HAL_UART_Receive_DMA>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001dc 	.word	0x200001dc
 8001db0:	20000314 	.word	0x20000314

08001db4 <HAL_UART_RxCpltCallback>:
////		if(txDataBuffer[0]==0xFC&&txDataBuffer[size_m2p-1]==0xFF){
////		}else{}
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	rx_len = 20;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_UART_RxCpltCallback+0x1c>)
 8001dbe:	2214      	movs	r2, #20
 8001dc0:	601a      	str	r2, [r3, #0]
	PC_UnpackMessage();
 8001dc2:	f000 f815 	bl	8001df0 <PC_UnpackMessage>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000204 	.word	0x20000204

08001dd4 <HAL_UART_TxHalfCpltCallback>:


void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	huart->gState = HAL_UART_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <PC_UnpackMessage>:
// [0]0x(id)* ,[9]0x*F
void PC_UnpackMessage(){
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	if((rx_len>=10) && ((rxDataBuffer[9]&0xf)==0xf)){
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <PC_UnpackMessage+0xe0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	d963      	bls.n	8001ec4 <PC_UnpackMessage+0xd4>
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001dfe:	7a5b      	ldrb	r3, [r3, #9]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d15d      	bne.n	8001ec4 <PC_UnpackMessage+0xd4>
		p2m.head = 0x01;
 8001e08:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
		p2m.id = (uint8_t)(rxDataBuffer[0]>>4&0xf);
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e18:	709a      	strb	r2, [r3, #2]
		p2m.value1 = (uint16_t)(rxDataBuffer[1]<<8|rxDataBuffer[2]);
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e24:	789b      	ldrb	r3, [r3, #2]
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e30:	809a      	strh	r2, [r3, #4]
		p2m.value2 = (uint16_t)(rxDataBuffer[3]<<8|rxDataBuffer[4]);
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e3c:	791b      	ldrb	r3, [r3, #4]
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e48:	80da      	strh	r2, [r3, #6]
		p2m.value3 = (uint16_t)(rxDataBuffer[5]<<8|rxDataBuffer[6]);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e4c:	795b      	ldrb	r3, [r3, #5]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e54:	799b      	ldrb	r3, [r3, #6]
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e60:	811a      	strh	r2, [r3, #8]
		p2m.value4 = (uint16_t)(rxDataBuffer[7]<<8|rxDataBuffer[8]);
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e64:	79db      	ldrb	r3, [r3, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e6c:	7a1b      	ldrb	r3, [r3, #8]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	4313      	orrs	r3, r2
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e78:	815a      	strh	r2, [r3, #10]
		p2m.ext_value = (uint8_t)(((rxDataBuffer[0]&0xf)<<4)|(rxDataBuffer[9]>>4&0xf));
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	b25a      	sxtb	r2, r3
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <PC_UnpackMessage+0xe4>)
 8001e84:	7a5b      	ldrb	r3, [r3, #9]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e94:	731a      	strb	r2, [r3, #12]
		p2m.head = 0xFC;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e98:	22fc      	movs	r2, #252	; 0xfc
 8001e9a:	701a      	strb	r2, [r3, #0]
		pos_desired_rtpc = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <PC_UnpackMessage+0xe8>)
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <PC_UnpackMessage+0xec>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <PC_UnpackMessage+0xf0>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <PC_UnpackMessage+0xf4>)
 8001ec0:	edc3 7a00 	vstr	s15, [r3]
	}else{}
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000204 	.word	0x20000204
 8001ed4:	200001dc 	.word	0x200001dc
 8001ed8:	2000007c 	.word	0x2000007c
 8001edc:	20000070 	.word	0x20000070
 8001ee0:	2000006c 	.word	0x2000006c
 8001ee4:	20000210 	.word	0x20000210

08001ee8 <PC_PackMessage>:

void PC_PackMessage(){
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af02      	add	r7, sp, #8
	if(m2p.head==0xFC && m2p.end==0xFF){
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <PC_PackMessage+0xbc>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2bfc      	cmp	r3, #252	; 0xfc
 8001ef6:	d151      	bne.n	8001f9c <PC_PackMessage+0xb4>
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <PC_PackMessage+0xbc>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d14c      	bne.n	8001f9c <PC_PackMessage+0xb4>
		tx_len = size_m2p;
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <PC_PackMessage+0xc0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a29      	ldr	r2, [pc, #164]	; (8001fac <PC_PackMessage+0xc4>)
 8001f08:	6013      	str	r3, [r2, #0]
		pos_actual_rtpc = (float)(((m2p.value1>>4)&0xfff)-b_float2int12)/k_float2int12;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <PC_PackMessage+0xbc>)
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <PC_PackMessage+0xc8>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <PC_PackMessage+0xcc>)
 8001f2c:	ed93 7a00 	vldr	s14, [r3]
 8001f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <PC_PackMessage+0xd0>)
 8001f36:	edc3 7a00 	vstr	s15, [r3]
		m2pmsg_memcpy(txDataBuffer, m2p);
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <PC_PackMessage+0xbc>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	6858      	ldr	r0, [r3, #4]
 8001f42:	4602      	mov	r2, r0
 8001f44:	689c      	ldr	r4, [r3, #8]
 8001f46:	4620      	mov	r0, r4
 8001f48:	899b      	ldrh	r3, [r3, #12]
 8001f4a:	f8ad 3000 	strh.w	r3, [sp]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	481a      	ldr	r0, [pc, #104]	; (8001fbc <PC_PackMessage+0xd4>)
 8001f52:	f7ff feb3 	bl	8001cbc <m2pmsg_memcpy>
		HAL_UART_Transmit_DMA(&huart6, txDataBuffer,tx_len);
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <PC_PackMessage+0xc4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4917      	ldr	r1, [pc, #92]	; (8001fbc <PC_PackMessage+0xd4>)
 8001f60:	4817      	ldr	r0, [pc, #92]	; (8001fc0 <PC_PackMessage+0xd8>)
 8001f62:	f003 fbc1 	bl	80056e8 <HAL_UART_Transmit_DMA>
		count = 0;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <PC_PackMessage+0xdc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
		while(huart6.gState!=HAL_UART_STATE_READY){
 8001f6c:	e010      	b.n	8001f90 <PC_PackMessage+0xa8>
			if(count>10){
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <PC_PackMessage+0xdc>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b0a      	cmp	r3, #10
 8001f74:	d903      	bls.n	8001f7e <PC_PackMessage+0x96>
				PC_CommunicationErrorHandler();
 8001f76:	f000 f827 	bl	8001fc8 <PC_CommunicationErrorHandler>
				break;
 8001f7a:	bf00      	nop
				HAL_Delay(2);
				count+=1;
			}
		}
	}
}
 8001f7c:	e00e      	b.n	8001f9c <PC_PackMessage+0xb4>
				HAL_Delay(2);
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f000 fe34 	bl	8002bec <HAL_Delay>
				count+=1;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <PC_PackMessage+0xdc>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <PC_PackMessage+0xdc>)
 8001f8e:	701a      	strb	r2, [r3, #0]
		while(huart6.gState!=HAL_UART_STATE_READY){
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <PC_PackMessage+0xd8>)
 8001f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d1e8      	bne.n	8001f6e <PC_PackMessage+0x86>
}
 8001f9c:	bf00      	nop
 8001f9e:	3704      	adds	r7, #4
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	2000008c 	.word	0x2000008c
 8001fa8:	2000009c 	.word	0x2000009c
 8001fac:	20000208 	.word	0x20000208
 8001fb0:	20000078 	.word	0x20000078
 8001fb4:	20000074 	.word	0x20000074
 8001fb8:	20000214 	.word	0x20000214
 8001fbc:	200001b4 	.word	0x200001b4
 8001fc0:	20000314 	.word	0x20000314
 8001fc4:	2000020c 	.word	0x2000020c

08001fc8 <PC_CommunicationErrorHandler>:

void PC_CommunicationErrorHandler(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	debugPrint("Send to PC Failed\r\n");
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <PC_CommunicationErrorHandler+0x10>)
 8001fce:	f7fe ff27 	bl	8000e20 <debugPrint>
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	08007440 	.word	0x08007440

08001fdc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_CAN1_Init+0x64>)
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <MX_CAN1_Init+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <MX_CAN1_Init+0x64>)
 8001fe8:	2206      	movs	r2, #6
 8001fea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <MX_CAN1_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <MX_CAN1_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_CAN1_Init+0x64>)
 8001ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ffe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_CAN1_Init+0x64>)
 8002002:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002006:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <MX_CAN1_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_CAN1_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <MX_CAN1_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_CAN1_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_CAN1_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_CAN1_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_CAN1_Init+0x64>)
 800202e:	f000 fe01 	bl	8002c34 <HAL_CAN_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002038:	f000 f9c2 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000218 	.word	0x20000218
 8002044:	40006400 	.word	0x40006400

08002048 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_CAN_MspInit+0x94>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d133      	bne.n	80020d2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_CAN_MspInit+0x98>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_CAN_MspInit+0x98>)
 8002074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_CAN_MspInit+0x98>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_CAN_MspInit+0x98>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <HAL_CAN_MspInit+0x98>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_CAN_MspInit+0x98>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020a2:	2303      	movs	r3, #3
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020b2:	2309      	movs	r3, #9
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <HAL_CAN_MspInit+0x9c>)
 80020be:	f002 f935 	bl	800432c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2014      	movs	r0, #20
 80020c8:	f001 fd04 	bl	8003ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020cc:	2014      	movs	r0, #20
 80020ce:	f001 fd1d 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40006400 	.word	0x40006400
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020c00 	.word	0x40020c00

080020e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <MX_DMA_Init+0x98>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a22      	ldr	r2, [pc, #136]	; (8002180 <MX_DMA_Init+0x98>)
 80020f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_DMA_Init+0x98>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_DMA_Init+0x98>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <MX_DMA_Init+0x98>)
 8002114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_DMA_Init+0x98>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	200b      	movs	r0, #11
 800212c:	f001 fcd2 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002130:	200b      	movs	r0, #11
 8002132:	f001 fceb 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	200c      	movs	r0, #12
 800213c:	f001 fcca 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002140:	200c      	movs	r0, #12
 8002142:	f001 fce3 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	200e      	movs	r0, #14
 800214c:	f001 fcc2 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002150:	200e      	movs	r0, #14
 8002152:	f001 fcdb 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2039      	movs	r0, #57	; 0x39
 800215c:	f001 fcba 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002160:	2039      	movs	r0, #57	; 0x39
 8002162:	f001 fcd3 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	2045      	movs	r0, #69	; 0x45
 800216c:	f001 fcb2 	bl	8003ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002170:	2045      	movs	r0, #69	; 0x45
 8002172:	f001 fccb 	bl	8003b0c <HAL_NVIC_EnableIRQ>

}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800

08002184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a34      	ldr	r2, [pc, #208]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a26      	ldr	r2, [pc, #152]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <MX_GPIO_Init+0xf0>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <MX_GPIO_Init+0xf0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <MX_GPIO_Init+0xf0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a18      	ldr	r2, [pc, #96]	; (8002274 <MX_GPIO_Init+0xf0>)
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <MX_GPIO_Init+0xf0>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <MX_GPIO_Init+0xf0>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a11      	ldr	r2, [pc, #68]	; (8002274 <MX_GPIO_Init+0xf0>)
 8002230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MX_GPIO_Init+0xf0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <MX_GPIO_Init+0xf4>)
 800224a:	f002 fa1b 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG8 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800224e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_GPIO_Init+0xf4>)
 8002268:	f002 f860 	bl	800432c <HAL_GPIO_Init>

}
 800226c:	bf00      	nop
 800226e:	3730      	adds	r7, #48	; 0x30
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40021800 	.word	0x40021800

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002280:	f000 fc72 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002284:	f000 f820 	bl	80022c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002288:	f7ff ff7c 	bl	8002184 <MX_GPIO_Init>
  MX_DMA_Init();
 800228c:	f7ff ff2c 	bl	80020e8 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002290:	f000 fa58 	bl	8002744 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002294:	f000 fa2c 	bl	80026f0 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8002298:	f7ff fea0 	bl	8001fdc <MX_CAN1_Init>
  MX_UART8_Init();
 800229c:	f000 f9fe 	bl	800269c <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig();
 80022a0:	f7fe fde6 	bl	8000e70 <CAN_FilterConfig>
  motor_init();
 80022a4:	f7fe fe62 	bl	8000f6c <motor_init>
  Start_PCReceiveIT();
 80022a8:	f7ff fd76 	bl	8001d98 <Start_PCReceiveIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PC_PackMessage();
 80022ac:	f7ff fe1c 	bl	8001ee8 <PC_PackMessage>
	  HAL_Delay(10);
 80022b0:	200a      	movs	r0, #10
 80022b2:	f000 fc9b 	bl	8002bec <HAL_Delay>
	  Motor_Debug_CMDUnpack();
 80022b6:	f7ff fa75 	bl	80017a4 <Motor_Debug_CMDUnpack>
	  debugPrint("Hello\r\n");
 80022ba:	4802      	ldr	r0, [pc, #8]	; (80022c4 <main+0x48>)
 80022bc:	f7fe fdb0 	bl	8000e20 <debugPrint>
  {
 80022c0:	e7f4      	b.n	80022ac <main+0x30>
 80022c2:	bf00      	nop
 80022c4:	08007454 	.word	0x08007454

080022c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b094      	sub	sp, #80	; 0x50
 80022cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ce:	f107 0320 	add.w	r3, r7, #32
 80022d2:	2230      	movs	r2, #48	; 0x30
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 fc2c 	bl	8006b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	4b28      	ldr	r3, [pc, #160]	; (8002394 <SystemClock_Config+0xcc>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a27      	ldr	r2, [pc, #156]	; (8002394 <SystemClock_Config+0xcc>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <SystemClock_Config+0xcc>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <SystemClock_Config+0xd0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <SystemClock_Config+0xd0>)
 8002312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <SystemClock_Config+0xd0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002324:	2301      	movs	r3, #1
 8002326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232e:	2302      	movs	r3, #2
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002338:	2306      	movs	r3, #6
 800233a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800233c:	23a8      	movs	r3, #168	; 0xa8
 800233e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002340:	2302      	movs	r3, #2
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002344:	2304      	movs	r3, #4
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	4618      	mov	r0, r3
 800234e:	f002 f9b3 	bl	80046b8 <HAL_RCC_OscConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002358:	f000 f832 	bl	80023c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235c:	230f      	movs	r3, #15
 800235e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002360:	2302      	movs	r3, #2
 8002362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002368:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800236c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800236e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002372:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	2105      	movs	r1, #5
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fc14 	bl	8004ba8 <HAL_RCC_ClockConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002386:	f000 f81b 	bl	80023c0 <Error_Handler>
  }
}
 800238a:	bf00      	nop
 800238c:	3750      	adds	r7, #80	; 0x50
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40007000 	.word	0x40007000

0800239c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023ae:	f000 fbfd 	bl	8002bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40000800 	.word	0x40000800

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <Error_Handler+0x8>
	...

080023cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_MspInit+0x4c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_MspInit+0x4c>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <HAL_MspInit+0x4c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08e      	sub	sp, #56	; 0x38
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_InitTick+0xe4>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_InitTick+0xe4>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_InitTick+0xe4>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002448:	f107 0210 	add.w	r2, r7, #16
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fd88 	bl	8004f68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002462:	f002 fd59 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 8002466:	6378      	str	r0, [r7, #52]	; 0x34
 8002468:	e004      	b.n	8002474 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800246a:	f002 fd55 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 800246e:	4603      	mov	r3, r0
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	4a23      	ldr	r2, [pc, #140]	; (8002504 <HAL_InitTick+0xe8>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	3b01      	subs	r3, #1
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_InitTick+0xec>)
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_InitTick+0xf0>)
 8002486:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_InitTick+0xec>)
 800248a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800248e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_InitTick+0xec>)
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_InitTick+0xec>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_InitTick+0xec>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_InitTick+0xec>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80024a8:	4817      	ldr	r0, [pc, #92]	; (8002508 <HAL_InitTick+0xec>)
 80024aa:	f002 fd8f 	bl	8004fcc <HAL_TIM_Base_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11b      	bne.n	80024f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80024bc:	4812      	ldr	r0, [pc, #72]	; (8002508 <HAL_InitTick+0xec>)
 80024be:	f002 fddf 	bl	8005080 <HAL_TIM_Base_Start_IT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024d0:	201e      	movs	r0, #30
 80024d2:	f001 fb1b 	bl	8003b0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d808      	bhi.n	80024ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80024dc:	2200      	movs	r2, #0
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	201e      	movs	r0, #30
 80024e2:	f001 faf7 	bl	8003ad4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_InitTick+0xf4>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e002      	b.n	80024f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3738      	adds	r7, #56	; 0x38
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	431bde83 	.word	0x431bde83
 8002508:	20000240 	.word	0x20000240
 800250c:	40000800 	.word	0x40000800
 8002510:	200000a4 	.word	0x200000a4

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <NMI_Handler+0x4>

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA1_Stream0_IRQHandler+0x10>)
 8002572:	f001 fc71 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000358 	.word	0x20000358

08002580 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <DMA1_Stream1_IRQHandler+0x10>)
 8002586:	f001 fc67 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200003b8 	.word	0x200003b8

08002594 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <DMA1_Stream3_IRQHandler+0x10>)
 800259a:	f001 fc5d 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000418 	.word	0x20000418

080025a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <CAN1_RX0_IRQHandler+0x10>)
 80025ae:	f000 ffa9 	bl	8003504 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000218 	.word	0x20000218

080025bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <TIM4_IRQHandler+0x10>)
 80025c2:	f002 fdcd 	bl	8005160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000240 	.word	0x20000240

080025d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <DMA2_Stream1_IRQHandler+0x10>)
 80025d6:	f001 fc3f 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000478 	.word	0x20000478

080025e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA2_Stream6_IRQHandler+0x10>)
 80025ea:	f001 fc35 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004d8 	.word	0x200004d8

080025f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <USART6_IRQHandler+0x10>)
 80025fe:	f003 f921 	bl	8005844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000314 	.word	0x20000314

0800260c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <_sbrk+0x5c>)
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <_sbrk+0x60>)
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <_sbrk+0x64>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <_sbrk+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d207      	bcs.n	800264c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800263c:	f004 fa50 	bl	8006ae0 <__errno>
 8002640:	4603      	mov	r3, r0
 8002642:	220c      	movs	r2, #12
 8002644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264a:	e009      	b.n	8002660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <_sbrk+0x64>)
 800265c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20030000 	.word	0x20030000
 800266c:	00000400 	.word	0x00000400
 8002670:	20000288 	.word	0x20000288
 8002674:	20000550 	.word	0x20000550

08002678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <SystemInit+0x20>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <SystemInit+0x20>)
 8002684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_UART8_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_UART8_Init+0x4c>)
 80026d4:	f002 ff28 	bl	8005528 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80026de:	f7ff fe6f 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000028c 	.word	0x2000028c
 80026ec:	40007c00 	.word	0x40007c00

080026f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_USART3_UART_Init+0x4c>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <MX_USART3_UART_Init+0x50>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <MX_USART3_UART_Init+0x4c>)
 80026fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <MX_USART3_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_USART3_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <MX_USART3_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_USART3_UART_Init+0x4c>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <MX_USART3_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_USART3_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_USART3_UART_Init+0x4c>)
 8002728:	f002 fefe 	bl	8005528 <HAL_UART_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002732:	f7ff fe45 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200002d0 	.word	0x200002d0
 8002740:	40004800 	.word	0x40004800

08002744 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <MX_USART6_UART_Init+0x50>)
 800274c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 8002750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002754:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 800276a:	220c      	movs	r2, #12
 800276c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <MX_USART6_UART_Init+0x4c>)
 800277c:	f002 fed4 	bl	8005528 <HAL_UART_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002786:	f7ff fe1b 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000314 	.word	0x20000314
 8002794:	40011400 	.word	0x40011400

08002798 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08e      	sub	sp, #56	; 0x38
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a77      	ldr	r2, [pc, #476]	; (8002994 <HAL_UART_MspInit+0x1fc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d15a      	bne.n	8002870 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_UART_MspInit+0x200>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <HAL_UART_MspInit+0x200>)
 80027c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_UART_MspInit+0x200>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_UART_MspInit+0x200>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a6e      	ldr	r2, [pc, #440]	; (8002998 <HAL_UART_MspInit+0x200>)
 80027e0:	f043 0310 	orr.w	r3, r3, #16
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_UART_MspInit+0x200>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80027f2:	2303      	movs	r3, #3
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002802:	2308      	movs	r3, #8
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280a:	4619      	mov	r1, r3
 800280c:	4863      	ldr	r0, [pc, #396]	; (800299c <HAL_UART_MspInit+0x204>)
 800280e:	f001 fd8d 	bl	800432c <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002814:	4a63      	ldr	r2, [pc, #396]	; (80029a4 <HAL_UART_MspInit+0x20c>)
 8002816:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_UART_MspInit+0x208>)
 800281a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800281e:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002820:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002826:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <HAL_UART_MspInit+0x208>)
 800282e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002832:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002834:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283a:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_UART_MspInit+0x208>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002840:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002846:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284c:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <HAL_UART_MspInit+0x208>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002852:	4853      	ldr	r0, [pc, #332]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002854:	f001 f968 	bl	8003b28 <HAL_DMA_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800285e:	f7ff fdaf 	bl	80023c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4e      	ldr	r2, [pc, #312]	; (80029a0 <HAL_UART_MspInit+0x208>)
 8002866:	635a      	str	r2, [r3, #52]	; 0x34
 8002868:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <HAL_UART_MspInit+0x208>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800286e:	e13f      	b.n	8002af0 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a4c      	ldr	r2, [pc, #304]	; (80029a8 <HAL_UART_MspInit+0x210>)
 8002876:	4293      	cmp	r3, r2
 8002878:	f040 80a2 	bne.w	80029c0 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_UART_MspInit+0x200>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	4a44      	ldr	r2, [pc, #272]	; (8002998 <HAL_UART_MspInit+0x200>)
 8002886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288a:	6413      	str	r3, [r2, #64]	; 0x40
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_UART_MspInit+0x200>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_UART_MspInit+0x200>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <HAL_UART_MspInit+0x200>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	6313      	str	r3, [r2, #48]	; 0x30
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_UART_MspInit+0x200>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80028b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028c6:	2307      	movs	r3, #7
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ce:	4619      	mov	r1, r3
 80028d0:	4836      	ldr	r0, [pc, #216]	; (80029ac <HAL_UART_MspInit+0x214>)
 80028d2:	f001 fd2b 	bl	800432c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80028d6:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_UART_MspInit+0x218>)
 80028d8:	4a36      	ldr	r2, [pc, #216]	; (80029b4 <HAL_UART_MspInit+0x21c>)
 80028da:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_UART_MspInit+0x218>)
 80028de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_UART_MspInit+0x218>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_UART_MspInit+0x218>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028f0:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <HAL_UART_MspInit+0x218>)
 80028f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_UART_MspInit+0x218>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028fe:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <HAL_UART_MspInit+0x218>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_UART_MspInit+0x218>)
 8002906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_UART_MspInit+0x218>)
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_UART_MspInit+0x218>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002918:	4825      	ldr	r0, [pc, #148]	; (80029b0 <HAL_UART_MspInit+0x218>)
 800291a:	f001 f905 	bl	8003b28 <HAL_DMA_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8002924:	f7ff fd4c 	bl	80023c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_UART_MspInit+0x218>)
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
 800292e:	4a20      	ldr	r2, [pc, #128]	; (80029b0 <HAL_UART_MspInit+0x218>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_UART_MspInit+0x224>)
 8002938:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800293a:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_UART_MspInit+0x220>)
 800293c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002940:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002944:	2240      	movs	r2, #64	; 0x40
 8002946:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_UART_MspInit+0x220>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002954:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_UART_MspInit+0x220>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002964:	2200      	movs	r2, #0
 8002966:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_UART_MspInit+0x220>)
 800296a:	2200      	movs	r2, #0
 800296c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002970:	2200      	movs	r2, #0
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002976:	f001 f8d7 	bl	8003b28 <HAL_DMA_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 8002980:	f7ff fd1e 	bl	80023c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_UART_MspInit+0x220>)
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <HAL_UART_MspInit+0x220>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002990:	e0ae      	b.n	8002af0 <HAL_UART_MspInit+0x358>
 8002992:	bf00      	nop
 8002994:	40007c00 	.word	0x40007c00
 8002998:	40023800 	.word	0x40023800
 800299c:	40021000 	.word	0x40021000
 80029a0:	20000358 	.word	0x20000358
 80029a4:	40026010 	.word	0x40026010
 80029a8:	40004800 	.word	0x40004800
 80029ac:	40020800 	.word	0x40020800
 80029b0:	200003b8 	.word	0x200003b8
 80029b4:	40026028 	.word	0x40026028
 80029b8:	20000418 	.word	0x20000418
 80029bc:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_UART_MspInit+0x360>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	f040 8092 	bne.w	8002af0 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <HAL_UART_MspInit+0x364>)
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	4a49      	ldr	r2, [pc, #292]	; (8002afc <HAL_UART_MspInit+0x364>)
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	6453      	str	r3, [r2, #68]	; 0x44
 80029dc:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_UART_MspInit+0x364>)
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_UART_MspInit+0x364>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	4a42      	ldr	r2, [pc, #264]	; (8002afc <HAL_UART_MspInit+0x364>)
 80029f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f6:	6313      	str	r3, [r2, #48]	; 0x30
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_UART_MspInit+0x364>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002a04:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a16:	2308      	movs	r3, #8
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4837      	ldr	r0, [pc, #220]	; (8002b00 <HAL_UART_MspInit+0x368>)
 8002a22:	f001 fc83 	bl	800432c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a28:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <HAL_UART_MspInit+0x370>)
 8002a2a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a2e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a32:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a34:	4b33      	ldr	r3, [pc, #204]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3a:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a40:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a46:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a48:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002a68:	4826      	ldr	r0, [pc, #152]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a6a:	f001 f85d 	bl	8003b28 <HAL_DMA_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8002a74:	f7ff fca4 	bl	80023c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a7e:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <HAL_UART_MspInit+0x36c>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002a86:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_UART_MspInit+0x378>)
 8002a88:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002a8c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a90:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002a94:	2240      	movs	r2, #64	; 0x40
 8002a96:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002ac4:	4811      	ldr	r0, [pc, #68]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002ac6:	f001 f82f 	bl	8003b28 <HAL_DMA_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8002ad0:	f7ff fc76 	bl	80023c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <HAL_UART_MspInit+0x374>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2047      	movs	r0, #71	; 0x47
 8002ae6:	f000 fff5 	bl	8003ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002aea:	2047      	movs	r0, #71	; 0x47
 8002aec:	f001 f80e 	bl	8003b0c <HAL_NVIC_EnableIRQ>
}
 8002af0:	bf00      	nop
 8002af2:	3738      	adds	r7, #56	; 0x38
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40011400 	.word	0x40011400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40021800 	.word	0x40021800
 8002b04:	20000478 	.word	0x20000478
 8002b08:	40026428 	.word	0x40026428
 8002b0c:	200004d8 	.word	0x200004d8
 8002b10:	400264a0 	.word	0x400264a0

08002b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b1a:	490e      	ldr	r1, [pc, #56]	; (8002b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b30:	4c0b      	ldr	r4, [pc, #44]	; (8002b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b3e:	f7ff fd9b 	bl	8002678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b42:	f003 ffd3 	bl	8006aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b46:	f7ff fb99 	bl	800227c <main>
  bx  lr    
 8002b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b54:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002b58:	080074c0 	.word	0x080074c0
  ldr r2, =_sbss
 8002b5c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002b60:	2000054c 	.word	0x2000054c

08002b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC_IRQHandler>
	...

08002b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_Init+0x40>)
 8002b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_Init+0x40>)
 8002b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <HAL_Init+0x40>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b90:	2003      	movs	r0, #3
 8002b92:	f000 ff94 	bl	8003abe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b96:	200f      	movs	r0, #15
 8002b98:	f7ff fc40 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b9c:	f7ff fc16 	bl	80023cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00

08002bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_IncTick+0x20>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_IncTick+0x24>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_IncTick+0x24>)
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200000a8 	.word	0x200000a8
 8002bd0:	20000538 	.word	0x20000538

08002bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_GetTick+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000538 	.word	0x20000538

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff ffee 	bl	8002bd4 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c12:	bf00      	nop
 8002c14:	f7ff ffde 	bl	8002bd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200000a8 	.word	0x200000a8

08002c34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0ed      	b.n	8002e22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff f9f8 	bl	8002048 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7ff ffb4 	bl	8002bd4 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c6e:	e012      	b.n	8002c96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c70:	f7ff ffb0 	bl	8002bd4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b0a      	cmp	r3, #10
 8002c7c:	d90b      	bls.n	8002c96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0c5      	b.n	8002e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0e5      	beq.n	8002c70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0202 	bic.w	r2, r2, #2
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb4:	f7ff ff8e 	bl	8002bd4 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cba:	e012      	b.n	8002ce2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cbc:	f7ff ff8a 	bl	8002bd4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b0a      	cmp	r3, #10
 8002cc8:	d90b      	bls.n	8002ce2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2205      	movs	r2, #5
 8002cda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e09f      	b.n	8002e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e5      	bne.n	8002cbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7e1b      	ldrb	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d108      	bne.n	8002d0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e007      	b.n	8002d1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7e5b      	ldrb	r3, [r3, #25]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e007      	b.n	8002d44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e9b      	ldrb	r3, [r3, #26]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d108      	bne.n	8002d5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e007      	b.n	8002d6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0220 	bic.w	r2, r2, #32
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7edb      	ldrb	r3, [r3, #27]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0210 	bic.w	r2, r2, #16
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e007      	b.n	8002d98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0210 	orr.w	r2, r2, #16
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7f1b      	ldrb	r3, [r3, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d108      	bne.n	8002db2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0208 	orr.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e007      	b.n	8002dc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0208 	bic.w	r2, r2, #8
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7f5b      	ldrb	r3, [r3, #29]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0204 	orr.w	r2, r2, #4
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e007      	b.n	8002dec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e42:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d003      	beq.n	8002e52 <HAL_CAN_ConfigFilter+0x26>
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	f040 80be 	bne.w	8002fce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002e54:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	431a      	orrs	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2201      	movs	r2, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d123      	bne.n	8002efc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ed6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3248      	adds	r2, #72	; 0x48
 8002edc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ef0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	3348      	adds	r3, #72	; 0x48
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d122      	bne.n	8002f4a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	3248      	adds	r2, #72	; 0x48
 8002f2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f40:	6979      	ldr	r1, [r7, #20]
 8002f42:	3348      	adds	r3, #72	; 0x48
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f64:	e007      	b.n	8002f76 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	401a      	ands	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f90:	e007      	b.n	8002fa2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d107      	bne.n	8002fba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fc0:	f023 0201 	bic.w	r2, r3, #1
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e006      	b.n	8002fdc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
  }
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40006400 	.word	0x40006400

08002fec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d12e      	bne.n	800305e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003018:	f7ff fddc 	bl	8002bd4 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800301e:	e012      	b.n	8003046 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003020:	f7ff fdd8 	bl	8002bd4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b0a      	cmp	r3, #10
 800302c:	d90b      	bls.n	8003046 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2205      	movs	r2, #5
 800303e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e012      	b.n	800306c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e006      	b.n	800306c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003088:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003092:	7ffb      	ldrb	r3, [r7, #31]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d003      	beq.n	80030a0 <HAL_CAN_AddTxMessage+0x2c>
 8003098:	7ffb      	ldrb	r3, [r7, #31]
 800309a:	2b02      	cmp	r3, #2
 800309c:	f040 80b8 	bne.w	8003210 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a0 	beq.w	8003200 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	0e1b      	lsrs	r3, r3, #24
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d907      	bls.n	80030e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e09e      	b.n	800321e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030e0:	2201      	movs	r2, #1
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	409a      	lsls	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030fc:	68f9      	ldr	r1, [r7, #12]
 80030fe:	6809      	ldr	r1, [r1, #0]
 8003100:	431a      	orrs	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	3318      	adds	r3, #24
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	440b      	add	r3, r1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e00f      	b.n	800312e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003118:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003122:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3318      	adds	r3, #24
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	440b      	add	r3, r1
 800312c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3318      	adds	r3, #24
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	440b      	add	r3, r1
 800313e:	3304      	adds	r3, #4
 8003140:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	7d1b      	ldrb	r3, [r3, #20]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d111      	bne.n	800316e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3318      	adds	r3, #24
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	6811      	ldr	r1, [r2, #0]
 800315e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3318      	adds	r3, #24
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	440b      	add	r3, r1
 800316a:	3304      	adds	r3, #4
 800316c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3307      	adds	r3, #7
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	061a      	lsls	r2, r3, #24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3306      	adds	r3, #6
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3305      	adds	r3, #5
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	4313      	orrs	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	3204      	adds	r2, #4
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	4610      	mov	r0, r2
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	ea43 0200 	orr.w	r2, r3, r0
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	440b      	add	r3, r1
 80031a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80031a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3303      	adds	r3, #3
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	061a      	lsls	r2, r3, #24
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3302      	adds	r3, #2
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3301      	adds	r3, #1
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	4313      	orrs	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	4610      	mov	r0, r2
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	6811      	ldr	r1, [r2, #0]
 80031cc:	ea43 0200 	orr.w	r2, r3, r0
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	440b      	add	r3, r1
 80031d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80031da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3318      	adds	r3, #24
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	4413      	add	r3, r2
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	6811      	ldr	r1, [r2, #0]
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	3318      	adds	r3, #24
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	440b      	add	r3, r1
 80031fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e00e      	b.n	800321e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e006      	b.n	800321e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d002      	beq.n	800324a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003244:	7afb      	ldrb	r3, [r7, #11]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d11d      	bne.n	8003286 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003286:	68fb      	ldr	r3, [r7, #12]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d003      	beq.n	80032b8 <HAL_CAN_GetRxMessage+0x24>
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	f040 80f3 	bne.w	800349e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d116      	bne.n	80032fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0e7      	b.n	80034ac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0d8      	b.n	80034ac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	331b      	adds	r3, #27
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	4413      	add	r3, r2
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0204 	and.w	r2, r3, #4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10c      	bne.n	8003332 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	331b      	adds	r3, #27
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4413      	add	r3, r2
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0d5b      	lsrs	r3, r3, #21
 8003328:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e00b      	b.n	800334a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	331b      	adds	r3, #27
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	08db      	lsrs	r3, r3, #3
 8003342:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	331b      	adds	r3, #27
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4413      	add	r3, r2
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0202 	and.w	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	331b      	adds	r3, #27
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	3304      	adds	r3, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	331b      	adds	r3, #27
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	b2da      	uxtb	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	331b      	adds	r3, #27
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0a1a      	lsrs	r2, r3, #8
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0c1a      	lsrs	r2, r3, #16
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3302      	adds	r3, #2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e1a      	lsrs	r2, r3, #24
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	3303      	adds	r3, #3
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	3304      	adds	r3, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0a1a      	lsrs	r2, r3, #8
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	3305      	adds	r3, #5
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0c1a      	lsrs	r2, r3, #16
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	3306      	adds	r3, #6
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	4413      	add	r3, r2
 8003462:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e1a      	lsrs	r2, r3, #24
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3307      	adds	r3, #7
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0220 	orr.w	r2, r2, #32
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	e007      	b.n	800349a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e006      	b.n	80034ac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d002      	beq.n	80034d6 <HAL_CAN_ActivateNotification+0x1e>
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d109      	bne.n	80034ea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6959      	ldr	r1, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e006      	b.n	80034f8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d07c      	beq.n	8003644 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f983 	bl	8003872 <HAL_CAN_TxMailbox0CompleteCallback>
 800356c:	e016      	b.n	800359c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e00c      	b.n	800359c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
 8003594:	e002      	b.n	800359c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f989 	bl	80038ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d024      	beq.n	80035f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f963 	bl	8003886 <HAL_CAN_TxMailbox1CompleteCallback>
 80035c0:	e016      	b.n	80035f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
 80035d4:	e00c      	b.n	80035f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e002      	b.n	80035f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f969 	bl	80038c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d024      	beq.n	8003644 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003602:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f943 	bl	800389a <HAL_CAN_TxMailbox2CompleteCallback>
 8003614:	e016      	b.n	8003644 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d004      	beq.n	800362a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	e00c      	b.n	8003644 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	e002      	b.n	8003644 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f949 	bl	80038d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2210      	movs	r2, #16
 8003666:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2208      	movs	r2, #8
 8003682:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f930 	bl	80038ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fc14 	bl	8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00c      	beq.n	80036cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d006      	beq.n	80036ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2208      	movs	r2, #8
 80036e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f912 	bl	8003912 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f8f9 	bl	80038fe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2210      	movs	r2, #16
 8003726:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8fc 	bl	8003926 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2208      	movs	r2, #8
 8003748:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8f5 	bl	800393a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d07b      	beq.n	8003852 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d072      	beq.n	800384a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d043      	beq.n	800384a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03e      	beq.n	800384a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d2:	2b60      	cmp	r3, #96	; 0x60
 80037d4:	d02b      	beq.n	800382e <HAL_CAN_IRQHandler+0x32a>
 80037d6:	2b60      	cmp	r3, #96	; 0x60
 80037d8:	d82e      	bhi.n	8003838 <HAL_CAN_IRQHandler+0x334>
 80037da:	2b50      	cmp	r3, #80	; 0x50
 80037dc:	d022      	beq.n	8003824 <HAL_CAN_IRQHandler+0x320>
 80037de:	2b50      	cmp	r3, #80	; 0x50
 80037e0:	d82a      	bhi.n	8003838 <HAL_CAN_IRQHandler+0x334>
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d019      	beq.n	800381a <HAL_CAN_IRQHandler+0x316>
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d826      	bhi.n	8003838 <HAL_CAN_IRQHandler+0x334>
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d010      	beq.n	8003810 <HAL_CAN_IRQHandler+0x30c>
 80037ee:	2b30      	cmp	r3, #48	; 0x30
 80037f0:	d822      	bhi.n	8003838 <HAL_CAN_IRQHandler+0x334>
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d002      	beq.n	80037fc <HAL_CAN_IRQHandler+0x2f8>
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d005      	beq.n	8003806 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037fa:	e01d      	b.n	8003838 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003804:	e019      	b.n	800383a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	f043 0310 	orr.w	r3, r3, #16
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800380e:	e014      	b.n	800383a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f043 0320 	orr.w	r3, r3, #32
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003818:	e00f      	b.n	800383a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003822:	e00a      	b.n	800383a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800382c:	e005      	b.n	800383a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003836:	e000      	b.n	800383a <HAL_CAN_IRQHandler+0x336>
            break;
 8003838:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003848:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f872 	bl	800394e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800386a:	bf00      	nop
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	; (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff ff4c 	bl	8003964 <__NVIC_SetPriorityGrouping>
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae6:	f7ff ff61 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003aea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f7ff ffb1 	bl	8003a58 <NVIC_EncodePriority>
 8003af6:	4602      	mov	r2, r0
 8003af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff80 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b04:	bf00      	nop
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff54 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b34:	f7ff f84e 	bl	8002bd4 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e099      	b.n	8003c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b64:	e00f      	b.n	8003b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b66:	f7ff f835 	bl	8002bd4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d908      	bls.n	8003b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e078      	b.n	8003c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e8      	bne.n	8003b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_DMA_Init+0x158>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d107      	bne.n	8003bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	4313      	orrs	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d117      	bne.n	8003c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00e      	beq.n	8003c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fb01 	bl	8004234 <DMA_CheckFifoParam>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2240      	movs	r2, #64	; 0x40
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c46:	2301      	movs	r3, #1
 8003c48:	e016      	b.n	8003c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fab8 	bl	80041c8 <DMA_CalcBaseAndBitshift>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	223f      	movs	r2, #63	; 0x3f
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	f010803f 	.word	0xf010803f

08003c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_DMA_Start_IT+0x26>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e040      	b.n	8003d2c <HAL_DMA_Start_IT+0xa8>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d12f      	bne.n	8003d1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fa4a 	bl	800416c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	223f      	movs	r2, #63	; 0x3f
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0216 	orr.w	r2, r2, #22
 8003cf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e005      	b.n	8003d2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d42:	f7fe ff47 	bl	8002bd4 <HAL_GetTick>
 8003d46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d008      	beq.n	8003d66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e052      	b.n	8003e0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0216 	bic.w	r2, r2, #22
 8003d74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_DMA_Abort+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0208 	bic.w	r2, r2, #8
 8003da4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db6:	e013      	b.n	8003de0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003db8:	f7fe ff0c 	bl	8002bd4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d90c      	bls.n	8003de0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e015      	b.n	8003e0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e4      	bne.n	8003db8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	223f      	movs	r2, #63	; 0x3f
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d004      	beq.n	8003e32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e00c      	b.n	8003e4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2205      	movs	r2, #5
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e64:	4b8e      	ldr	r3, [pc, #568]	; (80040a0 <HAL_DMA_IRQHandler+0x248>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a8e      	ldr	r2, [pc, #568]	; (80040a4 <HAL_DMA_IRQHandler+0x24c>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	2208      	movs	r2, #8
 8003e84:	409a      	lsls	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01a      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0201 	orr.w	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	2201      	movs	r2, #1
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d012      	beq.n	8003efa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f043 0202 	orr.w	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2204      	movs	r2, #4
 8003f00:	409a      	lsls	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0204 	orr.w	r2, r3, #4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	2210      	movs	r2, #16
 8003f36:	409a      	lsls	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d043      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d03c      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	2210      	movs	r2, #16
 8003f54:	409a      	lsls	r2, r3
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d024      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	e01f      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
 8003f98:	e016      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d107      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0208 	bic.w	r2, r2, #8
 8003fb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	2220      	movs	r2, #32
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 808f 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8087 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2220      	movs	r2, #32
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d136      	bne.n	8004070 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0216 	bic.w	r2, r2, #22
 8004010:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004020:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <HAL_DMA_IRQHandler+0x1da>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0208 	bic.w	r2, r2, #8
 8004040:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	223f      	movs	r2, #63	; 0x3f
 8004048:	409a      	lsls	r2, r3
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004062:	2b00      	cmp	r3, #0
 8004064:	d07e      	beq.n	8004164 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
        }
        return;
 800406e:	e079      	b.n	8004164 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01d      	beq.n	80040ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	2b00      	cmp	r3, #0
 8004092:	d031      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
 800409c:	e02c      	b.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
 800409e:	bf00      	nop
 80040a0:	200000a0 	.word	0x200000a0
 80040a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
 80040b8:	e01e      	b.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10f      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0210 	bic.w	r2, r2, #16
 80040d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d032      	beq.n	8004166 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d022      	beq.n	8004152 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2205      	movs	r2, #5
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	3301      	adds	r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	d307      	bcc.n	8004140 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f2      	bne.n	8004124 <HAL_DMA_IRQHandler+0x2cc>
 800413e:	e000      	b.n	8004142 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004140:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
 8004162:	e000      	b.n	8004166 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004164:	bf00      	nop
    }
  }
}
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004188:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d108      	bne.n	80041ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041aa:	e007      	b.n	80041bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	3b10      	subs	r3, #16
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <DMA_CalcBaseAndBitshift+0x64>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041e2:	4a13      	ldr	r2, [pc, #76]	; (8004230 <DMA_CalcBaseAndBitshift+0x68>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d909      	bls.n	800420a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	1d1a      	adds	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	659a      	str	r2, [r3, #88]	; 0x58
 8004208:	e007      	b.n	800421a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	aaaaaaab 	.word	0xaaaaaaab
 8004230:	08007474 	.word	0x08007474

08004234 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11f      	bne.n	800428e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d856      	bhi.n	8004302 <DMA_CheckFifoParam+0xce>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <DMA_CheckFifoParam+0x28>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	0800426d 	.word	0x0800426d
 8004260:	0800427f 	.word	0x0800427f
 8004264:	0800426d 	.word	0x0800426d
 8004268:	08004303 	.word	0x08004303
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d046      	beq.n	8004306 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800427c:	e043      	b.n	8004306 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004286:	d140      	bne.n	800430a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428c:	e03d      	b.n	800430a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004296:	d121      	bne.n	80042dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d837      	bhi.n	800430e <DMA_CheckFifoParam+0xda>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <DMA_CheckFifoParam+0x70>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042bb 	.word	0x080042bb
 80042ac:	080042b5 	.word	0x080042b5
 80042b0:	080042cd 	.word	0x080042cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      break;
 80042b8:	e030      	b.n	800431c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d025      	beq.n	8004312 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ca:	e022      	b.n	8004312 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042d4:	d11f      	bne.n	8004316 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042da:	e01c      	b.n	8004316 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d903      	bls.n	80042ea <DMA_CheckFifoParam+0xb6>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d003      	beq.n	80042f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042e8:	e018      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
      break;
 80042ee:	e015      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00e      	beq.n	800431a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e00b      	b.n	800431a <DMA_CheckFifoParam+0xe6>
      break;
 8004302:	bf00      	nop
 8004304:	e00a      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
 8004308:	e008      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      break;
 800430a:	bf00      	nop
 800430c:	e006      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      break;
 800430e:	bf00      	nop
 8004310:	e004      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      break;
 8004312:	bf00      	nop
 8004314:	e002      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      break;   
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <DMA_CheckFifoParam+0xe8>
      break;
 800431a:	bf00      	nop
    }
  } 
  
  return status; 
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop

0800432c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800432c:	b480      	push	{r7}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e177      	b.n	8004638 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004348:	2201      	movs	r2, #1
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	429a      	cmp	r2, r3
 8004362:	f040 8166 	bne.w	8004632 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d005      	beq.n	800437e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800437a:	2b02      	cmp	r3, #2
 800437c:	d130      	bne.n	80043e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	2203      	movs	r2, #3
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043b4:	2201      	movs	r2, #1
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 0201 	and.w	r2, r3, #1
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d017      	beq.n	800441c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	2203      	movs	r2, #3
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d123      	bne.n	8004470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	08da      	lsrs	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3208      	adds	r2, #8
 8004430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	220f      	movs	r2, #15
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	08da      	lsrs	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3208      	adds	r2, #8
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	2203      	movs	r2, #3
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 0203 	and.w	r2, r3, #3
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80c0 	beq.w	8004632 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	4b66      	ldr	r3, [pc, #408]	; (8004650 <HAL_GPIO_Init+0x324>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	4a65      	ldr	r2, [pc, #404]	; (8004650 <HAL_GPIO_Init+0x324>)
 80044bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c0:	6453      	str	r3, [r2, #68]	; 0x44
 80044c2:	4b63      	ldr	r3, [pc, #396]	; (8004650 <HAL_GPIO_Init+0x324>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ce:	4a61      	ldr	r2, [pc, #388]	; (8004654 <HAL_GPIO_Init+0x328>)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	089b      	lsrs	r3, r3, #2
 80044d4:	3302      	adds	r3, #2
 80044d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a58      	ldr	r2, [pc, #352]	; (8004658 <HAL_GPIO_Init+0x32c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d037      	beq.n	800456a <HAL_GPIO_Init+0x23e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a57      	ldr	r2, [pc, #348]	; (800465c <HAL_GPIO_Init+0x330>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d031      	beq.n	8004566 <HAL_GPIO_Init+0x23a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a56      	ldr	r2, [pc, #344]	; (8004660 <HAL_GPIO_Init+0x334>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <HAL_GPIO_Init+0x236>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a55      	ldr	r2, [pc, #340]	; (8004664 <HAL_GPIO_Init+0x338>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d025      	beq.n	800455e <HAL_GPIO_Init+0x232>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a54      	ldr	r2, [pc, #336]	; (8004668 <HAL_GPIO_Init+0x33c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01f      	beq.n	800455a <HAL_GPIO_Init+0x22e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a53      	ldr	r2, [pc, #332]	; (800466c <HAL_GPIO_Init+0x340>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d019      	beq.n	8004556 <HAL_GPIO_Init+0x22a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a52      	ldr	r2, [pc, #328]	; (8004670 <HAL_GPIO_Init+0x344>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_GPIO_Init+0x226>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a51      	ldr	r2, [pc, #324]	; (8004674 <HAL_GPIO_Init+0x348>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00d      	beq.n	800454e <HAL_GPIO_Init+0x222>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a50      	ldr	r2, [pc, #320]	; (8004678 <HAL_GPIO_Init+0x34c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <HAL_GPIO_Init+0x21e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4f      	ldr	r2, [pc, #316]	; (800467c <HAL_GPIO_Init+0x350>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <HAL_GPIO_Init+0x21a>
 8004542:	2309      	movs	r3, #9
 8004544:	e012      	b.n	800456c <HAL_GPIO_Init+0x240>
 8004546:	230a      	movs	r3, #10
 8004548:	e010      	b.n	800456c <HAL_GPIO_Init+0x240>
 800454a:	2308      	movs	r3, #8
 800454c:	e00e      	b.n	800456c <HAL_GPIO_Init+0x240>
 800454e:	2307      	movs	r3, #7
 8004550:	e00c      	b.n	800456c <HAL_GPIO_Init+0x240>
 8004552:	2306      	movs	r3, #6
 8004554:	e00a      	b.n	800456c <HAL_GPIO_Init+0x240>
 8004556:	2305      	movs	r3, #5
 8004558:	e008      	b.n	800456c <HAL_GPIO_Init+0x240>
 800455a:	2304      	movs	r3, #4
 800455c:	e006      	b.n	800456c <HAL_GPIO_Init+0x240>
 800455e:	2303      	movs	r3, #3
 8004560:	e004      	b.n	800456c <HAL_GPIO_Init+0x240>
 8004562:	2302      	movs	r3, #2
 8004564:	e002      	b.n	800456c <HAL_GPIO_Init+0x240>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_GPIO_Init+0x240>
 800456a:	2300      	movs	r3, #0
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	f002 0203 	and.w	r2, r2, #3
 8004572:	0092      	lsls	r2, r2, #2
 8004574:	4093      	lsls	r3, r2
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800457c:	4935      	ldr	r1, [pc, #212]	; (8004654 <HAL_GPIO_Init+0x328>)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800458a:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <HAL_GPIO_Init+0x354>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ae:	4a34      	ldr	r2, [pc, #208]	; (8004680 <HAL_GPIO_Init+0x354>)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045b4:	4b32      	ldr	r3, [pc, #200]	; (8004680 <HAL_GPIO_Init+0x354>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045d8:	4a29      	ldr	r2, [pc, #164]	; (8004680 <HAL_GPIO_Init+0x354>)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045de:	4b28      	ldr	r3, [pc, #160]	; (8004680 <HAL_GPIO_Init+0x354>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004602:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <HAL_GPIO_Init+0x354>)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_GPIO_Init+0x354>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <HAL_GPIO_Init+0x354>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	f67f ae84 	bls.w	8004348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3724      	adds	r7, #36	; 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	40013800 	.word	0x40013800
 8004658:	40020000 	.word	0x40020000
 800465c:	40020400 	.word	0x40020400
 8004660:	40020800 	.word	0x40020800
 8004664:	40020c00 	.word	0x40020c00
 8004668:	40021000 	.word	0x40021000
 800466c:	40021400 	.word	0x40021400
 8004670:	40021800 	.word	0x40021800
 8004674:	40021c00 	.word	0x40021c00
 8004678:	40022000 	.word	0x40022000
 800467c:	40022400 	.word	0x40022400
 8004680:	40013c00 	.word	0x40013c00

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a0:	e003      	b.n	80046aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	041a      	lsls	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	619a      	str	r2, [r3, #24]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e267      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d075      	beq.n	80047c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00c      	beq.n	80046fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e2:	4b85      	ldr	r3, [pc, #532]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d112      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b82      	ldr	r3, [pc, #520]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046fa:	d10b      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	4b7e      	ldr	r3, [pc, #504]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05b      	beq.n	80047c0 <HAL_RCC_OscConfig+0x108>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d157      	bne.n	80047c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e242      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471c:	d106      	bne.n	800472c <HAL_RCC_OscConfig+0x74>
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e01d      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x98>
 8004736:	4b70      	ldr	r3, [pc, #448]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6f      	ldr	r2, [pc, #444]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6c      	ldr	r2, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 8004750:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a68      	ldr	r2, [pc, #416]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b66      	ldr	r3, [pc, #408]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a65      	ldr	r2, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fe fa30 	bl	8002bd4 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004778:	f7fe fa2c 	bl	8002bd4 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e207      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0xc0>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe fa1c 	bl	8002bd4 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fe fa18 	bl	8002bd4 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1f3      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	4b51      	ldr	r3, [pc, #324]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0xe8>
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d063      	beq.n	8004896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ce:	4b4a      	ldr	r3, [pc, #296]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d11c      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b44      	ldr	r3, [pc, #272]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d116      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1c7      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4937      	ldr	r1, [pc, #220]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481e:	e03a      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004828:	4b34      	ldr	r3, [pc, #208]	; (80048fc <HAL_RCC_OscConfig+0x244>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fe f9d1 	bl	8002bd4 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004836:	f7fe f9cd 	bl	8002bd4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1a8      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004854:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4925      	ldr	r1, [pc, #148]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
 8004868:	e015      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_OscConfig+0x244>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fe f9b0 	bl	8002bd4 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004878:	f7fe f9ac 	bl	8002bd4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e187      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d036      	beq.n	8004910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x248>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fe f990 	bl	8002bd4 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fe f98c 	bl	8002bd4 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e167      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x200>
 80048d6:	e01b      	b.n	8004910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_OscConfig+0x248>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fe f979 	bl	8002bd4 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	e00e      	b.n	8004904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fe f975 	bl	8002bd4 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d907      	bls.n	8004904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e150      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ea      	bne.n	80048e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8097 	beq.w	8004a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	4a7c      	ldr	r2, [pc, #496]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	6413      	str	r3, [r2, #64]	; 0x40
 800493e:	4b7a      	ldr	r3, [pc, #488]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b77      	ldr	r3, [pc, #476]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b74      	ldr	r3, [pc, #464]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a73      	ldr	r2, [pc, #460]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fe f935 	bl	8002bd4 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fe f931 	bl	8002bd4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e10c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
 8004994:	4b64      	ldr	r3, [pc, #400]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	4a63      	ldr	r2, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	; 0x70
 80049a0:	e01c      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x30c>
 80049aa:	4b5f      	ldr	r3, [pc, #380]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a5e      	ldr	r2, [pc, #376]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	4b5c      	ldr	r3, [pc, #368]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a5b      	ldr	r2, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049c4:	4b58      	ldr	r3, [pc, #352]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a57      	ldr	r2, [pc, #348]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	4b55      	ldr	r3, [pc, #340]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a54      	ldr	r2, [pc, #336]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fe f8f6 	bl	8002bd4 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fe f8f2 	bl	8002bd4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0cb      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0ee      	beq.n	80049ec <HAL_RCC_OscConfig+0x334>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fe f8e0 	bl	8002bd4 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fe f8dc 	bl	8002bd4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0b5      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ee      	bne.n	8004a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	4a38      	ldr	r2, [pc, #224]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a56:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d05c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d141      	bne.n	8004aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b31      	ldr	r3, [pc, #196]	; (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fe f8b0 	bl	8002bd4 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fe f8ac 	bl	8002bd4 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e087      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	491b      	ldr	r1, [pc, #108]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fe f885 	bl	8002bd4 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fe f881 	bl	8002bd4 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e05c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x416>
 8004aec:	e054      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fe f86e 	bl	8002bd4 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fe f86a 	bl	8002bd4 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e045      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x444>
 8004b1a:	e03d      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e038      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <HAL_RCC_OscConfig+0x4ec>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d028      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d121      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0cc      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90c      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b65      	ldr	r3, [pc, #404]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a52      	ldr	r2, [pc, #328]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d044      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e067      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4934      	ldr	r1, [pc, #208]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fd ff9c 	bl	8002bd4 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fd ff98 	bl	8002bd4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20c      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	5ccb      	ldrb	r3, [r1, r3]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd fb64 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0800745c 	.word	0x0800745c
 8004d6c:	200000a0 	.word	0x200000a0
 8004d70:	200000a4 	.word	0x200000a4

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d78:	b090      	sub	sp, #64	; 0x40
 8004d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d80:	2300      	movs	r3, #0
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d84:	2300      	movs	r3, #0
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8c:	4b59      	ldr	r3, [pc, #356]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d00d      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x40>
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	f200 80a1 	bhi.w	8004ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d003      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0x3a>
 8004da6:	e09b      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b53      	ldr	r3, [pc, #332]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004dac:	e09b      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dae:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004db2:	e098      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db4:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dbe:	4b4d      	ldr	r3, [pc, #308]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dca:	4b4a      	ldr	r3, [pc, #296]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	627a      	str	r2, [r7, #36]	; 0x24
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004de0:	fb03 f201 	mul.w	r2, r3, r1
 8004de4:	2300      	movs	r3, #0
 8004de6:	fb00 f303 	mul.w	r3, r0, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	4a43      	ldr	r2, [pc, #268]	; (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004dee:	fba0 1202 	umull	r1, r2, r0, r2
 8004df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004df4:	460a      	mov	r2, r1
 8004df6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfa:	4413      	add	r3, r2
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	2200      	movs	r2, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	61fa      	str	r2, [r7, #28]
 8004e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e0e:	f7fb fe85 	bl	8000b1c <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4613      	mov	r3, r2
 8004e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e1a:	e053      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1c:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	2200      	movs	r2, #0
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	617a      	str	r2, [r7, #20]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e2e:	f04f 0b00 	mov.w	fp, #0
 8004e32:	4652      	mov	r2, sl
 8004e34:	465b      	mov	r3, fp
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8004e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e66:	ebb2 0408 	subs.w	r4, r2, r8
 8004e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	00eb      	lsls	r3, r5, #3
 8004e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7c:	00e2      	lsls	r2, r4, #3
 8004e7e:	4614      	mov	r4, r2
 8004e80:	461d      	mov	r5, r3
 8004e82:	eb14 030a 	adds.w	r3, r4, sl
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	eb45 030b 	adc.w	r3, r5, fp
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	028b      	lsls	r3, r1, #10
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	028a      	lsls	r2, r1, #10
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	2200      	movs	r2, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	60fa      	str	r2, [r7, #12]
 8004eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb8:	f7fb fe30 	bl	8000b1c <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ed4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3740      	adds	r7, #64	; 0x40
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	00f42400 	.word	0x00f42400
 8004efc:	00b71b00 	.word	0x00b71b00

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	200000a0 	.word	0x200000a0

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f1c:	f7ff fff0 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	0800746c 	.word	0x0800746c

08004f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f44:	f7ff ffdc 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0b5b      	lsrs	r3, r3, #13
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4903      	ldr	r1, [pc, #12]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	0800746c 	.word	0x0800746c

08004f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	220f      	movs	r2, #15
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0203 	and.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_RCC_GetClockConfig+0x60>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 020f 	and.w	r2, r3, #15
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40023c00 	.word	0x40023c00

08004fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f839 	bl	800506a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 f9d8 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d001      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e04e      	b.n	8005136 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a23      	ldr	r2, [pc, #140]	; (8005144 <HAL_TIM_Base_Start_IT+0xc4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d022      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x80>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c2:	d01d      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x80>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_TIM_Base_Start_IT+0xc8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d018      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x80>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1e      	ldr	r2, [pc, #120]	; (800514c <HAL_TIM_Base_Start_IT+0xcc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d013      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x80>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1c      	ldr	r2, [pc, #112]	; (8005150 <HAL_TIM_Base_Start_IT+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00e      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x80>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <HAL_TIM_Base_Start_IT+0xd4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d009      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x80>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a19      	ldr	r2, [pc, #100]	; (8005158 <HAL_TIM_Base_Start_IT+0xd8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x80>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a18      	ldr	r2, [pc, #96]	; (800515c <HAL_TIM_Base_Start_IT+0xdc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d111      	bne.n	8005124 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b06      	cmp	r3, #6
 8005110:	d010      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005122:	e007      	b.n	8005134 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40010400 	.word	0x40010400
 8005158:	40014000 	.word	0x40014000
 800515c:	40001800 	.word	0x40001800

08005160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b02      	cmp	r3, #2
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0202 	mvn.w	r2, #2
 800518c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f8ee 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8e0 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f8f1 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0204 	mvn.w	r2, #4
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f8c4 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8b6 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8c7 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b08      	cmp	r3, #8
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b08      	cmp	r3, #8
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f89a 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f88c 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f89d 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b10      	cmp	r3, #16
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0210 	mvn.w	r2, #16
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2208      	movs	r2, #8
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f870 	bl	8005384 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f862 	bl	8005370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f873 	bl	8005398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0201 	mvn.w	r2, #1
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fd f85c 	bl	800239c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f902 	bl	8005514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d10e      	bne.n	800533c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d107      	bne.n	800533c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f838 	bl	80053ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b20      	cmp	r3, #32
 8005348:	d10e      	bne.n	8005368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b20      	cmp	r3, #32
 8005356:	d107      	bne.n	8005368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0220 	mvn.w	r2, #32
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8cc 	bl	8005500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a40      	ldr	r2, [pc, #256]	; (80054d4 <TIM_Base_SetConfig+0x114>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d00f      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3d      	ldr	r2, [pc, #244]	; (80054d8 <TIM_Base_SetConfig+0x118>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3c      	ldr	r2, [pc, #240]	; (80054dc <TIM_Base_SetConfig+0x11c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <TIM_Base_SetConfig+0x120>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3a      	ldr	r2, [pc, #232]	; (80054e4 <TIM_Base_SetConfig+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2f      	ldr	r2, [pc, #188]	; (80054d4 <TIM_Base_SetConfig+0x114>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d02b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005420:	d027      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2c      	ldr	r2, [pc, #176]	; (80054d8 <TIM_Base_SetConfig+0x118>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d023      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2b      	ldr	r2, [pc, #172]	; (80054dc <TIM_Base_SetConfig+0x11c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <TIM_Base_SetConfig+0x120>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <TIM_Base_SetConfig+0x124>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d017      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a28      	ldr	r2, [pc, #160]	; (80054e8 <TIM_Base_SetConfig+0x128>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a27      	ldr	r2, [pc, #156]	; (80054ec <TIM_Base_SetConfig+0x12c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a26      	ldr	r2, [pc, #152]	; (80054f0 <TIM_Base_SetConfig+0x130>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <TIM_Base_SetConfig+0x134>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d007      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <TIM_Base_SetConfig+0x138>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a23      	ldr	r2, [pc, #140]	; (80054fc <TIM_Base_SetConfig+0x13c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <TIM_Base_SetConfig+0x114>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <TIM_Base_SetConfig+0x124>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d103      	bne.n	80054c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	615a      	str	r2, [r3, #20]
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800
 80054f4:	40001800 	.word	0x40001800
 80054f8:	40001c00 	.word	0x40001c00
 80054fc:	40002000 	.word	0x40002000

08005500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e03f      	b.n	80055ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fd f922 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2224      	movs	r2, #36	; 0x24
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 f843 	bl	80065f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b08a      	sub	sp, #40	; 0x28
 80055c6:	af02      	add	r7, sp, #8
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d17c      	bne.n	80056dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_UART_Transmit+0x2c>
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e075      	b.n	80056de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_UART_Transmit+0x3e>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e06e      	b.n	80056de <HAL_UART_Transmit+0x11c>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2221      	movs	r2, #33	; 0x21
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005616:	f7fd fadd 	bl	8002bd4 <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005630:	d108      	bne.n	8005644 <HAL_UART_Transmit+0x82>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	e003      	b.n	800564c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005654:	e02a      	b.n	80056ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	2180      	movs	r1, #128	; 0x80
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fcfa 	bl	800605a <UART_WaitOnFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e036      	b.n	80056de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	3302      	adds	r3, #2
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	e007      	b.n	800569e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	3301      	adds	r3, #1
 800569c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1cf      	bne.n	8005656 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2200      	movs	r2, #0
 80056be:	2140      	movs	r1, #64	; 0x40
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fcca 	bl	800605a <UART_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e006      	b.n	80056de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08c      	sub	sp, #48	; 0x30
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d165      	bne.n	80057ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_UART_Transmit_DMA+0x26>
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e05e      	b.n	80057d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_UART_Transmit_DMA+0x38>
 800571c:	2302      	movs	r3, #2
 800571e:	e057      	b.n	80057d0 <HAL_UART_Transmit_DMA+0xe8>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2221      	movs	r2, #33	; 0x21
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_UART_Transmit_DMA+0xf0>)
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	4a21      	ldr	r2, [pc, #132]	; (80057dc <HAL_UART_Transmit_DMA+0xf4>)
 8005756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <HAL_UART_Transmit_DMA+0xf8>)
 800575e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	2200      	movs	r2, #0
 8005766:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005768:	f107 0308 	add.w	r3, r7, #8
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3304      	adds	r3, #4
 800577c:	461a      	mov	r2, r3
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	f7fe fa80 	bl	8003c84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800578c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3314      	adds	r3, #20
 800579c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	617b      	str	r3, [r7, #20]
   return(result);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b6:	627a      	str	r2, [r7, #36]	; 0x24
 80057b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6a39      	ldr	r1, [r7, #32]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e000      	b.n	80057d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3730      	adds	r7, #48	; 0x30
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	08005db5 	.word	0x08005db5
 80057dc:	08005e4f 	.word	0x08005e4f
 80057e0:	08005fc7 	.word	0x08005fc7

080057e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	4613      	mov	r3, r2
 80057f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d11d      	bne.n	800583a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_UART_Receive_DMA+0x26>
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e016      	b.n	800583c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_UART_Receive_DMA+0x38>
 8005818:	2302      	movs	r3, #2
 800581a:	e00f      	b.n	800583c <HAL_UART_Receive_DMA+0x58>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	461a      	mov	r2, r3
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fc81 	bl	8006138 <UART_Start_Receive_DMA>
 8005836:	4603      	mov	r3, r0
 8005838:	e000      	b.n	800583c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800583a:	2302      	movs	r3, #2
  }
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b0ba      	sub	sp, #232	; 0xe8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800586a:	2300      	movs	r3, #0
 800586c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005870:	2300      	movs	r3, #0
 8005872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <HAL_UART_IRQHandler+0x66>
 8005896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fded 	bl	8006482 <UART_Receive_IT>
      return;
 80058a8:	e256      	b.n	8005d58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80de 	beq.w	8005a70 <HAL_UART_IRQHandler+0x22c>
 80058b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80d1 	beq.w	8005a70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_UART_IRQHandler+0xae>
 80058da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f043 0201 	orr.w	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <HAL_UART_IRQHandler+0xd2>
 80058fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0202 	orr.w	r2, r3, #2
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_UART_IRQHandler+0xf6>
 8005922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0204 	orr.w	r2, r3, #4
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d011      	beq.n	800596a <HAL_UART_IRQHandler+0x126>
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0208 	orr.w	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 81ed 	beq.w	8005d4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_UART_IRQHandler+0x14e>
 8005980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fd78 	bl	8006482 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <HAL_UART_IRQHandler+0x17a>
 80059b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d04f      	beq.n	8005a5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fc80 	bl	80062c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d141      	bne.n	8005a56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3314      	adds	r3, #20
 80059d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3314      	adds	r3, #20
 80059fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1d9      	bne.n	80059d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d013      	beq.n	8005a4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	4a7d      	ldr	r2, [pc, #500]	; (8005c20 <HAL_UART_IRQHandler+0x3dc>)
 8005a2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe f9ee 	bl	8003e14 <HAL_DMA_Abort_IT>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4c:	e00e      	b.n	8005a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f99a 	bl	8005d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	e00a      	b.n	8005a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f996 	bl	8005d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	e006      	b.n	8005a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f992 	bl	8005d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a6a:	e170      	b.n	8005d4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	bf00      	nop
    return;
 8005a6e:	e16e      	b.n	8005d4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	f040 814a 	bne.w	8005d0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8143 	beq.w	8005d0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 813c 	beq.w	8005d0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a96:	2300      	movs	r3, #0
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b40      	cmp	r3, #64	; 0x40
 8005ab8:	f040 80b4 	bne.w	8005c24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8140 	beq.w	8005d52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ada:	429a      	cmp	r2, r3
 8005adc:	f080 8139 	bcs.w	8005d52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af2:	f000 8088 	beq.w	8005c06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1d9      	bne.n	8005af6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3314      	adds	r3, #20
 8005b48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3314      	adds	r3, #20
 8005b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e1      	bne.n	8005b42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3314      	adds	r3, #20
 8005b84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3314      	adds	r3, #20
 8005b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e3      	bne.n	8005b7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd6:	f023 0310 	bic.w	r3, r3, #16
 8005bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	330c      	adds	r3, #12
 8005be4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005be8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e3      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe f897 	bl	8003d34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f8c0 	bl	8005d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c1c:	e099      	b.n	8005d52 <HAL_UART_IRQHandler+0x50e>
 8005c1e:	bf00      	nop
 8005c20:	0800638b 	.word	0x0800638b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 808b 	beq.w	8005d56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8086 	beq.w	8005d56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	330c      	adds	r3, #12
 8005c6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8005c70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e3      	bne.n	8005c4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3314      	adds	r3, #20
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	623b      	str	r3, [r7, #32]
   return(result);
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e3      	bne.n	8005c82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0310 	bic.w	r3, r3, #16
 8005cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cec:	61fa      	str	r2, [r7, #28]
 8005cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	69b9      	ldr	r1, [r7, #24]
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	e841 2300 	strex	r3, r2, [r1]
 8005cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e3      	bne.n	8005cc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f848 	bl	8005d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d0c:	e023      	b.n	8005d56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <HAL_UART_IRQHandler+0x4ea>
 8005d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fb43 	bl	80063b2 <UART_Transmit_IT>
    return;
 8005d2c:	e014      	b.n	8005d58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00e      	beq.n	8005d58 <HAL_UART_IRQHandler+0x514>
 8005d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fb83 	bl	8006452 <UART_EndTransmit_IT>
    return;
 8005d4c:	e004      	b.n	8005d58 <HAL_UART_IRQHandler+0x514>
    return;
 8005d4e:	bf00      	nop
 8005d50:	e002      	b.n	8005d58 <HAL_UART_IRQHandler+0x514>
      return;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <HAL_UART_IRQHandler+0x514>
      return;
 8005d56:	bf00      	nop
  }
}
 8005d58:	37e8      	adds	r7, #232	; 0xe8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop

08005d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b090      	sub	sp, #64	; 0x40
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d137      	bne.n	8005e40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3314      	adds	r3, #20
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	623b      	str	r3, [r7, #32]
   return(result);
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3314      	adds	r3, #20
 8005df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005df6:	633a      	str	r2, [r7, #48]	; 0x30
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e5      	bne.n	8005dd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
 8005e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e2a:	61fa      	str	r2, [r7, #28]
 8005e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	617b      	str	r3, [r7, #20]
   return(result);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e5      	bne.n	8005e0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e3e:	e002      	b.n	8005e46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005e40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005e42:	f7ff ff8d 	bl	8005d60 <HAL_UART_TxCpltCallback>
}
 8005e46:	bf00      	nop
 8005e48:	3740      	adds	r7, #64	; 0x40
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7fb ffb9 	bl	8001dd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b09c      	sub	sp, #112	; 0x70
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d172      	bne.n	8005f6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330c      	adds	r3, #12
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eac:	65ba      	str	r2, [r7, #88]	; 0x58
 8005eae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e5      	bne.n	8005e8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3314      	adds	r3, #20
 8005ede:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ee0:	647a      	str	r2, [r7, #68]	; 0x44
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e5      	bne.n	8005ec0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3314      	adds	r3, #20
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	623b      	str	r3, [r7, #32]
   return(result);
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3314      	adds	r3, #20
 8005f12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f14:	633a      	str	r2, [r7, #48]	; 0x30
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e5      	bne.n	8005ef4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d119      	bne.n	8005f6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0310 	bic.w	r3, r3, #16
 8005f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f58:	61fa      	str	r2, [r7, #28]
 8005f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	69b9      	ldr	r1, [r7, #24]
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	617b      	str	r3, [r7, #20]
   return(result);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e5      	bne.n	8005f38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d106      	bne.n	8005f82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f7c:	f7ff ff0e 	bl	8005d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f80:	e002      	b.n	8005f88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005f82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f84:	f7fb ff16 	bl	8001db4 <HAL_UART_RxCpltCallback>
}
 8005f88:	bf00      	nop
 8005f8a:	3770      	adds	r7, #112	; 0x70
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d108      	bne.n	8005fb8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7ff fef3 	bl	8005d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fb6:	e002      	b.n	8005fbe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fedb 	bl	8005d74 <HAL_UART_RxHalfCpltCallback>
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b21      	cmp	r3, #33	; 0x21
 8005ff8:	d108      	bne.n	800600c <UART_DMAError+0x46>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f000 f934 	bl	8006274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b22      	cmp	r3, #34	; 0x22
 800602c:	d108      	bne.n	8006040 <UART_DMAError+0x7a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800603a:	68b8      	ldr	r0, [r7, #8]
 800603c:	f000 f942 	bl	80062c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	f043 0210 	orr.w	r2, r3, #16
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800604c:	68b8      	ldr	r0, [r7, #8]
 800604e:	f7ff fe9b 	bl	8005d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b090      	sub	sp, #64	; 0x40
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606a:	e050      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006072:	d04c      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x30>
 800607a:	f7fc fdab 	bl	8002bd4 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006086:	429a      	cmp	r2, r3
 8006088:	d241      	bcs.n	800610e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060aa:	637a      	str	r2, [r7, #52]	; 0x34
 80060ac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3314      	adds	r3, #20
 80060c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	613b      	str	r3, [r7, #16]
   return(result);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3314      	adds	r3, #20
 80060dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060de:	623a      	str	r2, [r7, #32]
 80060e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	69f9      	ldr	r1, [r7, #28]
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e00f      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d09f      	beq.n	800606c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3740      	adds	r7, #64	; 0x40
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b098      	sub	sp, #96	; 0x60
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2222      	movs	r2, #34	; 0x22
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	4a40      	ldr	r2, [pc, #256]	; (8006268 <UART_Start_Receive_DMA+0x130>)
 8006166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	4a3f      	ldr	r2, [pc, #252]	; (800626c <UART_Start_Receive_DMA+0x134>)
 800616e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	4a3e      	ldr	r2, [pc, #248]	; (8006270 <UART_Start_Receive_DMA+0x138>)
 8006176:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	2200      	movs	r2, #0
 800617e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006180:	f107 0308 	add.w	r3, r7, #8
 8006184:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	f7fd fd74 	bl	8003c84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d019      	beq.n	80061f6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80061e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e5      	bne.n	80061c2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	657b      	str	r3, [r7, #84]	; 0x54
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3314      	adds	r3, #20
 8006214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006216:	63ba      	str	r2, [r7, #56]	; 0x38
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800621c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e5      	bne.n	80061f6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3314      	adds	r3, #20
 8006230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	617b      	str	r3, [r7, #20]
   return(result);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006240:	653b      	str	r3, [r7, #80]	; 0x50
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800624a:	627a      	str	r2, [r7, #36]	; 0x24
 800624c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6a39      	ldr	r1, [r7, #32]
 8006250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	61fb      	str	r3, [r7, #28]
   return(result);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3760      	adds	r7, #96	; 0x60
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	08005e6b 	.word	0x08005e6b
 800626c:	08005f91 	.word	0x08005f91
 8006270:	08005fc7 	.word	0x08005fc7

08006274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	60bb      	str	r3, [r7, #8]
   return(result);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	61ba      	str	r2, [r7, #24]
 800629e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6979      	ldr	r1, [r7, #20]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	613b      	str	r3, [r7, #16]
   return(result);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e5      	bne.n	800627c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80062b8:	bf00      	nop
 80062ba:	3724      	adds	r7, #36	; 0x24
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b095      	sub	sp, #84	; 0x54
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ec:	643a      	str	r2, [r7, #64]	; 0x40
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e5      	bne.n	80062cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	64bb      	str	r3, [r7, #72]	; 0x48
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3314      	adds	r3, #20
 800631e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e5      	bne.n	8006300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	2b01      	cmp	r3, #1
 800633a:	d119      	bne.n	8006370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	60bb      	str	r3, [r7, #8]
   return(result);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f023 0310 	bic.w	r3, r3, #16
 8006352:	647b      	str	r3, [r7, #68]	; 0x44
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	330c      	adds	r3, #12
 800635a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800635c:	61ba      	str	r2, [r7, #24]
 800635e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6979      	ldr	r1, [r7, #20]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	613b      	str	r3, [r7, #16]
   return(result);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800637e:	bf00      	nop
 8006380:	3754      	adds	r7, #84	; 0x54
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fcef 	bl	8005d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b21      	cmp	r3, #33	; 0x21
 80063c4:	d13e      	bne.n	8006444 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d114      	bne.n	80063fa <UART_Transmit_IT+0x48>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d110      	bne.n	80063fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	1c9a      	adds	r2, r3, #2
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	621a      	str	r2, [r3, #32]
 80063f8:	e008      	b.n	800640c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	1c59      	adds	r1, r3, #1
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6211      	str	r1, [r2, #32]
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29b      	uxth	r3, r3
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4619      	mov	r1, r3
 800641a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10f      	bne.n	8006440 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800642e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800643e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	e000      	b.n	8006446 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006444:	2302      	movs	r3, #2
  }
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006468:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff fc74 	bl	8005d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b08c      	sub	sp, #48	; 0x30
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b22      	cmp	r3, #34	; 0x22
 8006494:	f040 80ab 	bne.w	80065ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a0:	d117      	bne.n	80064d2 <UART_Receive_IT+0x50>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d113      	bne.n	80064d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	1c9a      	adds	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	629a      	str	r2, [r3, #40]	; 0x28
 80064d0:	e026      	b.n	8006520 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e4:	d007      	beq.n	80064f6 <UART_Receive_IT+0x74>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <UART_Receive_IT+0x82>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e008      	b.n	8006516 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006510:	b2da      	uxtb	r2, r3
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29b      	uxth	r3, r3
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	4619      	mov	r1, r3
 800652e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006530:	2b00      	cmp	r3, #0
 8006532:	d15a      	bne.n	80065ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0220 	bic.w	r2, r2, #32
 8006542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0201 	bic.w	r2, r2, #1
 8006562:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	2b01      	cmp	r3, #1
 8006572:	d135      	bne.n	80065e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	330c      	adds	r3, #12
 8006580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	613b      	str	r3, [r7, #16]
   return(result);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f023 0310 	bic.w	r3, r3, #16
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	623a      	str	r2, [r7, #32]
 800659c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	69f9      	ldr	r1, [r7, #28]
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e5      	bne.n	800657a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d10a      	bne.n	80065d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fbdf 	bl	8005d9c <HAL_UARTEx_RxEventCallback>
 80065de:	e002      	b.n	80065e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb fbe7 	bl	8001db4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e002      	b.n	80065f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3730      	adds	r7, #48	; 0x30
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065fc:	b0c0      	sub	sp, #256	; 0x100
 80065fe:	af00      	add	r7, sp, #0
 8006600:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	68d9      	ldr	r1, [r3, #12]
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	ea40 0301 	orr.w	r3, r0, r1
 8006620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	431a      	orrs	r2, r3
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	431a      	orrs	r2, r3
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006650:	f021 010c 	bic.w	r1, r1, #12
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800665e:	430b      	orrs	r3, r1
 8006660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	6999      	ldr	r1, [r3, #24]
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	ea40 0301 	orr.w	r3, r0, r1
 800667e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b8f      	ldr	r3, [pc, #572]	; (80068c4 <UART_SetConfig+0x2cc>)
 8006688:	429a      	cmp	r2, r3
 800668a:	d005      	beq.n	8006698 <UART_SetConfig+0xa0>
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b8d      	ldr	r3, [pc, #564]	; (80068c8 <UART_SetConfig+0x2d0>)
 8006694:	429a      	cmp	r2, r3
 8006696:	d104      	bne.n	80066a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006698:	f7fe fc52 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 800669c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066a0:	e003      	b.n	80066aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066a2:	f7fe fc39 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 80066a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b4:	f040 810c 	bne.w	80068d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066ca:	4622      	mov	r2, r4
 80066cc:	462b      	mov	r3, r5
 80066ce:	1891      	adds	r1, r2, r2
 80066d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80066d2:	415b      	adcs	r3, r3
 80066d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066da:	4621      	mov	r1, r4
 80066dc:	eb12 0801 	adds.w	r8, r2, r1
 80066e0:	4629      	mov	r1, r5
 80066e2:	eb43 0901 	adc.w	r9, r3, r1
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fa:	4690      	mov	r8, r2
 80066fc:	4699      	mov	r9, r3
 80066fe:	4623      	mov	r3, r4
 8006700:	eb18 0303 	adds.w	r3, r8, r3
 8006704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006708:	462b      	mov	r3, r5
 800670a:	eb49 0303 	adc.w	r3, r9, r3
 800670e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800671e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006726:	460b      	mov	r3, r1
 8006728:	18db      	adds	r3, r3, r3
 800672a:	653b      	str	r3, [r7, #80]	; 0x50
 800672c:	4613      	mov	r3, r2
 800672e:	eb42 0303 	adc.w	r3, r2, r3
 8006732:	657b      	str	r3, [r7, #84]	; 0x54
 8006734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800673c:	f7fa f9ee 	bl	8000b1c <__aeabi_uldivmod>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4b61      	ldr	r3, [pc, #388]	; (80068cc <UART_SetConfig+0x2d4>)
 8006746:	fba3 2302 	umull	r2, r3, r3, r2
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	011c      	lsls	r4, r3, #4
 800674e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006758:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800675c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	1891      	adds	r1, r2, r2
 8006766:	64b9      	str	r1, [r7, #72]	; 0x48
 8006768:	415b      	adcs	r3, r3
 800676a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800676c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006770:	4641      	mov	r1, r8
 8006772:	eb12 0a01 	adds.w	sl, r2, r1
 8006776:	4649      	mov	r1, r9
 8006778:	eb43 0b01 	adc.w	fp, r3, r1
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800678c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006790:	4692      	mov	sl, r2
 8006792:	469b      	mov	fp, r3
 8006794:	4643      	mov	r3, r8
 8006796:	eb1a 0303 	adds.w	r3, sl, r3
 800679a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800679e:	464b      	mov	r3, r9
 80067a0:	eb4b 0303 	adc.w	r3, fp, r3
 80067a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067bc:	460b      	mov	r3, r1
 80067be:	18db      	adds	r3, r3, r3
 80067c0:	643b      	str	r3, [r7, #64]	; 0x40
 80067c2:	4613      	mov	r3, r2
 80067c4:	eb42 0303 	adc.w	r3, r2, r3
 80067c8:	647b      	str	r3, [r7, #68]	; 0x44
 80067ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067d2:	f7fa f9a3 	bl	8000b1c <__aeabi_uldivmod>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	4b3b      	ldr	r3, [pc, #236]	; (80068cc <UART_SetConfig+0x2d4>)
 80067de:	fba3 2301 	umull	r2, r3, r3, r1
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2264      	movs	r2, #100	; 0x64
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	1acb      	subs	r3, r1, r3
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067f2:	4b36      	ldr	r3, [pc, #216]	; (80068cc <UART_SetConfig+0x2d4>)
 80067f4:	fba3 2302 	umull	r2, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006800:	441c      	add	r4, r3
 8006802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006806:	2200      	movs	r2, #0
 8006808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800680c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006814:	4642      	mov	r2, r8
 8006816:	464b      	mov	r3, r9
 8006818:	1891      	adds	r1, r2, r2
 800681a:	63b9      	str	r1, [r7, #56]	; 0x38
 800681c:	415b      	adcs	r3, r3
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006824:	4641      	mov	r1, r8
 8006826:	1851      	adds	r1, r2, r1
 8006828:	6339      	str	r1, [r7, #48]	; 0x30
 800682a:	4649      	mov	r1, r9
 800682c:	414b      	adcs	r3, r1
 800682e:	637b      	str	r3, [r7, #52]	; 0x34
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800683c:	4659      	mov	r1, fp
 800683e:	00cb      	lsls	r3, r1, #3
 8006840:	4651      	mov	r1, sl
 8006842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006846:	4651      	mov	r1, sl
 8006848:	00ca      	lsls	r2, r1, #3
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	4603      	mov	r3, r0
 8006850:	4642      	mov	r2, r8
 8006852:	189b      	adds	r3, r3, r2
 8006854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006858:	464b      	mov	r3, r9
 800685a:	460a      	mov	r2, r1
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006870:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006878:	460b      	mov	r3, r1
 800687a:	18db      	adds	r3, r3, r3
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
 800687e:	4613      	mov	r3, r2
 8006880:	eb42 0303 	adc.w	r3, r2, r3
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800688a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800688e:	f7fa f945 	bl	8000b1c <__aeabi_uldivmod>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <UART_SetConfig+0x2d4>)
 8006898:	fba3 1302 	umull	r1, r3, r3, r2
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	2164      	movs	r1, #100	; 0x64
 80068a0:	fb01 f303 	mul.w	r3, r1, r3
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	3332      	adds	r3, #50	; 0x32
 80068aa:	4a08      	ldr	r2, [pc, #32]	; (80068cc <UART_SetConfig+0x2d4>)
 80068ac:	fba2 2303 	umull	r2, r3, r2, r3
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	f003 0207 	and.w	r2, r3, #7
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4422      	add	r2, r4
 80068be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068c0:	e105      	b.n	8006ace <UART_SetConfig+0x4d6>
 80068c2:	bf00      	nop
 80068c4:	40011000 	.word	0x40011000
 80068c8:	40011400 	.word	0x40011400
 80068cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068e2:	4642      	mov	r2, r8
 80068e4:	464b      	mov	r3, r9
 80068e6:	1891      	adds	r1, r2, r2
 80068e8:	6239      	str	r1, [r7, #32]
 80068ea:	415b      	adcs	r3, r3
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
 80068ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068f2:	4641      	mov	r1, r8
 80068f4:	1854      	adds	r4, r2, r1
 80068f6:	4649      	mov	r1, r9
 80068f8:	eb43 0501 	adc.w	r5, r3, r1
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	00eb      	lsls	r3, r5, #3
 8006906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800690a:	00e2      	lsls	r2, r4, #3
 800690c:	4614      	mov	r4, r2
 800690e:	461d      	mov	r5, r3
 8006910:	4643      	mov	r3, r8
 8006912:	18e3      	adds	r3, r4, r3
 8006914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006918:	464b      	mov	r3, r9
 800691a:	eb45 0303 	adc.w	r3, r5, r3
 800691e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800692e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800693e:	4629      	mov	r1, r5
 8006940:	008b      	lsls	r3, r1, #2
 8006942:	4621      	mov	r1, r4
 8006944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006948:	4621      	mov	r1, r4
 800694a:	008a      	lsls	r2, r1, #2
 800694c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006950:	f7fa f8e4 	bl	8000b1c <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4b60      	ldr	r3, [pc, #384]	; (8006adc <UART_SetConfig+0x4e4>)
 800695a:	fba3 2302 	umull	r2, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	011c      	lsls	r4, r3, #4
 8006962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800696c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	61b9      	str	r1, [r7, #24]
 800697c:	415b      	adcs	r3, r3
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006984:	4641      	mov	r1, r8
 8006986:	1851      	adds	r1, r2, r1
 8006988:	6139      	str	r1, [r7, #16]
 800698a:	4649      	mov	r1, r9
 800698c:	414b      	adcs	r3, r1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800699c:	4659      	mov	r1, fp
 800699e:	00cb      	lsls	r3, r1, #3
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a6:	4651      	mov	r1, sl
 80069a8:	00ca      	lsls	r2, r1, #3
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	4642      	mov	r2, r8
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069b8:	464b      	mov	r3, r9
 80069ba:	460a      	mov	r2, r1
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069dc:	4649      	mov	r1, r9
 80069de:	008b      	lsls	r3, r1, #2
 80069e0:	4641      	mov	r1, r8
 80069e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e6:	4641      	mov	r1, r8
 80069e8:	008a      	lsls	r2, r1, #2
 80069ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069ee:	f7fa f895 	bl	8000b1c <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4b39      	ldr	r3, [pc, #228]	; (8006adc <UART_SetConfig+0x4e4>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	; 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	3332      	adds	r3, #50	; 0x32
 8006a0a:	4a34      	ldr	r2, [pc, #208]	; (8006adc <UART_SetConfig+0x4e4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a16:	441c      	add	r4, r3
 8006a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a20:	677a      	str	r2, [r7, #116]	; 0x74
 8006a22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a26:	4642      	mov	r2, r8
 8006a28:	464b      	mov	r3, r9
 8006a2a:	1891      	adds	r1, r2, r2
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	415b      	adcs	r3, r3
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a36:	4641      	mov	r1, r8
 8006a38:	1851      	adds	r1, r2, r1
 8006a3a:	6039      	str	r1, [r7, #0]
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	414b      	adcs	r3, r1
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a4e:	4659      	mov	r1, fp
 8006a50:	00cb      	lsls	r3, r1, #3
 8006a52:	4651      	mov	r1, sl
 8006a54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a58:	4651      	mov	r1, sl
 8006a5a:	00ca      	lsls	r2, r1, #3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4603      	mov	r3, r0
 8006a62:	4642      	mov	r2, r8
 8006a64:	189b      	adds	r3, r3, r2
 8006a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a68:	464b      	mov	r3, r9
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	eb42 0303 	adc.w	r3, r2, r3
 8006a70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a7c:	667a      	str	r2, [r7, #100]	; 0x64
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	008b      	lsls	r3, r1, #2
 8006a8e:	4641      	mov	r1, r8
 8006a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a94:	4641      	mov	r1, r8
 8006a96:	008a      	lsls	r2, r1, #2
 8006a98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a9c:	f7fa f83e 	bl	8000b1c <__aeabi_uldivmod>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <UART_SetConfig+0x4e4>)
 8006aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2164      	movs	r1, #100	; 0x64
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	3332      	adds	r3, #50	; 0x32
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <UART_SetConfig+0x4e4>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4422      	add	r2, r4
 8006acc:	609a      	str	r2, [r3, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ada:	bf00      	nop
 8006adc:	51eb851f 	.word	0x51eb851f

08006ae0 <__errno>:
 8006ae0:	4b01      	ldr	r3, [pc, #4]	; (8006ae8 <__errno+0x8>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	200000ac 	.word	0x200000ac

08006aec <__libc_init_array>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4d0d      	ldr	r5, [pc, #52]	; (8006b24 <__libc_init_array+0x38>)
 8006af0:	4c0d      	ldr	r4, [pc, #52]	; (8006b28 <__libc_init_array+0x3c>)
 8006af2:	1b64      	subs	r4, r4, r5
 8006af4:	10a4      	asrs	r4, r4, #2
 8006af6:	2600      	movs	r6, #0
 8006af8:	42a6      	cmp	r6, r4
 8006afa:	d109      	bne.n	8006b10 <__libc_init_array+0x24>
 8006afc:	4d0b      	ldr	r5, [pc, #44]	; (8006b2c <__libc_init_array+0x40>)
 8006afe:	4c0c      	ldr	r4, [pc, #48]	; (8006b30 <__libc_init_array+0x44>)
 8006b00:	f000 fc8e 	bl	8007420 <_init>
 8006b04:	1b64      	subs	r4, r4, r5
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	2600      	movs	r6, #0
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	d105      	bne.n	8006b1a <__libc_init_array+0x2e>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b14:	4798      	blx	r3
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7ee      	b.n	8006af8 <__libc_init_array+0xc>
 8006b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1e:	4798      	blx	r3
 8006b20:	3601      	adds	r6, #1
 8006b22:	e7f2      	b.n	8006b0a <__libc_init_array+0x1e>
 8006b24:	080074b8 	.word	0x080074b8
 8006b28:	080074b8 	.word	0x080074b8
 8006b2c:	080074b8 	.word	0x080074b8
 8006b30:	080074bc 	.word	0x080074bc

08006b34 <memset>:
 8006b34:	4402      	add	r2, r0
 8006b36:	4603      	mov	r3, r0
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d100      	bne.n	8006b3e <memset+0xa>
 8006b3c:	4770      	bx	lr
 8006b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b42:	e7f9      	b.n	8006b38 <memset+0x4>

08006b44 <_vsiprintf_r>:
 8006b44:	b500      	push	{lr}
 8006b46:	b09b      	sub	sp, #108	; 0x6c
 8006b48:	9100      	str	r1, [sp, #0]
 8006b4a:	9104      	str	r1, [sp, #16]
 8006b4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b50:	9105      	str	r1, [sp, #20]
 8006b52:	9102      	str	r1, [sp, #8]
 8006b54:	4905      	ldr	r1, [pc, #20]	; (8006b6c <_vsiprintf_r+0x28>)
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	4669      	mov	r1, sp
 8006b5a:	f000 f86f 	bl	8006c3c <_svfiprintf_r>
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	b01b      	add	sp, #108	; 0x6c
 8006b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b6a:	bf00      	nop
 8006b6c:	ffff0208 	.word	0xffff0208

08006b70 <vsiprintf>:
 8006b70:	4613      	mov	r3, r2
 8006b72:	460a      	mov	r2, r1
 8006b74:	4601      	mov	r1, r0
 8006b76:	4802      	ldr	r0, [pc, #8]	; (8006b80 <vsiprintf+0x10>)
 8006b78:	6800      	ldr	r0, [r0, #0]
 8006b7a:	f7ff bfe3 	b.w	8006b44 <_vsiprintf_r>
 8006b7e:	bf00      	nop
 8006b80:	200000ac 	.word	0x200000ac

08006b84 <__ssputs_r>:
 8006b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	688e      	ldr	r6, [r1, #8]
 8006b8a:	429e      	cmp	r6, r3
 8006b8c:	4682      	mov	sl, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4690      	mov	r8, r2
 8006b92:	461f      	mov	r7, r3
 8006b94:	d838      	bhi.n	8006c08 <__ssputs_r+0x84>
 8006b96:	898a      	ldrh	r2, [r1, #12]
 8006b98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b9c:	d032      	beq.n	8006c04 <__ssputs_r+0x80>
 8006b9e:	6825      	ldr	r5, [r4, #0]
 8006ba0:	6909      	ldr	r1, [r1, #16]
 8006ba2:	eba5 0901 	sub.w	r9, r5, r1
 8006ba6:	6965      	ldr	r5, [r4, #20]
 8006ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	444b      	add	r3, r9
 8006bb4:	106d      	asrs	r5, r5, #1
 8006bb6:	429d      	cmp	r5, r3
 8006bb8:	bf38      	it	cc
 8006bba:	461d      	movcc	r5, r3
 8006bbc:	0553      	lsls	r3, r2, #21
 8006bbe:	d531      	bpl.n	8006c24 <__ssputs_r+0xa0>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f000 fb63 	bl	800728c <_malloc_r>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	b950      	cbnz	r0, 8006be0 <__ssputs_r+0x5c>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	f8ca 3000 	str.w	r3, [sl]
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd6:	81a3      	strh	r3, [r4, #12]
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be0:	6921      	ldr	r1, [r4, #16]
 8006be2:	464a      	mov	r2, r9
 8006be4:	f000 fabe 	bl	8007164 <memcpy>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	6126      	str	r6, [r4, #16]
 8006bf6:	6165      	str	r5, [r4, #20]
 8006bf8:	444e      	add	r6, r9
 8006bfa:	eba5 0509 	sub.w	r5, r5, r9
 8006bfe:	6026      	str	r6, [r4, #0]
 8006c00:	60a5      	str	r5, [r4, #8]
 8006c02:	463e      	mov	r6, r7
 8006c04:	42be      	cmp	r6, r7
 8006c06:	d900      	bls.n	8006c0a <__ssputs_r+0x86>
 8006c08:	463e      	mov	r6, r7
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	4641      	mov	r1, r8
 8006c10:	f000 fab6 	bl	8007180 <memmove>
 8006c14:	68a3      	ldr	r3, [r4, #8]
 8006c16:	1b9b      	subs	r3, r3, r6
 8006c18:	60a3      	str	r3, [r4, #8]
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	4433      	add	r3, r6
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	2000      	movs	r0, #0
 8006c22:	e7db      	b.n	8006bdc <__ssputs_r+0x58>
 8006c24:	462a      	mov	r2, r5
 8006c26:	f000 fba5 	bl	8007374 <_realloc_r>
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d1e1      	bne.n	8006bf4 <__ssputs_r+0x70>
 8006c30:	6921      	ldr	r1, [r4, #16]
 8006c32:	4650      	mov	r0, sl
 8006c34:	f000 fabe 	bl	80071b4 <_free_r>
 8006c38:	e7c7      	b.n	8006bca <__ssputs_r+0x46>
	...

08006c3c <_svfiprintf_r>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	4698      	mov	r8, r3
 8006c42:	898b      	ldrh	r3, [r1, #12]
 8006c44:	061b      	lsls	r3, r3, #24
 8006c46:	b09d      	sub	sp, #116	; 0x74
 8006c48:	4607      	mov	r7, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	d50e      	bpl.n	8006c6e <_svfiprintf_r+0x32>
 8006c50:	690b      	ldr	r3, [r1, #16]
 8006c52:	b963      	cbnz	r3, 8006c6e <_svfiprintf_r+0x32>
 8006c54:	2140      	movs	r1, #64	; 0x40
 8006c56:	f000 fb19 	bl	800728c <_malloc_r>
 8006c5a:	6028      	str	r0, [r5, #0]
 8006c5c:	6128      	str	r0, [r5, #16]
 8006c5e:	b920      	cbnz	r0, 8006c6a <_svfiprintf_r+0x2e>
 8006c60:	230c      	movs	r3, #12
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c68:	e0d1      	b.n	8006e0e <_svfiprintf_r+0x1d2>
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	616b      	str	r3, [r5, #20]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9309      	str	r3, [sp, #36]	; 0x24
 8006c72:	2320      	movs	r3, #32
 8006c74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c7c:	2330      	movs	r3, #48	; 0x30
 8006c7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e28 <_svfiprintf_r+0x1ec>
 8006c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c86:	f04f 0901 	mov.w	r9, #1
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	469a      	mov	sl, r3
 8006c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c92:	b10a      	cbz	r2, 8006c98 <_svfiprintf_r+0x5c>
 8006c94:	2a25      	cmp	r2, #37	; 0x25
 8006c96:	d1f9      	bne.n	8006c8c <_svfiprintf_r+0x50>
 8006c98:	ebba 0b04 	subs.w	fp, sl, r4
 8006c9c:	d00b      	beq.n	8006cb6 <_svfiprintf_r+0x7a>
 8006c9e:	465b      	mov	r3, fp
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff ff6d 	bl	8006b84 <__ssputs_r>
 8006caa:	3001      	adds	r0, #1
 8006cac:	f000 80aa 	beq.w	8006e04 <_svfiprintf_r+0x1c8>
 8006cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb2:	445a      	add	r2, fp
 8006cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 80a2 	beq.w	8006e04 <_svfiprintf_r+0x1c8>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cca:	f10a 0a01 	add.w	sl, sl, #1
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	9307      	str	r3, [sp, #28]
 8006cd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd8:	4654      	mov	r4, sl
 8006cda:	2205      	movs	r2, #5
 8006cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce0:	4851      	ldr	r0, [pc, #324]	; (8006e28 <_svfiprintf_r+0x1ec>)
 8006ce2:	f7f9 fa85 	bl	80001f0 <memchr>
 8006ce6:	9a04      	ldr	r2, [sp, #16]
 8006ce8:	b9d8      	cbnz	r0, 8006d22 <_svfiprintf_r+0xe6>
 8006cea:	06d0      	lsls	r0, r2, #27
 8006cec:	bf44      	itt	mi
 8006cee:	2320      	movmi	r3, #32
 8006cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf4:	0711      	lsls	r1, r2, #28
 8006cf6:	bf44      	itt	mi
 8006cf8:	232b      	movmi	r3, #43	; 0x2b
 8006cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006d02:	2b2a      	cmp	r3, #42	; 0x2a
 8006d04:	d015      	beq.n	8006d32 <_svfiprintf_r+0xf6>
 8006d06:	9a07      	ldr	r2, [sp, #28]
 8006d08:	4654      	mov	r4, sl
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	f04f 0c0a 	mov.w	ip, #10
 8006d10:	4621      	mov	r1, r4
 8006d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d16:	3b30      	subs	r3, #48	; 0x30
 8006d18:	2b09      	cmp	r3, #9
 8006d1a:	d94e      	bls.n	8006dba <_svfiprintf_r+0x17e>
 8006d1c:	b1b0      	cbz	r0, 8006d4c <_svfiprintf_r+0x110>
 8006d1e:	9207      	str	r2, [sp, #28]
 8006d20:	e014      	b.n	8006d4c <_svfiprintf_r+0x110>
 8006d22:	eba0 0308 	sub.w	r3, r0, r8
 8006d26:	fa09 f303 	lsl.w	r3, r9, r3
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	46a2      	mov	sl, r4
 8006d30:	e7d2      	b.n	8006cd8 <_svfiprintf_r+0x9c>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	1d19      	adds	r1, r3, #4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	9103      	str	r1, [sp, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfbb      	ittet	lt
 8006d3e:	425b      	neglt	r3, r3
 8006d40:	f042 0202 	orrlt.w	r2, r2, #2
 8006d44:	9307      	strge	r3, [sp, #28]
 8006d46:	9307      	strlt	r3, [sp, #28]
 8006d48:	bfb8      	it	lt
 8006d4a:	9204      	strlt	r2, [sp, #16]
 8006d4c:	7823      	ldrb	r3, [r4, #0]
 8006d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d50:	d10c      	bne.n	8006d6c <_svfiprintf_r+0x130>
 8006d52:	7863      	ldrb	r3, [r4, #1]
 8006d54:	2b2a      	cmp	r3, #42	; 0x2a
 8006d56:	d135      	bne.n	8006dc4 <_svfiprintf_r+0x188>
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	1d1a      	adds	r2, r3, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	9203      	str	r2, [sp, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bfb8      	it	lt
 8006d64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d68:	3402      	adds	r4, #2
 8006d6a:	9305      	str	r3, [sp, #20]
 8006d6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e38 <_svfiprintf_r+0x1fc>
 8006d70:	7821      	ldrb	r1, [r4, #0]
 8006d72:	2203      	movs	r2, #3
 8006d74:	4650      	mov	r0, sl
 8006d76:	f7f9 fa3b 	bl	80001f0 <memchr>
 8006d7a:	b140      	cbz	r0, 8006d8e <_svfiprintf_r+0x152>
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	eba0 000a 	sub.w	r0, r0, sl
 8006d82:	fa03 f000 	lsl.w	r0, r3, r0
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	4303      	orrs	r3, r0
 8006d8a:	3401      	adds	r4, #1
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d92:	4826      	ldr	r0, [pc, #152]	; (8006e2c <_svfiprintf_r+0x1f0>)
 8006d94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d98:	2206      	movs	r2, #6
 8006d9a:	f7f9 fa29 	bl	80001f0 <memchr>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d038      	beq.n	8006e14 <_svfiprintf_r+0x1d8>
 8006da2:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <_svfiprintf_r+0x1f4>)
 8006da4:	bb1b      	cbnz	r3, 8006dee <_svfiprintf_r+0x1b2>
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	3307      	adds	r3, #7
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	3308      	adds	r3, #8
 8006db0:	9303      	str	r3, [sp, #12]
 8006db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db4:	4433      	add	r3, r6
 8006db6:	9309      	str	r3, [sp, #36]	; 0x24
 8006db8:	e767      	b.n	8006c8a <_svfiprintf_r+0x4e>
 8006dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	e7a5      	b.n	8006d10 <_svfiprintf_r+0xd4>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	3401      	adds	r4, #1
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	f04f 0c0a 	mov.w	ip, #10
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd6:	3a30      	subs	r2, #48	; 0x30
 8006dd8:	2a09      	cmp	r2, #9
 8006dda:	d903      	bls.n	8006de4 <_svfiprintf_r+0x1a8>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0c5      	beq.n	8006d6c <_svfiprintf_r+0x130>
 8006de0:	9105      	str	r1, [sp, #20]
 8006de2:	e7c3      	b.n	8006d6c <_svfiprintf_r+0x130>
 8006de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006de8:	4604      	mov	r4, r0
 8006dea:	2301      	movs	r3, #1
 8006dec:	e7f0      	b.n	8006dd0 <_svfiprintf_r+0x194>
 8006dee:	ab03      	add	r3, sp, #12
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	462a      	mov	r2, r5
 8006df4:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <_svfiprintf_r+0x1f8>)
 8006df6:	a904      	add	r1, sp, #16
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f3af 8000 	nop.w
 8006dfe:	1c42      	adds	r2, r0, #1
 8006e00:	4606      	mov	r6, r0
 8006e02:	d1d6      	bne.n	8006db2 <_svfiprintf_r+0x176>
 8006e04:	89ab      	ldrh	r3, [r5, #12]
 8006e06:	065b      	lsls	r3, r3, #25
 8006e08:	f53f af2c 	bmi.w	8006c64 <_svfiprintf_r+0x28>
 8006e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e0e:	b01d      	add	sp, #116	; 0x74
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	ab03      	add	r3, sp, #12
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	462a      	mov	r2, r5
 8006e1a:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <_svfiprintf_r+0x1f8>)
 8006e1c:	a904      	add	r1, sp, #16
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f000 f87a 	bl	8006f18 <_printf_i>
 8006e24:	e7eb      	b.n	8006dfe <_svfiprintf_r+0x1c2>
 8006e26:	bf00      	nop
 8006e28:	0800747c 	.word	0x0800747c
 8006e2c:	08007486 	.word	0x08007486
 8006e30:	00000000 	.word	0x00000000
 8006e34:	08006b85 	.word	0x08006b85
 8006e38:	08007482 	.word	0x08007482

08006e3c <_printf_common>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	4616      	mov	r6, r2
 8006e42:	4699      	mov	r9, r3
 8006e44:	688a      	ldr	r2, [r1, #8]
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	bfb8      	it	lt
 8006e50:	4613      	movlt	r3, r2
 8006e52:	6033      	str	r3, [r6, #0]
 8006e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e58:	4607      	mov	r7, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	b10a      	cbz	r2, 8006e62 <_printf_common+0x26>
 8006e5e:	3301      	adds	r3, #1
 8006e60:	6033      	str	r3, [r6, #0]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	0699      	lsls	r1, r3, #26
 8006e66:	bf42      	ittt	mi
 8006e68:	6833      	ldrmi	r3, [r6, #0]
 8006e6a:	3302      	addmi	r3, #2
 8006e6c:	6033      	strmi	r3, [r6, #0]
 8006e6e:	6825      	ldr	r5, [r4, #0]
 8006e70:	f015 0506 	ands.w	r5, r5, #6
 8006e74:	d106      	bne.n	8006e84 <_printf_common+0x48>
 8006e76:	f104 0a19 	add.w	sl, r4, #25
 8006e7a:	68e3      	ldr	r3, [r4, #12]
 8006e7c:	6832      	ldr	r2, [r6, #0]
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	42ab      	cmp	r3, r5
 8006e82:	dc26      	bgt.n	8006ed2 <_printf_common+0x96>
 8006e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e88:	1e13      	subs	r3, r2, #0
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	bf18      	it	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	0692      	lsls	r2, r2, #26
 8006e92:	d42b      	bmi.n	8006eec <_printf_common+0xb0>
 8006e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	47c0      	blx	r8
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d01e      	beq.n	8006ee0 <_printf_common+0xa4>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	68e5      	ldr	r5, [r4, #12]
 8006ea6:	6832      	ldr	r2, [r6, #0]
 8006ea8:	f003 0306 	and.w	r3, r3, #6
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	bf08      	it	eq
 8006eb0:	1aad      	subeq	r5, r5, r2
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	6922      	ldr	r2, [r4, #16]
 8006eb6:	bf0c      	ite	eq
 8006eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ebc:	2500      	movne	r5, #0
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	bfc4      	itt	gt
 8006ec2:	1a9b      	subgt	r3, r3, r2
 8006ec4:	18ed      	addgt	r5, r5, r3
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	341a      	adds	r4, #26
 8006eca:	42b5      	cmp	r5, r6
 8006ecc:	d11a      	bne.n	8006f04 <_printf_common+0xc8>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e008      	b.n	8006ee4 <_printf_common+0xa8>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	4638      	mov	r0, r7
 8006eda:	47c0      	blx	r8
 8006edc:	3001      	adds	r0, #1
 8006ede:	d103      	bne.n	8006ee8 <_printf_common+0xac>
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	3501      	adds	r5, #1
 8006eea:	e7c6      	b.n	8006e7a <_printf_common+0x3e>
 8006eec:	18e1      	adds	r1, r4, r3
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	2030      	movs	r0, #48	; 0x30
 8006ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ef6:	4422      	add	r2, r4
 8006ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f00:	3302      	adds	r3, #2
 8006f02:	e7c7      	b.n	8006e94 <_printf_common+0x58>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4622      	mov	r2, r4
 8006f08:	4649      	mov	r1, r9
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	47c0      	blx	r8
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d0e6      	beq.n	8006ee0 <_printf_common+0xa4>
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7d9      	b.n	8006eca <_printf_common+0x8e>
	...

08006f18 <_printf_i>:
 8006f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f1c:	7e0f      	ldrb	r7, [r1, #24]
 8006f1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f20:	2f78      	cmp	r7, #120	; 0x78
 8006f22:	4691      	mov	r9, r2
 8006f24:	4680      	mov	r8, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	469a      	mov	sl, r3
 8006f2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f2e:	d807      	bhi.n	8006f40 <_printf_i+0x28>
 8006f30:	2f62      	cmp	r7, #98	; 0x62
 8006f32:	d80a      	bhi.n	8006f4a <_printf_i+0x32>
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	f000 80d8 	beq.w	80070ea <_printf_i+0x1d2>
 8006f3a:	2f58      	cmp	r7, #88	; 0x58
 8006f3c:	f000 80a3 	beq.w	8007086 <_printf_i+0x16e>
 8006f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f48:	e03a      	b.n	8006fc0 <_printf_i+0xa8>
 8006f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f4e:	2b15      	cmp	r3, #21
 8006f50:	d8f6      	bhi.n	8006f40 <_printf_i+0x28>
 8006f52:	a101      	add	r1, pc, #4	; (adr r1, 8006f58 <_printf_i+0x40>)
 8006f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f58:	08006fb1 	.word	0x08006fb1
 8006f5c:	08006fc5 	.word	0x08006fc5
 8006f60:	08006f41 	.word	0x08006f41
 8006f64:	08006f41 	.word	0x08006f41
 8006f68:	08006f41 	.word	0x08006f41
 8006f6c:	08006f41 	.word	0x08006f41
 8006f70:	08006fc5 	.word	0x08006fc5
 8006f74:	08006f41 	.word	0x08006f41
 8006f78:	08006f41 	.word	0x08006f41
 8006f7c:	08006f41 	.word	0x08006f41
 8006f80:	08006f41 	.word	0x08006f41
 8006f84:	080070d1 	.word	0x080070d1
 8006f88:	08006ff5 	.word	0x08006ff5
 8006f8c:	080070b3 	.word	0x080070b3
 8006f90:	08006f41 	.word	0x08006f41
 8006f94:	08006f41 	.word	0x08006f41
 8006f98:	080070f3 	.word	0x080070f3
 8006f9c:	08006f41 	.word	0x08006f41
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08006f41 	.word	0x08006f41
 8006fa8:	08006f41 	.word	0x08006f41
 8006fac:	080070bb 	.word	0x080070bb
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	1d1a      	adds	r2, r3, #4
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	602a      	str	r2, [r5, #0]
 8006fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0a3      	b.n	800710c <_printf_i+0x1f4>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	6829      	ldr	r1, [r5, #0]
 8006fc8:	0606      	lsls	r6, r0, #24
 8006fca:	f101 0304 	add.w	r3, r1, #4
 8006fce:	d50a      	bpl.n	8006fe6 <_printf_i+0xce>
 8006fd0:	680e      	ldr	r6, [r1, #0]
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	2e00      	cmp	r6, #0
 8006fd6:	da03      	bge.n	8006fe0 <_printf_i+0xc8>
 8006fd8:	232d      	movs	r3, #45	; 0x2d
 8006fda:	4276      	negs	r6, r6
 8006fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe0:	485e      	ldr	r0, [pc, #376]	; (800715c <_printf_i+0x244>)
 8006fe2:	230a      	movs	r3, #10
 8006fe4:	e019      	b.n	800701a <_printf_i+0x102>
 8006fe6:	680e      	ldr	r6, [r1, #0]
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fee:	bf18      	it	ne
 8006ff0:	b236      	sxthne	r6, r6
 8006ff2:	e7ef      	b.n	8006fd4 <_printf_i+0xbc>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	6820      	ldr	r0, [r4, #0]
 8006ff8:	1d19      	adds	r1, r3, #4
 8006ffa:	6029      	str	r1, [r5, #0]
 8006ffc:	0601      	lsls	r1, r0, #24
 8006ffe:	d501      	bpl.n	8007004 <_printf_i+0xec>
 8007000:	681e      	ldr	r6, [r3, #0]
 8007002:	e002      	b.n	800700a <_printf_i+0xf2>
 8007004:	0646      	lsls	r6, r0, #25
 8007006:	d5fb      	bpl.n	8007000 <_printf_i+0xe8>
 8007008:	881e      	ldrh	r6, [r3, #0]
 800700a:	4854      	ldr	r0, [pc, #336]	; (800715c <_printf_i+0x244>)
 800700c:	2f6f      	cmp	r7, #111	; 0x6f
 800700e:	bf0c      	ite	eq
 8007010:	2308      	moveq	r3, #8
 8007012:	230a      	movne	r3, #10
 8007014:	2100      	movs	r1, #0
 8007016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800701a:	6865      	ldr	r5, [r4, #4]
 800701c:	60a5      	str	r5, [r4, #8]
 800701e:	2d00      	cmp	r5, #0
 8007020:	bfa2      	ittt	ge
 8007022:	6821      	ldrge	r1, [r4, #0]
 8007024:	f021 0104 	bicge.w	r1, r1, #4
 8007028:	6021      	strge	r1, [r4, #0]
 800702a:	b90e      	cbnz	r6, 8007030 <_printf_i+0x118>
 800702c:	2d00      	cmp	r5, #0
 800702e:	d04d      	beq.n	80070cc <_printf_i+0x1b4>
 8007030:	4615      	mov	r5, r2
 8007032:	fbb6 f1f3 	udiv	r1, r6, r3
 8007036:	fb03 6711 	mls	r7, r3, r1, r6
 800703a:	5dc7      	ldrb	r7, [r0, r7]
 800703c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007040:	4637      	mov	r7, r6
 8007042:	42bb      	cmp	r3, r7
 8007044:	460e      	mov	r6, r1
 8007046:	d9f4      	bls.n	8007032 <_printf_i+0x11a>
 8007048:	2b08      	cmp	r3, #8
 800704a:	d10b      	bne.n	8007064 <_printf_i+0x14c>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07de      	lsls	r6, r3, #31
 8007050:	d508      	bpl.n	8007064 <_printf_i+0x14c>
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	6861      	ldr	r1, [r4, #4]
 8007056:	4299      	cmp	r1, r3
 8007058:	bfde      	ittt	le
 800705a:	2330      	movle	r3, #48	; 0x30
 800705c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007060:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007064:	1b52      	subs	r2, r2, r5
 8007066:	6122      	str	r2, [r4, #16]
 8007068:	f8cd a000 	str.w	sl, [sp]
 800706c:	464b      	mov	r3, r9
 800706e:	aa03      	add	r2, sp, #12
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f7ff fee2 	bl	8006e3c <_printf_common>
 8007078:	3001      	adds	r0, #1
 800707a:	d14c      	bne.n	8007116 <_printf_i+0x1fe>
 800707c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007080:	b004      	add	sp, #16
 8007082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007086:	4835      	ldr	r0, [pc, #212]	; (800715c <_printf_i+0x244>)
 8007088:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800708c:	6829      	ldr	r1, [r5, #0]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	f851 6b04 	ldr.w	r6, [r1], #4
 8007094:	6029      	str	r1, [r5, #0]
 8007096:	061d      	lsls	r5, r3, #24
 8007098:	d514      	bpl.n	80070c4 <_printf_i+0x1ac>
 800709a:	07df      	lsls	r7, r3, #31
 800709c:	bf44      	itt	mi
 800709e:	f043 0320 	orrmi.w	r3, r3, #32
 80070a2:	6023      	strmi	r3, [r4, #0]
 80070a4:	b91e      	cbnz	r6, 80070ae <_printf_i+0x196>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	f023 0320 	bic.w	r3, r3, #32
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	2310      	movs	r3, #16
 80070b0:	e7b0      	b.n	8007014 <_printf_i+0xfc>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f043 0320 	orr.w	r3, r3, #32
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	2378      	movs	r3, #120	; 0x78
 80070bc:	4828      	ldr	r0, [pc, #160]	; (8007160 <_printf_i+0x248>)
 80070be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070c2:	e7e3      	b.n	800708c <_printf_i+0x174>
 80070c4:	0659      	lsls	r1, r3, #25
 80070c6:	bf48      	it	mi
 80070c8:	b2b6      	uxthmi	r6, r6
 80070ca:	e7e6      	b.n	800709a <_printf_i+0x182>
 80070cc:	4615      	mov	r5, r2
 80070ce:	e7bb      	b.n	8007048 <_printf_i+0x130>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	6826      	ldr	r6, [r4, #0]
 80070d4:	6961      	ldr	r1, [r4, #20]
 80070d6:	1d18      	adds	r0, r3, #4
 80070d8:	6028      	str	r0, [r5, #0]
 80070da:	0635      	lsls	r5, r6, #24
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	d501      	bpl.n	80070e4 <_printf_i+0x1cc>
 80070e0:	6019      	str	r1, [r3, #0]
 80070e2:	e002      	b.n	80070ea <_printf_i+0x1d2>
 80070e4:	0670      	lsls	r0, r6, #25
 80070e6:	d5fb      	bpl.n	80070e0 <_printf_i+0x1c8>
 80070e8:	8019      	strh	r1, [r3, #0]
 80070ea:	2300      	movs	r3, #0
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	4615      	mov	r5, r2
 80070f0:	e7ba      	b.n	8007068 <_printf_i+0x150>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	1d1a      	adds	r2, r3, #4
 80070f6:	602a      	str	r2, [r5, #0]
 80070f8:	681d      	ldr	r5, [r3, #0]
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	2100      	movs	r1, #0
 80070fe:	4628      	mov	r0, r5
 8007100:	f7f9 f876 	bl	80001f0 <memchr>
 8007104:	b108      	cbz	r0, 800710a <_printf_i+0x1f2>
 8007106:	1b40      	subs	r0, r0, r5
 8007108:	6060      	str	r0, [r4, #4]
 800710a:	6863      	ldr	r3, [r4, #4]
 800710c:	6123      	str	r3, [r4, #16]
 800710e:	2300      	movs	r3, #0
 8007110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007114:	e7a8      	b.n	8007068 <_printf_i+0x150>
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	462a      	mov	r2, r5
 800711a:	4649      	mov	r1, r9
 800711c:	4640      	mov	r0, r8
 800711e:	47d0      	blx	sl
 8007120:	3001      	adds	r0, #1
 8007122:	d0ab      	beq.n	800707c <_printf_i+0x164>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	079b      	lsls	r3, r3, #30
 8007128:	d413      	bmi.n	8007152 <_printf_i+0x23a>
 800712a:	68e0      	ldr	r0, [r4, #12]
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	4298      	cmp	r0, r3
 8007130:	bfb8      	it	lt
 8007132:	4618      	movlt	r0, r3
 8007134:	e7a4      	b.n	8007080 <_printf_i+0x168>
 8007136:	2301      	movs	r3, #1
 8007138:	4632      	mov	r2, r6
 800713a:	4649      	mov	r1, r9
 800713c:	4640      	mov	r0, r8
 800713e:	47d0      	blx	sl
 8007140:	3001      	adds	r0, #1
 8007142:	d09b      	beq.n	800707c <_printf_i+0x164>
 8007144:	3501      	adds	r5, #1
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	9903      	ldr	r1, [sp, #12]
 800714a:	1a5b      	subs	r3, r3, r1
 800714c:	42ab      	cmp	r3, r5
 800714e:	dcf2      	bgt.n	8007136 <_printf_i+0x21e>
 8007150:	e7eb      	b.n	800712a <_printf_i+0x212>
 8007152:	2500      	movs	r5, #0
 8007154:	f104 0619 	add.w	r6, r4, #25
 8007158:	e7f5      	b.n	8007146 <_printf_i+0x22e>
 800715a:	bf00      	nop
 800715c:	0800748d 	.word	0x0800748d
 8007160:	0800749e 	.word	0x0800749e

08007164 <memcpy>:
 8007164:	440a      	add	r2, r1
 8007166:	4291      	cmp	r1, r2
 8007168:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800716c:	d100      	bne.n	8007170 <memcpy+0xc>
 800716e:	4770      	bx	lr
 8007170:	b510      	push	{r4, lr}
 8007172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717a:	4291      	cmp	r1, r2
 800717c:	d1f9      	bne.n	8007172 <memcpy+0xe>
 800717e:	bd10      	pop	{r4, pc}

08007180 <memmove>:
 8007180:	4288      	cmp	r0, r1
 8007182:	b510      	push	{r4, lr}
 8007184:	eb01 0402 	add.w	r4, r1, r2
 8007188:	d902      	bls.n	8007190 <memmove+0x10>
 800718a:	4284      	cmp	r4, r0
 800718c:	4623      	mov	r3, r4
 800718e:	d807      	bhi.n	80071a0 <memmove+0x20>
 8007190:	1e43      	subs	r3, r0, #1
 8007192:	42a1      	cmp	r1, r4
 8007194:	d008      	beq.n	80071a8 <memmove+0x28>
 8007196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800719a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800719e:	e7f8      	b.n	8007192 <memmove+0x12>
 80071a0:	4402      	add	r2, r0
 80071a2:	4601      	mov	r1, r0
 80071a4:	428a      	cmp	r2, r1
 80071a6:	d100      	bne.n	80071aa <memmove+0x2a>
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071b2:	e7f7      	b.n	80071a4 <memmove+0x24>

080071b4 <_free_r>:
 80071b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071b6:	2900      	cmp	r1, #0
 80071b8:	d044      	beq.n	8007244 <_free_r+0x90>
 80071ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071be:	9001      	str	r0, [sp, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f1a1 0404 	sub.w	r4, r1, #4
 80071c6:	bfb8      	it	lt
 80071c8:	18e4      	addlt	r4, r4, r3
 80071ca:	f000 f913 	bl	80073f4 <__malloc_lock>
 80071ce:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <_free_r+0x94>)
 80071d0:	9801      	ldr	r0, [sp, #4]
 80071d2:	6813      	ldr	r3, [r2, #0]
 80071d4:	b933      	cbnz	r3, 80071e4 <_free_r+0x30>
 80071d6:	6063      	str	r3, [r4, #4]
 80071d8:	6014      	str	r4, [r2, #0]
 80071da:	b003      	add	sp, #12
 80071dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071e0:	f000 b90e 	b.w	8007400 <__malloc_unlock>
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	d908      	bls.n	80071fa <_free_r+0x46>
 80071e8:	6825      	ldr	r5, [r4, #0]
 80071ea:	1961      	adds	r1, r4, r5
 80071ec:	428b      	cmp	r3, r1
 80071ee:	bf01      	itttt	eq
 80071f0:	6819      	ldreq	r1, [r3, #0]
 80071f2:	685b      	ldreq	r3, [r3, #4]
 80071f4:	1949      	addeq	r1, r1, r5
 80071f6:	6021      	streq	r1, [r4, #0]
 80071f8:	e7ed      	b.n	80071d6 <_free_r+0x22>
 80071fa:	461a      	mov	r2, r3
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	b10b      	cbz	r3, 8007204 <_free_r+0x50>
 8007200:	42a3      	cmp	r3, r4
 8007202:	d9fa      	bls.n	80071fa <_free_r+0x46>
 8007204:	6811      	ldr	r1, [r2, #0]
 8007206:	1855      	adds	r5, r2, r1
 8007208:	42a5      	cmp	r5, r4
 800720a:	d10b      	bne.n	8007224 <_free_r+0x70>
 800720c:	6824      	ldr	r4, [r4, #0]
 800720e:	4421      	add	r1, r4
 8007210:	1854      	adds	r4, r2, r1
 8007212:	42a3      	cmp	r3, r4
 8007214:	6011      	str	r1, [r2, #0]
 8007216:	d1e0      	bne.n	80071da <_free_r+0x26>
 8007218:	681c      	ldr	r4, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	6053      	str	r3, [r2, #4]
 800721e:	4421      	add	r1, r4
 8007220:	6011      	str	r1, [r2, #0]
 8007222:	e7da      	b.n	80071da <_free_r+0x26>
 8007224:	d902      	bls.n	800722c <_free_r+0x78>
 8007226:	230c      	movs	r3, #12
 8007228:	6003      	str	r3, [r0, #0]
 800722a:	e7d6      	b.n	80071da <_free_r+0x26>
 800722c:	6825      	ldr	r5, [r4, #0]
 800722e:	1961      	adds	r1, r4, r5
 8007230:	428b      	cmp	r3, r1
 8007232:	bf04      	itt	eq
 8007234:	6819      	ldreq	r1, [r3, #0]
 8007236:	685b      	ldreq	r3, [r3, #4]
 8007238:	6063      	str	r3, [r4, #4]
 800723a:	bf04      	itt	eq
 800723c:	1949      	addeq	r1, r1, r5
 800723e:	6021      	streq	r1, [r4, #0]
 8007240:	6054      	str	r4, [r2, #4]
 8007242:	e7ca      	b.n	80071da <_free_r+0x26>
 8007244:	b003      	add	sp, #12
 8007246:	bd30      	pop	{r4, r5, pc}
 8007248:	2000053c 	.word	0x2000053c

0800724c <sbrk_aligned>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	4e0e      	ldr	r6, [pc, #56]	; (8007288 <sbrk_aligned+0x3c>)
 8007250:	460c      	mov	r4, r1
 8007252:	6831      	ldr	r1, [r6, #0]
 8007254:	4605      	mov	r5, r0
 8007256:	b911      	cbnz	r1, 800725e <sbrk_aligned+0x12>
 8007258:	f000 f8bc 	bl	80073d4 <_sbrk_r>
 800725c:	6030      	str	r0, [r6, #0]
 800725e:	4621      	mov	r1, r4
 8007260:	4628      	mov	r0, r5
 8007262:	f000 f8b7 	bl	80073d4 <_sbrk_r>
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	d00a      	beq.n	8007280 <sbrk_aligned+0x34>
 800726a:	1cc4      	adds	r4, r0, #3
 800726c:	f024 0403 	bic.w	r4, r4, #3
 8007270:	42a0      	cmp	r0, r4
 8007272:	d007      	beq.n	8007284 <sbrk_aligned+0x38>
 8007274:	1a21      	subs	r1, r4, r0
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f8ac 	bl	80073d4 <_sbrk_r>
 800727c:	3001      	adds	r0, #1
 800727e:	d101      	bne.n	8007284 <sbrk_aligned+0x38>
 8007280:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007284:	4620      	mov	r0, r4
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	20000540 	.word	0x20000540

0800728c <_malloc_r>:
 800728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007290:	1ccd      	adds	r5, r1, #3
 8007292:	f025 0503 	bic.w	r5, r5, #3
 8007296:	3508      	adds	r5, #8
 8007298:	2d0c      	cmp	r5, #12
 800729a:	bf38      	it	cc
 800729c:	250c      	movcc	r5, #12
 800729e:	2d00      	cmp	r5, #0
 80072a0:	4607      	mov	r7, r0
 80072a2:	db01      	blt.n	80072a8 <_malloc_r+0x1c>
 80072a4:	42a9      	cmp	r1, r5
 80072a6:	d905      	bls.n	80072b4 <_malloc_r+0x28>
 80072a8:	230c      	movs	r3, #12
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	2600      	movs	r6, #0
 80072ae:	4630      	mov	r0, r6
 80072b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b4:	4e2e      	ldr	r6, [pc, #184]	; (8007370 <_malloc_r+0xe4>)
 80072b6:	f000 f89d 	bl	80073f4 <__malloc_lock>
 80072ba:	6833      	ldr	r3, [r6, #0]
 80072bc:	461c      	mov	r4, r3
 80072be:	bb34      	cbnz	r4, 800730e <_malloc_r+0x82>
 80072c0:	4629      	mov	r1, r5
 80072c2:	4638      	mov	r0, r7
 80072c4:	f7ff ffc2 	bl	800724c <sbrk_aligned>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	4604      	mov	r4, r0
 80072cc:	d14d      	bne.n	800736a <_malloc_r+0xde>
 80072ce:	6834      	ldr	r4, [r6, #0]
 80072d0:	4626      	mov	r6, r4
 80072d2:	2e00      	cmp	r6, #0
 80072d4:	d140      	bne.n	8007358 <_malloc_r+0xcc>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	4631      	mov	r1, r6
 80072da:	4638      	mov	r0, r7
 80072dc:	eb04 0803 	add.w	r8, r4, r3
 80072e0:	f000 f878 	bl	80073d4 <_sbrk_r>
 80072e4:	4580      	cmp	r8, r0
 80072e6:	d13a      	bne.n	800735e <_malloc_r+0xd2>
 80072e8:	6821      	ldr	r1, [r4, #0]
 80072ea:	3503      	adds	r5, #3
 80072ec:	1a6d      	subs	r5, r5, r1
 80072ee:	f025 0503 	bic.w	r5, r5, #3
 80072f2:	3508      	adds	r5, #8
 80072f4:	2d0c      	cmp	r5, #12
 80072f6:	bf38      	it	cc
 80072f8:	250c      	movcc	r5, #12
 80072fa:	4629      	mov	r1, r5
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff ffa5 	bl	800724c <sbrk_aligned>
 8007302:	3001      	adds	r0, #1
 8007304:	d02b      	beq.n	800735e <_malloc_r+0xd2>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	442b      	add	r3, r5
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	e00e      	b.n	800732c <_malloc_r+0xa0>
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	1b52      	subs	r2, r2, r5
 8007312:	d41e      	bmi.n	8007352 <_malloc_r+0xc6>
 8007314:	2a0b      	cmp	r2, #11
 8007316:	d916      	bls.n	8007346 <_malloc_r+0xba>
 8007318:	1961      	adds	r1, r4, r5
 800731a:	42a3      	cmp	r3, r4
 800731c:	6025      	str	r5, [r4, #0]
 800731e:	bf18      	it	ne
 8007320:	6059      	strne	r1, [r3, #4]
 8007322:	6863      	ldr	r3, [r4, #4]
 8007324:	bf08      	it	eq
 8007326:	6031      	streq	r1, [r6, #0]
 8007328:	5162      	str	r2, [r4, r5]
 800732a:	604b      	str	r3, [r1, #4]
 800732c:	4638      	mov	r0, r7
 800732e:	f104 060b 	add.w	r6, r4, #11
 8007332:	f000 f865 	bl	8007400 <__malloc_unlock>
 8007336:	f026 0607 	bic.w	r6, r6, #7
 800733a:	1d23      	adds	r3, r4, #4
 800733c:	1af2      	subs	r2, r6, r3
 800733e:	d0b6      	beq.n	80072ae <_malloc_r+0x22>
 8007340:	1b9b      	subs	r3, r3, r6
 8007342:	50a3      	str	r3, [r4, r2]
 8007344:	e7b3      	b.n	80072ae <_malloc_r+0x22>
 8007346:	6862      	ldr	r2, [r4, #4]
 8007348:	42a3      	cmp	r3, r4
 800734a:	bf0c      	ite	eq
 800734c:	6032      	streq	r2, [r6, #0]
 800734e:	605a      	strne	r2, [r3, #4]
 8007350:	e7ec      	b.n	800732c <_malloc_r+0xa0>
 8007352:	4623      	mov	r3, r4
 8007354:	6864      	ldr	r4, [r4, #4]
 8007356:	e7b2      	b.n	80072be <_malloc_r+0x32>
 8007358:	4634      	mov	r4, r6
 800735a:	6876      	ldr	r6, [r6, #4]
 800735c:	e7b9      	b.n	80072d2 <_malloc_r+0x46>
 800735e:	230c      	movs	r3, #12
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	4638      	mov	r0, r7
 8007364:	f000 f84c 	bl	8007400 <__malloc_unlock>
 8007368:	e7a1      	b.n	80072ae <_malloc_r+0x22>
 800736a:	6025      	str	r5, [r4, #0]
 800736c:	e7de      	b.n	800732c <_malloc_r+0xa0>
 800736e:	bf00      	nop
 8007370:	2000053c 	.word	0x2000053c

08007374 <_realloc_r>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	4680      	mov	r8, r0
 800737a:	4614      	mov	r4, r2
 800737c:	460e      	mov	r6, r1
 800737e:	b921      	cbnz	r1, 800738a <_realloc_r+0x16>
 8007380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007384:	4611      	mov	r1, r2
 8007386:	f7ff bf81 	b.w	800728c <_malloc_r>
 800738a:	b92a      	cbnz	r2, 8007398 <_realloc_r+0x24>
 800738c:	f7ff ff12 	bl	80071b4 <_free_r>
 8007390:	4625      	mov	r5, r4
 8007392:	4628      	mov	r0, r5
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	f000 f838 	bl	800740c <_malloc_usable_size_r>
 800739c:	4284      	cmp	r4, r0
 800739e:	4607      	mov	r7, r0
 80073a0:	d802      	bhi.n	80073a8 <_realloc_r+0x34>
 80073a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073a6:	d812      	bhi.n	80073ce <_realloc_r+0x5a>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4640      	mov	r0, r8
 80073ac:	f7ff ff6e 	bl	800728c <_malloc_r>
 80073b0:	4605      	mov	r5, r0
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d0ed      	beq.n	8007392 <_realloc_r+0x1e>
 80073b6:	42bc      	cmp	r4, r7
 80073b8:	4622      	mov	r2, r4
 80073ba:	4631      	mov	r1, r6
 80073bc:	bf28      	it	cs
 80073be:	463a      	movcs	r2, r7
 80073c0:	f7ff fed0 	bl	8007164 <memcpy>
 80073c4:	4631      	mov	r1, r6
 80073c6:	4640      	mov	r0, r8
 80073c8:	f7ff fef4 	bl	80071b4 <_free_r>
 80073cc:	e7e1      	b.n	8007392 <_realloc_r+0x1e>
 80073ce:	4635      	mov	r5, r6
 80073d0:	e7df      	b.n	8007392 <_realloc_r+0x1e>
	...

080073d4 <_sbrk_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d06      	ldr	r5, [pc, #24]	; (80073f0 <_sbrk_r+0x1c>)
 80073d8:	2300      	movs	r3, #0
 80073da:	4604      	mov	r4, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	f7fb f914 	bl	800260c <_sbrk>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_sbrk_r+0x1a>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_sbrk_r+0x1a>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000544 	.word	0x20000544

080073f4 <__malloc_lock>:
 80073f4:	4801      	ldr	r0, [pc, #4]	; (80073fc <__malloc_lock+0x8>)
 80073f6:	f000 b811 	b.w	800741c <__retarget_lock_acquire_recursive>
 80073fa:	bf00      	nop
 80073fc:	20000548 	.word	0x20000548

08007400 <__malloc_unlock>:
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <__malloc_unlock+0x8>)
 8007402:	f000 b80c 	b.w	800741e <__retarget_lock_release_recursive>
 8007406:	bf00      	nop
 8007408:	20000548 	.word	0x20000548

0800740c <_malloc_usable_size_r>:
 800740c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007410:	1f18      	subs	r0, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfbc      	itt	lt
 8007416:	580b      	ldrlt	r3, [r1, r0]
 8007418:	18c0      	addlt	r0, r0, r3
 800741a:	4770      	bx	lr

0800741c <__retarget_lock_acquire_recursive>:
 800741c:	4770      	bx	lr

0800741e <__retarget_lock_release_recursive>:
 800741e:	4770      	bx	lr

08007420 <_init>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr

0800742c <_fini>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr
