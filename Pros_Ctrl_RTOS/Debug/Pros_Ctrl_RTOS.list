
Pros_Ctrl_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009614  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b4  080098b4  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098bc  080098bc  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  080098c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020134  2**0
                  CONTENTS
 10 .bss          0000442c  20000134  20000134  00020134  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004560  20004560  00020134  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197d2  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f1e  00000000  00000000  00039936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001388  00000000  00000000  0003ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026887  00000000  00000000  00040120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1e7  00000000  00000000  000669a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3ebc  00000000  00000000  00080b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164a4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b80  00000000  00000000  00164a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000134 	.word	0x20000134
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097ac 	.word	0x080097ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000138 	.word	0x20000138
 80001ec:	080097ac 	.word	0x080097ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b30:	f000 b974 	b.w	8000e1c <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468e      	mov	lr, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14d      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	d969      	bls.n	8000c34 <__udivmoddi4+0xe8>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b152      	cbz	r2, 8000b7c <__udivmoddi4+0x30>
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	f1c2 0120 	rsb	r1, r2, #32
 8000b6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b76:	ea41 0e03 	orr.w	lr, r1, r3
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	0c21      	lsrs	r1, r4, #16
 8000b82:	fbbe f6f8 	udiv	r6, lr, r8
 8000b86:	fa1f f78c 	uxth.w	r7, ip
 8000b8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b92:	fb06 f107 	mul.w	r1, r6, r7
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ba2:	f080 811f 	bcs.w	8000de4 <__udivmoddi4+0x298>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 811c 	bls.w	8000de4 <__udivmoddi4+0x298>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 f707 	mul.w	r7, r0, r7
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x92>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd0:	f080 810a 	bcs.w	8000de8 <__udivmoddi4+0x29c>
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	f240 8107 	bls.w	8000de8 <__udivmoddi4+0x29c>
 8000bda:	4464      	add	r4, ip
 8000bdc:	3802      	subs	r0, #2
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa4>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	f000 80ef 	beq.w	8000dde <__udivmoddi4+0x292>
 8000c00:	2600      	movs	r6, #0
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	4630      	mov	r0, r6
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	fab3 f683 	clz	r6, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d14a      	bne.n	8000cac <__udivmoddi4+0x160>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xd4>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 80f9 	bhi.w	8000e12 <__udivmoddi4+0x2c6>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb61 0303 	sbc.w	r3, r1, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	469e      	mov	lr, r3
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e0      	beq.n	8000bf0 <__udivmoddi4+0xa4>
 8000c2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c32:	e7dd      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000c34:	b902      	cbnz	r2, 8000c38 <__udivmoddi4+0xec>
 8000c36:	deff      	udf	#255	; 0xff
 8000c38:	fab2 f282 	clz	r2, r2
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f040 8092 	bne.w	8000d66 <__udivmoddi4+0x21a>
 8000c42:	eba1 010c 	sub.w	r1, r1, ip
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2601      	movs	r6, #1
 8000c50:	0c20      	lsrs	r0, r4, #16
 8000c52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c56:	fb07 1113 	mls	r1, r7, r3, r1
 8000c5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5e:	fb0e f003 	mul.w	r0, lr, r3
 8000c62:	4288      	cmp	r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x12c>
 8000c66:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x12a>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2c0>
 8000c76:	4643      	mov	r3, r8
 8000c78:	1a09      	subs	r1, r1, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c80:	fb07 1110 	mls	r1, r7, r0, r1
 8000c84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x156>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x154>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2ca>
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x9a>
 8000cac:	f1c6 0720 	rsb	r7, r6, #32
 8000cb0:	40b3      	lsls	r3, r6
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa20 f407 	lsr.w	r4, r0, r7
 8000cbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	40f9      	lsrs	r1, r7
 8000cc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cca:	fa00 f306 	lsl.w	r3, r0, r6
 8000cce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cd2:	0c20      	lsrs	r0, r4, #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b8>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2bc>
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2bc>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	458e      	cmp	lr, r1
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1e2>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2b4>
 8000d26:	458e      	cmp	lr, r1
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2b4>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4461      	add	r1, ip
 8000d2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d32:	fba0 9402 	umull	r9, r4, r0, r2
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	42a1      	cmp	r1, r4
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46a6      	mov	lr, r4
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x2a4>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x2a0>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x212>
 8000d46:	ebb3 0208 	subs.w	r2, r3, r8
 8000d4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d52:	fa22 f306 	lsr.w	r3, r2, r6
 8000d56:	40f1      	lsrs	r1, r6
 8000d58:	431f      	orrs	r7, r3
 8000d5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1c2 0320 	rsb	r3, r2, #32
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
 8000d74:	4091      	lsls	r1, r2
 8000d76:	4301      	orrs	r1, r0
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d84:	fb07 3610 	mls	r6, r7, r0, r3
 8000d88:	0c0b      	lsrs	r3, r1, #16
 8000d8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d92:	429e      	cmp	r6, r3
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x260>
 8000d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b8>
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b8>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	b289      	uxth	r1, r1
 8000db0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db4:	fb07 3316 	mls	r3, r7, r6, r3
 8000db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x28a>
 8000dc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000dd2:	3e02      	subs	r6, #2
 8000dd4:	4461      	add	r1, ip
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0x104>
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e705      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e3      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6f8      	b.n	8000bde <__udivmoddi4+0x92>
 8000dec:	454b      	cmp	r3, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f8>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f8>
 8000dfc:	4646      	mov	r6, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x28a>
 8000e00:	4620      	mov	r0, r4
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1e2>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x260>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b8>
 8000e0c:	3b02      	subs	r3, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x12c>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e709      	b.n	8000c2a <__udivmoddi4+0xde>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x156>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <debugPrint>:
#include "debug_uart.h"
#include "stdio.h"
#include "stdarg.h"
static char tempBuf[40];
extern UART_HandleTypeDef huart8;
void debugPrint(char *fmt,...){
 8000e20:	b40f      	push	{r0, r1, r2, r3}
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
	//可变长度参数
	va_list argp;
	uint32_t n = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
	// 以fmt为起始地址，获取第一个参数的首地址
	va_start(argp, fmt);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	603b      	str	r3, [r7, #0]
	n = vsprintf((char *) tempBuf, fmt, argp);
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	6939      	ldr	r1, [r7, #16]
 8000e36:	480c      	ldr	r0, [pc, #48]	; (8000e68 <debugPrint+0x48>)
 8000e38:	f008 f86e 	bl	8008f18 <vsiprintf>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	607b      	str	r3, [r7, #4]
	// argp置0
	va_end(argp);
	if (HAL_UART_Transmit(&huart8, (uint8_t *) tempBuf, n, 1000) != HAL_OK) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <debugPrint+0x48>)
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <debugPrint+0x4c>)
 8000e4c:	f004 fd01 	bl	8005852 <HAL_UART_Transmit>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <debugPrint+0x3a>
		/* Transfer error in transmission process */
		Error_Handler();
 8000e56:	f001 fb9b 	bl	8002590 <Error_Handler>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e64:	b004      	add	sp, #16
 8000e66:	4770      	bx	lr
 8000e68:	20000150 	.word	0x20000150
 8000e6c:	2000054c 	.word	0x2000054c

08000e70 <CAN_FilterConfig>:
static float vel_max = ERPM_TO_RADs(80000);
static float current_max = 20.0;
static float torque_max = 144.0;
static float accel_max = 30000;

void CAN_FilterConfig(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTERMODE_IDMASK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow  = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig)!=HAL_OK){
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <CAN_FilterConfig+0x5c>)
 8000e94:	f002 f912 	bl	80030bc <HAL_CAN_ConfigFilter>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <CAN_FilterConfig+0x32>
		Error_Handler();
 8000e9e:	f001 fb77 	bl	8002590 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan1)!=HAL_OK){
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <CAN_FilterConfig+0x5c>)
 8000ea4:	f002 f9ea 	bl	800327c <HAL_CAN_Start>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <CAN_FilterConfig+0x42>
		Error_Handler();
 8000eae:	f001 fb6f 	bl	8002590 <Error_Handler>
	}
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING)){
 8000eb2:	2112      	movs	r1, #18
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <CAN_FilterConfig+0x5c>)
 8000eb6:	f002 fc47 	bl	8003748 <HAL_CAN_ActivateNotification>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <CAN_FilterConfig+0x54>
		Error_Handler();
 8000ec0:	f001 fb66 	bl	8002590 <Error_Handler>
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000230 	.word	0x20000230

08000ed0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d107      	bne.n	8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxDataBuffer);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000ee8:	f002 fb1c 	bl	8003524 <HAL_CAN_GetRxMessage>
		motor_receive();
 8000eec:	f000 f884 	bl	8000ff8 <motor_receive>
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000230 	.word	0x20000230
 8000efc:	20000184 	.word	0x20000184
 8000f00:	200001a8 	.word	0x200001a8

08000f04 <CAN_SendMessage>:


void CAN_SendMessage(uint16_t id,uint8_t len){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	80fb      	strh	r3, [r7, #6]
 8000f10:	4613      	mov	r3, r2
 8000f12:	717b      	strb	r3, [r7, #5]
	txHeader.StdId = 0;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_EXT;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	609a      	str	r2, [r3, #8]
	txHeader.ExtId = id;
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f24:	6053      	str	r3, [r2, #4]
	txHeader.RTR = CAN_RTR_DATA;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
	if(len>8){
 8000f2c:	797b      	ldrb	r3, [r7, #5]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d901      	bls.n	8000f36 <CAN_SendMessage+0x32>
		len = 8;
 8000f32:	2308      	movs	r3, #8
 8000f34:	717b      	strb	r3, [r7, #5]
	}
	txHeader.DLC = len;
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f3a:	6113      	str	r3, [r2, #16]
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0){
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <CAN_SendMessage+0x5c>)
 8000f3e:	f002 fabc 	bl	80034ba <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <CAN_SendMessage+0x50>
		HAL_CAN_AddTxMessage(&hcan1, &txHeader, txDataBuffer, &txMailBox);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <CAN_SendMessage+0x60>)
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <CAN_SendMessage+0x64>)
 8000f4c:	4903      	ldr	r1, [pc, #12]	; (8000f5c <CAN_SendMessage+0x58>)
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <CAN_SendMessage+0x5c>)
 8000f50:	f002 f9d8 	bl	8003304 <HAL_CAN_AddTxMessage>
	}
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000190 	.word	0x20000190
 8000f60:	20000230 	.word	0x20000230
 8000f64:	200001c4 	.word	0x200001c4
 8000f68:	20000178 	.word	0x20000178

08000f6c <motor_init>:

void motor_init(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	motor_knee.device_id = 0x01;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <motor_init+0x7c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	801a      	strh	r2, [r3, #0]
	motor_ankle.device_id = 0x02;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <motor_init+0x80>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	801a      	strh	r2, [r3, #0]
	motor_knee.state = 0x01;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <motor_init+0x7c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	motor_ankle.state = 0x01;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <motor_init+0x80>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	can_set_pos_spd(motor_knee.device_id, 0,4,30000);
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <motor_init+0x7c>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000ff0 <motor_init+0x84>
 8000f98:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8000f9c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000ff4 <motor_init+0x88>
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f9c5 	bl	8001330 <can_set_pos_spd>
	can_set_pos_spd(motor_ankle.device_id,0,4,30000);
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <motor_init+0x80>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8000ff0 <motor_init+0x84>
 8000fb2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8000fb6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000ff4 <motor_init+0x88>
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f9b8 	bl	8001330 <can_set_pos_spd>
	HAL_Delay(2000);
 8000fc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc4:	f001 ff5a 	bl	8002e7c <HAL_Delay>
	can_set_origin(motor_knee.device_id);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <motor_init+0x7c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fac1 	bl	8001558 <can_set_origin>
	can_set_origin(motor_ankle.device_id);
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <motor_init+0x80>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 faba 	bl	8001558 <can_set_origin>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000030 	.word	0x20000030
 8000ff0:	46ea6000 	.word	0x46ea6000
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <motor_receive>:

void motor_receive(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	if(rxDataBuffer[7]!=0){
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <motor_receive+0x230>)
 8000ffe:	79db      	ldrb	r3, [r3, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <motor_receive+0x24>
		motor_knee.state = 0x00;
 8001004:	4b89      	ldr	r3, [pc, #548]	; (800122c <motor_receive+0x234>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		motor_ankle.state = 0x00;
 800100c:	4b88      	ldr	r3, [pc, #544]	; (8001230 <motor_receive+0x238>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		debugPrint("ERROR");
 8001014:	4887      	ldr	r0, [pc, #540]	; (8001234 <motor_receive+0x23c>)
 8001016:	f7ff ff03 	bl	8000e20 <debugPrint>
			motor_ankle.cur_actual = (float)(cur_int*0.01f);
			motor_ankle.temperature = (float)temp_int;
		}
		Motor_UpdateMessages();
	}
}
 800101a:	e0fe      	b.n	800121a <motor_receive+0x222>
		pos_int = (rxDataBuffer[0]<<8)|rxDataBuffer[1];
 800101c:	4b82      	ldr	r3, [pc, #520]	; (8001228 <motor_receive+0x230>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b80      	ldr	r3, [pc, #512]	; (8001228 <motor_receive+0x230>)
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b82      	ldr	r3, [pc, #520]	; (8001238 <motor_receive+0x240>)
 8001030:	801a      	strh	r2, [r3, #0]
		vel_int = (rxDataBuffer[2]<<8)|rxDataBuffer[3];
 8001032:	4b7d      	ldr	r3, [pc, #500]	; (8001228 <motor_receive+0x230>)
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <motor_receive+0x230>)
 800103c:	78db      	ldrb	r3, [r3, #3]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b7d      	ldr	r3, [pc, #500]	; (800123c <motor_receive+0x244>)
 8001046:	801a      	strh	r2, [r3, #0]
		cur_int = (rxDataBuffer[4]<<8)|rxDataBuffer[5];
 8001048:	4b77      	ldr	r3, [pc, #476]	; (8001228 <motor_receive+0x230>)
 800104a:	791b      	ldrb	r3, [r3, #4]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b75      	ldr	r3, [pc, #468]	; (8001228 <motor_receive+0x230>)
 8001052:	795b      	ldrb	r3, [r3, #5]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <motor_receive+0x248>)
 800105c:	801a      	strh	r2, [r3, #0]
		temp_int = rxDataBuffer[6];
 800105e:	4b72      	ldr	r3, [pc, #456]	; (8001228 <motor_receive+0x230>)
 8001060:	799b      	ldrb	r3, [r3, #6]
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b77      	ldr	r3, [pc, #476]	; (8001244 <motor_receive+0x24c>)
 8001066:	801a      	strh	r2, [r3, #0]
		if(rxHeader.StdId==motor_knee.device_id+0x2900){
 8001068:	4b77      	ldr	r3, [pc, #476]	; (8001248 <motor_receive+0x250>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a6f      	ldr	r2, [pc, #444]	; (800122c <motor_receive+0x234>)
 800106e:	8812      	ldrh	r2, [r2, #0]
 8001070:	b292      	uxth	r2, r2
 8001072:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 8001076:	4293      	cmp	r3, r2
 8001078:	d162      	bne.n	8001140 <motor_receive+0x148>
			motor_knee.pos_actual = (float)(pos_int*0.1f);
 800107a:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <motor_receive+0x240>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800124c <motor_receive+0x254>
 800108c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001090:	4b66      	ldr	r3, [pc, #408]	; (800122c <motor_receive+0x234>)
 8001092:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_knee.vel_actual = (float)(vel_int*10.0f);
 8001096:	4b69      	ldr	r3, [pc, #420]	; (800123c <motor_receive+0x244>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	4b5f      	ldr	r3, [pc, #380]	; (800122c <motor_receive+0x234>)
 80010ae:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_knee.vel_actual = ERPM_TO_RADs(motor_knee.vel_actual);
 80010b2:	4b5e      	ldr	r3, [pc, #376]	; (800122c <motor_receive+0x234>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4e 	bl	8000558 <__aeabi_f2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b63      	ldr	r3, [pc, #396]	; (8001250 <motor_receive+0x258>)
 80010c2:	f7ff fbcb 	bl	800085c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b60      	ldr	r3, [pc, #384]	; (8001254 <motor_receive+0x25c>)
 80010d4:	f7ff fbc2 	bl	800085c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	a34f      	add	r3, pc, #316	; (adr r3, 8001220 <motor_receive+0x228>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fa8f 	bl	8000608 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <motor_receive+0x260>)
 80010f8:	f7ff fbb0 	bl	800085c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fcba 	bl	8000a7c <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	4a48      	ldr	r2, [pc, #288]	; (800122c <motor_receive+0x234>)
 800110c:	6093      	str	r3, [r2, #8]
			motor_knee.cur_actual = (float)(cur_int*0.01f);
 800110e:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <motor_receive+0x248>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800125c <motor_receive+0x264>
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <motor_receive+0x234>)
 8001126:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_knee.temperature = (float)temp_int;
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <motor_receive+0x24c>)
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <motor_receive+0x234>)
 800113a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 800113e:	e06a      	b.n	8001216 <motor_receive+0x21e>
		}else if (rxHeader.StdId==motor_ankle.device_id+0x2900){
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <motor_receive+0x250>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <motor_receive+0x238>)
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	b292      	uxth	r2, r2
 800114a:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 800114e:	4293      	cmp	r3, r2
 8001150:	d161      	bne.n	8001216 <motor_receive+0x21e>
			motor_ankle.pos_actual = (float)(pos_int*0.1f);
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <motor_receive+0x240>)
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800124c <motor_receive+0x254>
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <motor_receive+0x238>)
 800116a:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_ankle.vel_actual = (float)(vel_int*10.0f);
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <motor_receive+0x244>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <motor_receive+0x238>)
 8001186:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_ankle.vel_actual = ERPM_TO_RADs(motor_ankle.vel_actual);
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <motor_receive+0x238>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9e2 	bl	8000558 <__aeabi_f2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <motor_receive+0x258>)
 800119a:	f7ff fb5f 	bl	800085c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <motor_receive+0x25c>)
 80011ac:	f7ff fb56 	bl	800085c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	a319      	add	r3, pc, #100	; (adr r3, 8001220 <motor_receive+0x228>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa23 	bl	8000608 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <motor_receive+0x260>)
 80011d0:	f7ff fb44 	bl	800085c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc4e 	bl	8000a7c <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <motor_receive+0x238>)
 80011e4:	6093      	str	r3, [r2, #8]
			motor_ankle.cur_actual = (float)(cur_int*0.01f);
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <motor_receive+0x248>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800125c <motor_receive+0x264>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <motor_receive+0x238>)
 80011fe:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_ankle.temperature = (float)temp_int;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <motor_receive+0x24c>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <motor_receive+0x238>)
 8001212:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		Motor_UpdateMessages();
 8001216:	f000 f9bd 	bl	8001594 <Motor_UpdateMessages>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	54442eea 	.word	0x54442eea
 8001224:	400921fb 	.word	0x400921fb
 8001228:	20000184 	.word	0x20000184
 800122c:	20000000 	.word	0x20000000
 8001230:	20000030 	.word	0x20000030
 8001234:	080097c4 	.word	0x080097c4
 8001238:	200001cc 	.word	0x200001cc
 800123c:	200001ce 	.word	0x200001ce
 8001240:	200001d0 	.word	0x200001d0
 8001244:	200001d2 	.word	0x200001d2
 8001248:	200001a8 	.word	0x200001a8
 800124c:	3dcccccd 	.word	0x3dcccccd
 8001250:	40350000 	.word	0x40350000
 8001254:	40500000 	.word	0x40500000
 8001258:	403e0000 	.word	0x403e0000
 800125c:	3c23d70a 	.word	0x3c23d70a

08001260 <buffer_append_int32>:


void buffer_append_int32(uint8_t* buffer, int32_t number, uint8_t *index) {
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1619      	asrs	r1, r3, #24
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	b2d0      	uxtb	r0, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	7010      	strb	r0, [r2, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1419      	asrs	r1, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	b2d0      	uxtb	r0, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	7010      	strb	r0, [r2, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	b2ca      	uxtb	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1219      	asrs	r1, r3, #8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	b2d0      	uxtb	r0, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	7010      	strb	r0, [r2, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	b2d1      	uxtb	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	7011      	strb	r1, [r2, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <buffer_append_int16>:
void buffer_append_int16(uint8_t* buffer, int16_t number, uint8_t *index) {
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	460b      	mov	r3, r1
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	817b      	strh	r3, [r7, #10]
	buffer[(*index)++] = number >> 8;
 80012ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f0:	121b      	asrs	r3, r3, #8
 80012f2:	b219      	sxth	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	b2d0      	uxtb	r0, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	7010      	strb	r0, [r2, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	b2d1      	uxtb	r1, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	7011      	strb	r1, [r2, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	897a      	ldrh	r2, [r7, #10]
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <can_set_pos_spd>:
	buffer_append_int32(txDataBuffer, (int32_t)(current * 1000.0), &send_idx);
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_CURRENT<<8);
	CAN_SendMessage(msg_ext_id,send_idx);
}

void can_set_pos_spd(uint8_t controller_id, float pos,float vel,float accel ){
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	; 0x40
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	ed87 0a02 	vstr	s0, [r7, #8]
 800133c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001340:	ed87 1a00 	vstr	s2, [r7]
 8001344:	73fb      	strb	r3, [r7, #15]
	send_idx = 0;
 8001346:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <can_set_pos_spd+0x200>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
	pos = MAX(MIN(pos, pos_max),-pos_max);
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001350:	4b78      	ldr	r3, [pc, #480]	; (8001534 <can_set_pos_spd+0x204>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
 8001356:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800135a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800135e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d501      	bpl.n	800136c <can_set_pos_spd+0x3c>
 8001368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136a:	e000      	b.n	800136e <can_set_pos_spd+0x3e>
 800136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
 8001370:	4b70      	ldr	r3, [pc, #448]	; (8001534 <can_set_pos_spd+0x204>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eef1 7a67 	vneg.f32	s15, s15
 800137a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800137e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001382:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dd01      	ble.n	8001394 <can_set_pos_spd+0x64>
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	e000      	b.n	8001396 <can_set_pos_spd+0x66>
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	60bb      	str	r3, [r7, #8]
	buffer_append_int32(txDataBuffer, (int32_t)(pos * 10000.0), &send_idx);
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff f8dd 	bl	8000558 <__aeabi_f2d>
 800139e:	a360      	add	r3, pc, #384	; (adr r3, 8001520 <can_set_pos_spd+0x1f0>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff f930 	bl	8000608 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fb3c 	bl	8000a2c <__aeabi_d2iz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <can_set_pos_spd+0x200>)
 80013b8:	4619      	mov	r1, r3
 80013ba:	485f      	ldr	r0, [pc, #380]	; (8001538 <can_set_pos_spd+0x208>)
 80013bc:	f7ff ff50 	bl	8001260 <buffer_append_int32>
	vel = MAX(MIN(vel,vel_max),-vel_max);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c4:	4b5d      	ldr	r3, [pc, #372]	; (800153c <can_set_pos_spd+0x20c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d501      	bpl.n	80013e0 <can_set_pos_spd+0xb0>
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	e000      	b.n	80013e2 <can_set_pos_spd+0xb2>
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	4b55      	ldr	r3, [pc, #340]	; (800153c <can_set_pos_spd+0x20c>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eef1 7a67 	vneg.f32	s15, s15
 80013ee:	edc7 7a08 	vstr	s15, [r7, #32]
 80013f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dd01      	ble.n	8001408 <can_set_pos_spd+0xd8>
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	e000      	b.n	800140a <can_set_pos_spd+0xda>
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	607b      	str	r3, [r7, #4]
	vel = RADs_TO_ERPM(vel);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f8a3 	bl	8000558 <__aeabi_f2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <can_set_pos_spd+0x210>)
 8001418:	f7ff f8f6 	bl	8000608 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	a340      	add	r3, pc, #256	; (adr r3, 8001528 <can_set_pos_spd+0x1f8>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff fa17 	bl	800085c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b42      	ldr	r3, [pc, #264]	; (8001544 <can_set_pos_spd+0x214>)
 800143c:	f7ff f8e4 	bl	8000608 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <can_set_pos_spd+0x218>)
 800144e:	f7ff f8db 	bl	8000608 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb0f 	bl	8000a7c <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	607b      	str	r3, [r7, #4]
	buffer_append_int16(txDataBuffer,(int16_t)(vel/10.0), & send_idx);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff f878 	bl	8000558 <__aeabi_f2d>
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <can_set_pos_spd+0x21c>)
 800146e:	f7ff f9f5 	bl	800085c <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fad7 	bl	8000a2c <__aeabi_d2iz>
 800147e:	4603      	mov	r3, r0
 8001480:	b21b      	sxth	r3, r3
 8001482:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <can_set_pos_spd+0x200>)
 8001484:	4619      	mov	r1, r3
 8001486:	482c      	ldr	r0, [pc, #176]	; (8001538 <can_set_pos_spd+0x208>)
 8001488:	f7ff ff29 	bl	80012de <buffer_append_int16>
	accel = MAX(MIN(accel,accel_max),0);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <can_set_pos_spd+0x220>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	ed97 7a07 	vldr	s14, [r7, #28]
 800149a:	edd7 7a06 	vldr	s15, [r7, #24]
 800149e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d501      	bpl.n	80014ac <can_set_pos_spd+0x17c>
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	e000      	b.n	80014ae <can_set_pos_spd+0x17e>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed97 7a05 	vldr	s14, [r7, #20]
 80014c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	dd02      	ble.n	80014d2 <can_set_pos_spd+0x1a2>
 80014cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d0:	e004      	b.n	80014dc <can_set_pos_spd+0x1ac>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	edc7 7a00 	vstr	s15, [r7]
	buffer_append_int16(txDataBuffer,(int16_t)accel, & send_idx);
 80014e0:	edd7 7a00 	vldr	s15, [r7]
 80014e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e8:	ee17 3a90 	vmov	r3, s15
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <can_set_pos_spd+0x200>)
 80014f0:	4619      	mov	r1, r3
 80014f2:	4811      	ldr	r0, [pc, #68]	; (8001538 <can_set_pos_spd+0x208>)
 80014f4:	f7ff fef3 	bl	80012de <buffer_append_int16>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_POS_SPD<<8);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <can_set_pos_spd+0x224>)
 8001504:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <can_set_pos_spd+0x224>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <can_set_pos_spd+0x200>)
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fcf7 	bl	8000f04 <CAN_SendMessage>
}
 8001516:	bf00      	nop
 8001518:	3740      	adds	r7, #64	; 0x40
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	00000000 	.word	0x00000000
 8001524:	40c38800 	.word	0x40c38800
 8001528:	54442eea 	.word	0x54442eea
 800152c:	400921fb 	.word	0x400921fb
 8001530:	200001c8 	.word	0x200001c8
 8001534:	20000080 	.word	0x20000080
 8001538:	20000178 	.word	0x20000178
 800153c:	20000084 	.word	0x20000084
 8001540:	403e0000 	.word	0x403e0000
 8001544:	40350000 	.word	0x40350000
 8001548:	40500000 	.word	0x40500000
 800154c:	40240000 	.word	0x40240000
 8001550:	20000088 	.word	0x20000088
 8001554:	200001ca 	.word	0x200001ca

08001558 <can_set_origin>:

void can_set_origin(uint8_t controller_id) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_ORIGIN_HERE<<8);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	b29b      	uxth	r3, r3
 8001566:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <can_set_origin+0x34>)
 800156e:	801a      	strh	r2, [r3, #0]
	txDataBuffer[0] = 0x01;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <can_set_origin+0x38>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,1);
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <can_set_origin+0x34>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fcc1 	bl	8000f04 <CAN_SendMessage>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001ca 	.word	0x200001ca
 8001590:	20000178 	.word	0x20000178

08001594 <Motor_UpdateMessages>:
	buffer_append_int32(txDataBuffer,(int32_t)(vel), &send_idx);
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_RPM<<8);
	CAN_SendMessage(msg_ext_id,send_idx);
}

void Motor_UpdateMessages(){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
	m2p_motor.head = 0x01;
 800159a:	4b7a      	ldr	r3, [pc, #488]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
	uint16_t temp1 = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	80fb      	strh	r3, [r7, #6]
	uint16_t temp2 = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	80bb      	strh	r3, [r7, #4]
	temp1 = (uint16_t)(motor_knee.pos_actual*k_float2int12+b_float2int12);
 80015a8:	4b77      	ldr	r3, [pc, #476]	; (8001788 <Motor_UpdateMessages+0x1f4>)
 80015aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80015ae:	4b77      	ldr	r3, [pc, #476]	; (800178c <Motor_UpdateMessages+0x1f8>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b8:	4b75      	ldr	r3, [pc, #468]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c6:	ee17 3a90 	vmov	r3, s15
 80015ca:	80fb      	strh	r3, [r7, #6]
	temp2 = (uint16_t)(motor_knee.vel_actual*k_float2int12+b_float2int12);
 80015cc:	4b6e      	ldr	r3, [pc, #440]	; (8001788 <Motor_UpdateMessages+0x1f4>)
 80015ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80015d2:	4b6e      	ldr	r3, [pc, #440]	; (800178c <Motor_UpdateMessages+0x1f8>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015dc:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ea:	ee17 3a90 	vmov	r3, s15
 80015ee:	80bb      	strh	r3, [r7, #4]
	m2p_motor.value1 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b5e      	ldr	r3, [pc, #376]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 800160c:	805a      	strh	r2, [r3, #2]

	temp1 = (uint16_t)(motor_ankle.pos_actual*k_float2int12+b_float2int12);
 800160e:	4b61      	ldr	r3, [pc, #388]	; (8001794 <Motor_UpdateMessages+0x200>)
 8001610:	ed93 7a01 	vldr	s14, [r3, #4]
 8001614:	4b5d      	ldr	r3, [pc, #372]	; (800178c <Motor_UpdateMessages+0x1f8>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800162c:	ee17 3a90 	vmov	r3, s15
 8001630:	80fb      	strh	r3, [r7, #6]
	m2p_motor.value2 = (uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	b29b      	uxth	r3, r3
 800163e:	b21b      	sxth	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b4e      	ldr	r3, [pc, #312]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 800164c:	809a      	strh	r2, [r3, #4]

	temp2 = (uint16_t)(motor_ankle.vel_actual*k_float2int12+b_float2int12);
 800164e:	4b51      	ldr	r3, [pc, #324]	; (8001794 <Motor_UpdateMessages+0x200>)
 8001650:	ed93 7a02 	vldr	s14, [r3, #8]
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <Motor_UpdateMessages+0x1f8>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166c:	ee17 3a90 	vmov	r3, s15
 8001670:	80bb      	strh	r3, [r7, #4]
	m2p_motor.value3 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	b21a      	sxth	r2, r3
 8001678:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21b      	sxth	r3, r3
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 800168a:	80da      	strh	r2, [r3, #6]

	temp1 = (uint16_t)(motor_knee.cur_actual*k_float2int12+b_float2int12);
 800168c:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <Motor_UpdateMessages+0x1f4>)
 800168e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <Motor_UpdateMessages+0x1f8>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169c:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016aa:	ee17 3a90 	vmov	r3, s15
 80016ae:	80fb      	strh	r3, [r7, #6]
	temp2 = (uint16_t)(motor_ankle.cur_actual*k_float2int12+b_float2int12);
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <Motor_UpdateMessages+0x200>)
 80016b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80016b6:	4b35      	ldr	r3, [pc, #212]	; (800178c <Motor_UpdateMessages+0x1f8>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ce:	ee17 3a90 	vmov	r3, s15
 80016d2:	80bb      	strh	r3, [r7, #4]
	m2p_motor.value4 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	b21a      	sxth	r2, r3
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 80016f0:	811a      	strh	r2, [r3, #8]

	temp1 = (uint16_t)(motor_knee.temperature*k_float2int12+b_float2int12);
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <Motor_UpdateMessages+0x1f4>)
 80016f4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <Motor_UpdateMessages+0x1f8>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001710:	ee17 3a90 	vmov	r3, s15
 8001714:	80fb      	strh	r3, [r7, #6]
	m2p_motor.value5  =(uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	b29b      	uxth	r3, r3
 8001722:	b21b      	sxth	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21b      	sxth	r3, r3
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 8001730:	815a      	strh	r2, [r3, #10]

	temp2 = (uint16_t)(motor_ankle.temperature*k_float2int12+b_float2int12);
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <Motor_UpdateMessages+0x200>)
 8001734:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <Motor_UpdateMessages+0x1f8>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <Motor_UpdateMessages+0x1fc>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001750:	ee17 3a90 	vmov	r3, s15
 8001754:	80bb      	strh	r3, [r7, #4]
	m2p_motor.value6 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	031b      	lsls	r3, r3, #12
 800175a:	b21a      	sxth	r2, r3
 800175c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001764:	b21b      	sxth	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b21b      	sxth	r3, r3
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 800176e:	819a      	strh	r2, [r3, #12]
	m2p_motor.head = 0xFC;
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <Motor_UpdateMessages+0x1f0>)
 8001772:	22fc      	movs	r2, #252	; 0xfc
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000060 	.word	0x20000060
 8001788:	20000000 	.word	0x20000000
 800178c:	20000094 	.word	0x20000094
 8001790:	20000098 	.word	0x20000098
 8001794:	20000030 	.word	0x20000030

08001798 <Motor_Debug_CMDUnpack>:
				can_set_current(motor_ankle.device_id, motor_ankle.cur_desired);
			}else{}
		}else{}//end p2m_motor.id
	}else{}//end p2m_motor.head
}
void Motor_Debug_CMDUnpack(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	uint16_t temp;
		if(p2m_motor.head==0xFC){
 800179e:	4b90      	ldr	r3, [pc, #576]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2bfc      	cmp	r3, #252	; 0xfc
 80017a6:	f040 826e 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
			if(p2m_motor.id==CMD_QUICK_STOP){
 80017aa:	4b8d      	ldr	r3, [pc, #564]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 80017ac:	789b      	ldrb	r3, [r3, #2]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d118      	bne.n	80017e6 <Motor_Debug_CMDUnpack+0x4e>
				motor_knee.state = 0x00;
 80017b4:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				motor_ankle.state = 0x00;
 80017bc:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				motor_knee.pos_actual = 0;
 80017c4:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
				motor_ankle.pos_actual = 0;
 80017cc:	4b86      	ldr	r3, [pc, #536]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
				motor_knee.vel_actual = 0;
 80017d4:	4b83      	ldr	r3, [pc, #524]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
				motor_ankle.vel_actual =0;
 80017dc:	4b82      	ldr	r3, [pc, #520]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	e24f      	b.n	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
			}else if(p2m_motor.id==CMD_POSITION_CTRL){
 80017e6:	4b7e      	ldr	r3, [pc, #504]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d13e      	bne.n	800186e <Motor_Debug_CMDUnpack+0xd6>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80017f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	f040 8244 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 8001800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b01      	cmp	r3, #1
 8001808:	f040 823d 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.pos_desired = (float)((p2m_motor.value1-b_float2int16)/k_float2int16);
 800180c:	4b74      	ldr	r3, [pc, #464]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	b29b      	uxth	r3, r3
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181a:	4b74      	ldr	r3, [pc, #464]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001824:	4b72      	ldr	r3, [pc, #456]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 8001826:	ed93 7a00 	vldr	s14, [r3]
 800182a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182e:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 8001830:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_ankle.pos_desired = (float)((p2m_motor.value2-b_float2int16)/k_float2int16);
 8001834:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 8001836:	88db      	ldrh	r3, [r3, #6]
 8001838:	b29b      	uxth	r3, r3
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001842:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee77 6a67 	vsub.f32	s13, s14, s15
 800184c:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001856:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 8001858:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_knee.pos_actual = motor_knee.pos_desired;
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	4a60      	ldr	r2, [pc, #384]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 8001862:	6053      	str	r3, [r2, #4]
					motor_ankle.pos_actual = motor_ankle.pos_desired;
 8001864:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a5f      	ldr	r2, [pc, #380]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 800186a:	6053      	str	r3, [r2, #4]
 800186c:	e20b      	b.n	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
				}else{}
			}else if(p2m_motor.id==CMD_VELOCITY_CTRL){
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 8001870:	789b      	ldrb	r3, [r3, #2]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d13e      	bne.n	80018f6 <Motor_Debug_CMDUnpack+0x15e>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001878:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 800187a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	f040 8200 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 8001888:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 81f9 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.vel_desired = (float)((p2m_motor.value1-b_float2int16)/k_float2int16);
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 8001896:	889b      	ldrh	r3, [r3, #4]
 8001898:	b29b      	uxth	r3, r3
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a2:	4b52      	ldr	r3, [pc, #328]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b6:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80018b8:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_ankle.vel_desired = (float)((p2m_motor.value2-b_float2int16)/k_float2int16);
 80018bc:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 80018be:	88db      	ldrh	r3, [r3, #6]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ca:	4b48      	ldr	r3, [pc, #288]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018d4:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80018e0:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_knee.vel_actual = motor_knee.vel_desired;
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	4a3e      	ldr	r2, [pc, #248]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80018ea:	6093      	str	r3, [r2, #8]
					motor_ankle.vel_actual = motor_ankle.vel_desired;
 80018ec:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80018f2:	6093      	str	r3, [r2, #8]
 80018f4:	e1c7      	b.n	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
				}else{}
			}else if(p2m_motor.id==CMD_POSITION_AND_VELOCITY){
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d179      	bne.n	80019f4 <Motor_Debug_CMDUnpack+0x25c>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001900:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 8001902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 81bc 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 8001910:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	f040 81b5 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.pos_desired = (float)((p2m_motor.value1-b_float2int16)/k_float2int16);
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 800191e:	889b      	ldrh	r3, [r3, #4]
 8001920:	b29b      	uxth	r3, r3
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 8001936:	ed93 7a00 	vldr	s14, [r3]
 800193a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 8001940:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_knee.vel_desired = (float)((p2m_motor.value2-b_float2int16)/k_float2int16);
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 8001946:	88db      	ldrh	r3, [r3, #6]
 8001948:	b29b      	uxth	r3, r3
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ee77 6a67 	vsub.f32	s13, s14, s15
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 800195e:	ed93 7a00 	vldr	s14, [r3]
 8001962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 8001968:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_ankle.pos_desired = (float)((p2m_motor.value3-b_float2int16)/k_float2int16);
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 800196e:	891b      	ldrh	r3, [r3, #8]
 8001970:	b29b      	uxth	r3, r3
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 8001990:	edc3 7a04 	vstr	s15, [r3, #16]
					motor_ankle.vel_desired = (float)((p2m_motor.value4-b_float2int16)/k_float2int16);
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <Motor_Debug_CMDUnpack+0x248>)
 8001996:	895b      	ldrh	r3, [r3, #10]
 8001998:	b29b      	uxth	r3, r3
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <Motor_Debug_CMDUnpack+0x254>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <Motor_Debug_CMDUnpack+0x258>)
 80019ae:	ed93 7a00 	vldr	s14, [r3]
 80019b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80019b8:	edc3 7a05 	vstr	s15, [r3, #20]
					motor_knee.pos_actual = motor_knee.pos_desired;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80019c2:	6053      	str	r3, [r2, #4]
					motor_ankle.pos_actual = motor_ankle.pos_desired;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80019ca:	6053      	str	r3, [r2, #4]
					motor_knee.vel_actual = motor_knee.vel_desired;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <Motor_Debug_CMDUnpack+0x24c>)
 80019d2:	6093      	str	r3, [r2, #8]
					motor_ankle.vel_actual = motor_ankle.vel_desired;
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <Motor_Debug_CMDUnpack+0x250>)
 80019da:	6093      	str	r3, [r2, #8]
 80019dc:	e153      	b.n	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
 80019de:	bf00      	nop
 80019e0:	20000070 	.word	0x20000070
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000030 	.word	0x20000030
 80019ec:	20000090 	.word	0x20000090
 80019f0:	2000008c 	.word	0x2000008c
				}else{}
			}else if(p2m_motor.id==CMD_TORQUE_CTRL){
 80019f4:	4ba7      	ldr	r3, [pc, #668]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 80019f6:	789b      	ldrb	r3, [r3, #2]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d13e      	bne.n	8001a7c <Motor_Debug_CMDUnpack+0x2e4>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 80019fe:	4ba6      	ldr	r3, [pc, #664]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001a00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	f040 813d 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
 8001a0c:	4ba3      	ldr	r3, [pc, #652]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001a0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 8136 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
					motor_knee.cur_desired = (float)((p2m_motor.value1-b_float2int16)/k_float2int16);
 8001a1a:	4b9e      	ldr	r3, [pc, #632]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a28:	4b9d      	ldr	r3, [pc, #628]	; (8001ca0 <Motor_Debug_CMDUnpack+0x508>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a32:	4b9c      	ldr	r3, [pc, #624]	; (8001ca4 <Motor_Debug_CMDUnpack+0x50c>)
 8001a34:	ed93 7a00 	vldr	s14, [r3]
 8001a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3c:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001a3e:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_ankle.cur_desired = (float)((p2m_motor.value2-b_float2int16)/k_float2int16);
 8001a42:	4b94      	ldr	r3, [pc, #592]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001a44:	88db      	ldrh	r3, [r3, #6]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a50:	4b93      	ldr	r3, [pc, #588]	; (8001ca0 <Motor_Debug_CMDUnpack+0x508>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a5a:	4b92      	ldr	r3, [pc, #584]	; (8001ca4 <Motor_Debug_CMDUnpack+0x50c>)
 8001a5c:	ed93 7a00 	vldr	s14, [r3]
 8001a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a64:	4b8d      	ldr	r3, [pc, #564]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001a66:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_knee.cur_actual = motor_knee.cur_desired;
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a8a      	ldr	r2, [pc, #552]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001a70:	60d3      	str	r3, [r2, #12]
					motor_ankle.cur_actual = motor_ankle.cur_desired;
 8001a72:	4b8a      	ldr	r3, [pc, #552]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a89      	ldr	r2, [pc, #548]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001a78:	60d3      	str	r3, [r2, #12]
 8001a7a:	e104      	b.n	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
				}else{}
			}else if(p2m_motor.id==CMD_IMPEDANCE){
 8001a7c:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001a7e:	789b      	ldrb	r3, [r3, #2]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	f040 80ff 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
				if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001a88:	4b83      	ldr	r3, [pc, #524]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001a8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	f040 80f8 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
 8001a96:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001a98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f040 80f1 	bne.w	8001c86 <Motor_Debug_CMDUnpack+0x4ee>
					temp = (uint16_t)(p2m_motor.value1>>4&0xfff);
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	80fb      	strh	r3, [r7, #6]
					motor_knee.Kp =(float) (temp-b_float2int12)/k_float2int12;
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <Motor_Debug_CMDUnpack+0x510>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ac8:	4b78      	ldr	r3, [pc, #480]	; (8001cac <Motor_Debug_CMDUnpack+0x514>)
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad2:	4b71      	ldr	r3, [pc, #452]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001ad4:	edc3 7a07 	vstr	s15, [r3, #28]
					temp = (uint16_t)((p2m_motor.value1&0xf<<8)|(p2m_motor.value2>>8&0xff));
 8001ad8:	4b6e      	ldr	r3, [pc, #440]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001ada:	889b      	ldrh	r3, [r3, #4]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ae4:	b21a      	sxth	r2, r3
 8001ae6:	4b6b      	ldr	r3, [pc, #428]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001ae8:	88db      	ldrh	r3, [r3, #6]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	80fb      	strh	r3, [r7, #6]
					motor_ankle.Kp = (float) (temp-b_float2int12)/k_float2int12;
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <Motor_Debug_CMDUnpack+0x510>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <Motor_Debug_CMDUnpack+0x514>)
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1a:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001b1c:	edc3 7a07 	vstr	s15, [r3, #28]
					temp = (uint16_t)((p2m_motor.value2&0xff<<4)|(p2m_motor.value3>>12&0xf));
 8001b20:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001b22:	88db      	ldrh	r3, [r3, #6]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001b30:	891b      	ldrh	r3, [r3, #8]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	0b1b      	lsrs	r3, r3, #12
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	80fb      	strh	r3, [r7, #6]
					motor_knee.Kb = (float) (temp-b_float2int12)/k_float2int12;
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b50:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <Motor_Debug_CMDUnpack+0x510>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <Motor_Debug_CMDUnpack+0x514>)
 8001b5c:	ed93 7a00 	vldr	s14, [r3]
 8001b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001b66:	edc3 7a08 	vstr	s15, [r3, #32]
					temp = (uint16_t)(p2m_motor.value3&0xfff);
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001b6c:	891b      	ldrh	r3, [r3, #8]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b74:	80fb      	strh	r3, [r7, #6]
					motor_ankle.Kb = (float) (temp-b_float2int12)/k_float2int12;
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b80:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <Motor_Debug_CMDUnpack+0x510>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <Motor_Debug_CMDUnpack+0x514>)
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b94:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001b96:	edc3 7a08 	vstr	s15, [r3, #32]
					temp = (uint16_t)(p2m_motor.value4>>4&0xfff);
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001b9c:	895b      	ldrh	r3, [r3, #10]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba8:	80fb      	strh	r3, [r7, #6]
					motor_knee.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <Motor_Debug_CMDUnpack+0x510>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <Motor_Debug_CMDUnpack+0x514>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001bca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					temp = (uint16_t)((p2m_motor.value4&0xf<<8)|(p2m_motor.ext_value));
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001bd0:	895b      	ldrh	r3, [r3, #10]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <Motor_Debug_CMDUnpack+0x4fc>)
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	80fb      	strh	r3, [r7, #6]
					motor_ankle.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <Motor_Debug_CMDUnpack+0x510>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <Motor_Debug_CMDUnpack+0x514>)
 8001c00:	ed93 7a00 	vldr	s14, [r3]
 8001c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c0a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					motor_knee.cur_desired = motor_knee.Kp*(motor_knee.pos_actual-motor_knee.Angle_eq)+motor_knee.Kb*motor_knee.vel_actual;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c10:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c16:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c1c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c2a:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c3e:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_ankle.cur_desired = motor_ankle.Kp*(motor_ankle.pos_actual-motor_ankle.Angle_eq)+motor_ankle.Kb*motor_ankle.vel_actual;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c44:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c50:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c5e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c72:	edc3 7a06 	vstr	s15, [r3, #24]
					motor_knee.cur_actual = motor_knee.cur_desired;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <Motor_Debug_CMDUnpack+0x500>)
 8001c7c:	60d3      	str	r3, [r2, #12]
					motor_ankle.cur_actual = motor_ankle.cur_desired;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <Motor_Debug_CMDUnpack+0x504>)
 8001c84:	60d3      	str	r3, [r2, #12]
				}else{}
			}else{}//end p2m_motor.id
		}else{}//end p2m_motor.head
		Motor_UpdateMessages();
 8001c86:	f7ff fc85 	bl	8001594 <Motor_UpdateMessages>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000070 	.word	0x20000070
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000030 	.word	0x20000030
 8001ca0:	20000090 	.word	0x20000090
 8001ca4:	2000008c 	.word	0x2000008c
 8001ca8:	20000098 	.word	0x20000098
 8001cac:	20000094 	.word	0x20000094

08001cb0 <m2pmsg_memcpy>:
float b_float2int12 = 2110;

void p2mmsg_memcpy(uint8_t* buffer,volatile P2M p2m){
	//TODO
}
void m2pmsg_memcpy(uint8_t* buffer,volatile M2P m2p){
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	f107 0014 	add.w	r0, r7, #20
 8001cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	buffer[0] = m2p.head;
 8001cc2:	7d3b      	ldrb	r3, [r7, #20]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	701a      	strb	r2, [r3, #0]
	buffer[1] = m2p.value1>>8&0xff;
 8001cca:	8afb      	ldrh	r3, [r7, #22]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
	buffer[2] = m2p.value1&0xff;
 8001cda:	8afb      	ldrh	r3, [r7, #22]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]
	buffer[3] = m2p.value2>>8&0xff;
 8001ce6:	8b3b      	ldrh	r3, [r7, #24]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
	buffer[4] = m2p.value2&0xff;
 8001cf6:	8b3b      	ldrh	r3, [r7, #24]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
	buffer[5] = m2p.value3>>8&0xff;
 8001d02:	8b7b      	ldrh	r3, [r7, #26]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3305      	adds	r3, #5
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
	buffer[6] = m2p.value3&0xff;
 8001d12:	8b7b      	ldrh	r3, [r7, #26]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3306      	adds	r3, #6
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
	buffer[7] = m2p.value4>>8&0xff;
 8001d1e:	8bbb      	ldrh	r3, [r7, #28]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3307      	adds	r3, #7
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
	buffer[8] = m2p.value4&0xff;
 8001d2e:	8bbb      	ldrh	r3, [r7, #28]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3308      	adds	r3, #8
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
	buffer[9] = m2p.value5>>8&0xff;
 8001d3a:	8bfb      	ldrh	r3, [r7, #30]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3309      	adds	r3, #9
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]
	buffer[10] = m2p.value5&0xff;
 8001d4a:	8bfb      	ldrh	r3, [r7, #30]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	330a      	adds	r3, #10
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
	buffer[11] = m2p.value6>>8&0xff;
 8001d56:	8c3b      	ldrh	r3, [r7, #32]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	330b      	adds	r3, #11
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
	buffer[12] = m2p.value6&0xff;
 8001d66:	8c3b      	ldrh	r3, [r7, #32]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]
	buffer[13] = m2p.end;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	330d      	adds	r3, #13
 8001d76:	7d7a      	ldrb	r2, [r7, #21]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	b004      	add	sp, #16
 8001d88:	4770      	bx	lr
	...

08001d8c <Start_PCReceiveIT>:
volatile P2M p2m_pc = {0x01,0xFF,0x00,0x0000,0x0000,0x0000,0x0000,0x00,};//
volatile M2P m2p_pc = {0x01,0xFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000};//
static uint32_t size_m2p = 14;
static uint32_t size_p2m = 12;

void Start_PCReceiveIT(){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxDataBuffer));
 8001d90:	2228      	movs	r2, #40	; 0x28
 8001d92:	4903      	ldr	r1, [pc, #12]	; (8001da0 <Start_PCReceiveIT+0x14>)
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <Start_PCReceiveIT+0x18>)
 8001d96:	f003 fe6d 	bl	8005a74 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200001fc 	.word	0x200001fc
 8001da4:	200005d4 	.word	0x200005d4

08001da8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
	if(huart==&huart6){
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_UARTEx_RxEventCallback+0x38>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10c      	bne.n	8001dd6 <HAL_UARTEx_RxEventCallback+0x2e>
		rx_len = Size;
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001dc0:	6013      	str	r3, [r2, #0]
		PC_UnpackMessage();
 8001dc2:	f000 f823 	bl	8001e0c <PC_UnpackMessage>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxDataBuffer));
 8001dc6:	2228      	movs	r2, #40	; 0x28
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <HAL_UARTEx_RxEventCallback+0x38>)
 8001dcc:	f003 fe52 	bl	8005a74 <HAL_UARTEx_ReceiveToIdle_DMA>
		if(txDataBuffer[0]==0xFC&&txDataBuffer[size_m2p-1]==0xFF){
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_UARTEx_RxEventCallback+0x44>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2bfc      	cmp	r3, #252	; 0xfc
		}else{}
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200005d4 	.word	0x200005d4
 8001de4:	20000224 	.word	0x20000224
 8001de8:	200001fc 	.word	0x200001fc
 8001dec:	200001d4 	.word	0x200001d4

08001df0 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	huart->gState = HAL_UART_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <PC_UnpackMessage>:
// [0]0x(id)* ,[9]0x*F
void PC_UnpackMessage(){
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	if(rx_len==10 && (rxDataBuffer[9]&0xf)==0xf){
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <PC_UnpackMessage+0xb8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b0a      	cmp	r3, #10
 8001e16:	d14f      	bne.n	8001eb8 <PC_UnpackMessage+0xac>
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e1a:	7a5b      	ldrb	r3, [r3, #9]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d149      	bne.n	8001eb8 <PC_UnpackMessage+0xac>
		p2m_pc.head = 0x01;
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
		p2m_pc.id = (uint8_t)(rxDataBuffer[0]>>4&0xf);
 8001e2a:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001e34:	709a      	strb	r2, [r3, #2]
		p2m_pc.value1 = (uint16_t)(rxDataBuffer[1]<<8|rxDataBuffer[2]);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e38:	785b      	ldrb	r3, [r3, #1]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	b21a      	sxth	r2, r3
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e40:	789b      	ldrb	r3, [r3, #2]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001e4c:	809a      	strh	r2, [r3, #4]
		p2m_pc.value2 = (uint16_t)(rxDataBuffer[3]<<8|rxDataBuffer[4]);
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e50:	78db      	ldrb	r3, [r3, #3]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e58:	791b      	ldrb	r3, [r3, #4]
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001e64:	80da      	strh	r2, [r3, #6]
		p2m_pc.value3 = (uint16_t)(rxDataBuffer[5]<<8|rxDataBuffer[6]);
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e68:	795b      	ldrb	r3, [r3, #5]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e70:	799b      	ldrb	r3, [r3, #6]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001e7c:	811a      	strh	r2, [r3, #8]
		p2m_pc.value4 = (uint16_t)(rxDataBuffer[7]<<8|rxDataBuffer[8]);
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e80:	79db      	ldrb	r3, [r3, #7]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	b21a      	sxth	r2, r3
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e88:	7a1b      	ldrb	r3, [r3, #8]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001e94:	815a      	strh	r2, [r3, #10]
		p2m_pc.ext_value = (uint8_t)(((rxDataBuffer[0]&0xf)<<4)|(rxDataBuffer[9]>>4&0xf));
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	b25a      	sxtb	r2, r3
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <PC_UnpackMessage+0xbc>)
 8001ea0:	7a5b      	ldrb	r3, [r3, #9]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001eb0:	731a      	strb	r2, [r3, #12]
		p2m_pc.head = 0xFC;
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <PC_UnpackMessage+0xc0>)
 8001eb4:	22fc      	movs	r2, #252	; 0xfc
 8001eb6:	701a      	strb	r2, [r3, #0]
	}else{}
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000224 	.word	0x20000224
 8001ec8:	200001fc 	.word	0x200001fc
 8001ecc:	2000009c 	.word	0x2000009c

08001ed0 <PC_PackMessage>:

void PC_PackMessage(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af02      	add	r7, sp, #8
	if(m2p_pc.head==0xFC && m2p_pc.end==0xFF){
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <PC_PackMessage+0x80>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2bfc      	cmp	r3, #252	; 0xfc
 8001ede:	d133      	bne.n	8001f48 <PC_PackMessage+0x78>
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <PC_PackMessage+0x80>)
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d12e      	bne.n	8001f48 <PC_PackMessage+0x78>
		tx_len = size_m2p;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <PC_PackMessage+0x84>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <PC_PackMessage+0x88>)
 8001ef0:	6013      	str	r3, [r2, #0]
		m2pmsg_memcpy(txDataBuffer, m2p_pc);
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <PC_PackMessage+0x80>)
 8001ef4:	899a      	ldrh	r2, [r3, #12]
 8001ef6:	f8ad 2000 	strh.w	r2, [sp]
 8001efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efc:	4817      	ldr	r0, [pc, #92]	; (8001f5c <PC_PackMessage+0x8c>)
 8001efe:	f7ff fed7 	bl	8001cb0 <m2pmsg_memcpy>
		HAL_UART_Transmit_DMA(&huart6, txDataBuffer,tx_len);
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <PC_PackMessage+0x88>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4914      	ldr	r1, [pc, #80]	; (8001f5c <PC_PackMessage+0x8c>)
 8001f0c:	4814      	ldr	r0, [pc, #80]	; (8001f60 <PC_PackMessage+0x90>)
 8001f0e:	f003 fd33 	bl	8005978 <HAL_UART_Transmit_DMA>
		count = 0;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <PC_PackMessage+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
		while(huart6.gState!=HAL_UART_STATE_READY){
 8001f18:	e010      	b.n	8001f3c <PC_PackMessage+0x6c>
			if(count>10){
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <PC_PackMessage+0x94>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b0a      	cmp	r3, #10
 8001f20:	d903      	bls.n	8001f2a <PC_PackMessage+0x5a>
				PC_CommunicationErrorHandler();
 8001f22:	f000 f821 	bl	8001f68 <PC_CommunicationErrorHandler>
				break;
 8001f26:	bf00      	nop
				HAL_Delay(2);
				count+=1;
			}
		}
	}
}
 8001f28:	e00e      	b.n	8001f48 <PC_PackMessage+0x78>
				HAL_Delay(2);
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f000 ffa6 	bl	8002e7c <HAL_Delay>
				count+=1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <PC_PackMessage+0x94>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <PC_PackMessage+0x94>)
 8001f3a:	701a      	strb	r2, [r3, #0]
		while(huart6.gState!=HAL_UART_STATE_READY){
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <PC_PackMessage+0x90>)
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d1e8      	bne.n	8001f1a <PC_PackMessage+0x4a>
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000ac 	.word	0x200000ac
 8001f54:	200000bc 	.word	0x200000bc
 8001f58:	20000228 	.word	0x20000228
 8001f5c:	200001d4 	.word	0x200001d4
 8001f60:	200005d4 	.word	0x200005d4
 8001f64:	2000022c 	.word	0x2000022c

08001f68 <PC_CommunicationErrorHandler>:

void PC_CommunicationErrorHandler(){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	debugPrint("Send to PC Failed\r\n");
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <PC_CommunicationErrorHandler+0x10>)
 8001f6e:	f7fe ff57 	bl	8000e20 <debugPrint>
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	080097cc 	.word	0x080097cc

08001f7c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001f82:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <MX_CAN1_Init+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001f88:	2206      	movs	r2, #6
 8001f8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001f9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f9e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001fa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fa6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <MX_CAN1_Init+0x64>)
 8001fce:	f000 ff79 	bl	8002ec4 <HAL_CAN_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001fd8:	f000 fada 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000230 	.word	0x20000230
 8001fe4:	40006400 	.word	0x40006400

08001fe8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x94>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d133      	bne.n	8002072 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_CAN_MspInit+0x98>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_CAN_MspInit+0x98>)
 8002014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x98>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_CAN_MspInit+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_CAN_MspInit+0x98>)
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x98>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002042:	2303      	movs	r3, #3
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002052:	2309      	movs	r3, #9
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_CAN_MspInit+0x9c>)
 800205e:	f002 faad 	bl	80045bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2105      	movs	r1, #5
 8002066:	2014      	movs	r0, #20
 8002068:	f001 fe7c 	bl	8003d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800206c:	2014      	movs	r0, #20
 800206e:	f001 fe95 	bl	8003d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40006400 	.word	0x40006400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00

08002088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <MX_DMA_Init+0x98>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <MX_DMA_Init+0x98>)
 8002098:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_DMA_Init+0x98>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_DMA_Init+0x98>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <MX_DMA_Init+0x98>)
 80020b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_DMA_Init+0x98>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2106      	movs	r1, #6
 80020ca:	200c      	movs	r0, #12
 80020cc:	f001 fe4a 	bl	8003d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020d0:	200c      	movs	r0, #12
 80020d2:	f001 fe63 	bl	8003d9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2106      	movs	r1, #6
 80020da:	200e      	movs	r0, #14
 80020dc:	f001 fe42 	bl	8003d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80020e0:	200e      	movs	r0, #14
 80020e2:	f001 fe5b 	bl	8003d9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2106      	movs	r1, #6
 80020ea:	200f      	movs	r0, #15
 80020ec:	f001 fe3a 	bl	8003d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80020f0:	200f      	movs	r0, #15
 80020f2:	f001 fe53 	bl	8003d9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2106      	movs	r1, #6
 80020fa:	2039      	movs	r0, #57	; 0x39
 80020fc:	f001 fe32 	bl	8003d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002100:	2039      	movs	r0, #57	; 0x39
 8002102:	f001 fe4b 	bl	8003d9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2106      	movs	r1, #6
 800210a:	2045      	movs	r0, #69	; 0x45
 800210c:	f001 fe2a 	bl	8003d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002110:	2045      	movs	r0, #69	; 0x45
 8002112:	f001 fe43 	bl	8003d9c <HAL_NVIC_EnableIRQ>

}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <vApplicationGetIdleTaskMemory+0x2c>)
 8002134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <vApplicationGetIdleTaskMemory+0x30>)
 800213a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000268 	.word	0x20000268
 8002154:	200002bc 	.word	0x200002bc

08002158 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b096      	sub	sp, #88	; 0x58
 800215c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PC_To_MotorQueue */
  osMessageQDef(PC_To_MotorQueue, 3, P2M);
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <MX_FREERTOS_Init+0x94>)
 8002160:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PC_To_MotorQueueHandle = osMessageCreate(osMessageQ(PC_To_MotorQueue), NULL);
 800216a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f004 feb0 	bl	8006ed6 <osMessageCreate>
 8002176:	4603      	mov	r3, r0
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <MX_FREERTOS_Init+0x98>)
 800217a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motor_To_PC_Queue */
  osMessageQDef(Motor_To_PC_Queue, 3, M2P);
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <MX_FREERTOS_Init+0x94>)
 800217e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Motor_To_PC_QueueHandle = osMessageCreate(osMessageQ(Motor_To_PC_Queue), NULL);
 8002188:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fea1 	bl	8006ed6 <osMessageCreate>
 8002194:	4603      	mov	r3, r0
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <MX_FREERTOS_Init+0x9c>)
 8002198:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CommucationTask */
  osThreadDef(CommucationTask, Task_Commucation, osPriorityNormal, 0, 400);
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_FREERTOS_Init+0xa0>)
 800219c:	f107 041c 	add.w	r4, r7, #28
 80021a0:	461d      	mov	r5, r3
 80021a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommucationTaskHandle = osThreadCreate(osThread(CommucationTask), NULL);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f004 fe2e 	bl	8006e16 <osThreadCreate>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <MX_FREERTOS_Init+0xa4>)
 80021be:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorCtrlTask */
  osThreadDef(MotorCtrlTask, Task_MotorCtrl, osPriorityNormal, 0, 400);
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_FREERTOS_Init+0xa8>)
 80021c2:	463c      	mov	r4, r7
 80021c4:	461d      	mov	r5, r3
 80021c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorCtrlTaskHandle = osThreadCreate(osThread(MotorCtrlTask), NULL);
 80021d2:	463b      	mov	r3, r7
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fe1d 	bl	8006e16 <osThreadCreate>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <MX_FREERTOS_Init+0xac>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80021e2:	bf00      	nop
 80021e4:	3758      	adds	r7, #88	; 0x58
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	08009800 	.word	0x08009800
 80021f0:	20000260 	.word	0x20000260
 80021f4:	20000264 	.word	0x20000264
 80021f8:	08009810 	.word	0x08009810
 80021fc:	20000258 	.word	0x20000258
 8002200:	0800982c 	.word	0x0800982c
 8002204:	2000025c 	.word	0x2000025c

08002208 <Task_Commucation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Commucation */
void Task_Commucation(void const * argument)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	BaseType_t xStatus_Send;
	BaseType_t xStatus_Receive;
  /* Infinite loop */
  for(;;)
  {
	if(p2m_pc.head==0xFC&&p2m_pc.end==0xFF){
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <Task_Commucation+0x60>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2bfc      	cmp	r3, #252	; 0xfc
 8002216:	d10b      	bne.n	8002230 <Task_Commucation+0x28>
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <Task_Commucation+0x60>)
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2bff      	cmp	r3, #255	; 0xff
 800221e:	d107      	bne.n	8002230 <Task_Commucation+0x28>
		xStatus_Send = xQueueSendToBack(PC_To_MotorQueueHandle,&p2m_pc,0);
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <Task_Commucation+0x64>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	490f      	ldr	r1, [pc, #60]	; (8002268 <Task_Commucation+0x60>)
 800222a:	f005 f86b 	bl	8007304 <xQueueGenericSend>
 800222e:	60f8      	str	r0, [r7, #12]
		if(xStatus_Send==pdPASS){}else{}
	}else{}

	xStatus_Receive = xQueueReceive(Motor_To_PC_QueueHandle, &m2p_pc, 0);
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <Task_Commucation+0x68>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	490f      	ldr	r1, [pc, #60]	; (8002274 <Task_Commucation+0x6c>)
 8002238:	4618      	mov	r0, r3
 800223a:	f005 f961 	bl	8007500 <xQueueReceive>
 800223e:	60b8      	str	r0, [r7, #8]
	if(xStatus_Receive==pdPASS){
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d109      	bne.n	800225a <Task_Commucation+0x52>
		if(m2p_pc.head==0xFC&&m2p_pc.end==0xFF){
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <Task_Commucation+0x6c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2bfc      	cmp	r3, #252	; 0xfc
 800224c:	d105      	bne.n	800225a <Task_Commucation+0x52>
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <Task_Commucation+0x6c>)
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d101      	bne.n	800225a <Task_Commucation+0x52>
			PC_PackMessage();
 8002256:	f7ff fe3b 	bl	8001ed0 <PC_PackMessage>
		}else{}//end m2p_pc.id
	}else{}//end xStatus_Receive
	debugPrint("Hello World\n");
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <Task_Commucation+0x70>)
 800225c:	f7fe fde0 	bl	8000e20 <debugPrint>
    osDelay(10);
 8002260:	200a      	movs	r0, #10
 8002262:	f004 fe24 	bl	8006eae <osDelay>
	if(p2m_pc.head==0xFC&&p2m_pc.end==0xFF){
 8002266:	e7d3      	b.n	8002210 <Task_Commucation+0x8>
 8002268:	2000009c 	.word	0x2000009c
 800226c:	20000260 	.word	0x20000260
 8002270:	20000264 	.word	0x20000264
 8002274:	200000ac 	.word	0x200000ac
 8002278:	08009848 	.word	0x08009848

0800227c <Task_MotorCtrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_MotorCtrl */
void Task_MotorCtrl(void const * argument)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  BaseType_t xStatus_Send;
  BaseType_t xStatus_Receive;
	/* Infinite loop */
  for(;;)
  {
	xStatus_Receive = xQueueReceive(PC_To_MotorQueueHandle, &p2m_motor,0);
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <Task_MotorCtrl+0x5c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	4914      	ldr	r1, [pc, #80]	; (80022dc <Task_MotorCtrl+0x60>)
 800228c:	4618      	mov	r0, r3
 800228e:	f005 f937 	bl	8007500 <xQueueReceive>
 8002292:	60f8      	str	r0, [r7, #12]
	if(xStatus_Receive==pdPASS){
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d109      	bne.n	80022ae <Task_MotorCtrl+0x32>
		if(p2m_motor.head==0xFC&&p2m_motor.end==0xFF){
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <Task_MotorCtrl+0x60>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2bfc      	cmp	r3, #252	; 0xfc
 80022a0:	d105      	bne.n	80022ae <Task_MotorCtrl+0x32>
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <Task_MotorCtrl+0x60>)
 80022a4:	785b      	ldrb	r3, [r3, #1]
 80022a6:	2bff      	cmp	r3, #255	; 0xff
 80022a8:	d101      	bne.n	80022ae <Task_MotorCtrl+0x32>
			//Motor_CMDUnpack();
			Motor_Debug_CMDUnpack();
 80022aa:	f7ff fa75 	bl	8001798 <Motor_Debug_CMDUnpack>
		}
	}else{}//end xStatus
	if(m2p_motor.head==0xFC&&m2p_motor.end==0xFF){
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <Task_MotorCtrl+0x64>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2bfc      	cmp	r3, #252	; 0xfc
 80022b4:	d10b      	bne.n	80022ce <Task_MotorCtrl+0x52>
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <Task_MotorCtrl+0x64>)
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	2bff      	cmp	r3, #255	; 0xff
 80022bc:	d107      	bne.n	80022ce <Task_MotorCtrl+0x52>
		xStatus_Send = xQueueSend(Motor_To_PC_QueueHandle,&m2p_motor,0);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <Task_MotorCtrl+0x68>)
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	2300      	movs	r3, #0
 80022c4:	2200      	movs	r2, #0
 80022c6:	4906      	ldr	r1, [pc, #24]	; (80022e0 <Task_MotorCtrl+0x64>)
 80022c8:	f005 f81c 	bl	8007304 <xQueueGenericSend>
 80022cc:	60b8      	str	r0, [r7, #8]
		if(xStatus_Send==pdPASS){

		}else{}
	}
	osDelay(5);
 80022ce:	2005      	movs	r0, #5
 80022d0:	f004 fded 	bl	8006eae <osDelay>
	xStatus_Receive = xQueueReceive(PC_To_MotorQueueHandle, &p2m_motor,0);
 80022d4:	e7d6      	b.n	8002284 <Task_MotorCtrl+0x8>
 80022d6:	bf00      	nop
 80022d8:	20000260 	.word	0x20000260
 80022dc:	20000070 	.word	0x20000070
 80022e0:	20000060 	.word	0x20000060
 80022e4:	20000264 	.word	0x20000264

080022e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <MX_GPIO_Init+0x160>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a50      	ldr	r2, [pc, #320]	; (8002448 <MX_GPIO_Init+0x160>)
 8002308:	f043 0310 	orr.w	r3, r3, #16
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <MX_GPIO_Init+0x160>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <MX_GPIO_Init+0x160>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a49      	ldr	r2, [pc, #292]	; (8002448 <MX_GPIO_Init+0x160>)
 8002324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <MX_GPIO_Init+0x160>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	4b43      	ldr	r3, [pc, #268]	; (8002448 <MX_GPIO_Init+0x160>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a42      	ldr	r2, [pc, #264]	; (8002448 <MX_GPIO_Init+0x160>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b40      	ldr	r3, [pc, #256]	; (8002448 <MX_GPIO_Init+0x160>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <MX_GPIO_Init+0x160>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <MX_GPIO_Init+0x160>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <MX_GPIO_Init+0x160>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b35      	ldr	r3, [pc, #212]	; (8002448 <MX_GPIO_Init+0x160>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a34      	ldr	r2, [pc, #208]	; (8002448 <MX_GPIO_Init+0x160>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <MX_GPIO_Init+0x160>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <MX_GPIO_Init+0x160>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <MX_GPIO_Init+0x160>)
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <MX_GPIO_Init+0x160>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <MX_GPIO_Init+0x160>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a26      	ldr	r2, [pc, #152]	; (8002448 <MX_GPIO_Init+0x160>)
 80023b0:	f043 0320 	orr.w	r3, r3, #32
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <MX_GPIO_Init+0x160>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80023c8:	4820      	ldr	r0, [pc, #128]	; (800244c <MX_GPIO_Init+0x164>)
 80023ca:	f002 faa3 	bl	8004914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d4:	481e      	ldr	r0, [pc, #120]	; (8002450 <MX_GPIO_Init+0x168>)
 80023d6:	f002 fa9d 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e0:	481c      	ldr	r0, [pc, #112]	; (8002454 <MX_GPIO_Init+0x16c>)
 80023e2:	f002 fa97 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG8 PG7 PG6 PG5
                           PG4 PG3 PG2 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
 80023e6:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80023ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	4619      	mov	r1, r3
 80023fe:	4813      	ldr	r0, [pc, #76]	; (800244c <MX_GPIO_Init+0x164>)
 8002400:	f002 f8dc 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240a:	2301      	movs	r3, #1
 800240c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4619      	mov	r1, r3
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <MX_GPIO_Init+0x168>)
 800241e:	f002 f8cd 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <MX_GPIO_Init+0x16c>)
 800243c:	f002 f8be 	bl	80045bc <HAL_GPIO_Init>

}
 8002440:	bf00      	nop
 8002442:	3730      	adds	r7, #48	; 0x30
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	40021800 	.word	0x40021800
 8002450:	40021000 	.word	0x40021000
 8002454:	40021400 	.word	0x40021400

08002458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245c:	f000 fccc 	bl	8002df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002460:	f000 f81a 	bl	8002498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002464:	f7ff ff40 	bl	80022e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002468:	f7ff fe0e 	bl	8002088 <MX_DMA_Init>
  MX_CAN1_Init();
 800246c:	f7ff fd86 	bl	8001f7c <MX_CAN1_Init>
  MX_UART7_Init();
 8002470:	f000 f9f4 	bl	800285c <MX_UART7_Init>
  MX_UART8_Init();
 8002474:	f000 fa1c 	bl	80028b0 <MX_UART8_Init>
  MX_USART6_UART_Init();
 8002478:	f000 fa6e 	bl	8002958 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800247c:	f000 fa42 	bl	8002904 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig();
 8002480:	f7fe fcf6 	bl	8000e70 <CAN_FilterConfig>
  motor_init();
 8002484:	f7fe fd72 	bl	8000f6c <motor_init>
  Start_PCReceiveIT();
 8002488:	f7ff fc80 	bl	8001d8c <Start_PCReceiveIT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800248c:	f7ff fe64 	bl	8002158 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002490:	f004 fcba 	bl	8006e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002494:	e7fe      	b.n	8002494 <main+0x3c>
	...

08002498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b094      	sub	sp, #80	; 0x50
 800249c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	2230      	movs	r2, #48	; 0x30
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 fd18 	bl	8008edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	4b28      	ldr	r3, [pc, #160]	; (8002564 <SystemClock_Config+0xcc>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a27      	ldr	r2, [pc, #156]	; (8002564 <SystemClock_Config+0xcc>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <SystemClock_Config+0xcc>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	4b22      	ldr	r3, [pc, #136]	; (8002568 <SystemClock_Config+0xd0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a21      	ldr	r2, [pc, #132]	; (8002568 <SystemClock_Config+0xd0>)
 80024e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <SystemClock_Config+0xd0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024fe:	2302      	movs	r3, #2
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002508:	2306      	movs	r3, #6
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800250c:	23a8      	movs	r3, #168	; 0xa8
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002510:	2302      	movs	r3, #2
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002514:	2304      	movs	r3, #4
 8002516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002518:	f107 0320 	add.w	r3, r7, #32
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fa13 	bl	8004948 <HAL_RCC_OscConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002528:	f000 f832 	bl	8002590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800252c:	230f      	movs	r3, #15
 800252e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002538:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800253c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	2105      	movs	r1, #5
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fc74 	bl	8004e38 <HAL_RCC_ClockConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002556:	f000 f81b 	bl	8002590 <Error_Handler>
  }
}
 800255a:	bf00      	nop
 800255c:	3750      	adds	r7, #80	; 0x50
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40007000 	.word	0x40007000

0800256c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800257e:	f000 fc5d 	bl	8002e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40001400 	.word	0x40001400

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	e7fe      	b.n	8002598 <Error_Handler+0x8>
	...

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_MspInit+0x54>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_MspInit+0x54>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_MspInit+0x54>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_MspInit+0x54>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_MspInit+0x54>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_MspInit+0x54>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	210f      	movs	r1, #15
 80025de:	f06f 0001 	mvn.w	r0, #1
 80025e2:	f001 fbbf 	bl	8003d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	; 0x38
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <HAL_InitTick+0xe4>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_InitTick+0xe4>)
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	6413      	str	r3, [r2, #64]	; 0x40
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <HAL_InitTick+0xe4>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002620:	f107 0210 	add.w	r2, r7, #16
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fde4 	bl	80051f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800263a:	f002 fdb5 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 800263e:	6378      	str	r0, [r7, #52]	; 0x34
 8002640:	e004      	b.n	800264c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002642:	f002 fdb1 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8002646:	4603      	mov	r3, r0
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_InitTick+0xe8>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9b      	lsrs	r3, r3, #18
 8002656:	3b01      	subs	r3, #1
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_InitTick+0xec>)
 800265c:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <HAL_InitTick+0xf0>)
 800265e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_InitTick+0xec>)
 8002662:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002666:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002668:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_InitTick+0xec>)
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_InitTick+0xec>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_InitTick+0xec>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_InitTick+0xec>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002680:	4817      	ldr	r0, [pc, #92]	; (80026e0 <HAL_InitTick+0xec>)
 8002682:	f002 fdeb 	bl	800525c <HAL_TIM_Base_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800268c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11b      	bne.n	80026cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002694:	4812      	ldr	r0, [pc, #72]	; (80026e0 <HAL_InitTick+0xec>)
 8002696:	f002 fe3b 	bl	8005310 <HAL_TIM_Base_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026a8:	2037      	movs	r0, #55	; 0x37
 80026aa:	f001 fb77 	bl	8003d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d808      	bhi.n	80026c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	2037      	movs	r0, #55	; 0x37
 80026ba:	f001 fb53 	bl	8003d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_InitTick+0xf4>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e002      	b.n	80026cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3738      	adds	r7, #56	; 0x38
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	431bde83 	.word	0x431bde83
 80026e0:	200004bc 	.word	0x200004bc
 80026e4:	40001400 	.word	0x40001400
 80026e8:	200000c4 	.word	0x200000c4

080026ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <NMI_Handler+0x4>

080026f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f6:	e7fe      	b.n	80026f6 <HardFault_Handler+0x4>

080026f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <MemManage_Handler+0x4>

080026fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <UsageFault_Handler+0x4>

0800270a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <DMA1_Stream1_IRQHandler+0x10>)
 800271e:	f001 fce3 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000678 	.word	0x20000678

0800272c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <DMA1_Stream3_IRQHandler+0x10>)
 8002732:	f001 fcd9 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000618 	.word	0x20000618

08002740 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <DMA1_Stream4_IRQHandler+0x10>)
 8002746:	f001 fccf 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200006d8 	.word	0x200006d8

08002754 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <CAN1_RX0_IRQHandler+0x10>)
 800275a:	f001 f81b 	bl	8003794 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000230 	.word	0x20000230

08002768 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <TIM7_IRQHandler+0x10>)
 800276e:	f002 fe3f 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200004bc 	.word	0x200004bc

0800277c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <DMA2_Stream1_IRQHandler+0x10>)
 8002782:	f001 fcb1 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000738 	.word	0x20000738

08002790 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <DMA2_Stream6_IRQHandler+0x10>)
 8002796:	f001 fca7 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000798 	.word	0x20000798

080027a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <USART6_IRQHandler+0x10>)
 80027aa:	f003 f9c9 	bl	8005b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200005d4 	.word	0x200005d4

080027b8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <UART7_IRQHandler+0x10>)
 80027be:	f003 f9bf 	bl	8005b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000508 	.word	0x20000508

080027cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <_sbrk+0x5c>)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <_sbrk+0x60>)
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x64>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <_sbrk+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d207      	bcs.n	800280c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027fc:	f006 fb36 	bl	8008e6c <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800280a:	e009      	b.n	8002820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <_sbrk+0x64>)
 800281c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20030000 	.word	0x20030000
 800282c:	00000400 	.word	0x00000400
 8002830:	20000504 	.word	0x20000504
 8002834:	20004560 	.word	0x20004560

08002838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <SystemInit+0x20>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <SystemInit+0x20>)
 8002844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_UART7_Init+0x4c>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <MX_UART7_Init+0x50>)
 8002864:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <MX_UART7_Init+0x4c>)
 8002868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800286c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_UART7_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_UART7_Init+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <MX_UART7_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_UART7_Init+0x4c>)
 8002882:	220c      	movs	r2, #12
 8002884:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <MX_UART7_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_UART7_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <MX_UART7_Init+0x4c>)
 8002894:	f002 ff90 	bl	80057b8 <HAL_UART_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800289e:	f7ff fe77 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000508 	.word	0x20000508
 80028ac:	40007800 	.word	0x40007800

080028b0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_UART8_Init+0x4c>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <MX_UART8_Init+0x50>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_UART8_Init+0x4c>)
 80028bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028c0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_UART8_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <MX_UART8_Init+0x4c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_UART8_Init+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_UART8_Init+0x4c>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_UART8_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_UART8_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_UART8_Init+0x4c>)
 80028e8:	f002 ff66 	bl	80057b8 <HAL_UART_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80028f2:	f7ff fe4d 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000054c 	.word	0x2000054c
 8002900:	40007c00 	.word	0x40007c00

08002904 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <MX_USART3_UART_Init+0x50>)
 800290c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 8002910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002914:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <MX_USART3_UART_Init+0x4c>)
 800293c:	f002 ff3c 	bl	80057b8 <HAL_UART_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002946:	f7ff fe23 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000590 	.word	0x20000590
 8002954:	40004800 	.word	0x40004800

08002958 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <MX_USART6_UART_Init+0x50>)
 8002960:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 8002964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002968:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_USART6_UART_Init+0x4c>)
 8002990:	f002 ff12 	bl	80057b8 <HAL_UART_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800299a:	f7ff fdf9 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200005d4 	.word	0x200005d4
 80029a8:	40011400 	.word	0x40011400

080029ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b090      	sub	sp, #64	; 0x40
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a95      	ldr	r2, [pc, #596]	; (8002c20 <HAL_UART_MspInit+0x274>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d164      	bne.n	8002a98 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d2:	4b94      	ldr	r3, [pc, #592]	; (8002c24 <HAL_UART_MspInit+0x278>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a93      	ldr	r2, [pc, #588]	; (8002c24 <HAL_UART_MspInit+0x278>)
 80029d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b91      	ldr	r3, [pc, #580]	; (8002c24 <HAL_UART_MspInit+0x278>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	4b8d      	ldr	r3, [pc, #564]	; (8002c24 <HAL_UART_MspInit+0x278>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a8c      	ldr	r2, [pc, #560]	; (8002c24 <HAL_UART_MspInit+0x278>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <HAL_UART_MspInit+0x278>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002a06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002a18:	2308      	movs	r3, #8
 8002a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a20:	4619      	mov	r1, r3
 8002a22:	4881      	ldr	r0, [pc, #516]	; (8002c28 <HAL_UART_MspInit+0x27c>)
 8002a24:	f001 fdca 	bl	80045bc <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002a28:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a2a:	4a81      	ldr	r2, [pc, #516]	; (8002c30 <HAL_UART_MspInit+0x284>)
 8002a2c:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8002a2e:	4b7f      	ldr	r3, [pc, #508]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a30:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a34:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a36:	4b7d      	ldr	r3, [pc, #500]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3c:	4b7b      	ldr	r3, [pc, #492]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a42:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a48:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a4a:	4b78      	ldr	r3, [pc, #480]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a50:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002a56:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5e:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a64:	4b71      	ldr	r3, [pc, #452]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002a6a:	4870      	ldr	r0, [pc, #448]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a6c:	f001 f9a4 	bl	8003db8 <HAL_DMA_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002a76:	f7ff fd8b 	bl	8002590 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a6b      	ldr	r2, [pc, #428]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002a80:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 7, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2107      	movs	r1, #7
 8002a8a:	2052      	movs	r0, #82	; 0x52
 8002a8c:	f001 f96a 	bl	8003d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002a90:	2052      	movs	r0, #82	; 0x52
 8002a92:	f001 f983 	bl	8003d9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002a96:	e173      	b.n	8002d80 <HAL_UART_MspInit+0x3d4>
  else if(uartHandle->Instance==UART8)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d12c      	bne.n	8002afc <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002ada:	2303      	movs	r3, #3
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002aea:	2308      	movs	r3, #8
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af2:	4619      	mov	r1, r3
 8002af4:	484c      	ldr	r0, [pc, #304]	; (8002c28 <HAL_UART_MspInit+0x27c>)
 8002af6:	f001 fd61 	bl	80045bc <HAL_GPIO_Init>
}
 8002afa:	e141      	b.n	8002d80 <HAL_UART_MspInit+0x3d4>
  else if(uartHandle->Instance==USART3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <HAL_UART_MspInit+0x28c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f040 80a4 	bne.w	8002c50 <HAL_UART_MspInit+0x2a4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	4a44      	ldr	r2, [pc, #272]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b16:	6413      	str	r3, [r2, #64]	; 0x40
 8002b18:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_UART_MspInit+0x278>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002b40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b52:	2307      	movs	r3, #7
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4837      	ldr	r0, [pc, #220]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002b5e:	f001 fd2d 	bl	80045bc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b64:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <HAL_UART_MspInit+0x298>)
 8002b66:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b6e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b70:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b76:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b82:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b96:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ba4:	4826      	ldr	r0, [pc, #152]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002ba6:	f001 f907 	bl	8003db8 <HAL_DMA_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8002bb0:	f7ff fcee 	bl	8002590 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002bc0:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bc2:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_UART_MspInit+0x2a0>)
 8002bc4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bc8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002bcc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bd0:	2240      	movs	r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c00:	4811      	ldr	r0, [pc, #68]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002c02:	f001 f8d9 	bl	8003db8 <HAL_DMA_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_UART_MspInit+0x264>
      Error_Handler();
 8002c0c:	f7ff fcc0 	bl	8002590 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
 8002c16:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c1c:	e0b0      	b.n	8002d80 <HAL_UART_MspInit+0x3d4>
 8002c1e:	bf00      	nop
 8002c20:	40007800 	.word	0x40007800
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	20000618 	.word	0x20000618
 8002c30:	40026058 	.word	0x40026058
 8002c34:	40007c00 	.word	0x40007c00
 8002c38:	40004800 	.word	0x40004800
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	20000678 	.word	0x20000678
 8002c44:	40026028 	.word	0x40026028
 8002c48:	200006d8 	.word	0x200006d8
 8002c4c:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==USART6)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <HAL_UART_MspInit+0x3dc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	f040 8092 	bne.w	8002d80 <HAL_UART_MspInit+0x3d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_UART_MspInit+0x3e0>)
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_UART_MspInit+0x3e0>)
 8002c66:	f043 0320 	orr.w	r3, r3, #32
 8002c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6c:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_UART_MspInit+0x3e0>)
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_UART_MspInit+0x3e0>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4a42      	ldr	r2, [pc, #264]	; (8002d8c <HAL_UART_MspInit+0x3e0>)
 8002c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c86:	6313      	str	r3, [r2, #48]	; 0x30
 8002c88:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <HAL_UART_MspInit+0x3e0>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002c94:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4837      	ldr	r0, [pc, #220]	; (8002d90 <HAL_UART_MspInit+0x3e4>)
 8002cb2:	f001 fc83 	bl	80045bc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cb8:	4a37      	ldr	r2, [pc, #220]	; (8002d98 <HAL_UART_MspInit+0x3ec>)
 8002cba:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cbe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002cc2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cca:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd0:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cec:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002cf8:	4826      	ldr	r0, [pc, #152]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002cfa:	f001 f85d 	bl	8003db8 <HAL_DMA_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8002d04:	f7ff fc44 	bl	8002590 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d0e:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_UART_MspInit+0x3e8>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d16:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <HAL_UART_MspInit+0x3f4>)
 8002d18:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d1c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002d20:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d34:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002d42:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002d54:	4811      	ldr	r0, [pc, #68]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d56:	f001 f82f 	bl	8003db8 <HAL_DMA_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_MspInit+0x3b8>
      Error_Handler();
 8002d60:	f7ff fc16 	bl	8002590 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_UART_MspInit+0x3f0>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2106      	movs	r1, #6
 8002d74:	2047      	movs	r0, #71	; 0x47
 8002d76:	f000 fff5 	bl	8003d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d7a:	2047      	movs	r0, #71	; 0x47
 8002d7c:	f001 f80e 	bl	8003d9c <HAL_NVIC_EnableIRQ>
}
 8002d80:	bf00      	nop
 8002d82:	3740      	adds	r7, #64	; 0x40
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40011400 	.word	0x40011400
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40021800 	.word	0x40021800
 8002d94:	20000738 	.word	0x20000738
 8002d98:	40026428 	.word	0x40026428
 8002d9c:	20000798 	.word	0x20000798
 8002da0:	400264a0 	.word	0x400264a0

08002da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002da8:	480d      	ldr	r0, [pc, #52]	; (8002de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002daa:	490e      	ldr	r1, [pc, #56]	; (8002de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db0:	e002      	b.n	8002db8 <LoopCopyDataInit>

08002db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db6:	3304      	adds	r3, #4

08002db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dbc:	d3f9      	bcc.n	8002db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dc0:	4c0b      	ldr	r4, [pc, #44]	; (8002df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc4:	e001      	b.n	8002dca <LoopFillZerobss>

08002dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc8:	3204      	adds	r2, #4

08002dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dcc:	d3fb      	bcc.n	8002dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dce:	f7ff fd33 	bl	8002838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dd2:	f006 f851 	bl	8008e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd6:	f7ff fb3f 	bl	8002458 <main>
  bx  lr    
 8002dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ddc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002de8:	080098c4 	.word	0x080098c4
  ldr r2, =_sbss
 8002dec:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002df0:	20004560 	.word	0x20004560

08002df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df4:	e7fe      	b.n	8002df4 <ADC_IRQHandler>
	...

08002df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_Init+0x40>)
 8002e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <HAL_Init+0x40>)
 8002e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_Init+0x40>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_Init+0x40>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f000 ff94 	bl	8003d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7ff fbe4 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2c:	f7ff fbb6 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023c00 	.word	0x40023c00

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200000c8 	.word	0x200000c8
 8002e60:	200007f8 	.word	0x200007f8

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	200007f8 	.word	0x200007f8

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200000c8 	.word	0x200000c8

08002ec4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0ed      	b.n	80030b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff f880 	bl	8001fe8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef8:	f7ff ffb4 	bl	8002e64 <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002efe:	e012      	b.n	8002f26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f00:	f7ff ffb0 	bl	8002e64 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b0a      	cmp	r3, #10
 8002f0c:	d90b      	bls.n	8002f26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0c5      	b.n	80030b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0e5      	beq.n	8002f00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0202 	bic.w	r2, r2, #2
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f44:	f7ff ff8e 	bl	8002e64 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f4a:	e012      	b.n	8002f72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f4c:	f7ff ff8a 	bl	8002e64 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b0a      	cmp	r3, #10
 8002f58:	d90b      	bls.n	8002f72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e09f      	b.n	80030b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7e1b      	ldrb	r3, [r3, #24]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e007      	b.n	8002faa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7e5b      	ldrb	r3, [r3, #25]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e007      	b.n	8002fd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7e9b      	ldrb	r3, [r3, #26]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d108      	bne.n	8002fee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0220 	orr.w	r2, r2, #32
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e007      	b.n	8002ffe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0220 	bic.w	r2, r2, #32
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7edb      	ldrb	r3, [r3, #27]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0210 	bic.w	r2, r2, #16
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e007      	b.n	8003028 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0210 	orr.w	r2, r2, #16
 8003026:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7f1b      	ldrb	r3, [r3, #28]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d108      	bne.n	8003042 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0208 	orr.w	r2, r2, #8
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e007      	b.n	8003052 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0208 	bic.w	r2, r2, #8
 8003050:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7f5b      	ldrb	r3, [r3, #29]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0204 	orr.w	r2, r2, #4
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e007      	b.n	800307c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	1e5a      	subs	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d003      	beq.n	80030e2 <HAL_CAN_ConfigFilter+0x26>
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	f040 80be 	bne.w	800325e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030e2:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_CAN_ConfigFilter+0x1bc>)
 80030e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	431a      	orrs	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2201      	movs	r2, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	401a      	ands	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d123      	bne.n	800318c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003166:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3248      	adds	r2, #72	; 0x48
 800316c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003180:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	3348      	adds	r3, #72	; 0x48
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d122      	bne.n	80031da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	431a      	orrs	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3248      	adds	r2, #72	; 0x48
 80031ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031d0:	6979      	ldr	r1, [r7, #20]
 80031d2:	3348      	adds	r3, #72	; 0x48
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	401a      	ands	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031f4:	e007      	b.n	8003206 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	431a      	orrs	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43db      	mvns	r3, r3
 8003218:	401a      	ands	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003220:	e007      	b.n	8003232 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	431a      	orrs	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003250:	f023 0201 	bic.w	r2, r3, #1
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e006      	b.n	800326c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40006400 	.word	0x40006400

0800327c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d12e      	bne.n	80032ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a8:	f7ff fddc 	bl	8002e64 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032ae:	e012      	b.n	80032d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032b0:	f7ff fdd8 	bl	8002e64 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b0a      	cmp	r3, #10
 80032bc:	d90b      	bls.n	80032d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2205      	movs	r2, #5
 80032ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e012      	b.n	80032fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e5      	bne.n	80032b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e006      	b.n	80032fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003318:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d003      	beq.n	8003330 <HAL_CAN_AddTxMessage+0x2c>
 8003328:	7ffb      	ldrb	r3, [r7, #31]
 800332a:	2b02      	cmp	r3, #2
 800332c:	f040 80b8 	bne.w	80034a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80a0 	beq.w	8003490 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	0e1b      	lsrs	r3, r3, #24
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d907      	bls.n	8003370 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e09e      	b.n	80034ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003370:	2201      	movs	r2, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	409a      	lsls	r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	6809      	ldr	r1, [r1, #0]
 8003390:	431a      	orrs	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3318      	adds	r3, #24
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	440b      	add	r3, r1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e00f      	b.n	80033be <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3318      	adds	r3, #24
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	440b      	add	r3, r1
 80033bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3318      	adds	r3, #24
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	440b      	add	r3, r1
 80033ce:	3304      	adds	r3, #4
 80033d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	7d1b      	ldrb	r3, [r3, #20]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d111      	bne.n	80033fe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3318      	adds	r3, #24
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	6811      	ldr	r1, [r2, #0]
 80033ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3318      	adds	r3, #24
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	440b      	add	r3, r1
 80033fa:	3304      	adds	r3, #4
 80033fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3307      	adds	r3, #7
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	061a      	lsls	r2, r3, #24
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3306      	adds	r3, #6
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3305      	adds	r3, #5
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	4313      	orrs	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	3204      	adds	r2, #4
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	4610      	mov	r0, r2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	6811      	ldr	r1, [r2, #0]
 8003426:	ea43 0200 	orr.w	r2, r3, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	440b      	add	r3, r1
 8003430:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003434:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3303      	adds	r3, #3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	061a      	lsls	r2, r3, #24
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3302      	adds	r3, #2
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3301      	adds	r3, #1
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	4313      	orrs	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	4610      	mov	r0, r2
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	6811      	ldr	r1, [r2, #0]
 800345c:	ea43 0200 	orr.w	r2, r3, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	440b      	add	r3, r1
 8003466:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800346a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3318      	adds	r3, #24
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	4413      	add	r3, r2
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	6811      	ldr	r1, [r2, #0]
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3318      	adds	r3, #24
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	440b      	add	r3, r1
 800348a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e00e      	b.n	80034ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e006      	b.n	80034ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034cc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d002      	beq.n	80034da <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80034d4:	7afb      	ldrb	r3, [r7, #11]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d11d      	bne.n	8003516 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3301      	adds	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3301      	adds	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003538:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800353a:	7dfb      	ldrb	r3, [r7, #23]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d003      	beq.n	8003548 <HAL_CAN_GetRxMessage+0x24>
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b02      	cmp	r3, #2
 8003544:	f040 80f3 	bne.w	800372e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10e      	bne.n	800356c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0e7      	b.n	800373c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0d8      	b.n	800373c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	331b      	adds	r3, #27
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	4413      	add	r3, r2
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0204 	and.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10c      	bne.n	80035c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	331b      	adds	r3, #27
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	0d5b      	lsrs	r3, r3, #21
 80035b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e00b      	b.n	80035da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	331b      	adds	r3, #27
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	331b      	adds	r3, #27
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0202 	and.w	r2, r3, #2
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	331b      	adds	r3, #27
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 020f 	and.w	r2, r3, #15
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	331b      	adds	r3, #27
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	4413      	add	r3, r2
 8003614:	3304      	adds	r3, #4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	b2da      	uxtb	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	331b      	adds	r3, #27
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	4413      	add	r3, r2
 8003642:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	4413      	add	r3, r2
 8003658:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0a1a      	lsrs	r2, r3, #8
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0c1a      	lsrs	r2, r3, #16
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	3302      	adds	r3, #2
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	0e1a      	lsrs	r2, r3, #24
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	3303      	adds	r3, #3
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	3304      	adds	r3, #4
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0a1a      	lsrs	r2, r3, #8
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	3305      	adds	r3, #5
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0c1a      	lsrs	r2, r3, #16
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	3306      	adds	r3, #6
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0e1a      	lsrs	r2, r3, #24
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	3307      	adds	r3, #7
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0220 	orr.w	r2, r2, #32
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	e007      	b.n	800372a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e006      	b.n	800373c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
  }
}
 800373c:	4618      	mov	r0, r3
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003758:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d002      	beq.n	8003766 <HAL_CAN_ActivateNotification+0x1e>
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d109      	bne.n	800377a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6959      	ldr	r1, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e006      	b.n	8003788 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
  }
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d07c      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d023      	beq.n	800382c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f983 	bl	8003b02 <HAL_CAN_TxMailbox0CompleteCallback>
 80037fc:	e016      	b.n	800382c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	e00c      	b.n	800382c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	e002      	b.n	800382c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f989 	bl	8003b3e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d024      	beq.n	8003880 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f963 	bl	8003b16 <HAL_CAN_TxMailbox1CompleteCallback>
 8003850:	e016      	b.n	8003880 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e00c      	b.n	8003880 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e002      	b.n	8003880 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f969 	bl	8003b52 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d024      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003892:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f943 	bl	8003b2a <HAL_CAN_TxMailbox2CompleteCallback>
 80038a4:	e016      	b.n	80038d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	e00c      	b.n	80038d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
 80038cc:	e002      	b.n	80038d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f949 	bl	8003b66 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2210      	movs	r2, #16
 80038f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2208      	movs	r2, #8
 8003912:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f930 	bl	8003b7a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd facc 	bl	8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003952:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2210      	movs	r2, #16
 800395a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d006      	beq.n	800397e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f912 	bl	8003ba2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8f9 	bl	8003b8e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2210      	movs	r2, #16
 80039b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8fc 	bl	8003bb6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2208      	movs	r2, #8
 80039d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8f5 	bl	8003bca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d07b      	beq.n	8003ae2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d072      	beq.n	8003ada <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f043 0302 	orr.w	r3, r3, #2
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d043      	beq.n	8003ada <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d03e      	beq.n	8003ada <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a62:	2b60      	cmp	r3, #96	; 0x60
 8003a64:	d02b      	beq.n	8003abe <HAL_CAN_IRQHandler+0x32a>
 8003a66:	2b60      	cmp	r3, #96	; 0x60
 8003a68:	d82e      	bhi.n	8003ac8 <HAL_CAN_IRQHandler+0x334>
 8003a6a:	2b50      	cmp	r3, #80	; 0x50
 8003a6c:	d022      	beq.n	8003ab4 <HAL_CAN_IRQHandler+0x320>
 8003a6e:	2b50      	cmp	r3, #80	; 0x50
 8003a70:	d82a      	bhi.n	8003ac8 <HAL_CAN_IRQHandler+0x334>
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d019      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x316>
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d826      	bhi.n	8003ac8 <HAL_CAN_IRQHandler+0x334>
 8003a7a:	2b30      	cmp	r3, #48	; 0x30
 8003a7c:	d010      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x30c>
 8003a7e:	2b30      	cmp	r3, #48	; 0x30
 8003a80:	d822      	bhi.n	8003ac8 <HAL_CAN_IRQHandler+0x334>
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d002      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x2f8>
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d005      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a8a:	e01d      	b.n	8003ac8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a94:	e019      	b.n	8003aca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f043 0310 	orr.w	r3, r3, #16
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a9e:	e014      	b.n	8003aca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	f043 0320 	orr.w	r3, r3, #32
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aa8:	e00f      	b.n	8003aca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ab2:	e00a      	b.n	8003aca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003abc:	e005      	b.n	8003aca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ac6:	e000      	b.n	8003aca <HAL_CAN_IRQHandler+0x336>
            break;
 8003ac8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f872 	bl	8003bde <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003afa:	bf00      	nop
 8003afc:	3728      	adds	r7, #40	; 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <__NVIC_SetPriorityGrouping+0x44>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c10:	4013      	ands	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c26:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <__NVIC_SetPriorityGrouping+0x44>)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	60d3      	str	r3, [r2, #12]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <__NVIC_GetPriorityGrouping+0x18>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	f003 0307 	and.w	r3, r3, #7
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	db0b      	blt.n	8003c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	4907      	ldr	r1, [pc, #28]	; (8003c90 <__NVIC_EnableIRQ+0x38>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2001      	movs	r0, #1
 8003c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	e000e100 	.word	0xe000e100

08003c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	6039      	str	r1, [r7, #0]
 8003c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	db0a      	blt.n	8003cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	490c      	ldr	r1, [pc, #48]	; (8003ce0 <__NVIC_SetPriority+0x4c>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cbc:	e00a      	b.n	8003cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	4908      	ldr	r1, [pc, #32]	; (8003ce4 <__NVIC_SetPriority+0x50>)
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	3b04      	subs	r3, #4
 8003ccc:	0112      	lsls	r2, r2, #4
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	761a      	strb	r2, [r3, #24]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	e000e100 	.word	0xe000e100
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f1c3 0307 	rsb	r3, r3, #7
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	bf28      	it	cs
 8003d06:	2304      	movcs	r3, #4
 8003d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d902      	bls.n	8003d18 <NVIC_EncodePriority+0x30>
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3b03      	subs	r3, #3
 8003d16:	e000      	b.n	8003d1a <NVIC_EncodePriority+0x32>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43da      	mvns	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	43d9      	mvns	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	4313      	orrs	r3, r2
         );
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ff4c 	bl	8003bf4 <__NVIC_SetPriorityGrouping>
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d76:	f7ff ff61 	bl	8003c3c <__NVIC_GetPriorityGrouping>
 8003d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f7ff ffb1 	bl	8003ce8 <NVIC_EncodePriority>
 8003d86:	4602      	mov	r2, r0
 8003d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff80 	bl	8003c94 <__NVIC_SetPriority>
}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff54 	bl	8003c58 <__NVIC_EnableIRQ>
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff f84e 	bl	8002e64 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e099      	b.n	8003f08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df4:	e00f      	b.n	8003e16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df6:	f7ff f835 	bl	8002e64 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d908      	bls.n	8003e16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e078      	b.n	8003f08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e8      	bne.n	8003df6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_DMA_Init+0x158>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d107      	bne.n	8003e80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0307 	bic.w	r3, r3, #7
 8003e96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d117      	bne.n	8003eda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fb01 	bl	80044c4 <DMA_CheckFifoParam>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2240      	movs	r2, #64	; 0x40
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e016      	b.n	8003f08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fab8 	bl	8004458 <DMA_CalcBaseAndBitshift>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	223f      	movs	r2, #63	; 0x3f
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	f010803f 	.word	0xf010803f

08003f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_DMA_Start_IT+0x26>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e040      	b.n	8003fbc <HAL_DMA_Start_IT+0xa8>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d12f      	bne.n	8003fae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa4a 	bl	80043fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	223f      	movs	r2, #63	; 0x3f
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0216 	orr.w	r2, r2, #22
 8003f82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e005      	b.n	8003fba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fd2:	f7fe ff47 	bl	8002e64 <HAL_GetTick>
 8003fd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d008      	beq.n	8003ff6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e052      	b.n	800409c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0216 	bic.w	r2, r2, #22
 8004004:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004014:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_DMA_Abort+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0208 	bic.w	r2, r2, #8
 8004034:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004046:	e013      	b.n	8004070 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004048:	f7fe ff0c 	bl	8002e64 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b05      	cmp	r3, #5
 8004054:	d90c      	bls.n	8004070 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2203      	movs	r2, #3
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e015      	b.n	800409c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e4      	bne.n	8004048 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	223f      	movs	r2, #63	; 0x3f
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d004      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00c      	b.n	80040dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2205      	movs	r2, #5
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040f4:	4b8e      	ldr	r3, [pc, #568]	; (8004330 <HAL_DMA_IRQHandler+0x248>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a8e      	ldr	r2, [pc, #568]	; (8004334 <HAL_DMA_IRQHandler+0x24c>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	2208      	movs	r2, #8
 8004114:	409a      	lsls	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01a      	beq.n	8004154 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0204 	bic.w	r2, r2, #4
 800413a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	2208      	movs	r2, #8
 8004142:	409a      	lsls	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f043 0201 	orr.w	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f043 0202 	orr.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	2204      	movs	r2, #4
 8004190:	409a      	lsls	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2204      	movs	r2, #4
 80041ae:	409a      	lsls	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2210      	movs	r2, #16
 80041c6:	409a      	lsls	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d043      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2210      	movs	r2, #16
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d018      	beq.n	800422a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d108      	bne.n	8004218 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d024      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
 8004216:	e01f      	b.n	8004258 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
 8004228:	e016      	b.n	8004258 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0208 	bic.w	r2, r2, #8
 8004246:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	2220      	movs	r2, #32
 800425e:	409a      	lsls	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 808f 	beq.w	8004388 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8087 	beq.w	8004388 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	2220      	movs	r2, #32
 8004280:	409a      	lsls	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b05      	cmp	r3, #5
 8004290:	d136      	bne.n	8004300 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0216 	bic.w	r2, r2, #22
 80042a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x1da>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0208 	bic.w	r2, r2, #8
 80042d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	223f      	movs	r2, #63	; 0x3f
 80042d8:	409a      	lsls	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07e      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
        }
        return;
 80042fe:	e079      	b.n	80043f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01d      	beq.n	800434a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	2b00      	cmp	r3, #0
 8004322:	d031      	beq.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
 800432c:	e02c      	b.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
 800432e:	bf00      	nop
 8004330:	200000c0 	.word	0x200000c0
 8004334:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d023      	beq.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
 8004348:	e01e      	b.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0210 	bic.w	r2, r2, #16
 8004366:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	2b00      	cmp	r3, #0
 800438e:	d032      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2205      	movs	r2, #5
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	3301      	adds	r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d307      	bcc.n	80043d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f2      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x2cc>
 80043ce:	e000      	b.n	80043d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80043f4:	bf00      	nop
    }
  }
}
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d108      	bne.n	800443c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800443a:	e007      	b.n	800444c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3b10      	subs	r3, #16
 8004468:	4a14      	ldr	r2, [pc, #80]	; (80044bc <DMA_CalcBaseAndBitshift+0x64>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004472:	4a13      	ldr	r2, [pc, #76]	; (80044c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d909      	bls.n	800449a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	1d1a      	adds	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	659a      	str	r2, [r3, #88]	; 0x58
 8004498:	e007      	b.n	80044aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	aaaaaaab 	.word	0xaaaaaaab
 80044c0:	08009878 	.word	0x08009878

080044c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11f      	bne.n	800451e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d856      	bhi.n	8004592 <DMA_CheckFifoParam+0xce>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <DMA_CheckFifoParam+0x28>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	0800450f 	.word	0x0800450f
 80044f4:	080044fd 	.word	0x080044fd
 80044f8:	08004593 	.word	0x08004593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d046      	beq.n	8004596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450c:	e043      	b.n	8004596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004516:	d140      	bne.n	800459a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451c:	e03d      	b.n	800459a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	d121      	bne.n	800456c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d837      	bhi.n	800459e <DMA_CheckFifoParam+0xda>
 800452e:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <DMA_CheckFifoParam+0x70>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004545 	.word	0x08004545
 8004538:	0800454b 	.word	0x0800454b
 800453c:	08004545 	.word	0x08004545
 8004540:	0800455d 	.word	0x0800455d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e030      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d025      	beq.n	80045a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455a:	e022      	b.n	80045a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004564:	d11f      	bne.n	80045a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800456a:	e01c      	b.n	80045a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d903      	bls.n	800457a <DMA_CheckFifoParam+0xb6>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d003      	beq.n	8004580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004578:	e018      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      break;
 800457e:	e015      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00e      	beq.n	80045aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      break;
 8004590:	e00b      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;
 8004592:	bf00      	nop
 8004594:	e00a      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 8004596:	bf00      	nop
 8004598:	e008      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 800459a:	bf00      	nop
 800459c:	e006      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 800459e:	bf00      	nop
 80045a0:	e004      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 80045a2:	bf00      	nop
 80045a4:	e002      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;   
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 80045aa:	bf00      	nop
    }
  } 
  
  return status; 
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop

080045bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	e177      	b.n	80048c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045d8:	2201      	movs	r2, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	f040 8166 	bne.w	80048c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d005      	beq.n	800460e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460a:	2b02      	cmp	r3, #2
 800460c:	d130      	bne.n	8004670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	2203      	movs	r2, #3
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004644:	2201      	movs	r2, #1
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 0201 	and.w	r2, r3, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b03      	cmp	r3, #3
 800467a:	d017      	beq.n	80046ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d123      	bne.n	8004700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	08da      	lsrs	r2, r3, #3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3208      	adds	r2, #8
 80046c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	220f      	movs	r2, #15
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	08da      	lsrs	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3208      	adds	r2, #8
 80046fa:	69b9      	ldr	r1, [r7, #24]
 80046fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	2203      	movs	r2, #3
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 0203 	and.w	r2, r3, #3
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80c0 	beq.w	80048c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_GPIO_Init+0x324>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	4a65      	ldr	r2, [pc, #404]	; (80048e0 <HAL_GPIO_Init+0x324>)
 800474c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004750:	6453      	str	r3, [r2, #68]	; 0x44
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_GPIO_Init+0x324>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800475e:	4a61      	ldr	r2, [pc, #388]	; (80048e4 <HAL_GPIO_Init+0x328>)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	3302      	adds	r3, #2
 8004766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	220f      	movs	r2, #15
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <HAL_GPIO_Init+0x32c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d037      	beq.n	80047fa <HAL_GPIO_Init+0x23e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a57      	ldr	r2, [pc, #348]	; (80048ec <HAL_GPIO_Init+0x330>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_GPIO_Init+0x23a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a56      	ldr	r2, [pc, #344]	; (80048f0 <HAL_GPIO_Init+0x334>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02b      	beq.n	80047f2 <HAL_GPIO_Init+0x236>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a55      	ldr	r2, [pc, #340]	; (80048f4 <HAL_GPIO_Init+0x338>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d025      	beq.n	80047ee <HAL_GPIO_Init+0x232>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a54      	ldr	r2, [pc, #336]	; (80048f8 <HAL_GPIO_Init+0x33c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01f      	beq.n	80047ea <HAL_GPIO_Init+0x22e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a53      	ldr	r2, [pc, #332]	; (80048fc <HAL_GPIO_Init+0x340>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d019      	beq.n	80047e6 <HAL_GPIO_Init+0x22a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_GPIO_Init+0x344>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0x226>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_GPIO_Init+0x348>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00d      	beq.n	80047de <HAL_GPIO_Init+0x222>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a50      	ldr	r2, [pc, #320]	; (8004908 <HAL_GPIO_Init+0x34c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <HAL_GPIO_Init+0x21e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4f      	ldr	r2, [pc, #316]	; (800490c <HAL_GPIO_Init+0x350>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_GPIO_Init+0x21a>
 80047d2:	2309      	movs	r3, #9
 80047d4:	e012      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047d6:	230a      	movs	r3, #10
 80047d8:	e010      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047da:	2308      	movs	r3, #8
 80047dc:	e00e      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047de:	2307      	movs	r3, #7
 80047e0:	e00c      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047e2:	2306      	movs	r3, #6
 80047e4:	e00a      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047e6:	2305      	movs	r3, #5
 80047e8:	e008      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047ea:	2304      	movs	r3, #4
 80047ec:	e006      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047ee:	2303      	movs	r3, #3
 80047f0:	e004      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e002      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047fa:	2300      	movs	r3, #0
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	f002 0203 	and.w	r2, r2, #3
 8004802:	0092      	lsls	r2, r2, #2
 8004804:	4093      	lsls	r3, r2
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800480c:	4935      	ldr	r1, [pc, #212]	; (80048e4 <HAL_GPIO_Init+0x328>)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	3302      	adds	r3, #2
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_GPIO_Init+0x354>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800483e:	4a34      	ldr	r2, [pc, #208]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004844:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <HAL_GPIO_Init+0x354>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800486e:	4b28      	ldr	r3, [pc, #160]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_GPIO_Init+0x354>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_GPIO_Init+0x354>)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3301      	adds	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	f67f ae84 	bls.w	80045d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40020400 	.word	0x40020400
 80048f0:	40020800 	.word	0x40020800
 80048f4:	40020c00 	.word	0x40020c00
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40021400 	.word	0x40021400
 8004900:	40021800 	.word	0x40021800
 8004904:	40021c00 	.word	0x40021c00
 8004908:	40022000 	.word	0x40022000
 800490c:	40022400 	.word	0x40022400
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
 8004920:	4613      	mov	r3, r2
 8004922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004924:	787b      	ldrb	r3, [r7, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004930:	e003      	b.n	800493a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	041a      	lsls	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	619a      	str	r2, [r3, #24]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e267      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d075      	beq.n	8004a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004966:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b04      	cmp	r3, #4
 8004970:	d00c      	beq.n	800498c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004972:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800497a:	2b08      	cmp	r3, #8
 800497c:	d112      	bne.n	80049a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800497e:	4b82      	ldr	r3, [pc, #520]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498a:	d10b      	bne.n	80049a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498c:	4b7e      	ldr	r3, [pc, #504]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05b      	beq.n	8004a50 <HAL_RCC_OscConfig+0x108>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d157      	bne.n	8004a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e242      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ac:	d106      	bne.n	80049bc <HAL_RCC_OscConfig+0x74>
 80049ae:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e01d      	b.n	80049f8 <HAL_RCC_OscConfig+0xb0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x98>
 80049c6:	4b70      	ldr	r3, [pc, #448]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6f      	ldr	r2, [pc, #444]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4b6d      	ldr	r3, [pc, #436]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6c      	ldr	r2, [pc, #432]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0xb0>
 80049e0:	4b69      	ldr	r3, [pc, #420]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a68      	ldr	r2, [pc, #416]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	4b66      	ldr	r3, [pc, #408]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a65      	ldr	r2, [pc, #404]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 80049f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7fe fa30 	bl	8002e64 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fe fa2c 	bl	8002e64 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e207      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0xc0>
 8004a26:	e014      	b.n	8004a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fe fa1c 	bl	8002e64 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fe fa18 	bl	8002e64 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e1f3      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	4b51      	ldr	r3, [pc, #324]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0xe8>
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d063      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d11c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a76:	4b44      	ldr	r3, [pc, #272]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d116      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_RCC_OscConfig+0x152>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e1c7      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4937      	ldr	r1, [pc, #220]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	e03a      	b.n	8004b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d020      	beq.n	8004afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab8:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <HAL_RCC_OscConfig+0x244>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fe f9d1 	bl	8002e64 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac6:	f7fe f9cd 	bl	8002e64 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e1a8      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae4:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4925      	ldr	r1, [pc, #148]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]
 8004af8:	e015      	b.n	8004b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_RCC_OscConfig+0x244>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fe f9b0 	bl	8002e64 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fe f9ac 	bl	8002e64 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e187      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d036      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_RCC_OscConfig+0x248>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fe f990 	bl	8002e64 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fe f98c 	bl	8002e64 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e167      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x200>
 8004b66:	e01b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_OscConfig+0x248>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6e:	f7fe f979 	bl	8002e64 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	e00e      	b.n	8004b94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b76:	f7fe f975 	bl	8002e64 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d907      	bls.n	8004b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e150      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	42470000 	.word	0x42470000
 8004b90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ea      	bne.n	8004b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8097 	beq.w	8004cdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb2:	4b81      	ldr	r3, [pc, #516]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	4b7d      	ldr	r3, [pc, #500]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	4a7c      	ldr	r2, [pc, #496]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bce:	4b7a      	ldr	r3, [pc, #488]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <HAL_RCC_OscConfig+0x474>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d118      	bne.n	8004c1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bea:	4b74      	ldr	r3, [pc, #464]	; (8004dbc <HAL_RCC_OscConfig+0x474>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a73      	ldr	r2, [pc, #460]	; (8004dbc <HAL_RCC_OscConfig+0x474>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf6:	f7fe f935 	bl	8002e64 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfe:	f7fe f931 	bl	8002e64 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e10c      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <HAL_RCC_OscConfig+0x474>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d106      	bne.n	8004c32 <HAL_RCC_OscConfig+0x2ea>
 8004c24:	4b64      	ldr	r3, [pc, #400]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a63      	ldr	r2, [pc, #396]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c30:	e01c      	b.n	8004c6c <HAL_RCC_OscConfig+0x324>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x30c>
 8004c3a:	4b5f      	ldr	r3, [pc, #380]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70
 8004c46:	4b5c      	ldr	r3, [pc, #368]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a5b      	ldr	r2, [pc, #364]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0x324>
 8004c54:	4b58      	ldr	r3, [pc, #352]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a57      	ldr	r2, [pc, #348]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c60:	4b55      	ldr	r3, [pc, #340]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a54      	ldr	r2, [pc, #336]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c66:	f023 0304 	bic.w	r3, r3, #4
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fe f8f6 	bl	8002e64 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fe f8f2 	bl	8002e64 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0cb      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ee      	beq.n	8004c7c <HAL_RCC_OscConfig+0x334>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca0:	f7fe f8e0 	bl	8002e64 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fe f8dc 	bl	8002e64 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0b5      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbe:	4b3e      	ldr	r3, [pc, #248]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ee      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	4a38      	ldr	r2, [pc, #224]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80a1 	beq.w	8004e28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce6:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d05c      	beq.n	8004dac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d141      	bne.n	8004d7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCC_OscConfig+0x478>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d00:	f7fe f8b0 	bl	8002e64 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fe f8ac 	bl	8002e64 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e087      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	019b      	lsls	r3, r3, #6
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	491b      	ldr	r1, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d50:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <HAL_RCC_OscConfig+0x478>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d56:	f7fe f885 	bl	8002e64 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5e:	f7fe f881 	bl	8002e64 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e05c      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x416>
 8004d7c:	e054      	b.n	8004e28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <HAL_RCC_OscConfig+0x478>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fe f86e 	bl	8002e64 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fe f86a 	bl	8002e64 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e045      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_OscConfig+0x470>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x444>
 8004daa:	e03d      	b.n	8004e28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e038      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_RCC_OscConfig+0x4ec>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d028      	beq.n	8004e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d121      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d11a      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d111      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800

08004e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0cc      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b68      	ldr	r3, [pc, #416]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d90c      	bls.n	8004e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b65      	ldr	r3, [pc, #404]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e62:	4b63      	ldr	r3, [pc, #396]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0b8      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e8c:	4b59      	ldr	r3, [pc, #356]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4a58      	ldr	r2, [pc, #352]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea4:	4b53      	ldr	r3, [pc, #332]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4a52      	ldr	r2, [pc, #328]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb0:	4b50      	ldr	r3, [pc, #320]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	494d      	ldr	r1, [pc, #308]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d044      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed6:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d119      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e07f      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef6:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e06f      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f06:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e067      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f16:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f023 0203 	bic.w	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4934      	ldr	r1, [pc, #208]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f28:	f7fd ff9c 	bl	8002e64 <HAL_GetTick>
 8004f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f30:	f7fd ff98 	bl	8002e64 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e04f      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f46:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 020c 	and.w	r2, r3, #12
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1eb      	bne.n	8004f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d20c      	bcs.n	8004f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6e:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e032      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f8c:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4916      	ldr	r1, [pc, #88]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	490e      	ldr	r1, [pc, #56]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fbe:	f000 f821 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	490a      	ldr	r1, [pc, #40]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd0:	5ccb      	ldrb	r3, [r1, r3]
 8004fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd6:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <HAL_RCC_ClockConfig+0x1c8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fd fb08 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023c00 	.word	0x40023c00
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	08009860 	.word	0x08009860
 8004ffc:	200000c0 	.word	0x200000c0
 8005000:	200000c4 	.word	0x200000c4

08005004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005008:	b090      	sub	sp, #64	; 0x40
 800500a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	637b      	str	r3, [r7, #52]	; 0x34
 8005010:	2300      	movs	r3, #0
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005014:	2300      	movs	r3, #0
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800501c:	4b59      	ldr	r3, [pc, #356]	; (8005184 <HAL_RCC_GetSysClockFreq+0x180>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b08      	cmp	r3, #8
 8005026:	d00d      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x40>
 8005028:	2b08      	cmp	r3, #8
 800502a:	f200 80a1 	bhi.w	8005170 <HAL_RCC_GetSysClockFreq+0x16c>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x34>
 8005032:	2b04      	cmp	r3, #4
 8005034:	d003      	beq.n	800503e <HAL_RCC_GetSysClockFreq+0x3a>
 8005036:	e09b      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005038:	4b53      	ldr	r3, [pc, #332]	; (8005188 <HAL_RCC_GetSysClockFreq+0x184>)
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800503c:	e09b      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800503e:	4b53      	ldr	r3, [pc, #332]	; (800518c <HAL_RCC_GetSysClockFreq+0x188>)
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005042:	e098      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005044:	4b4f      	ldr	r3, [pc, #316]	; (8005184 <HAL_RCC_GetSysClockFreq+0x180>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800504e:	4b4d      	ldr	r3, [pc, #308]	; (8005184 <HAL_RCC_GetSysClockFreq+0x180>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d028      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505a:	4b4a      	ldr	r3, [pc, #296]	; (8005184 <HAL_RCC_GetSysClockFreq+0x180>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	099b      	lsrs	r3, r3, #6
 8005060:	2200      	movs	r2, #0
 8005062:	623b      	str	r3, [r7, #32]
 8005064:	627a      	str	r2, [r7, #36]	; 0x24
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800506c:	2100      	movs	r1, #0
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCC_GetSysClockFreq+0x188>)
 8005070:	fb03 f201 	mul.w	r2, r3, r1
 8005074:	2300      	movs	r3, #0
 8005076:	fb00 f303 	mul.w	r3, r0, r3
 800507a:	4413      	add	r3, r2
 800507c:	4a43      	ldr	r2, [pc, #268]	; (800518c <HAL_RCC_GetSysClockFreq+0x188>)
 800507e:	fba0 1202 	umull	r1, r2, r0, r2
 8005082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005084:	460a      	mov	r2, r1
 8005086:	62ba      	str	r2, [r7, #40]	; 0x28
 8005088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508a:	4413      	add	r3, r2
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	2200      	movs	r2, #0
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	61fa      	str	r2, [r7, #28]
 8005096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800509a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800509e:	f7fb fd3d 	bl	8000b1c <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4613      	mov	r3, r2
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050aa:	e053      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ac:	4b35      	ldr	r3, [pc, #212]	; (8005184 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	099b      	lsrs	r3, r3, #6
 80050b2:	2200      	movs	r2, #0
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	617a      	str	r2, [r7, #20]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80050be:	f04f 0b00 	mov.w	fp, #0
 80050c2:	4652      	mov	r2, sl
 80050c4:	465b      	mov	r3, fp
 80050c6:	f04f 0000 	mov.w	r0, #0
 80050ca:	f04f 0100 	mov.w	r1, #0
 80050ce:	0159      	lsls	r1, r3, #5
 80050d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d4:	0150      	lsls	r0, r2, #5
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	ebb2 080a 	subs.w	r8, r2, sl
 80050de:	eb63 090b 	sbc.w	r9, r3, fp
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050f6:	ebb2 0408 	subs.w	r4, r2, r8
 80050fa:	eb63 0509 	sbc.w	r5, r3, r9
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	00eb      	lsls	r3, r5, #3
 8005108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800510c:	00e2      	lsls	r2, r4, #3
 800510e:	4614      	mov	r4, r2
 8005110:	461d      	mov	r5, r3
 8005112:	eb14 030a 	adds.w	r3, r4, sl
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	eb45 030b 	adc.w	r3, r5, fp
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800512a:	4629      	mov	r1, r5
 800512c:	028b      	lsls	r3, r1, #10
 800512e:	4621      	mov	r1, r4
 8005130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005134:	4621      	mov	r1, r4
 8005136:	028a      	lsls	r2, r1, #10
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	2200      	movs	r2, #0
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	60fa      	str	r2, [r7, #12]
 8005144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005148:	f7fb fce8 	bl	8000b1c <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4613      	mov	r3, r2
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_GetSysClockFreq+0x180>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	3301      	adds	r3, #1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800516e:	e002      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_GetSysClockFreq+0x184>)
 8005172:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005178:	4618      	mov	r0, r3
 800517a:	3740      	adds	r7, #64	; 0x40
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	00f42400 	.word	0x00f42400
 800518c:	00b71b00 	.word	0x00b71b00

08005190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	200000c0 	.word	0x200000c0

080051a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051ac:	f7ff fff0 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0a9b      	lsrs	r3, r3, #10
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	08009870 	.word	0x08009870

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051d4:	f7ff ffdc 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0b5b      	lsrs	r3, r3, #13
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	08009870 	.word	0x08009870

080051f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	220f      	movs	r2, #15
 8005206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0203 	and.w	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <HAL_RCC_GetClockConfig+0x60>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 020f 	and.w	r2, r3, #15
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
 8005258:	40023c00 	.word	0x40023c00

0800525c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e041      	b.n	80052f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f839 	bl	80052fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f000 f9d8 	bl	8005650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	d001      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e04e      	b.n	80053c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d022      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x80>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d01d      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x80>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d018      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x80>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x80>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x80>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x80>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <HAL_TIM_Base_Start_IT+0xdc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d111      	bne.n	80053b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d010      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b2:	e007      	b.n	80053c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40010400 	.word	0x40010400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40001800 	.word	0x40001800

080053f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8ee 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8e0 	bl	8005600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f8f1 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f8c4 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8b6 	bl	8005600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f8c7 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0208 	mvn.w	r2, #8
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f89a 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f88c 	bl	8005600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f89d 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b10      	cmp	r3, #16
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f870 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f862 	bl	8005600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f873 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fffc 	bl	800256c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f902 	bl	80057a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d10e      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f838 	bl	800563c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d10e      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0220 	mvn.w	r2, #32
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8cc 	bl	8005790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a40      	ldr	r2, [pc, #256]	; (8005764 <TIM_Base_SetConfig+0x114>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566e:	d00f      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3d      	ldr	r2, [pc, #244]	; (8005768 <TIM_Base_SetConfig+0x118>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a3c      	ldr	r2, [pc, #240]	; (800576c <TIM_Base_SetConfig+0x11c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a3b      	ldr	r2, [pc, #236]	; (8005770 <TIM_Base_SetConfig+0x120>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a3a      	ldr	r2, [pc, #232]	; (8005774 <TIM_Base_SetConfig+0x124>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2f      	ldr	r2, [pc, #188]	; (8005764 <TIM_Base_SetConfig+0x114>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d02b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d027      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	; (8005768 <TIM_Base_SetConfig+0x118>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d023      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2b      	ldr	r2, [pc, #172]	; (800576c <TIM_Base_SetConfig+0x11c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01f      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	; (8005770 <TIM_Base_SetConfig+0x120>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a29      	ldr	r2, [pc, #164]	; (8005774 <TIM_Base_SetConfig+0x124>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d017      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a28      	ldr	r2, [pc, #160]	; (8005778 <TIM_Base_SetConfig+0x128>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a27      	ldr	r2, [pc, #156]	; (800577c <TIM_Base_SetConfig+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00f      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a26      	ldr	r2, [pc, #152]	; (8005780 <TIM_Base_SetConfig+0x130>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a25      	ldr	r2, [pc, #148]	; (8005784 <TIM_Base_SetConfig+0x134>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a24      	ldr	r2, [pc, #144]	; (8005788 <TIM_Base_SetConfig+0x138>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d003      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a23      	ldr	r2, [pc, #140]	; (800578c <TIM_Base_SetConfig+0x13c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d108      	bne.n	8005714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <TIM_Base_SetConfig+0x114>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_Base_SetConfig+0xf8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <TIM_Base_SetConfig+0x124>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d103      	bne.n	8005750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	615a      	str	r2, [r3, #20]
}
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40010000 	.word	0x40010000
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40010400 	.word	0x40010400
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800
 8005784:	40001800 	.word	0x40001800
 8005788:	40001c00 	.word	0x40001c00
 800578c:	40002000 	.word	0x40002000

08005790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e03f      	b.n	800584a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fd f8e4 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2224      	movs	r2, #36	; 0x24
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 f877 	bl	80068f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695a      	ldr	r2, [r3, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08a      	sub	sp, #40	; 0x28
 8005856:	af02      	add	r7, sp, #8
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b20      	cmp	r3, #32
 8005870:	d17c      	bne.n	800596c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_UART_Transmit+0x2c>
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e075      	b.n	800596e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_UART_Transmit+0x3e>
 800588c:	2302      	movs	r3, #2
 800588e:	e06e      	b.n	800596e <HAL_UART_Transmit+0x11c>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2221      	movs	r2, #33	; 0x21
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a6:	f7fd fadd 	bl	8002e64 <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d108      	bne.n	80058d4 <HAL_UART_Transmit+0x82>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058e4:	e02a      	b.n	800593c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fd2e 	bl	8006352 <UART_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e036      	b.n	800596e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005914:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3302      	adds	r3, #2
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	e007      	b.n	800592e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	781a      	ldrb	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	3301      	adds	r3, #1
 800592c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1cf      	bne.n	80058e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2200      	movs	r2, #0
 800594e:	2140      	movs	r1, #64	; 0x40
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fcfe 	bl	8006352 <UART_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e006      	b.n	800596e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800596c:	2302      	movs	r3, #2
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08c      	sub	sp, #48	; 0x30
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b20      	cmp	r3, #32
 8005990:	d165      	bne.n	8005a5e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_UART_Transmit_DMA+0x26>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e05e      	b.n	8005a60 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_UART_Transmit_DMA+0x38>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e057      	b.n	8005a60 <HAL_UART_Transmit_DMA+0xe8>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	88fa      	ldrh	r2, [r7, #6]
 80059c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2221      	movs	r2, #33	; 0x21
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_UART_Transmit_DMA+0xf0>)
 80059de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_UART_Transmit_DMA+0xf4>)
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	4a20      	ldr	r2, [pc, #128]	; (8005a70 <HAL_UART_Transmit_DMA+0xf8>)
 80059ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	2200      	movs	r2, #0
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80059f8:	f107 0308 	add.w	r3, r7, #8
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	6819      	ldr	r1, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f7fe fa80 	bl	8003f14 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	617b      	str	r3, [r7, #20]
   return(result);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a46:	627a      	str	r2, [r7, #36]	; 0x24
 8005a48:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6a39      	ldr	r1, [r7, #32]
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e000      	b.n	8005a60 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3730      	adds	r7, #48	; 0x30
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	080060ad 	.word	0x080060ad
 8005a6c:	08006147 	.word	0x08006147
 8005a70:	080062bf 	.word	0x080062bf

08005a74 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08c      	sub	sp, #48	; 0x30
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d152      	bne.n	8005b34 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e04b      	b.n	8005b36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e044      	b.n	8005b36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	461a      	mov	r2, r3
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fcb5 	bl	8006430 <UART_Start_Receive_DMA>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d12c      	bne.n	8005b2e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d125      	bne.n	8005b28 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	617b      	str	r3, [r7, #20]
   return(result);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f043 0310 	orr.w	r3, r3, #16
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b12:	627a      	str	r2, [r7, #36]	; 0x24
 8005b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6a39      	ldr	r1, [r7, #32]
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e5      	bne.n	8005af2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005b26:	e002      	b.n	8005b2e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b32:	e000      	b.n	8005b36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3730      	adds	r7, #48	; 0x30
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b0ba      	sub	sp, #232	; 0xe8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10f      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x66>
 8005b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fdeb 	bl	800677a <UART_Receive_IT>
      return;
 8005ba4:	e256      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80de 	beq.w	8005d6c <HAL_UART_IRQHandler+0x22c>
 8005bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80d1 	beq.w	8005d6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_UART_IRQHandler+0xae>
 8005bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0201 	orr.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_UART_IRQHandler+0xd2>
 8005bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f043 0202 	orr.w	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_UART_IRQHandler+0xf6>
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0204 	orr.w	r2, r3, #4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d011      	beq.n	8005c66 <HAL_UART_IRQHandler+0x126>
 8005c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d105      	bne.n	8005c5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f043 0208 	orr.w	r2, r3, #8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 81ed 	beq.w	800604a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_UART_IRQHandler+0x14e>
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fd76 	bl	800677a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <HAL_UART_IRQHandler+0x17a>
 8005cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d04f      	beq.n	8005d5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fc7e 	bl	80065bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d141      	bne.n	8005d52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3314      	adds	r3, #20
 8005cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1d9      	bne.n	8005cce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d013      	beq.n	8005d4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	4a7d      	ldr	r2, [pc, #500]	; (8005f1c <HAL_UART_IRQHandler+0x3dc>)
 8005d28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe f9b8 	bl	80040a4 <HAL_DMA_Abort_IT>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d016      	beq.n	8005d68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e00e      	b.n	8005d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9a4 	bl	8006098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e00a      	b.n	8005d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f9a0 	bl	8006098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	e006      	b.n	8005d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f99c 	bl	8006098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d66:	e170      	b.n	800604a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	bf00      	nop
    return;
 8005d6a:	e16e      	b.n	800604a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	f040 814a 	bne.w	800600a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8143 	beq.w	800600a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 813c 	beq.w	800600a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	f040 80b4 	bne.w	8005f20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8140 	beq.w	800604e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f080 8139 	bcs.w	800604e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	f000 8088 	beq.w	8005f02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1d9      	bne.n	8005df2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3314      	adds	r3, #20
 8005e44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e1      	bne.n	8005e3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e3      	bne.n	8005e7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed2:	f023 0310 	bic.w	r3, r3, #16
 8005ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ee4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e3      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe f861 	bl	8003fc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fb ff48 	bl	8001da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f18:	e099      	b.n	800604e <HAL_UART_IRQHandler+0x50e>
 8005f1a:	bf00      	nop
 8005f1c:	08006683 	.word	0x08006683
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 808b 	beq.w	8006052 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8086 	beq.w	8006052 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f6a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e3      	bne.n	8005f46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e3      	bne.n	8005f7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fe8:	61fa      	str	r2, [r7, #28]
 8005fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e3      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb fed0 	bl	8001da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006008:	e023      	b.n	8006052 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_UART_IRQHandler+0x4ea>
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fb41 	bl	80066aa <UART_Transmit_IT>
    return;
 8006028:	e014      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <HAL_UART_IRQHandler+0x514>
 8006036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fb81 	bl	800674a <UART_EndTransmit_IT>
    return;
 8006048:	e004      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
    return;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
      return;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <HAL_UART_IRQHandler+0x514>
      return;
 8006052:	bf00      	nop
  }
}
 8006054:	37e8      	adds	r7, #232	; 0xe8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop

0800605c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b090      	sub	sp, #64	; 0x40
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d137      	bne.n	8006138 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80060c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ca:	2200      	movs	r2, #0
 80060cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3314      	adds	r3, #20
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	623b      	str	r3, [r7, #32]
   return(result);
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ee:	633a      	str	r2, [r7, #48]	; 0x30
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	330c      	adds	r3, #12
 8006108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	60fb      	str	r3, [r7, #12]
   return(result);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006118:	637b      	str	r3, [r7, #52]	; 0x34
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006122:	61fa      	str	r2, [r7, #28]
 8006124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	69b9      	ldr	r1, [r7, #24]
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	617b      	str	r3, [r7, #20]
   return(result);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e5      	bne.n	8006102 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006136:	e002      	b.n	800613e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006138:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800613a:	f7ff ff8f 	bl	800605c <HAL_UART_TxCpltCallback>
}
 800613e:	bf00      	nop
 8006140:	3740      	adds	r7, #64	; 0x40
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7fb fe4b 	bl	8001df0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b09c      	sub	sp, #112	; 0x70
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d172      	bne.n	8006264 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800617e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006180:	2200      	movs	r2, #0
 8006182:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006196:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619a:	66bb      	str	r3, [r7, #104]	; 0x68
 800619c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80061a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e5      	bne.n	8006184 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3314      	adds	r3, #20
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	667b      	str	r3, [r7, #100]	; 0x64
 80061d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3314      	adds	r3, #20
 80061d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061d8:	647a      	str	r2, [r7, #68]	; 0x44
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3314      	adds	r3, #20
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	623b      	str	r3, [r7, #32]
   return(result);
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006202:	663b      	str	r3, [r7, #96]	; 0x60
 8006204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800620c:	633a      	str	r2, [r7, #48]	; 0x30
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e5      	bne.n	80061ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	2b01      	cmp	r3, #1
 800622e:	d119      	bne.n	8006264 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006250:	61fa      	str	r2, [r7, #28]
 8006252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	69b9      	ldr	r1, [r7, #24]
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	617b      	str	r3, [r7, #20]
   return(result);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	2b01      	cmp	r3, #1
 800626a:	d106      	bne.n	800627a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800626c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006270:	4619      	mov	r1, r3
 8006272:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006274:	f7fb fd98 	bl	8001da8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006278:	e002      	b.n	8006280 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800627a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800627c:	f7ff fef8 	bl	8006070 <HAL_UART_RxCpltCallback>
}
 8006280:	bf00      	nop
 8006282:	3770      	adds	r7, #112	; 0x70
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	2b01      	cmp	r3, #1
 800629c:	d108      	bne.n	80062b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	4619      	mov	r1, r3
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f7fb fd7d 	bl	8001da8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062ae:	e002      	b.n	80062b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff fee7 	bl	8006084 <HAL_UART_RxHalfCpltCallback>
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b80      	cmp	r3, #128	; 0x80
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b21      	cmp	r3, #33	; 0x21
 80062f0:	d108      	bne.n	8006304 <UART_DMAError+0x46>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2200      	movs	r2, #0
 80062fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062fe:	68b8      	ldr	r0, [r7, #8]
 8006300:	f000 f934 	bl	800656c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b22      	cmp	r3, #34	; 0x22
 8006324:	d108      	bne.n	8006338 <UART_DMAError+0x7a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2200      	movs	r2, #0
 8006330:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006332:	68b8      	ldr	r0, [r7, #8]
 8006334:	f000 f942 	bl	80065bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	f043 0210 	orr.w	r2, r3, #16
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006344:	68b8      	ldr	r0, [r7, #8]
 8006346:	f7ff fea7 	bl	8006098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b090      	sub	sp, #64	; 0x40
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	4613      	mov	r3, r2
 8006360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006362:	e050      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800636a:	d04c      	beq.n	8006406 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800636c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0x30>
 8006372:	f7fc fd77 	bl	8002e64 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637e:	429a      	cmp	r2, r3
 8006380:	d241      	bcs.n	8006406 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063a2:	637a      	str	r2, [r7, #52]	; 0x34
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e5      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	613b      	str	r3, [r7, #16]
   return(result);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3314      	adds	r3, #20
 80063d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d6:	623a      	str	r2, [r7, #32]
 80063d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	69f9      	ldr	r1, [r7, #28]
 80063dc:	6a3a      	ldr	r2, [r7, #32]
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e5      	bne.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e00f      	b.n	8006426 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4013      	ands	r3, r2
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	bf0c      	ite	eq
 8006416:	2301      	moveq	r3, #1
 8006418:	2300      	movne	r3, #0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	429a      	cmp	r2, r3
 8006422:	d09f      	beq.n	8006364 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3740      	adds	r7, #64	; 0x40
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b098      	sub	sp, #96	; 0x60
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	4613      	mov	r3, r2
 800643c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2222      	movs	r2, #34	; 0x22
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	4a40      	ldr	r2, [pc, #256]	; (8006560 <UART_Start_Receive_DMA+0x130>)
 800645e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	4a3f      	ldr	r2, [pc, #252]	; (8006564 <UART_Start_Receive_DMA+0x134>)
 8006466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	4a3e      	ldr	r2, [pc, #248]	; (8006568 <UART_Start_Receive_DMA+0x138>)
 800646e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	2200      	movs	r2, #0
 8006476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006478:	f107 0308 	add.w	r3, r7, #8
 800647c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	f7fd fd40 	bl	8003f14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d019      	beq.n	80064ee <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80064dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e5      	bne.n	80064ba <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	657b      	str	r3, [r7, #84]	; 0x54
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3314      	adds	r3, #20
 800650c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800650e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3314      	adds	r3, #20
 8006528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	617b      	str	r3, [r7, #20]
   return(result);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006538:	653b      	str	r3, [r7, #80]	; 0x50
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3314      	adds	r3, #20
 8006540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006542:	627a      	str	r2, [r7, #36]	; 0x24
 8006544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6a39      	ldr	r1, [r7, #32]
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e5      	bne.n	8006522 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3760      	adds	r7, #96	; 0x60
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	08006163 	.word	0x08006163
 8006564:	08006289 	.word	0x08006289
 8006568:	080062bf 	.word	0x080062bf

0800656c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	60bb      	str	r3, [r7, #8]
   return(result);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	61ba      	str	r2, [r7, #24]
 8006596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6979      	ldr	r1, [r7, #20]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	613b      	str	r3, [r7, #16]
   return(result);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80065b0:	bf00      	nop
 80065b2:	3724      	adds	r7, #36	; 0x24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b095      	sub	sp, #84	; 0x54
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065e4:	643a      	str	r2, [r7, #64]	; 0x40
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	61fb      	str	r3, [r7, #28]
   return(result);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800661e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e5      	bne.n	80065f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	2b01      	cmp	r3, #1
 8006632:	d119      	bne.n	8006668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	60bb      	str	r3, [r7, #8]
   return(result);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f023 0310 	bic.w	r3, r3, #16
 800664a:	647b      	str	r3, [r7, #68]	; 0x44
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006654:	61ba      	str	r2, [r7, #24]
 8006656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6979      	ldr	r1, [r7, #20]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	613b      	str	r3, [r7, #16]
   return(result);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e5      	bne.n	8006634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006676:	bf00      	nop
 8006678:	3754      	adds	r7, #84	; 0x54
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fcfb 	bl	8006098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b21      	cmp	r3, #33	; 0x21
 80066bc:	d13e      	bne.n	800673c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c6:	d114      	bne.n	80066f2 <UART_Transmit_IT+0x48>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d110      	bne.n	80066f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]
 80066f0:	e008      	b.n	8006704 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	1c59      	adds	r1, r3, #1
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6211      	str	r1, [r2, #32]
 80066fc:	781a      	ldrb	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29b      	uxth	r3, r3
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	4619      	mov	r1, r3
 8006712:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10f      	bne.n	8006738 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006726:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006736:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006760:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fc76 	bl	800605c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b08c      	sub	sp, #48	; 0x30
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b22      	cmp	r3, #34	; 0x22
 800678c:	f040 80ab 	bne.w	80068e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006798:	d117      	bne.n	80067ca <UART_Receive_IT+0x50>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d113      	bne.n	80067ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	1c9a      	adds	r2, r3, #2
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	; 0x28
 80067c8:	e026      	b.n	8006818 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067dc:	d007      	beq.n	80067ee <UART_Receive_IT+0x74>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <UART_Receive_IT+0x82>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	e008      	b.n	800680e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b29b      	uxth	r3, r3
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4619      	mov	r1, r3
 8006826:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006828:	2b00      	cmp	r3, #0
 800682a:	d15a      	bne.n	80068e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0220 	bic.w	r2, r2, #32
 800683a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800684a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	2b01      	cmp	r3, #1
 800686a:	d135      	bne.n	80068d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	613b      	str	r3, [r7, #16]
   return(result);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f023 0310 	bic.w	r3, r3, #16
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006892:	623a      	str	r2, [r7, #32]
 8006894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	69f9      	ldr	r1, [r7, #28]
 8006898:	6a3a      	ldr	r2, [r7, #32]
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d10a      	bne.n	80068ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fb fa69 	bl	8001da8 <HAL_UARTEx_RxEventCallback>
 80068d6:	e002      	b.n	80068de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff fbc9 	bl	8006070 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e002      	b.n	80068e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
  }
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3730      	adds	r7, #48	; 0x30
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f4:	b0c0      	sub	sp, #256	; 0x100
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	68d9      	ldr	r1, [r3, #12]
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	ea40 0301 	orr.w	r3, r0, r1
 8006918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	431a      	orrs	r2, r3
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	431a      	orrs	r2, r3
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006948:	f021 010c 	bic.w	r1, r1, #12
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006956:	430b      	orrs	r3, r1
 8006958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800695a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696a:	6999      	ldr	r1, [r3, #24]
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	ea40 0301 	orr.w	r3, r0, r1
 8006976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b8f      	ldr	r3, [pc, #572]	; (8006bbc <UART_SetConfig+0x2cc>)
 8006980:	429a      	cmp	r2, r3
 8006982:	d005      	beq.n	8006990 <UART_SetConfig+0xa0>
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4b8d      	ldr	r3, [pc, #564]	; (8006bc0 <UART_SetConfig+0x2d0>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d104      	bne.n	800699a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006990:	f7fe fc1e 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8006994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006998:	e003      	b.n	80069a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800699a:	f7fe fc05 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 800699e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ac:	f040 810c 	bne.w	8006bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069c2:	4622      	mov	r2, r4
 80069c4:	462b      	mov	r3, r5
 80069c6:	1891      	adds	r1, r2, r2
 80069c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80069ca:	415b      	adcs	r3, r3
 80069cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069d2:	4621      	mov	r1, r4
 80069d4:	eb12 0801 	adds.w	r8, r2, r1
 80069d8:	4629      	mov	r1, r5
 80069da:	eb43 0901 	adc.w	r9, r3, r1
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069f2:	4690      	mov	r8, r2
 80069f4:	4699      	mov	r9, r3
 80069f6:	4623      	mov	r3, r4
 80069f8:	eb18 0303 	adds.w	r3, r8, r3
 80069fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a00:	462b      	mov	r3, r5
 8006a02:	eb49 0303 	adc.w	r3, r9, r3
 8006a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a1e:	460b      	mov	r3, r1
 8006a20:	18db      	adds	r3, r3, r3
 8006a22:	653b      	str	r3, [r7, #80]	; 0x50
 8006a24:	4613      	mov	r3, r2
 8006a26:	eb42 0303 	adc.w	r3, r2, r3
 8006a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a34:	f7fa f872 	bl	8000b1c <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4b61      	ldr	r3, [pc, #388]	; (8006bc4 <UART_SetConfig+0x2d4>)
 8006a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	011c      	lsls	r4, r3, #4
 8006a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	1891      	adds	r1, r2, r2
 8006a5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a60:	415b      	adcs	r3, r3
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a68:	4641      	mov	r1, r8
 8006a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8006a6e:	4649      	mov	r1, r9
 8006a70:	eb43 0b01 	adc.w	fp, r3, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a88:	4692      	mov	sl, r2
 8006a8a:	469b      	mov	fp, r3
 8006a8c:	4643      	mov	r3, r8
 8006a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a96:	464b      	mov	r3, r9
 8006a98:	eb4b 0303 	adc.w	r3, fp, r3
 8006a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	18db      	adds	r3, r3, r3
 8006ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aba:	4613      	mov	r3, r2
 8006abc:	eb42 0303 	adc.w	r3, r2, r3
 8006ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006aca:	f7fa f827 	bl	8000b1c <__aeabi_uldivmod>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <UART_SetConfig+0x2d4>)
 8006ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	2264      	movs	r2, #100	; 0x64
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	1acb      	subs	r3, r1, r3
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006aea:	4b36      	ldr	r3, [pc, #216]	; (8006bc4 <UART_SetConfig+0x2d4>)
 8006aec:	fba3 2302 	umull	r2, r3, r3, r2
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006af8:	441c      	add	r4, r3
 8006afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	1891      	adds	r1, r2, r2
 8006b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b14:	415b      	adcs	r3, r3
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	1851      	adds	r1, r2, r1
 8006b20:	6339      	str	r1, [r7, #48]	; 0x30
 8006b22:	4649      	mov	r1, r9
 8006b24:	414b      	adcs	r3, r1
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b34:	4659      	mov	r1, fp
 8006b36:	00cb      	lsls	r3, r1, #3
 8006b38:	4651      	mov	r1, sl
 8006b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b3e:	4651      	mov	r1, sl
 8006b40:	00ca      	lsls	r2, r1, #3
 8006b42:	4610      	mov	r0, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	4642      	mov	r2, r8
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b50:	464b      	mov	r3, r9
 8006b52:	460a      	mov	r2, r1
 8006b54:	eb42 0303 	adc.w	r3, r2, r3
 8006b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b70:	460b      	mov	r3, r1
 8006b72:	18db      	adds	r3, r3, r3
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b76:	4613      	mov	r3, r2
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b86:	f7f9 ffc9 	bl	8000b1c <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <UART_SetConfig+0x2d4>)
 8006b90:	fba3 1302 	umull	r1, r3, r3, r2
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	2164      	movs	r1, #100	; 0x64
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	3332      	adds	r3, #50	; 0x32
 8006ba2:	4a08      	ldr	r2, [pc, #32]	; (8006bc4 <UART_SetConfig+0x2d4>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f003 0207 	and.w	r2, r3, #7
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4422      	add	r2, r4
 8006bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bb8:	e105      	b.n	8006dc6 <UART_SetConfig+0x4d6>
 8006bba:	bf00      	nop
 8006bbc:	40011000 	.word	0x40011000
 8006bc0:	40011400 	.word	0x40011400
 8006bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bda:	4642      	mov	r2, r8
 8006bdc:	464b      	mov	r3, r9
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	6239      	str	r1, [r7, #32]
 8006be2:	415b      	adcs	r3, r3
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
 8006be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bea:	4641      	mov	r1, r8
 8006bec:	1854      	adds	r4, r2, r1
 8006bee:	4649      	mov	r1, r9
 8006bf0:	eb43 0501 	adc.w	r5, r3, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	00eb      	lsls	r3, r5, #3
 8006bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c02:	00e2      	lsls	r2, r4, #3
 8006c04:	4614      	mov	r4, r2
 8006c06:	461d      	mov	r5, r3
 8006c08:	4643      	mov	r3, r8
 8006c0a:	18e3      	adds	r3, r4, r3
 8006c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c10:	464b      	mov	r3, r9
 8006c12:	eb45 0303 	adc.w	r3, r5, r3
 8006c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c36:	4629      	mov	r1, r5
 8006c38:	008b      	lsls	r3, r1, #2
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c40:	4621      	mov	r1, r4
 8006c42:	008a      	lsls	r2, r1, #2
 8006c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c48:	f7f9 ff68 	bl	8000b1c <__aeabi_uldivmod>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4b60      	ldr	r3, [pc, #384]	; (8006dd4 <UART_SetConfig+0x4e4>)
 8006c52:	fba3 2302 	umull	r2, r3, r3, r2
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	011c      	lsls	r4, r3, #4
 8006c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	1891      	adds	r1, r2, r2
 8006c72:	61b9      	str	r1, [r7, #24]
 8006c74:	415b      	adcs	r3, r3
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	1851      	adds	r1, r2, r1
 8006c80:	6139      	str	r1, [r7, #16]
 8006c82:	4649      	mov	r1, r9
 8006c84:	414b      	adcs	r3, r1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c94:	4659      	mov	r1, fp
 8006c96:	00cb      	lsls	r3, r1, #3
 8006c98:	4651      	mov	r1, sl
 8006c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9e:	4651      	mov	r1, sl
 8006ca0:	00ca      	lsls	r2, r1, #3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4642      	mov	r2, r8
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	460a      	mov	r2, r1
 8006cb4:	eb42 0303 	adc.w	r3, r2, r3
 8006cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	008b      	lsls	r3, r1, #2
 8006cd8:	4641      	mov	r1, r8
 8006cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cde:	4641      	mov	r1, r8
 8006ce0:	008a      	lsls	r2, r1, #2
 8006ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ce6:	f7f9 ff19 	bl	8000b1c <__aeabi_uldivmod>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <UART_SetConfig+0x4e4>)
 8006cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	2164      	movs	r1, #100	; 0x64
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	3332      	adds	r3, #50	; 0x32
 8006d02:	4a34      	ldr	r2, [pc, #208]	; (8006dd4 <UART_SetConfig+0x4e4>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d0e:	441c      	add	r4, r3
 8006d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d14:	2200      	movs	r2, #0
 8006d16:	673b      	str	r3, [r7, #112]	; 0x70
 8006d18:	677a      	str	r2, [r7, #116]	; 0x74
 8006d1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d1e:	4642      	mov	r2, r8
 8006d20:	464b      	mov	r3, r9
 8006d22:	1891      	adds	r1, r2, r2
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	415b      	adcs	r3, r3
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d2e:	4641      	mov	r1, r8
 8006d30:	1851      	adds	r1, r2, r1
 8006d32:	6039      	str	r1, [r7, #0]
 8006d34:	4649      	mov	r1, r9
 8006d36:	414b      	adcs	r3, r1
 8006d38:	607b      	str	r3, [r7, #4]
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d46:	4659      	mov	r1, fp
 8006d48:	00cb      	lsls	r3, r1, #3
 8006d4a:	4651      	mov	r1, sl
 8006d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d50:	4651      	mov	r1, sl
 8006d52:	00ca      	lsls	r2, r1, #3
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4642      	mov	r2, r8
 8006d5c:	189b      	adds	r3, r3, r2
 8006d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d60:	464b      	mov	r3, r9
 8006d62:	460a      	mov	r2, r1
 8006d64:	eb42 0303 	adc.w	r3, r2, r3
 8006d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	663b      	str	r3, [r7, #96]	; 0x60
 8006d74:	667a      	str	r2, [r7, #100]	; 0x64
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d82:	4649      	mov	r1, r9
 8006d84:	008b      	lsls	r3, r1, #2
 8006d86:	4641      	mov	r1, r8
 8006d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	008a      	lsls	r2, r1, #2
 8006d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d94:	f7f9 fec2 	bl	8000b1c <__aeabi_uldivmod>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <UART_SetConfig+0x4e4>)
 8006d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	2164      	movs	r1, #100	; 0x64
 8006da6:	fb01 f303 	mul.w	r3, r1, r3
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	3332      	adds	r3, #50	; 0x32
 8006db0:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <UART_SetConfig+0x4e4>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4422      	add	r2, r4
 8006dc4:	609a      	str	r2, [r3, #8]
}
 8006dc6:	bf00      	nop
 8006dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd2:	bf00      	nop
 8006dd4:	51eb851f 	.word	0x51eb851f

08006dd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dea:	2b84      	cmp	r3, #132	; 0x84
 8006dec:	d005      	beq.n	8006dfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	3303      	adds	r3, #3
 8006df8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e0c:	f000 ff30 	bl	8007c70 <vTaskStartScheduler>
  
  return osOK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e18:	b089      	sub	sp, #36	; 0x24
 8006e1a:	af04      	add	r7, sp, #16
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d020      	beq.n	8006e6a <osThreadCreate+0x54>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01c      	beq.n	8006e6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685c      	ldr	r4, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681d      	ldr	r5, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691e      	ldr	r6, [r3, #16]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff ffc8 	bl	8006dd8 <makeFreeRtosPriority>
 8006e48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e52:	9202      	str	r2, [sp, #8]
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	9100      	str	r1, [sp, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 fd3e 	bl	80078e0 <xTaskCreateStatic>
 8006e64:	4603      	mov	r3, r0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e01c      	b.n	8006ea4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685c      	ldr	r4, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e76:	b29e      	uxth	r6, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff ffaa 	bl	8006dd8 <makeFreeRtosPriority>
 8006e84:	4602      	mov	r2, r0
 8006e86:	f107 030c 	add.w	r3, r7, #12
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	9200      	str	r2, [sp, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	4632      	mov	r2, r6
 8006e92:	4629      	mov	r1, r5
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 fd80 	bl	800799a <xTaskCreate>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d001      	beq.n	8006ea4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e000      	b.n	8006ea6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006eae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <osDelay+0x16>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	e000      	b.n	8006ec6 <osDelay+0x18>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fe9e 	bl	8007c08 <vTaskDelay>
  
  return osOK;
 8006ecc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006ed6:	b590      	push	{r4, r7, lr}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af02      	add	r7, sp, #8
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d011      	beq.n	8006f0c <osMessageCreate+0x36>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00d      	beq.n	8006f0c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6859      	ldr	r1, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2400      	movs	r4, #0
 8006f02:	9400      	str	r4, [sp, #0]
 8006f04:	f000 f92c 	bl	8007160 <xQueueGenericCreateStatic>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	e008      	b.n	8006f1e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	4619      	mov	r1, r3
 8006f18:	f000 f99a 	bl	8007250 <xQueueGenericCreate>
 8006f1c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd90      	pop	{r4, r7, pc}

08006f26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f103 0208 	add.w	r2, r3, #8
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f103 0208 	add.w	r2, r3, #8
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f103 0208 	add.w	r2, r3, #8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	601a      	str	r2, [r3, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fde:	d103      	bne.n	8006fe8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	e00c      	b.n	8007002 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3308      	adds	r3, #8
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e002      	b.n	8006ff6 <vListInsert+0x2e>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d2f6      	bcs.n	8006ff0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6892      	ldr	r2, [r2, #8]
 8007050:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6852      	ldr	r2, [r2, #4]
 800705a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d103      	bne.n	800706e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1e5a      	subs	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070ba:	f001 fc0b 	bl	80088d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	441a      	add	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ea:	3b01      	subs	r3, #1
 80070ec:	68f9      	ldr	r1, [r7, #12]
 80070ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	441a      	add	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d114      	bne.n	800713a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01a      	beq.n	800714e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3310      	adds	r3, #16
 800711c:	4618      	mov	r0, r3
 800711e:	f000 ffe9 	bl	80080f4 <xTaskRemoveFromEventList>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d012      	beq.n	800714e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <xQueueGenericReset+0xcc>)
 800712a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	e009      	b.n	800714e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3310      	adds	r3, #16
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fef1 	bl	8006f26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3324      	adds	r3, #36	; 0x24
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff feec 	bl	8006f26 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800714e:	f001 fbf1 	bl	8008934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007152:	2301      	movs	r3, #1
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08e      	sub	sp, #56	; 0x38
 8007164:	af02      	add	r7, sp, #8
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <xQueueGenericCreateStatic+0x52>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <xQueueGenericCreateStatic+0x56>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e000      	b.n	80071b8 <xQueueGenericCreateStatic+0x58>
 80071b6:	2300      	movs	r3, #0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	623b      	str	r3, [r7, #32]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <xQueueGenericCreateStatic+0x7e>
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <xQueueGenericCreateStatic+0x82>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <xQueueGenericCreateStatic+0x84>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	61fb      	str	r3, [r7, #28]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071fe:	2348      	movs	r3, #72	; 0x48
 8007200:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b48      	cmp	r3, #72	; 0x48
 8007206:	d00a      	beq.n	800721e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61bb      	str	r3, [r7, #24]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800721e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007232:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4613      	mov	r3, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f83f 	bl	80072c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007248:	4618      	mov	r0, r3
 800724a:	3730      	adds	r7, #48	; 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	613b      	str	r3, [r7, #16]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3348      	adds	r3, #72	; 0x48
 8007288:	4618      	mov	r0, r3
 800728a:	f001 fc05 	bl	8008a98 <pvPortMalloc>
 800728e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d011      	beq.n	80072ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3348      	adds	r3, #72	; 0x48
 800729e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072a8:	79fa      	ldrb	r2, [r7, #7]
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f805 	bl	80072c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072ba:	69bb      	ldr	r3, [r7, #24]
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	3720      	adds	r7, #32
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d103      	bne.n	80072e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e002      	b.n	80072e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072f2:	2101      	movs	r1, #1
 80072f4:	69b8      	ldr	r0, [r7, #24]
 80072f6:	f7ff fecb 	bl	8007090 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08e      	sub	sp, #56	; 0x38
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007312:	2300      	movs	r3, #0
 8007314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xQueueGenericSend+0x32>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d103      	bne.n	8007344 <xQueueGenericSend+0x40>
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <xQueueGenericSend+0x44>
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <xQueueGenericSend+0x46>
 8007348:	2300      	movs	r3, #0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <xQueueGenericSend+0x60>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d103      	bne.n	8007372 <xQueueGenericSend+0x6e>
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <xQueueGenericSend+0x72>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <xQueueGenericSend+0x74>
 8007376:	2300      	movs	r3, #0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <xQueueGenericSend+0x8e>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	623b      	str	r3, [r7, #32]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007392:	f001 f86b 	bl	800846c <xTaskGetSchedulerState>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d102      	bne.n	80073a2 <xQueueGenericSend+0x9e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <xQueueGenericSend+0xa2>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <xQueueGenericSend+0xa4>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	61fb      	str	r3, [r7, #28]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073c2:	f001 fa87 	bl	80088d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d302      	bcc.n	80073d8 <xQueueGenericSend+0xd4>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d129      	bne.n	800742c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073de:	f000 f96f 	bl	80076c0 <prvCopyDataToQueue>
 80073e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d010      	beq.n	800740e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	3324      	adds	r3, #36	; 0x24
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fe7f 	bl	80080f4 <xTaskRemoveFromEventList>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d013      	beq.n	8007424 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073fc:	4b3f      	ldr	r3, [pc, #252]	; (80074fc <xQueueGenericSend+0x1f8>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	e00a      	b.n	8007424 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007414:	4b39      	ldr	r3, [pc, #228]	; (80074fc <xQueueGenericSend+0x1f8>)
 8007416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007424:	f001 fa86 	bl	8008934 <vPortExitCritical>
				return pdPASS;
 8007428:	2301      	movs	r3, #1
 800742a:	e063      	b.n	80074f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d103      	bne.n	800743a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007432:	f001 fa7f 	bl	8008934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007436:	2300      	movs	r3, #0
 8007438:	e05c      	b.n	80074f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	4618      	mov	r0, r3
 8007446:	f000 feb7 	bl	80081b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800744a:	2301      	movs	r3, #1
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800744e:	f001 fa71 	bl	8008934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007452:	f000 fc6d 	bl	8007d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007456:	f001 fa3d 	bl	80088d4 <vPortEnterCritical>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007460:	b25b      	sxtb	r3, r3
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007466:	d103      	bne.n	8007470 <xQueueGenericSend+0x16c>
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007476:	b25b      	sxtb	r3, r3
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800747c:	d103      	bne.n	8007486 <xQueueGenericSend+0x182>
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007486:	f001 fa55 	bl	8008934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800748a:	1d3a      	adds	r2, r7, #4
 800748c:	f107 0314 	add.w	r3, r7, #20
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fea6 	bl	80081e4 <xTaskCheckForTimeOut>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d124      	bne.n	80074e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800749e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074a0:	f000 fa06 	bl	80078b0 <prvIsQueueFull>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d018      	beq.n	80074dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	3310      	adds	r3, #16
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4611      	mov	r1, r2
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fdfa 	bl	80080ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ba:	f000 f991 	bl	80077e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074be:	f000 fc45 	bl	8007d4c <xTaskResumeAll>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f47f af7c 	bne.w	80073c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <xQueueGenericSend+0x1f8>)
 80074cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	e772      	b.n	80073c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074de:	f000 f97f 	bl	80077e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074e2:	f000 fc33 	bl	8007d4c <xTaskResumeAll>
 80074e6:	e76c      	b.n	80073c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ea:	f000 f979 	bl	80077e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ee:	f000 fc2d 	bl	8007d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3738      	adds	r7, #56	; 0x38
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08c      	sub	sp, #48	; 0x30
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10a      	bne.n	8007530 <xQueueReceive+0x30>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	623b      	str	r3, [r7, #32]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d103      	bne.n	800753e <xQueueReceive+0x3e>
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <xQueueReceive+0x42>
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <xQueueReceive+0x44>
 8007542:	2300      	movs	r3, #0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <xQueueReceive+0x5e>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	61fb      	str	r3, [r7, #28]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800755e:	f000 ff85 	bl	800846c <xTaskGetSchedulerState>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <xQueueReceive+0x6e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <xQueueReceive+0x72>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <xQueueReceive+0x74>
 8007572:	2300      	movs	r3, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xQueueReceive+0x8e>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	61bb      	str	r3, [r7, #24]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800758e:	f001 f9a1 	bl	80088d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01f      	beq.n	80075de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a2:	f000 f8f7 	bl	8007794 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	1e5a      	subs	r2, r3, #1
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00f      	beq.n	80075d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	3310      	adds	r3, #16
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fd9a 	bl	80080f4 <xTaskRemoveFromEventList>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075c6:	4b3d      	ldr	r3, [pc, #244]	; (80076bc <xQueueReceive+0x1bc>)
 80075c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075d6:	f001 f9ad 	bl	8008934 <vPortExitCritical>
				return pdPASS;
 80075da:	2301      	movs	r3, #1
 80075dc:	e069      	b.n	80076b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075e4:	f001 f9a6 	bl	8008934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075e8:	2300      	movs	r3, #0
 80075ea:	e062      	b.n	80076b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075f2:	f107 0310 	add.w	r3, r7, #16
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fdde 	bl	80081b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075fc:	2301      	movs	r3, #1
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007600:	f001 f998 	bl	8008934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007604:	f000 fb94 	bl	8007d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007608:	f001 f964 	bl	80088d4 <vPortEnterCritical>
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007612:	b25b      	sxtb	r3, r3
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007618:	d103      	bne.n	8007622 <xQueueReceive+0x122>
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007628:	b25b      	sxtb	r3, r3
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762e:	d103      	bne.n	8007638 <xQueueReceive+0x138>
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007638:	f001 f97c 	bl	8008934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800763c:	1d3a      	adds	r2, r7, #4
 800763e:	f107 0310 	add.w	r3, r7, #16
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fdcd 	bl	80081e4 <xTaskCheckForTimeOut>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d123      	bne.n	8007698 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007652:	f000 f917 	bl	8007884 <prvIsQueueEmpty>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d017      	beq.n	800768c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	3324      	adds	r3, #36	; 0x24
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fd21 	bl	80080ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800766a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800766c:	f000 f8b8 	bl	80077e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007670:	f000 fb6c 	bl	8007d4c <xTaskResumeAll>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d189      	bne.n	800758e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800767a:	4b10      	ldr	r3, [pc, #64]	; (80076bc <xQueueReceive+0x1bc>)
 800767c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	e780      	b.n	800758e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800768c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768e:	f000 f8a7 	bl	80077e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007692:	f000 fb5b 	bl	8007d4c <xTaskResumeAll>
 8007696:	e77a      	b.n	800758e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769a:	f000 f8a1 	bl	80077e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800769e:	f000 fb55 	bl	8007d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a4:	f000 f8ee 	bl	8007884 <prvIsQueueEmpty>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f43f af6f 	beq.w	800758e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3730      	adds	r7, #48	; 0x30
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10d      	bne.n	80076fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d14d      	bne.n	8007782 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fedc 	bl	80084a8 <xTaskPriorityDisinherit>
 80076f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	609a      	str	r2, [r3, #8]
 80076f8:	e043      	b.n	8007782 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d119      	bne.n	8007734 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6858      	ldr	r0, [r3, #4]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007708:	461a      	mov	r2, r3
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	f001 fbd8 	bl	8008ec0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	441a      	add	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	429a      	cmp	r2, r3
 8007728:	d32b      	bcc.n	8007782 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	e026      	b.n	8007782 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	68d8      	ldr	r0, [r3, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	461a      	mov	r2, r3
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	f001 fbbe 	bl	8008ec0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	425b      	negs	r3, r3
 800774e:	441a      	add	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d207      	bcs.n	8007770 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	425b      	negs	r3, r3
 800776a:	441a      	add	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d105      	bne.n	8007782 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	3b01      	subs	r3, #1
 8007780:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800778a:	697b      	ldr	r3, [r7, #20]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d018      	beq.n	80077d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	441a      	add	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d303      	bcc.n	80077c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68d9      	ldr	r1, [r3, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	461a      	mov	r2, r3
 80077d2:	6838      	ldr	r0, [r7, #0]
 80077d4:	f001 fb74 	bl	8008ec0 <memcpy>
	}
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077e8:	f001 f874 	bl	80088d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f4:	e011      	b.n	800781a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d012      	beq.n	8007824 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fc76 	bl	80080f4 <xTaskRemoveFromEventList>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800780e:	f000 fd4b 	bl	80082a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	3b01      	subs	r3, #1
 8007816:	b2db      	uxtb	r3, r3
 8007818:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800781a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	dce9      	bgt.n	80077f6 <prvUnlockQueue+0x16>
 8007822:	e000      	b.n	8007826 <prvUnlockQueue+0x46>
					break;
 8007824:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	22ff      	movs	r2, #255	; 0xff
 800782a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800782e:	f001 f881 	bl	8008934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007832:	f001 f84f 	bl	80088d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800783c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800783e:	e011      	b.n	8007864 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d012      	beq.n	800786e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3310      	adds	r3, #16
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fc51 	bl	80080f4 <xTaskRemoveFromEventList>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007858:	f000 fd26 	bl	80082a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	3b01      	subs	r3, #1
 8007860:	b2db      	uxtb	r3, r3
 8007862:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	dce9      	bgt.n	8007840 <prvUnlockQueue+0x60>
 800786c:	e000      	b.n	8007870 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800786e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007878:	f001 f85c 	bl	8008934 <vPortExitCritical>
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800788c:	f001 f822 	bl	80088d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	2b00      	cmp	r3, #0
 8007896:	d102      	bne.n	800789e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007898:	2301      	movs	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e001      	b.n	80078a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078a2:	f001 f847 	bl	8008934 <vPortExitCritical>

	return xReturn;
 80078a6:	68fb      	ldr	r3, [r7, #12]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078b8:	f001 f80c 	bl	80088d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d102      	bne.n	80078ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078c8:	2301      	movs	r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e001      	b.n	80078d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078d2:	f001 f82f 	bl	8008934 <vPortExitCritical>

	return xReturn;
 80078d6:	68fb      	ldr	r3, [r7, #12]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08e      	sub	sp, #56	; 0x38
 80078e4:	af04      	add	r7, sp, #16
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <xTaskCreateStatic+0x2a>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	623b      	str	r3, [r7, #32]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <xTaskCreateStatic+0x46>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	61fb      	str	r3, [r7, #28]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007926:	2354      	movs	r3, #84	; 0x54
 8007928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b54      	cmp	r3, #84	; 0x54
 800792e:	d00a      	beq.n	8007946 <xTaskCreateStatic+0x66>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	61bb      	str	r3, [r7, #24]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007946:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01e      	beq.n	800798c <xTaskCreateStatic+0xac>
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01b      	beq.n	800798c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800795c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2202      	movs	r2, #2
 8007962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007966:	2300      	movs	r3, #0
 8007968:	9303      	str	r3, [sp, #12]
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	f107 0314 	add.w	r3, r7, #20
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f850 	bl	8007a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007986:	f000 f8d5 	bl	8007b34 <prvAddNewTaskToReadyList>
 800798a:	e001      	b.n	8007990 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007990:	697b      	ldr	r3, [r7, #20]
	}
 8007992:	4618      	mov	r0, r3
 8007994:	3728      	adds	r7, #40	; 0x28
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800799a:	b580      	push	{r7, lr}
 800799c:	b08c      	sub	sp, #48	; 0x30
 800799e:	af04      	add	r7, sp, #16
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 f872 	bl	8008a98 <pvPortMalloc>
 80079b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00e      	beq.n	80079da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079bc:	2054      	movs	r0, #84	; 0x54
 80079be:	f001 f86b 	bl	8008a98 <pvPortMalloc>
 80079c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
 80079d0:	e005      	b.n	80079de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079d2:	6978      	ldr	r0, [r7, #20]
 80079d4:	f001 f92c 	bl	8008c30 <vPortFree>
 80079d8:	e001      	b.n	80079de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d017      	beq.n	8007a14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f80e 	bl	8007a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a08:	69f8      	ldr	r0, [r7, #28]
 8007a0a:	f000 f893 	bl	8007b34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	e002      	b.n	8007a1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a1a:	69bb      	ldr	r3, [r7, #24]
	}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	617b      	str	r3, [r7, #20]
}
 8007a68:	bf00      	nop
 8007a6a:	e7fe      	b.n	8007a6a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01f      	beq.n	8007ab2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	e012      	b.n	8007a9e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	7819      	ldrb	r1, [r3, #0]
 8007a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	4413      	add	r3, r2
 8007a86:	3334      	adds	r3, #52	; 0x34
 8007a88:	460a      	mov	r2, r1
 8007a8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d006      	beq.n	8007aa6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	61fb      	str	r3, [r7, #28]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	2b0f      	cmp	r3, #15
 8007aa2:	d9e9      	bls.n	8007a78 <prvInitialiseNewTask+0x54>
 8007aa4:	e000      	b.n	8007aa8 <prvInitialiseNewTask+0x84>
			{
				break;
 8007aa6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ab0:	e003      	b.n	8007aba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	2b06      	cmp	r3, #6
 8007abe:	d901      	bls.n	8007ac4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ac0:	2306      	movs	r3, #6
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ace:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff fa43 	bl	8006f66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	3318      	adds	r3, #24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fa3e 	bl	8006f66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	f1c3 0207 	rsb	r2, r3, #7
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	2200      	movs	r2, #0
 8007b04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	68f9      	ldr	r1, [r7, #12]
 8007b12:	69b8      	ldr	r0, [r7, #24]
 8007b14:	f000 fdb4 	bl	8008680 <pxPortInitialiseStack>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b2a:	bf00      	nop
 8007b2c:	3720      	adds	r7, #32
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b3c:	f000 feca 	bl	80088d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b40:	4b2a      	ldr	r3, [pc, #168]	; (8007bec <prvAddNewTaskToReadyList+0xb8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a29      	ldr	r2, [pc, #164]	; (8007bec <prvAddNewTaskToReadyList+0xb8>)
 8007b48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b4a:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <prvAddNewTaskToReadyList+0xbc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b52:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <prvAddNewTaskToReadyList+0xbc>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b58:	4b24      	ldr	r3, [pc, #144]	; (8007bec <prvAddNewTaskToReadyList+0xb8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d110      	bne.n	8007b82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b60:	f000 fbc6 	bl	80082f0 <prvInitialiseTaskLists>
 8007b64:	e00d      	b.n	8007b82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b66:	4b23      	ldr	r3, [pc, #140]	; (8007bf4 <prvAddNewTaskToReadyList+0xc0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d109      	bne.n	8007b82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b6e:	4b20      	ldr	r3, [pc, #128]	; (8007bf0 <prvAddNewTaskToReadyList+0xbc>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d802      	bhi.n	8007b82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b7c:	4a1c      	ldr	r2, [pc, #112]	; (8007bf0 <prvAddNewTaskToReadyList+0xbc>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b82:	4b1d      	ldr	r3, [pc, #116]	; (8007bf8 <prvAddNewTaskToReadyList+0xc4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3301      	adds	r3, #1
 8007b88:	4a1b      	ldr	r2, [pc, #108]	; (8007bf8 <prvAddNewTaskToReadyList+0xc4>)
 8007b8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	2201      	movs	r2, #1
 8007b92:	409a      	lsls	r2, r3
 8007b94:	4b19      	ldr	r3, [pc, #100]	; (8007bfc <prvAddNewTaskToReadyList+0xc8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <prvAddNewTaskToReadyList+0xc8>)
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <prvAddNewTaskToReadyList+0xcc>)
 8007bac:	441a      	add	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7ff f9e3 	bl	8006f80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bba:	f000 febb 	bl	8008934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <prvAddNewTaskToReadyList+0xc0>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00e      	beq.n	8007be4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bc6:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <prvAddNewTaskToReadyList+0xbc>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d207      	bcs.n	8007be4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <prvAddNewTaskToReadyList+0xd0>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	200008fc 	.word	0x200008fc
 8007bf0:	200007fc 	.word	0x200007fc
 8007bf4:	20000908 	.word	0x20000908
 8007bf8:	20000918 	.word	0x20000918
 8007bfc:	20000904 	.word	0x20000904
 8007c00:	20000800 	.word	0x20000800
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d017      	beq.n	8007c4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <vTaskDelay+0x60>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <vTaskDelay+0x30>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60bb      	str	r3, [r7, #8]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c38:	f000 f87a 	bl	8007d30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fcb8 	bl	80085b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c44:	f000 f882 	bl	8007d4c <xTaskResumeAll>
 8007c48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d107      	bne.n	8007c60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <vTaskDelay+0x64>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000924 	.word	0x20000924
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c7e:	463a      	mov	r2, r7
 8007c80:	1d39      	adds	r1, r7, #4
 8007c82:	f107 0308 	add.w	r3, r7, #8
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fa fa4c 	bl	8002124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	9202      	str	r2, [sp, #8]
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	460a      	mov	r2, r1
 8007c9e:	491e      	ldr	r1, [pc, #120]	; (8007d18 <vTaskStartScheduler+0xa8>)
 8007ca0:	481e      	ldr	r0, [pc, #120]	; (8007d1c <vTaskStartScheduler+0xac>)
 8007ca2:	f7ff fe1d 	bl	80078e0 <xTaskCreateStatic>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <vTaskStartScheduler+0xb0>)
 8007caa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cac:	4b1c      	ldr	r3, [pc, #112]	; (8007d20 <vTaskStartScheduler+0xb0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	e001      	b.n	8007cbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d116      	bne.n	8007cf2 <vTaskStartScheduler+0x82>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	613b      	str	r3, [r7, #16]
}
 8007cd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cd8:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <vTaskStartScheduler+0xb4>)
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ce0:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <vTaskStartScheduler+0xb8>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ce6:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <vTaskStartScheduler+0xbc>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cec:	f000 fd50 	bl	8008790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cf0:	e00e      	b.n	8007d10 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf8:	d10a      	bne.n	8007d10 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	60fb      	str	r3, [r7, #12]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <vTaskStartScheduler+0x9e>
}
 8007d10:	bf00      	nop
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	08009858 	.word	0x08009858
 8007d1c:	080082c1 	.word	0x080082c1
 8007d20:	20000920 	.word	0x20000920
 8007d24:	2000091c 	.word	0x2000091c
 8007d28:	20000908 	.word	0x20000908
 8007d2c:	20000900 	.word	0x20000900

08007d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d34:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <vTaskSuspendAll+0x18>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	4a03      	ldr	r2, [pc, #12]	; (8007d48 <vTaskSuspendAll+0x18>)
 8007d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d3e:	bf00      	nop
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20000924 	.word	0x20000924

08007d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d5a:	4b41      	ldr	r3, [pc, #260]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	603b      	str	r3, [r7, #0]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d78:	f000 fdac 	bl	80088d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d7c:	4b38      	ldr	r3, [pc, #224]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	4a37      	ldr	r2, [pc, #220]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d86:	4b36      	ldr	r3, [pc, #216]	; (8007e60 <xTaskResumeAll+0x114>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d161      	bne.n	8007e52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d8e:	4b35      	ldr	r3, [pc, #212]	; (8007e64 <xTaskResumeAll+0x118>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d05d      	beq.n	8007e52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d96:	e02e      	b.n	8007df6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d98:	4b33      	ldr	r3, [pc, #204]	; (8007e68 <xTaskResumeAll+0x11c>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3318      	adds	r3, #24
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff f948 	bl	800703a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff f943 	bl	800703a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	2201      	movs	r2, #1
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <xTaskResumeAll+0x120>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <xTaskResumeAll+0x120>)
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <xTaskResumeAll+0x124>)
 8007dd4:	441a      	add	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7ff f8cf 	bl	8006f80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	4b23      	ldr	r3, [pc, #140]	; (8007e74 <xTaskResumeAll+0x128>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d302      	bcc.n	8007df6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007df0:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <xTaskResumeAll+0x12c>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df6:	4b1c      	ldr	r3, [pc, #112]	; (8007e68 <xTaskResumeAll+0x11c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1cc      	bne.n	8007d98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e04:	f000 fb12 	bl	800842c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <xTaskResumeAll+0x130>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d010      	beq.n	8007e36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e14:	f000 f836 	bl	8007e84 <xTaskIncrementTick>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007e1e:	4b16      	ldr	r3, [pc, #88]	; (8007e78 <xTaskResumeAll+0x12c>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f1      	bne.n	8007e14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007e30:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <xTaskResumeAll+0x130>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <xTaskResumeAll+0x12c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e42:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <xTaskResumeAll+0x134>)
 8007e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e52:	f000 fd6f 	bl	8008934 <vPortExitCritical>

	return xAlreadyYielded;
 8007e56:	68bb      	ldr	r3, [r7, #8]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000924 	.word	0x20000924
 8007e64:	200008fc 	.word	0x200008fc
 8007e68:	200008bc 	.word	0x200008bc
 8007e6c:	20000904 	.word	0x20000904
 8007e70:	20000800 	.word	0x20000800
 8007e74:	200007fc 	.word	0x200007fc
 8007e78:	20000910 	.word	0x20000910
 8007e7c:	2000090c 	.word	0x2000090c
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e8e:	4b4e      	ldr	r3, [pc, #312]	; (8007fc8 <xTaskIncrementTick+0x144>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f040 808e 	bne.w	8007fb4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e98:	4b4c      	ldr	r3, [pc, #304]	; (8007fcc <xTaskIncrementTick+0x148>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ea0:	4a4a      	ldr	r2, [pc, #296]	; (8007fcc <xTaskIncrementTick+0x148>)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d120      	bne.n	8007eee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007eac:	4b48      	ldr	r3, [pc, #288]	; (8007fd0 <xTaskIncrementTick+0x14c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <xTaskIncrementTick+0x48>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	603b      	str	r3, [r7, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <xTaskIncrementTick+0x46>
 8007ecc:	4b40      	ldr	r3, [pc, #256]	; (8007fd0 <xTaskIncrementTick+0x14c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	4b40      	ldr	r3, [pc, #256]	; (8007fd4 <xTaskIncrementTick+0x150>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a3e      	ldr	r2, [pc, #248]	; (8007fd0 <xTaskIncrementTick+0x14c>)
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	4a3e      	ldr	r2, [pc, #248]	; (8007fd4 <xTaskIncrementTick+0x150>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	4b3d      	ldr	r3, [pc, #244]	; (8007fd8 <xTaskIncrementTick+0x154>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a3c      	ldr	r2, [pc, #240]	; (8007fd8 <xTaskIncrementTick+0x154>)
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	f000 fa9f 	bl	800842c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007eee:	4b3b      	ldr	r3, [pc, #236]	; (8007fdc <xTaskIncrementTick+0x158>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d348      	bcc.n	8007f8a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef8:	4b35      	ldr	r3, [pc, #212]	; (8007fd0 <xTaskIncrementTick+0x14c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f02:	4b36      	ldr	r3, [pc, #216]	; (8007fdc <xTaskIncrementTick+0x158>)
 8007f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f08:	601a      	str	r2, [r3, #0]
					break;
 8007f0a:	e03e      	b.n	8007f8a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f0c:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <xTaskIncrementTick+0x14c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d203      	bcs.n	8007f2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f24:	4a2d      	ldr	r2, [pc, #180]	; (8007fdc <xTaskIncrementTick+0x158>)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f2a:	e02e      	b.n	8007f8a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff f882 	bl	800703a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d004      	beq.n	8007f48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3318      	adds	r3, #24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff f879 	bl	800703a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	409a      	lsls	r2, r3
 8007f50:	4b23      	ldr	r3, [pc, #140]	; (8007fe0 <xTaskIncrementTick+0x15c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	4a22      	ldr	r2, [pc, #136]	; (8007fe0 <xTaskIncrementTick+0x15c>)
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4a1f      	ldr	r2, [pc, #124]	; (8007fe4 <xTaskIncrementTick+0x160>)
 8007f68:	441a      	add	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7ff f805 	bl	8006f80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <xTaskIncrementTick+0x164>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d3b9      	bcc.n	8007ef8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f84:	2301      	movs	r3, #1
 8007f86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f88:	e7b6      	b.n	8007ef8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f8a:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <xTaskIncrementTick+0x164>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f90:	4914      	ldr	r1, [pc, #80]	; (8007fe4 <xTaskIncrementTick+0x160>)
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d901      	bls.n	8007fa6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <xTaskIncrementTick+0x168>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	e004      	b.n	8007fbe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <xTaskIncrementTick+0x16c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	4a0d      	ldr	r2, [pc, #52]	; (8007ff0 <xTaskIncrementTick+0x16c>)
 8007fbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007fbe:	697b      	ldr	r3, [r7, #20]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20000924 	.word	0x20000924
 8007fcc:	20000900 	.word	0x20000900
 8007fd0:	200008b4 	.word	0x200008b4
 8007fd4:	200008b8 	.word	0x200008b8
 8007fd8:	20000914 	.word	0x20000914
 8007fdc:	2000091c 	.word	0x2000091c
 8007fe0:	20000904 	.word	0x20000904
 8007fe4:	20000800 	.word	0x20000800
 8007fe8:	200007fc 	.word	0x200007fc
 8007fec:	20000910 	.word	0x20000910
 8007ff0:	2000090c 	.word	0x2000090c

08007ff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ffa:	4b27      	ldr	r3, [pc, #156]	; (8008098 <vTaskSwitchContext+0xa4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008002:	4b26      	ldr	r3, [pc, #152]	; (800809c <vTaskSwitchContext+0xa8>)
 8008004:	2201      	movs	r2, #1
 8008006:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008008:	e03f      	b.n	800808a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800800a:	4b24      	ldr	r3, [pc, #144]	; (800809c <vTaskSwitchContext+0xa8>)
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008010:	4b23      	ldr	r3, [pc, #140]	; (80080a0 <vTaskSwitchContext+0xac>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	fab3 f383 	clz	r3, r3
 800801c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	f1c3 031f 	rsb	r3, r3, #31
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	491f      	ldr	r1, [pc, #124]	; (80080a4 <vTaskSwitchContext+0xb0>)
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <vTaskSwitchContext+0x5c>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	607b      	str	r3, [r7, #4]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <vTaskSwitchContext+0x5a>
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <vTaskSwitchContext+0xb0>)
 800805c:	4413      	add	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	605a      	str	r2, [r3, #4]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3308      	adds	r3, #8
 8008072:	429a      	cmp	r2, r3
 8008074:	d104      	bne.n	8008080 <vTaskSwitchContext+0x8c>
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	605a      	str	r2, [r3, #4]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	4a08      	ldr	r2, [pc, #32]	; (80080a8 <vTaskSwitchContext+0xb4>)
 8008088:	6013      	str	r3, [r2, #0]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000924 	.word	0x20000924
 800809c:	20000910 	.word	0x20000910
 80080a0:	20000904 	.word	0x20000904
 80080a4:	20000800 	.word	0x20000800
 80080a8:	200007fc 	.word	0x200007fc

080080ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	60fb      	str	r3, [r7, #12]
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080d2:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <vTaskPlaceOnEventList+0x44>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3318      	adds	r3, #24
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fe ff74 	bl	8006fc8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080e0:	2101      	movs	r1, #1
 80080e2:	6838      	ldr	r0, [r7, #0]
 80080e4:	f000 fa66 	bl	80085b4 <prvAddCurrentTaskToDelayedList>
}
 80080e8:	bf00      	nop
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	200007fc 	.word	0x200007fc

080080f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10a      	bne.n	8008120 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	60fb      	str	r3, [r7, #12]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	3318      	adds	r3, #24
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe ff88 	bl	800703a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800812a:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <xTaskRemoveFromEventList+0xac>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d11c      	bne.n	800816c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	3304      	adds	r3, #4
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe ff7f 	bl	800703a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	2201      	movs	r2, #1
 8008142:	409a      	lsls	r2, r3
 8008144:	4b17      	ldr	r3, [pc, #92]	; (80081a4 <xTaskRemoveFromEventList+0xb0>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4313      	orrs	r3, r2
 800814a:	4a16      	ldr	r2, [pc, #88]	; (80081a4 <xTaskRemoveFromEventList+0xb0>)
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <xTaskRemoveFromEventList+0xb4>)
 800815c:	441a      	add	r2, r3
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fe ff0b 	bl	8006f80 <vListInsertEnd>
 800816a:	e005      	b.n	8008178 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	3318      	adds	r3, #24
 8008170:	4619      	mov	r1, r3
 8008172:	480e      	ldr	r0, [pc, #56]	; (80081ac <xTaskRemoveFromEventList+0xb8>)
 8008174:	f7fe ff04 	bl	8006f80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <xTaskRemoveFromEventList+0xbc>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	429a      	cmp	r2, r3
 8008184:	d905      	bls.n	8008192 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008186:	2301      	movs	r3, #1
 8008188:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <xTaskRemoveFromEventList+0xc0>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e001      	b.n	8008196 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008196:	697b      	ldr	r3, [r7, #20]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000924 	.word	0x20000924
 80081a4:	20000904 	.word	0x20000904
 80081a8:	20000800 	.word	0x20000800
 80081ac:	200008bc 	.word	0x200008bc
 80081b0:	200007fc 	.word	0x200007fc
 80081b4:	20000910 	.word	0x20000910

080081b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <vTaskInternalSetTimeOutState+0x24>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <vTaskInternalSetTimeOutState+0x28>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20000914 	.word	0x20000914
 80081e0:	20000900 	.word	0x20000900

080081e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	613b      	str	r3, [r7, #16]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008226:	f000 fb55 	bl	80088d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800822a:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <xTaskCheckForTimeOut+0xbc>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008242:	d102      	bne.n	800824a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]
 8008248:	e023      	b.n	8008292 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <xTaskCheckForTimeOut+0xc0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d007      	beq.n	8008266 <xTaskCheckForTimeOut+0x82>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	e015      	b.n	8008292 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	429a      	cmp	r2, r3
 800826e:	d20b      	bcs.n	8008288 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff ff9b 	bl	80081b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]
 8008286:	e004      	b.n	8008292 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800828e:	2301      	movs	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008292:	f000 fb4f 	bl	8008934 <vPortExitCritical>

	return xReturn;
 8008296:	69fb      	ldr	r3, [r7, #28]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000900 	.word	0x20000900
 80082a4:	20000914 	.word	0x20000914

080082a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082ac:	4b03      	ldr	r3, [pc, #12]	; (80082bc <vTaskMissedYield+0x14>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	601a      	str	r2, [r3, #0]
}
 80082b2:	bf00      	nop
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20000910 	.word	0x20000910

080082c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082c8:	f000 f852 	bl	8008370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <prvIdleTask+0x28>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d9f9      	bls.n	80082c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <prvIdleTask+0x2c>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082e4:	e7f0      	b.n	80082c8 <prvIdleTask+0x8>
 80082e6:	bf00      	nop
 80082e8:	20000800 	.word	0x20000800
 80082ec:	e000ed04 	.word	0xe000ed04

080082f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082f6:	2300      	movs	r3, #0
 80082f8:	607b      	str	r3, [r7, #4]
 80082fa:	e00c      	b.n	8008316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4a12      	ldr	r2, [pc, #72]	; (8008350 <prvInitialiseTaskLists+0x60>)
 8008308:	4413      	add	r3, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fe0b 	bl	8006f26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3301      	adds	r3, #1
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b06      	cmp	r3, #6
 800831a:	d9ef      	bls.n	80082fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800831c:	480d      	ldr	r0, [pc, #52]	; (8008354 <prvInitialiseTaskLists+0x64>)
 800831e:	f7fe fe02 	bl	8006f26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008322:	480d      	ldr	r0, [pc, #52]	; (8008358 <prvInitialiseTaskLists+0x68>)
 8008324:	f7fe fdff 	bl	8006f26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008328:	480c      	ldr	r0, [pc, #48]	; (800835c <prvInitialiseTaskLists+0x6c>)
 800832a:	f7fe fdfc 	bl	8006f26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800832e:	480c      	ldr	r0, [pc, #48]	; (8008360 <prvInitialiseTaskLists+0x70>)
 8008330:	f7fe fdf9 	bl	8006f26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008334:	480b      	ldr	r0, [pc, #44]	; (8008364 <prvInitialiseTaskLists+0x74>)
 8008336:	f7fe fdf6 	bl	8006f26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800833a:	4b0b      	ldr	r3, [pc, #44]	; (8008368 <prvInitialiseTaskLists+0x78>)
 800833c:	4a05      	ldr	r2, [pc, #20]	; (8008354 <prvInitialiseTaskLists+0x64>)
 800833e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <prvInitialiseTaskLists+0x7c>)
 8008342:	4a05      	ldr	r2, [pc, #20]	; (8008358 <prvInitialiseTaskLists+0x68>)
 8008344:	601a      	str	r2, [r3, #0]
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000800 	.word	0x20000800
 8008354:	2000088c 	.word	0x2000088c
 8008358:	200008a0 	.word	0x200008a0
 800835c:	200008bc 	.word	0x200008bc
 8008360:	200008d0 	.word	0x200008d0
 8008364:	200008e8 	.word	0x200008e8
 8008368:	200008b4 	.word	0x200008b4
 800836c:	200008b8 	.word	0x200008b8

08008370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008376:	e019      	b.n	80083ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008378:	f000 faac 	bl	80088d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837c:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <prvCheckTasksWaitingTermination+0x50>)
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fe56 	bl	800703a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <prvCheckTasksWaitingTermination+0x54>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3b01      	subs	r3, #1
 8008394:	4a0b      	ldr	r2, [pc, #44]	; (80083c4 <prvCheckTasksWaitingTermination+0x54>)
 8008396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008398:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <prvCheckTasksWaitingTermination+0x58>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3b01      	subs	r3, #1
 800839e:	4a0a      	ldr	r2, [pc, #40]	; (80083c8 <prvCheckTasksWaitingTermination+0x58>)
 80083a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083a2:	f000 fac7 	bl	8008934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f810 	bl	80083cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <prvCheckTasksWaitingTermination+0x58>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e1      	bne.n	8008378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	200008d0 	.word	0x200008d0
 80083c4:	200008fc 	.word	0x200008fc
 80083c8:	200008e4 	.word	0x200008e4

080083cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d108      	bne.n	80083f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fc24 	bl	8008c30 <vPortFree>
				vPortFree( pxTCB );
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc21 	bl	8008c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083ee:	e018      	b.n	8008422 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d103      	bne.n	8008402 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fc18 	bl	8008c30 <vPortFree>
	}
 8008400:	e00f      	b.n	8008422 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008408:	2b02      	cmp	r3, #2
 800840a:	d00a      	beq.n	8008422 <prvDeleteTCB+0x56>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <prvDeleteTCB+0x54>
	}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <prvResetNextTaskUnblockTime+0x38>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <prvResetNextTaskUnblockTime+0x3c>)
 800843e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008444:	e008      	b.n	8008458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008446:	4b07      	ldr	r3, [pc, #28]	; (8008464 <prvResetNextTaskUnblockTime+0x38>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	4a04      	ldr	r2, [pc, #16]	; (8008468 <prvResetNextTaskUnblockTime+0x3c>)
 8008456:	6013      	str	r3, [r2, #0]
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	200008b4 	.word	0x200008b4
 8008468:	2000091c 	.word	0x2000091c

0800846c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <xTaskGetSchedulerState+0x34>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d102      	bne.n	8008480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800847a:	2301      	movs	r3, #1
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	e008      	b.n	8008492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008480:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <xTaskGetSchedulerState+0x38>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008488:	2302      	movs	r3, #2
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	e001      	b.n	8008492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800848e:	2300      	movs	r3, #0
 8008490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008492:	687b      	ldr	r3, [r7, #4]
	}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000908 	.word	0x20000908
 80084a4:	20000924 	.word	0x20000924

080084a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d06e      	beq.n	800859c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084be:	4b3a      	ldr	r3, [pc, #232]	; (80085a8 <xTaskPriorityDisinherit+0x100>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d00a      	beq.n	80084de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	60fb      	str	r3, [r7, #12]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60bb      	str	r3, [r7, #8]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008500:	1e5a      	subs	r2, r3, #1
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	429a      	cmp	r2, r3
 8008510:	d044      	beq.n	800859c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008516:	2b00      	cmp	r3, #0
 8008518:	d140      	bne.n	800859c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	3304      	adds	r3, #4
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fd8b 	bl	800703a <uxListRemove>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d115      	bne.n	8008556 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	491f      	ldr	r1, [pc, #124]	; (80085ac <xTaskPriorityDisinherit+0x104>)
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xTaskPriorityDisinherit+0xae>
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	2201      	movs	r2, #1
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43da      	mvns	r2, r3
 800854c:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4013      	ands	r3, r2
 8008552:	4a17      	ldr	r2, [pc, #92]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 8008554:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	f1c3 0207 	rsb	r2, r3, #7
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	2201      	movs	r2, #1
 8008570:	409a      	lsls	r2, r3
 8008572:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4313      	orrs	r3, r2
 8008578:	4a0d      	ldr	r2, [pc, #52]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a08      	ldr	r2, [pc, #32]	; (80085ac <xTaskPriorityDisinherit+0x104>)
 800858a:	441a      	add	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fcf4 	bl	8006f80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800859c:	697b      	ldr	r3, [r7, #20]
	}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200007fc 	.word	0x200007fc
 80085ac:	20000800 	.word	0x20000800
 80085b0:	20000904 	.word	0x20000904

080085b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085be:	4b29      	ldr	r3, [pc, #164]	; (8008664 <prvAddCurrentTaskToDelayedList+0xb0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085c4:	4b28      	ldr	r3, [pc, #160]	; (8008668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fd35 	bl	800703a <uxListRemove>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80085d6:	4b24      	ldr	r3, [pc, #144]	; (8008668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	2201      	movs	r2, #1
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	43da      	mvns	r2, r3
 80085e4:	4b21      	ldr	r3, [pc, #132]	; (800866c <prvAddCurrentTaskToDelayedList+0xb8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4013      	ands	r3, r2
 80085ea:	4a20      	ldr	r2, [pc, #128]	; (800866c <prvAddCurrentTaskToDelayedList+0xb8>)
 80085ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f4:	d10a      	bne.n	800860c <prvAddCurrentTaskToDelayedList+0x58>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085fc:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3304      	adds	r3, #4
 8008602:	4619      	mov	r1, r3
 8008604:	481a      	ldr	r0, [pc, #104]	; (8008670 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008606:	f7fe fcbb 	bl	8006f80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800860a:	e026      	b.n	800865a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4413      	add	r3, r2
 8008612:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008614:	4b14      	ldr	r3, [pc, #80]	; (8008668 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	429a      	cmp	r2, r3
 8008622:	d209      	bcs.n	8008638 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008624:	4b13      	ldr	r3, [pc, #76]	; (8008674 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fe fcc9 	bl	8006fc8 <vListInsert>
}
 8008636:	e010      	b.n	800865a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008638:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <prvAddCurrentTaskToDelayedList+0xc4>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3304      	adds	r3, #4
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f7fe fcbf 	bl	8006fc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <prvAddCurrentTaskToDelayedList+0xc8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	429a      	cmp	r2, r3
 8008652:	d202      	bcs.n	800865a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008654:	4a09      	ldr	r2, [pc, #36]	; (800867c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6013      	str	r3, [r2, #0]
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000900 	.word	0x20000900
 8008668:	200007fc 	.word	0x200007fc
 800866c:	20000904 	.word	0x20000904
 8008670:	200008e8 	.word	0x200008e8
 8008674:	200008b8 	.word	0x200008b8
 8008678:	200008b4 	.word	0x200008b4
 800867c:	2000091c 	.word	0x2000091c

08008680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3b04      	subs	r3, #4
 8008690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3b04      	subs	r3, #4
 800869e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f023 0201 	bic.w	r2, r3, #1
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3b04      	subs	r3, #4
 80086ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086b0:	4a0c      	ldr	r2, [pc, #48]	; (80086e4 <pxPortInitialiseStack+0x64>)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3b14      	subs	r3, #20
 80086ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f06f 0202 	mvn.w	r2, #2
 80086ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3b20      	subs	r3, #32
 80086d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086d6:	68fb      	ldr	r3, [r7, #12]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	080086e9 	.word	0x080086e9

080086e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086f2:	4b12      	ldr	r3, [pc, #72]	; (800873c <prvTaskExitError+0x54>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086fa:	d00a      	beq.n	8008712 <prvTaskExitError+0x2a>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	60fb      	str	r3, [r7, #12]
}
 800870e:	bf00      	nop
 8008710:	e7fe      	b.n	8008710 <prvTaskExitError+0x28>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	60bb      	str	r3, [r7, #8]
}
 8008724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008726:	bf00      	nop
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0fc      	beq.n	8008728 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800872e:	bf00      	nop
 8008730:	bf00      	nop
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	200000cc 	.word	0x200000cc

08008740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <pxCurrentTCBConst2>)
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	6808      	ldr	r0, [r1, #0]
 8008746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	f380 8809 	msr	PSP, r0
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f04f 0000 	mov.w	r0, #0
 8008756:	f380 8811 	msr	BASEPRI, r0
 800875a:	4770      	bx	lr
 800875c:	f3af 8000 	nop.w

08008760 <pxCurrentTCBConst2>:
 8008760:	200007fc 	.word	0x200007fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop

08008768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008768:	4808      	ldr	r0, [pc, #32]	; (800878c <prvPortStartFirstTask+0x24>)
 800876a:	6800      	ldr	r0, [r0, #0]
 800876c:	6800      	ldr	r0, [r0, #0]
 800876e:	f380 8808 	msr	MSP, r0
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8814 	msr	CONTROL, r0
 800877a:	b662      	cpsie	i
 800877c:	b661      	cpsie	f
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	df00      	svc	0
 8008788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800878a:	bf00      	nop
 800878c:	e000ed08 	.word	0xe000ed08

08008790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008796:	4b46      	ldr	r3, [pc, #280]	; (80088b0 <xPortStartScheduler+0x120>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a46      	ldr	r2, [pc, #280]	; (80088b4 <xPortStartScheduler+0x124>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10a      	bne.n	80087b6 <xPortStartScheduler+0x26>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	613b      	str	r3, [r7, #16]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087b6:	4b3e      	ldr	r3, [pc, #248]	; (80088b0 <xPortStartScheduler+0x120>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3f      	ldr	r2, [pc, #252]	; (80088b8 <xPortStartScheduler+0x128>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d10a      	bne.n	80087d6 <xPortStartScheduler+0x46>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60fb      	str	r3, [r7, #12]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087d6:	4b39      	ldr	r3, [pc, #228]	; (80088bc <xPortStartScheduler+0x12c>)
 80087d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	22ff      	movs	r2, #255	; 0xff
 80087e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	4b31      	ldr	r3, [pc, #196]	; (80088c0 <xPortStartScheduler+0x130>)
 80087fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087fe:	4b31      	ldr	r3, [pc, #196]	; (80088c4 <xPortStartScheduler+0x134>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008804:	e009      	b.n	800881a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008806:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <xPortStartScheduler+0x134>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3b01      	subs	r3, #1
 800880c:	4a2d      	ldr	r2, [pc, #180]	; (80088c4 <xPortStartScheduler+0x134>)
 800880e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008822:	2b80      	cmp	r3, #128	; 0x80
 8008824:	d0ef      	beq.n	8008806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008826:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <xPortStartScheduler+0x134>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f1c3 0307 	rsb	r3, r3, #7
 800882e:	2b04      	cmp	r3, #4
 8008830:	d00a      	beq.n	8008848 <xPortStartScheduler+0xb8>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	60bb      	str	r3, [r7, #8]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008848:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <xPortStartScheduler+0x134>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	4a1d      	ldr	r2, [pc, #116]	; (80088c4 <xPortStartScheduler+0x134>)
 8008850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008852:	4b1c      	ldr	r3, [pc, #112]	; (80088c4 <xPortStartScheduler+0x134>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800885a:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <xPortStartScheduler+0x134>)
 800885c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	b2da      	uxtb	r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008866:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <xPortStartScheduler+0x138>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <xPortStartScheduler+0x138>)
 800886c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <xPortStartScheduler+0x138>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a14      	ldr	r2, [pc, #80]	; (80088c8 <xPortStartScheduler+0x138>)
 8008878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800887c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800887e:	f000 f8dd 	bl	8008a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <xPortStartScheduler+0x13c>)
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008888:	f000 f8fc 	bl	8008a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xPortStartScheduler+0x140>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0f      	ldr	r2, [pc, #60]	; (80088d0 <xPortStartScheduler+0x140>)
 8008892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008898:	f7ff ff66 	bl	8008768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800889c:	f7ff fbaa 	bl	8007ff4 <vTaskSwitchContext>
	prvTaskExitError();
 80088a0:	f7ff ff22 	bl	80086e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	e000ed00 	.word	0xe000ed00
 80088b4:	410fc271 	.word	0x410fc271
 80088b8:	410fc270 	.word	0x410fc270
 80088bc:	e000e400 	.word	0xe000e400
 80088c0:	20000928 	.word	0x20000928
 80088c4:	2000092c 	.word	0x2000092c
 80088c8:	e000ed20 	.word	0xe000ed20
 80088cc:	200000cc 	.word	0x200000cc
 80088d0:	e000ef34 	.word	0xe000ef34

080088d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	607b      	str	r3, [r7, #4]
}
 80088ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088ee:	4b0f      	ldr	r3, [pc, #60]	; (800892c <vPortEnterCritical+0x58>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	4a0d      	ldr	r2, [pc, #52]	; (800892c <vPortEnterCritical+0x58>)
 80088f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088f8:	4b0c      	ldr	r3, [pc, #48]	; (800892c <vPortEnterCritical+0x58>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d10f      	bne.n	8008920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <vPortEnterCritical+0x5c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <vPortEnterCritical+0x4c>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	603b      	str	r3, [r7, #0]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <vPortEnterCritical+0x4a>
	}
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	200000cc 	.word	0x200000cc
 8008930:	e000ed04 	.word	0xe000ed04

08008934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800893a:	4b12      	ldr	r3, [pc, #72]	; (8008984 <vPortExitCritical+0x50>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <vPortExitCritical+0x24>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	607b      	str	r3, [r7, #4]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <vPortExitCritical+0x50>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3b01      	subs	r3, #1
 800895e:	4a09      	ldr	r2, [pc, #36]	; (8008984 <vPortExitCritical+0x50>)
 8008960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008962:	4b08      	ldr	r3, [pc, #32]	; (8008984 <vPortExitCritical+0x50>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d105      	bne.n	8008976 <vPortExitCritical+0x42>
 800896a:	2300      	movs	r3, #0
 800896c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	200000cc 	.word	0x200000cc
	...

08008990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008990:	f3ef 8009 	mrs	r0, PSP
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <pxCurrentTCBConst>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	f01e 0f10 	tst.w	lr, #16
 80089a0:	bf08      	it	eq
 80089a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089b4:	f380 8811 	msr	BASEPRI, r0
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f7ff fb18 	bl	8007ff4 <vTaskSwitchContext>
 80089c4:	f04f 0000 	mov.w	r0, #0
 80089c8:	f380 8811 	msr	BASEPRI, r0
 80089cc:	bc09      	pop	{r0, r3}
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	6808      	ldr	r0, [r1, #0]
 80089d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d6:	f01e 0f10 	tst.w	lr, #16
 80089da:	bf08      	it	eq
 80089dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089e0:	f380 8809 	msr	PSP, r0
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst>:
 80089f0:	200007fc 	.word	0x200007fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	607b      	str	r3, [r7, #4]
}
 8008a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a12:	f7ff fa37 	bl	8007e84 <xTaskIncrementTick>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <SysTick_Handler+0x40>)
 8008a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f383 8811 	msr	BASEPRI, r3
}
 8008a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a40:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <vPortSetupTimerInterrupt+0x34>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <vPortSetupTimerInterrupt+0x38>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <vPortSetupTimerInterrupt+0x3c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a0a      	ldr	r2, [pc, #40]	; (8008a7c <vPortSetupTimerInterrupt+0x40>)
 8008a52:	fba2 2303 	umull	r2, r3, r2, r3
 8008a56:	099b      	lsrs	r3, r3, #6
 8008a58:	4a09      	ldr	r2, [pc, #36]	; (8008a80 <vPortSetupTimerInterrupt+0x44>)
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a5e:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <vPortSetupTimerInterrupt+0x34>)
 8008a60:	2207      	movs	r2, #7
 8008a62:	601a      	str	r2, [r3, #0]
}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	e000e010 	.word	0xe000e010
 8008a74:	e000e018 	.word	0xe000e018
 8008a78:	200000c0 	.word	0x200000c0
 8008a7c:	10624dd3 	.word	0x10624dd3
 8008a80:	e000e014 	.word	0xe000e014

08008a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a94 <vPortEnableVFP+0x10>
 8008a88:	6801      	ldr	r1, [r0, #0]
 8008a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a8e:	6001      	str	r1, [r0, #0]
 8008a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a92:	bf00      	nop
 8008a94:	e000ed88 	.word	0xe000ed88

08008a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	; 0x28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008aa4:	f7ff f944 	bl	8007d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008aa8:	4b5b      	ldr	r3, [pc, #364]	; (8008c18 <pvPortMalloc+0x180>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ab0:	f000 f920 	bl	8008cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ab4:	4b59      	ldr	r3, [pc, #356]	; (8008c1c <pvPortMalloc+0x184>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 8093 	bne.w	8008be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01d      	beq.n	8008b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ac8:	2208      	movs	r2, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d014      	beq.n	8008b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f023 0307 	bic.w	r3, r3, #7
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <pvPortMalloc+0x6c>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	617b      	str	r3, [r7, #20]
}
 8008b00:	bf00      	nop
 8008b02:	e7fe      	b.n	8008b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d06e      	beq.n	8008be8 <pvPortMalloc+0x150>
 8008b0a:	4b45      	ldr	r3, [pc, #276]	; (8008c20 <pvPortMalloc+0x188>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d869      	bhi.n	8008be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b14:	4b43      	ldr	r3, [pc, #268]	; (8008c24 <pvPortMalloc+0x18c>)
 8008b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b18:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <pvPortMalloc+0x18c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b1e:	e004      	b.n	8008b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d903      	bls.n	8008b3c <pvPortMalloc+0xa4>
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f1      	bne.n	8008b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b3c:	4b36      	ldr	r3, [pc, #216]	; (8008c18 <pvPortMalloc+0x180>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d050      	beq.n	8008be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	4413      	add	r3, r2
 8008b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	2308      	movs	r3, #8
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d91f      	bls.n	8008ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <pvPortMalloc+0xf8>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	613b      	str	r3, [r7, #16]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	1ad2      	subs	r2, r2, r3
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ba2:	69b8      	ldr	r0, [r7, #24]
 8008ba4:	f000 f908 	bl	8008db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ba8:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <pvPortMalloc+0x188>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	4a1b      	ldr	r2, [pc, #108]	; (8008c20 <pvPortMalloc+0x188>)
 8008bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bb6:	4b1a      	ldr	r3, [pc, #104]	; (8008c20 <pvPortMalloc+0x188>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <pvPortMalloc+0x190>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d203      	bcs.n	8008bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bc2:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <pvPortMalloc+0x188>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a18      	ldr	r2, [pc, #96]	; (8008c28 <pvPortMalloc+0x190>)
 8008bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <pvPortMalloc+0x184>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bde:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <pvPortMalloc+0x194>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a11      	ldr	r2, [pc, #68]	; (8008c2c <pvPortMalloc+0x194>)
 8008be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008be8:	f7ff f8b0 	bl	8007d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <pvPortMalloc+0x174>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60fb      	str	r3, [r7, #12]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <pvPortMalloc+0x172>
	return pvReturn;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3728      	adds	r7, #40	; 0x28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20004538 	.word	0x20004538
 8008c1c:	2000454c 	.word	0x2000454c
 8008c20:	2000453c 	.word	0x2000453c
 8008c24:	20004530 	.word	0x20004530
 8008c28:	20004540 	.word	0x20004540
 8008c2c:	20004544 	.word	0x20004544

08008c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d04d      	beq.n	8008cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c42:	2308      	movs	r3, #8
 8008c44:	425b      	negs	r3, r3
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4413      	add	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	4b24      	ldr	r3, [pc, #144]	; (8008ce8 <vPortFree+0xb8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <vPortFree+0x44>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	60fb      	str	r3, [r7, #12]
}
 8008c70:	bf00      	nop
 8008c72:	e7fe      	b.n	8008c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00a      	beq.n	8008c92 <vPortFree+0x62>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60bb      	str	r3, [r7, #8]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	4b14      	ldr	r3, [pc, #80]	; (8008ce8 <vPortFree+0xb8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01e      	beq.n	8008cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d11a      	bne.n	8008cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	4b0e      	ldr	r3, [pc, #56]	; (8008ce8 <vPortFree+0xb8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	43db      	mvns	r3, r3
 8008cb2:	401a      	ands	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cb8:	f7ff f83a 	bl	8007d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <vPortFree+0xbc>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	4a09      	ldr	r2, [pc, #36]	; (8008cec <vPortFree+0xbc>)
 8008cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cca:	6938      	ldr	r0, [r7, #16]
 8008ccc:	f000 f874 	bl	8008db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cd0:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <vPortFree+0xc0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	4a06      	ldr	r2, [pc, #24]	; (8008cf0 <vPortFree+0xc0>)
 8008cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008cda:	f7ff f837 	bl	8007d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cde:	bf00      	nop
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000454c 	.word	0x2000454c
 8008cec:	2000453c 	.word	0x2000453c
 8008cf0:	20004548 	.word	0x20004548

08008cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d00:	4b27      	ldr	r3, [pc, #156]	; (8008da0 <prvHeapInit+0xac>)
 8008d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00c      	beq.n	8008d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3307      	adds	r3, #7
 8008d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 0307 	bic.w	r3, r3, #7
 8008d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	4a1f      	ldr	r2, [pc, #124]	; (8008da0 <prvHeapInit+0xac>)
 8008d24:	4413      	add	r3, r2
 8008d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d2c:	4a1d      	ldr	r2, [pc, #116]	; (8008da4 <prvHeapInit+0xb0>)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d32:	4b1c      	ldr	r3, [pc, #112]	; (8008da4 <prvHeapInit+0xb0>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d40:	2208      	movs	r2, #8
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <prvHeapInit+0xb4>)
 8008d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <prvHeapInit+0xb4>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d5e:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <prvHeapInit+0xb4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <prvHeapInit+0xb4>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4a0a      	ldr	r2, [pc, #40]	; (8008dac <prvHeapInit+0xb8>)
 8008d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	4a09      	ldr	r2, [pc, #36]	; (8008db0 <prvHeapInit+0xbc>)
 8008d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d8c:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <prvHeapInit+0xc0>)
 8008d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000930 	.word	0x20000930
 8008da4:	20004530 	.word	0x20004530
 8008da8:	20004538 	.word	0x20004538
 8008dac:	20004540 	.word	0x20004540
 8008db0:	2000453c 	.word	0x2000453c
 8008db4:	2000454c 	.word	0x2000454c

08008db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dc0:	4b28      	ldr	r3, [pc, #160]	; (8008e64 <prvInsertBlockIntoFreeList+0xac>)
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e002      	b.n	8008dcc <prvInsertBlockIntoFreeList+0x14>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d8f7      	bhi.n	8008dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	4413      	add	r3, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d108      	bne.n	8008dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	441a      	add	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	441a      	add	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d118      	bne.n	8008e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <prvInsertBlockIntoFreeList+0xb0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d00d      	beq.n	8008e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e008      	b.n	8008e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e36:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <prvInsertBlockIntoFreeList+0xb0>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e003      	b.n	8008e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d002      	beq.n	8008e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20004530 	.word	0x20004530
 8008e68:	20004538 	.word	0x20004538

08008e6c <__errno>:
 8008e6c:	4b01      	ldr	r3, [pc, #4]	; (8008e74 <__errno+0x8>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	200000d0 	.word	0x200000d0

08008e78 <__libc_init_array>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4d0d      	ldr	r5, [pc, #52]	; (8008eb0 <__libc_init_array+0x38>)
 8008e7c:	4c0d      	ldr	r4, [pc, #52]	; (8008eb4 <__libc_init_array+0x3c>)
 8008e7e:	1b64      	subs	r4, r4, r5
 8008e80:	10a4      	asrs	r4, r4, #2
 8008e82:	2600      	movs	r6, #0
 8008e84:	42a6      	cmp	r6, r4
 8008e86:	d109      	bne.n	8008e9c <__libc_init_array+0x24>
 8008e88:	4d0b      	ldr	r5, [pc, #44]	; (8008eb8 <__libc_init_array+0x40>)
 8008e8a:	4c0c      	ldr	r4, [pc, #48]	; (8008ebc <__libc_init_array+0x44>)
 8008e8c:	f000 fc8e 	bl	80097ac <_init>
 8008e90:	1b64      	subs	r4, r4, r5
 8008e92:	10a4      	asrs	r4, r4, #2
 8008e94:	2600      	movs	r6, #0
 8008e96:	42a6      	cmp	r6, r4
 8008e98:	d105      	bne.n	8008ea6 <__libc_init_array+0x2e>
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea0:	4798      	blx	r3
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7ee      	b.n	8008e84 <__libc_init_array+0xc>
 8008ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eaa:	4798      	blx	r3
 8008eac:	3601      	adds	r6, #1
 8008eae:	e7f2      	b.n	8008e96 <__libc_init_array+0x1e>
 8008eb0:	080098bc 	.word	0x080098bc
 8008eb4:	080098bc 	.word	0x080098bc
 8008eb8:	080098bc 	.word	0x080098bc
 8008ebc:	080098c0 	.word	0x080098c0

08008ec0 <memcpy>:
 8008ec0:	440a      	add	r2, r1
 8008ec2:	4291      	cmp	r1, r2
 8008ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ec8:	d100      	bne.n	8008ecc <memcpy+0xc>
 8008eca:	4770      	bx	lr
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed6:	4291      	cmp	r1, r2
 8008ed8:	d1f9      	bne.n	8008ece <memcpy+0xe>
 8008eda:	bd10      	pop	{r4, pc}

08008edc <memset>:
 8008edc:	4402      	add	r2, r0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <memset+0xa>
 8008ee4:	4770      	bx	lr
 8008ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eea:	e7f9      	b.n	8008ee0 <memset+0x4>

08008eec <_vsiprintf_r>:
 8008eec:	b500      	push	{lr}
 8008eee:	b09b      	sub	sp, #108	; 0x6c
 8008ef0:	9100      	str	r1, [sp, #0]
 8008ef2:	9104      	str	r1, [sp, #16]
 8008ef4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ef8:	9105      	str	r1, [sp, #20]
 8008efa:	9102      	str	r1, [sp, #8]
 8008efc:	4905      	ldr	r1, [pc, #20]	; (8008f14 <_vsiprintf_r+0x28>)
 8008efe:	9103      	str	r1, [sp, #12]
 8008f00:	4669      	mov	r1, sp
 8008f02:	f000 f86f 	bl	8008fe4 <_svfiprintf_r>
 8008f06:	9b00      	ldr	r3, [sp, #0]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	b01b      	add	sp, #108	; 0x6c
 8008f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f12:	bf00      	nop
 8008f14:	ffff0208 	.word	0xffff0208

08008f18 <vsiprintf>:
 8008f18:	4613      	mov	r3, r2
 8008f1a:	460a      	mov	r2, r1
 8008f1c:	4601      	mov	r1, r0
 8008f1e:	4802      	ldr	r0, [pc, #8]	; (8008f28 <vsiprintf+0x10>)
 8008f20:	6800      	ldr	r0, [r0, #0]
 8008f22:	f7ff bfe3 	b.w	8008eec <_vsiprintf_r>
 8008f26:	bf00      	nop
 8008f28:	200000d0 	.word	0x200000d0

08008f2c <__ssputs_r>:
 8008f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	688e      	ldr	r6, [r1, #8]
 8008f32:	429e      	cmp	r6, r3
 8008f34:	4682      	mov	sl, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	4690      	mov	r8, r2
 8008f3a:	461f      	mov	r7, r3
 8008f3c:	d838      	bhi.n	8008fb0 <__ssputs_r+0x84>
 8008f3e:	898a      	ldrh	r2, [r1, #12]
 8008f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f44:	d032      	beq.n	8008fac <__ssputs_r+0x80>
 8008f46:	6825      	ldr	r5, [r4, #0]
 8008f48:	6909      	ldr	r1, [r1, #16]
 8008f4a:	eba5 0901 	sub.w	r9, r5, r1
 8008f4e:	6965      	ldr	r5, [r4, #20]
 8008f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f58:	3301      	adds	r3, #1
 8008f5a:	444b      	add	r3, r9
 8008f5c:	106d      	asrs	r5, r5, #1
 8008f5e:	429d      	cmp	r5, r3
 8008f60:	bf38      	it	cc
 8008f62:	461d      	movcc	r5, r3
 8008f64:	0553      	lsls	r3, r2, #21
 8008f66:	d531      	bpl.n	8008fcc <__ssputs_r+0xa0>
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f000 fb55 	bl	8009618 <_malloc_r>
 8008f6e:	4606      	mov	r6, r0
 8008f70:	b950      	cbnz	r0, 8008f88 <__ssputs_r+0x5c>
 8008f72:	230c      	movs	r3, #12
 8008f74:	f8ca 3000 	str.w	r3, [sl]
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f88:	6921      	ldr	r1, [r4, #16]
 8008f8a:	464a      	mov	r2, r9
 8008f8c:	f7ff ff98 	bl	8008ec0 <memcpy>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	6126      	str	r6, [r4, #16]
 8008f9e:	6165      	str	r5, [r4, #20]
 8008fa0:	444e      	add	r6, r9
 8008fa2:	eba5 0509 	sub.w	r5, r5, r9
 8008fa6:	6026      	str	r6, [r4, #0]
 8008fa8:	60a5      	str	r5, [r4, #8]
 8008faa:	463e      	mov	r6, r7
 8008fac:	42be      	cmp	r6, r7
 8008fae:	d900      	bls.n	8008fb2 <__ssputs_r+0x86>
 8008fb0:	463e      	mov	r6, r7
 8008fb2:	6820      	ldr	r0, [r4, #0]
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	4641      	mov	r1, r8
 8008fb8:	f000 faa8 	bl	800950c <memmove>
 8008fbc:	68a3      	ldr	r3, [r4, #8]
 8008fbe:	1b9b      	subs	r3, r3, r6
 8008fc0:	60a3      	str	r3, [r4, #8]
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	4433      	add	r3, r6
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7db      	b.n	8008f84 <__ssputs_r+0x58>
 8008fcc:	462a      	mov	r2, r5
 8008fce:	f000 fb97 	bl	8009700 <_realloc_r>
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1e1      	bne.n	8008f9c <__ssputs_r+0x70>
 8008fd8:	6921      	ldr	r1, [r4, #16]
 8008fda:	4650      	mov	r0, sl
 8008fdc:	f000 fab0 	bl	8009540 <_free_r>
 8008fe0:	e7c7      	b.n	8008f72 <__ssputs_r+0x46>
	...

08008fe4 <_svfiprintf_r>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	4698      	mov	r8, r3
 8008fea:	898b      	ldrh	r3, [r1, #12]
 8008fec:	061b      	lsls	r3, r3, #24
 8008fee:	b09d      	sub	sp, #116	; 0x74
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	d50e      	bpl.n	8009016 <_svfiprintf_r+0x32>
 8008ff8:	690b      	ldr	r3, [r1, #16]
 8008ffa:	b963      	cbnz	r3, 8009016 <_svfiprintf_r+0x32>
 8008ffc:	2140      	movs	r1, #64	; 0x40
 8008ffe:	f000 fb0b 	bl	8009618 <_malloc_r>
 8009002:	6028      	str	r0, [r5, #0]
 8009004:	6128      	str	r0, [r5, #16]
 8009006:	b920      	cbnz	r0, 8009012 <_svfiprintf_r+0x2e>
 8009008:	230c      	movs	r3, #12
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009010:	e0d1      	b.n	80091b6 <_svfiprintf_r+0x1d2>
 8009012:	2340      	movs	r3, #64	; 0x40
 8009014:	616b      	str	r3, [r5, #20]
 8009016:	2300      	movs	r3, #0
 8009018:	9309      	str	r3, [sp, #36]	; 0x24
 800901a:	2320      	movs	r3, #32
 800901c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009020:	f8cd 800c 	str.w	r8, [sp, #12]
 8009024:	2330      	movs	r3, #48	; 0x30
 8009026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091d0 <_svfiprintf_r+0x1ec>
 800902a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800902e:	f04f 0901 	mov.w	r9, #1
 8009032:	4623      	mov	r3, r4
 8009034:	469a      	mov	sl, r3
 8009036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800903a:	b10a      	cbz	r2, 8009040 <_svfiprintf_r+0x5c>
 800903c:	2a25      	cmp	r2, #37	; 0x25
 800903e:	d1f9      	bne.n	8009034 <_svfiprintf_r+0x50>
 8009040:	ebba 0b04 	subs.w	fp, sl, r4
 8009044:	d00b      	beq.n	800905e <_svfiprintf_r+0x7a>
 8009046:	465b      	mov	r3, fp
 8009048:	4622      	mov	r2, r4
 800904a:	4629      	mov	r1, r5
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff ff6d 	bl	8008f2c <__ssputs_r>
 8009052:	3001      	adds	r0, #1
 8009054:	f000 80aa 	beq.w	80091ac <_svfiprintf_r+0x1c8>
 8009058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905a:	445a      	add	r2, fp
 800905c:	9209      	str	r2, [sp, #36]	; 0x24
 800905e:	f89a 3000 	ldrb.w	r3, [sl]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 80a2 	beq.w	80091ac <_svfiprintf_r+0x1c8>
 8009068:	2300      	movs	r3, #0
 800906a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800906e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009072:	f10a 0a01 	add.w	sl, sl, #1
 8009076:	9304      	str	r3, [sp, #16]
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800907e:	931a      	str	r3, [sp, #104]	; 0x68
 8009080:	4654      	mov	r4, sl
 8009082:	2205      	movs	r2, #5
 8009084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009088:	4851      	ldr	r0, [pc, #324]	; (80091d0 <_svfiprintf_r+0x1ec>)
 800908a:	f7f7 f8b1 	bl	80001f0 <memchr>
 800908e:	9a04      	ldr	r2, [sp, #16]
 8009090:	b9d8      	cbnz	r0, 80090ca <_svfiprintf_r+0xe6>
 8009092:	06d0      	lsls	r0, r2, #27
 8009094:	bf44      	itt	mi
 8009096:	2320      	movmi	r3, #32
 8009098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800909c:	0711      	lsls	r1, r2, #28
 800909e:	bf44      	itt	mi
 80090a0:	232b      	movmi	r3, #43	; 0x2b
 80090a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a6:	f89a 3000 	ldrb.w	r3, [sl]
 80090aa:	2b2a      	cmp	r3, #42	; 0x2a
 80090ac:	d015      	beq.n	80090da <_svfiprintf_r+0xf6>
 80090ae:	9a07      	ldr	r2, [sp, #28]
 80090b0:	4654      	mov	r4, sl
 80090b2:	2000      	movs	r0, #0
 80090b4:	f04f 0c0a 	mov.w	ip, #10
 80090b8:	4621      	mov	r1, r4
 80090ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090be:	3b30      	subs	r3, #48	; 0x30
 80090c0:	2b09      	cmp	r3, #9
 80090c2:	d94e      	bls.n	8009162 <_svfiprintf_r+0x17e>
 80090c4:	b1b0      	cbz	r0, 80090f4 <_svfiprintf_r+0x110>
 80090c6:	9207      	str	r2, [sp, #28]
 80090c8:	e014      	b.n	80090f4 <_svfiprintf_r+0x110>
 80090ca:	eba0 0308 	sub.w	r3, r0, r8
 80090ce:	fa09 f303 	lsl.w	r3, r9, r3
 80090d2:	4313      	orrs	r3, r2
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	46a2      	mov	sl, r4
 80090d8:	e7d2      	b.n	8009080 <_svfiprintf_r+0x9c>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	1d19      	adds	r1, r3, #4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	9103      	str	r1, [sp, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bfbb      	ittet	lt
 80090e6:	425b      	neglt	r3, r3
 80090e8:	f042 0202 	orrlt.w	r2, r2, #2
 80090ec:	9307      	strge	r3, [sp, #28]
 80090ee:	9307      	strlt	r3, [sp, #28]
 80090f0:	bfb8      	it	lt
 80090f2:	9204      	strlt	r2, [sp, #16]
 80090f4:	7823      	ldrb	r3, [r4, #0]
 80090f6:	2b2e      	cmp	r3, #46	; 0x2e
 80090f8:	d10c      	bne.n	8009114 <_svfiprintf_r+0x130>
 80090fa:	7863      	ldrb	r3, [r4, #1]
 80090fc:	2b2a      	cmp	r3, #42	; 0x2a
 80090fe:	d135      	bne.n	800916c <_svfiprintf_r+0x188>
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	1d1a      	adds	r2, r3, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	9203      	str	r2, [sp, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfb8      	it	lt
 800910c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009110:	3402      	adds	r4, #2
 8009112:	9305      	str	r3, [sp, #20]
 8009114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091e0 <_svfiprintf_r+0x1fc>
 8009118:	7821      	ldrb	r1, [r4, #0]
 800911a:	2203      	movs	r2, #3
 800911c:	4650      	mov	r0, sl
 800911e:	f7f7 f867 	bl	80001f0 <memchr>
 8009122:	b140      	cbz	r0, 8009136 <_svfiprintf_r+0x152>
 8009124:	2340      	movs	r3, #64	; 0x40
 8009126:	eba0 000a 	sub.w	r0, r0, sl
 800912a:	fa03 f000 	lsl.w	r0, r3, r0
 800912e:	9b04      	ldr	r3, [sp, #16]
 8009130:	4303      	orrs	r3, r0
 8009132:	3401      	adds	r4, #1
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913a:	4826      	ldr	r0, [pc, #152]	; (80091d4 <_svfiprintf_r+0x1f0>)
 800913c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009140:	2206      	movs	r2, #6
 8009142:	f7f7 f855 	bl	80001f0 <memchr>
 8009146:	2800      	cmp	r0, #0
 8009148:	d038      	beq.n	80091bc <_svfiprintf_r+0x1d8>
 800914a:	4b23      	ldr	r3, [pc, #140]	; (80091d8 <_svfiprintf_r+0x1f4>)
 800914c:	bb1b      	cbnz	r3, 8009196 <_svfiprintf_r+0x1b2>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	3307      	adds	r3, #7
 8009152:	f023 0307 	bic.w	r3, r3, #7
 8009156:	3308      	adds	r3, #8
 8009158:	9303      	str	r3, [sp, #12]
 800915a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915c:	4433      	add	r3, r6
 800915e:	9309      	str	r3, [sp, #36]	; 0x24
 8009160:	e767      	b.n	8009032 <_svfiprintf_r+0x4e>
 8009162:	fb0c 3202 	mla	r2, ip, r2, r3
 8009166:	460c      	mov	r4, r1
 8009168:	2001      	movs	r0, #1
 800916a:	e7a5      	b.n	80090b8 <_svfiprintf_r+0xd4>
 800916c:	2300      	movs	r3, #0
 800916e:	3401      	adds	r4, #1
 8009170:	9305      	str	r3, [sp, #20]
 8009172:	4619      	mov	r1, r3
 8009174:	f04f 0c0a 	mov.w	ip, #10
 8009178:	4620      	mov	r0, r4
 800917a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800917e:	3a30      	subs	r2, #48	; 0x30
 8009180:	2a09      	cmp	r2, #9
 8009182:	d903      	bls.n	800918c <_svfiprintf_r+0x1a8>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0c5      	beq.n	8009114 <_svfiprintf_r+0x130>
 8009188:	9105      	str	r1, [sp, #20]
 800918a:	e7c3      	b.n	8009114 <_svfiprintf_r+0x130>
 800918c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009190:	4604      	mov	r4, r0
 8009192:	2301      	movs	r3, #1
 8009194:	e7f0      	b.n	8009178 <_svfiprintf_r+0x194>
 8009196:	ab03      	add	r3, sp, #12
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	462a      	mov	r2, r5
 800919c:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <_svfiprintf_r+0x1f8>)
 800919e:	a904      	add	r1, sp, #16
 80091a0:	4638      	mov	r0, r7
 80091a2:	f3af 8000 	nop.w
 80091a6:	1c42      	adds	r2, r0, #1
 80091a8:	4606      	mov	r6, r0
 80091aa:	d1d6      	bne.n	800915a <_svfiprintf_r+0x176>
 80091ac:	89ab      	ldrh	r3, [r5, #12]
 80091ae:	065b      	lsls	r3, r3, #25
 80091b0:	f53f af2c 	bmi.w	800900c <_svfiprintf_r+0x28>
 80091b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091b6:	b01d      	add	sp, #116	; 0x74
 80091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091bc:	ab03      	add	r3, sp, #12
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	462a      	mov	r2, r5
 80091c2:	4b06      	ldr	r3, [pc, #24]	; (80091dc <_svfiprintf_r+0x1f8>)
 80091c4:	a904      	add	r1, sp, #16
 80091c6:	4638      	mov	r0, r7
 80091c8:	f000 f87a 	bl	80092c0 <_printf_i>
 80091cc:	e7eb      	b.n	80091a6 <_svfiprintf_r+0x1c2>
 80091ce:	bf00      	nop
 80091d0:	08009880 	.word	0x08009880
 80091d4:	0800988a 	.word	0x0800988a
 80091d8:	00000000 	.word	0x00000000
 80091dc:	08008f2d 	.word	0x08008f2d
 80091e0:	08009886 	.word	0x08009886

080091e4 <_printf_common>:
 80091e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e8:	4616      	mov	r6, r2
 80091ea:	4699      	mov	r9, r3
 80091ec:	688a      	ldr	r2, [r1, #8]
 80091ee:	690b      	ldr	r3, [r1, #16]
 80091f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091f4:	4293      	cmp	r3, r2
 80091f6:	bfb8      	it	lt
 80091f8:	4613      	movlt	r3, r2
 80091fa:	6033      	str	r3, [r6, #0]
 80091fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009200:	4607      	mov	r7, r0
 8009202:	460c      	mov	r4, r1
 8009204:	b10a      	cbz	r2, 800920a <_printf_common+0x26>
 8009206:	3301      	adds	r3, #1
 8009208:	6033      	str	r3, [r6, #0]
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	0699      	lsls	r1, r3, #26
 800920e:	bf42      	ittt	mi
 8009210:	6833      	ldrmi	r3, [r6, #0]
 8009212:	3302      	addmi	r3, #2
 8009214:	6033      	strmi	r3, [r6, #0]
 8009216:	6825      	ldr	r5, [r4, #0]
 8009218:	f015 0506 	ands.w	r5, r5, #6
 800921c:	d106      	bne.n	800922c <_printf_common+0x48>
 800921e:	f104 0a19 	add.w	sl, r4, #25
 8009222:	68e3      	ldr	r3, [r4, #12]
 8009224:	6832      	ldr	r2, [r6, #0]
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	42ab      	cmp	r3, r5
 800922a:	dc26      	bgt.n	800927a <_printf_common+0x96>
 800922c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009230:	1e13      	subs	r3, r2, #0
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	bf18      	it	ne
 8009236:	2301      	movne	r3, #1
 8009238:	0692      	lsls	r2, r2, #26
 800923a:	d42b      	bmi.n	8009294 <_printf_common+0xb0>
 800923c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009240:	4649      	mov	r1, r9
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	3001      	adds	r0, #1
 8009248:	d01e      	beq.n	8009288 <_printf_common+0xa4>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	68e5      	ldr	r5, [r4, #12]
 800924e:	6832      	ldr	r2, [r6, #0]
 8009250:	f003 0306 	and.w	r3, r3, #6
 8009254:	2b04      	cmp	r3, #4
 8009256:	bf08      	it	eq
 8009258:	1aad      	subeq	r5, r5, r2
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	6922      	ldr	r2, [r4, #16]
 800925e:	bf0c      	ite	eq
 8009260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009264:	2500      	movne	r5, #0
 8009266:	4293      	cmp	r3, r2
 8009268:	bfc4      	itt	gt
 800926a:	1a9b      	subgt	r3, r3, r2
 800926c:	18ed      	addgt	r5, r5, r3
 800926e:	2600      	movs	r6, #0
 8009270:	341a      	adds	r4, #26
 8009272:	42b5      	cmp	r5, r6
 8009274:	d11a      	bne.n	80092ac <_printf_common+0xc8>
 8009276:	2000      	movs	r0, #0
 8009278:	e008      	b.n	800928c <_printf_common+0xa8>
 800927a:	2301      	movs	r3, #1
 800927c:	4652      	mov	r2, sl
 800927e:	4649      	mov	r1, r9
 8009280:	4638      	mov	r0, r7
 8009282:	47c0      	blx	r8
 8009284:	3001      	adds	r0, #1
 8009286:	d103      	bne.n	8009290 <_printf_common+0xac>
 8009288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800928c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009290:	3501      	adds	r5, #1
 8009292:	e7c6      	b.n	8009222 <_printf_common+0x3e>
 8009294:	18e1      	adds	r1, r4, r3
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	2030      	movs	r0, #48	; 0x30
 800929a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800929e:	4422      	add	r2, r4
 80092a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092a8:	3302      	adds	r3, #2
 80092aa:	e7c7      	b.n	800923c <_printf_common+0x58>
 80092ac:	2301      	movs	r3, #1
 80092ae:	4622      	mov	r2, r4
 80092b0:	4649      	mov	r1, r9
 80092b2:	4638      	mov	r0, r7
 80092b4:	47c0      	blx	r8
 80092b6:	3001      	adds	r0, #1
 80092b8:	d0e6      	beq.n	8009288 <_printf_common+0xa4>
 80092ba:	3601      	adds	r6, #1
 80092bc:	e7d9      	b.n	8009272 <_printf_common+0x8e>
	...

080092c0 <_printf_i>:
 80092c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c4:	7e0f      	ldrb	r7, [r1, #24]
 80092c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092c8:	2f78      	cmp	r7, #120	; 0x78
 80092ca:	4691      	mov	r9, r2
 80092cc:	4680      	mov	r8, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	469a      	mov	sl, r3
 80092d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092d6:	d807      	bhi.n	80092e8 <_printf_i+0x28>
 80092d8:	2f62      	cmp	r7, #98	; 0x62
 80092da:	d80a      	bhi.n	80092f2 <_printf_i+0x32>
 80092dc:	2f00      	cmp	r7, #0
 80092de:	f000 80d8 	beq.w	8009492 <_printf_i+0x1d2>
 80092e2:	2f58      	cmp	r7, #88	; 0x58
 80092e4:	f000 80a3 	beq.w	800942e <_printf_i+0x16e>
 80092e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092f0:	e03a      	b.n	8009368 <_printf_i+0xa8>
 80092f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092f6:	2b15      	cmp	r3, #21
 80092f8:	d8f6      	bhi.n	80092e8 <_printf_i+0x28>
 80092fa:	a101      	add	r1, pc, #4	; (adr r1, 8009300 <_printf_i+0x40>)
 80092fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009300:	08009359 	.word	0x08009359
 8009304:	0800936d 	.word	0x0800936d
 8009308:	080092e9 	.word	0x080092e9
 800930c:	080092e9 	.word	0x080092e9
 8009310:	080092e9 	.word	0x080092e9
 8009314:	080092e9 	.word	0x080092e9
 8009318:	0800936d 	.word	0x0800936d
 800931c:	080092e9 	.word	0x080092e9
 8009320:	080092e9 	.word	0x080092e9
 8009324:	080092e9 	.word	0x080092e9
 8009328:	080092e9 	.word	0x080092e9
 800932c:	08009479 	.word	0x08009479
 8009330:	0800939d 	.word	0x0800939d
 8009334:	0800945b 	.word	0x0800945b
 8009338:	080092e9 	.word	0x080092e9
 800933c:	080092e9 	.word	0x080092e9
 8009340:	0800949b 	.word	0x0800949b
 8009344:	080092e9 	.word	0x080092e9
 8009348:	0800939d 	.word	0x0800939d
 800934c:	080092e9 	.word	0x080092e9
 8009350:	080092e9 	.word	0x080092e9
 8009354:	08009463 	.word	0x08009463
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	602a      	str	r2, [r5, #0]
 8009360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009368:	2301      	movs	r3, #1
 800936a:	e0a3      	b.n	80094b4 <_printf_i+0x1f4>
 800936c:	6820      	ldr	r0, [r4, #0]
 800936e:	6829      	ldr	r1, [r5, #0]
 8009370:	0606      	lsls	r6, r0, #24
 8009372:	f101 0304 	add.w	r3, r1, #4
 8009376:	d50a      	bpl.n	800938e <_printf_i+0xce>
 8009378:	680e      	ldr	r6, [r1, #0]
 800937a:	602b      	str	r3, [r5, #0]
 800937c:	2e00      	cmp	r6, #0
 800937e:	da03      	bge.n	8009388 <_printf_i+0xc8>
 8009380:	232d      	movs	r3, #45	; 0x2d
 8009382:	4276      	negs	r6, r6
 8009384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009388:	485e      	ldr	r0, [pc, #376]	; (8009504 <_printf_i+0x244>)
 800938a:	230a      	movs	r3, #10
 800938c:	e019      	b.n	80093c2 <_printf_i+0x102>
 800938e:	680e      	ldr	r6, [r1, #0]
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009396:	bf18      	it	ne
 8009398:	b236      	sxthne	r6, r6
 800939a:	e7ef      	b.n	800937c <_printf_i+0xbc>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	6820      	ldr	r0, [r4, #0]
 80093a0:	1d19      	adds	r1, r3, #4
 80093a2:	6029      	str	r1, [r5, #0]
 80093a4:	0601      	lsls	r1, r0, #24
 80093a6:	d501      	bpl.n	80093ac <_printf_i+0xec>
 80093a8:	681e      	ldr	r6, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <_printf_i+0xf2>
 80093ac:	0646      	lsls	r6, r0, #25
 80093ae:	d5fb      	bpl.n	80093a8 <_printf_i+0xe8>
 80093b0:	881e      	ldrh	r6, [r3, #0]
 80093b2:	4854      	ldr	r0, [pc, #336]	; (8009504 <_printf_i+0x244>)
 80093b4:	2f6f      	cmp	r7, #111	; 0x6f
 80093b6:	bf0c      	ite	eq
 80093b8:	2308      	moveq	r3, #8
 80093ba:	230a      	movne	r3, #10
 80093bc:	2100      	movs	r1, #0
 80093be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093c2:	6865      	ldr	r5, [r4, #4]
 80093c4:	60a5      	str	r5, [r4, #8]
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	bfa2      	ittt	ge
 80093ca:	6821      	ldrge	r1, [r4, #0]
 80093cc:	f021 0104 	bicge.w	r1, r1, #4
 80093d0:	6021      	strge	r1, [r4, #0]
 80093d2:	b90e      	cbnz	r6, 80093d8 <_printf_i+0x118>
 80093d4:	2d00      	cmp	r5, #0
 80093d6:	d04d      	beq.n	8009474 <_printf_i+0x1b4>
 80093d8:	4615      	mov	r5, r2
 80093da:	fbb6 f1f3 	udiv	r1, r6, r3
 80093de:	fb03 6711 	mls	r7, r3, r1, r6
 80093e2:	5dc7      	ldrb	r7, [r0, r7]
 80093e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093e8:	4637      	mov	r7, r6
 80093ea:	42bb      	cmp	r3, r7
 80093ec:	460e      	mov	r6, r1
 80093ee:	d9f4      	bls.n	80093da <_printf_i+0x11a>
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d10b      	bne.n	800940c <_printf_i+0x14c>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	07de      	lsls	r6, r3, #31
 80093f8:	d508      	bpl.n	800940c <_printf_i+0x14c>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	6861      	ldr	r1, [r4, #4]
 80093fe:	4299      	cmp	r1, r3
 8009400:	bfde      	ittt	le
 8009402:	2330      	movle	r3, #48	; 0x30
 8009404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009408:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800940c:	1b52      	subs	r2, r2, r5
 800940e:	6122      	str	r2, [r4, #16]
 8009410:	f8cd a000 	str.w	sl, [sp]
 8009414:	464b      	mov	r3, r9
 8009416:	aa03      	add	r2, sp, #12
 8009418:	4621      	mov	r1, r4
 800941a:	4640      	mov	r0, r8
 800941c:	f7ff fee2 	bl	80091e4 <_printf_common>
 8009420:	3001      	adds	r0, #1
 8009422:	d14c      	bne.n	80094be <_printf_i+0x1fe>
 8009424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009428:	b004      	add	sp, #16
 800942a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942e:	4835      	ldr	r0, [pc, #212]	; (8009504 <_printf_i+0x244>)
 8009430:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009434:	6829      	ldr	r1, [r5, #0]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	f851 6b04 	ldr.w	r6, [r1], #4
 800943c:	6029      	str	r1, [r5, #0]
 800943e:	061d      	lsls	r5, r3, #24
 8009440:	d514      	bpl.n	800946c <_printf_i+0x1ac>
 8009442:	07df      	lsls	r7, r3, #31
 8009444:	bf44      	itt	mi
 8009446:	f043 0320 	orrmi.w	r3, r3, #32
 800944a:	6023      	strmi	r3, [r4, #0]
 800944c:	b91e      	cbnz	r6, 8009456 <_printf_i+0x196>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f023 0320 	bic.w	r3, r3, #32
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	2310      	movs	r3, #16
 8009458:	e7b0      	b.n	80093bc <_printf_i+0xfc>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	f043 0320 	orr.w	r3, r3, #32
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	2378      	movs	r3, #120	; 0x78
 8009464:	4828      	ldr	r0, [pc, #160]	; (8009508 <_printf_i+0x248>)
 8009466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800946a:	e7e3      	b.n	8009434 <_printf_i+0x174>
 800946c:	0659      	lsls	r1, r3, #25
 800946e:	bf48      	it	mi
 8009470:	b2b6      	uxthmi	r6, r6
 8009472:	e7e6      	b.n	8009442 <_printf_i+0x182>
 8009474:	4615      	mov	r5, r2
 8009476:	e7bb      	b.n	80093f0 <_printf_i+0x130>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	6826      	ldr	r6, [r4, #0]
 800947c:	6961      	ldr	r1, [r4, #20]
 800947e:	1d18      	adds	r0, r3, #4
 8009480:	6028      	str	r0, [r5, #0]
 8009482:	0635      	lsls	r5, r6, #24
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	d501      	bpl.n	800948c <_printf_i+0x1cc>
 8009488:	6019      	str	r1, [r3, #0]
 800948a:	e002      	b.n	8009492 <_printf_i+0x1d2>
 800948c:	0670      	lsls	r0, r6, #25
 800948e:	d5fb      	bpl.n	8009488 <_printf_i+0x1c8>
 8009490:	8019      	strh	r1, [r3, #0]
 8009492:	2300      	movs	r3, #0
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	4615      	mov	r5, r2
 8009498:	e7ba      	b.n	8009410 <_printf_i+0x150>
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	1d1a      	adds	r2, r3, #4
 800949e:	602a      	str	r2, [r5, #0]
 80094a0:	681d      	ldr	r5, [r3, #0]
 80094a2:	6862      	ldr	r2, [r4, #4]
 80094a4:	2100      	movs	r1, #0
 80094a6:	4628      	mov	r0, r5
 80094a8:	f7f6 fea2 	bl	80001f0 <memchr>
 80094ac:	b108      	cbz	r0, 80094b2 <_printf_i+0x1f2>
 80094ae:	1b40      	subs	r0, r0, r5
 80094b0:	6060      	str	r0, [r4, #4]
 80094b2:	6863      	ldr	r3, [r4, #4]
 80094b4:	6123      	str	r3, [r4, #16]
 80094b6:	2300      	movs	r3, #0
 80094b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094bc:	e7a8      	b.n	8009410 <_printf_i+0x150>
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	462a      	mov	r2, r5
 80094c2:	4649      	mov	r1, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	47d0      	blx	sl
 80094c8:	3001      	adds	r0, #1
 80094ca:	d0ab      	beq.n	8009424 <_printf_i+0x164>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	079b      	lsls	r3, r3, #30
 80094d0:	d413      	bmi.n	80094fa <_printf_i+0x23a>
 80094d2:	68e0      	ldr	r0, [r4, #12]
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	4298      	cmp	r0, r3
 80094d8:	bfb8      	it	lt
 80094da:	4618      	movlt	r0, r3
 80094dc:	e7a4      	b.n	8009428 <_printf_i+0x168>
 80094de:	2301      	movs	r3, #1
 80094e0:	4632      	mov	r2, r6
 80094e2:	4649      	mov	r1, r9
 80094e4:	4640      	mov	r0, r8
 80094e6:	47d0      	blx	sl
 80094e8:	3001      	adds	r0, #1
 80094ea:	d09b      	beq.n	8009424 <_printf_i+0x164>
 80094ec:	3501      	adds	r5, #1
 80094ee:	68e3      	ldr	r3, [r4, #12]
 80094f0:	9903      	ldr	r1, [sp, #12]
 80094f2:	1a5b      	subs	r3, r3, r1
 80094f4:	42ab      	cmp	r3, r5
 80094f6:	dcf2      	bgt.n	80094de <_printf_i+0x21e>
 80094f8:	e7eb      	b.n	80094d2 <_printf_i+0x212>
 80094fa:	2500      	movs	r5, #0
 80094fc:	f104 0619 	add.w	r6, r4, #25
 8009500:	e7f5      	b.n	80094ee <_printf_i+0x22e>
 8009502:	bf00      	nop
 8009504:	08009891 	.word	0x08009891
 8009508:	080098a2 	.word	0x080098a2

0800950c <memmove>:
 800950c:	4288      	cmp	r0, r1
 800950e:	b510      	push	{r4, lr}
 8009510:	eb01 0402 	add.w	r4, r1, r2
 8009514:	d902      	bls.n	800951c <memmove+0x10>
 8009516:	4284      	cmp	r4, r0
 8009518:	4623      	mov	r3, r4
 800951a:	d807      	bhi.n	800952c <memmove+0x20>
 800951c:	1e43      	subs	r3, r0, #1
 800951e:	42a1      	cmp	r1, r4
 8009520:	d008      	beq.n	8009534 <memmove+0x28>
 8009522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800952a:	e7f8      	b.n	800951e <memmove+0x12>
 800952c:	4402      	add	r2, r0
 800952e:	4601      	mov	r1, r0
 8009530:	428a      	cmp	r2, r1
 8009532:	d100      	bne.n	8009536 <memmove+0x2a>
 8009534:	bd10      	pop	{r4, pc}
 8009536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800953a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800953e:	e7f7      	b.n	8009530 <memmove+0x24>

08009540 <_free_r>:
 8009540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009542:	2900      	cmp	r1, #0
 8009544:	d044      	beq.n	80095d0 <_free_r+0x90>
 8009546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954a:	9001      	str	r0, [sp, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f1a1 0404 	sub.w	r4, r1, #4
 8009552:	bfb8      	it	lt
 8009554:	18e4      	addlt	r4, r4, r3
 8009556:	f000 f913 	bl	8009780 <__malloc_lock>
 800955a:	4a1e      	ldr	r2, [pc, #120]	; (80095d4 <_free_r+0x94>)
 800955c:	9801      	ldr	r0, [sp, #4]
 800955e:	6813      	ldr	r3, [r2, #0]
 8009560:	b933      	cbnz	r3, 8009570 <_free_r+0x30>
 8009562:	6063      	str	r3, [r4, #4]
 8009564:	6014      	str	r4, [r2, #0]
 8009566:	b003      	add	sp, #12
 8009568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800956c:	f000 b90e 	b.w	800978c <__malloc_unlock>
 8009570:	42a3      	cmp	r3, r4
 8009572:	d908      	bls.n	8009586 <_free_r+0x46>
 8009574:	6825      	ldr	r5, [r4, #0]
 8009576:	1961      	adds	r1, r4, r5
 8009578:	428b      	cmp	r3, r1
 800957a:	bf01      	itttt	eq
 800957c:	6819      	ldreq	r1, [r3, #0]
 800957e:	685b      	ldreq	r3, [r3, #4]
 8009580:	1949      	addeq	r1, r1, r5
 8009582:	6021      	streq	r1, [r4, #0]
 8009584:	e7ed      	b.n	8009562 <_free_r+0x22>
 8009586:	461a      	mov	r2, r3
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	b10b      	cbz	r3, 8009590 <_free_r+0x50>
 800958c:	42a3      	cmp	r3, r4
 800958e:	d9fa      	bls.n	8009586 <_free_r+0x46>
 8009590:	6811      	ldr	r1, [r2, #0]
 8009592:	1855      	adds	r5, r2, r1
 8009594:	42a5      	cmp	r5, r4
 8009596:	d10b      	bne.n	80095b0 <_free_r+0x70>
 8009598:	6824      	ldr	r4, [r4, #0]
 800959a:	4421      	add	r1, r4
 800959c:	1854      	adds	r4, r2, r1
 800959e:	42a3      	cmp	r3, r4
 80095a0:	6011      	str	r1, [r2, #0]
 80095a2:	d1e0      	bne.n	8009566 <_free_r+0x26>
 80095a4:	681c      	ldr	r4, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	6053      	str	r3, [r2, #4]
 80095aa:	4421      	add	r1, r4
 80095ac:	6011      	str	r1, [r2, #0]
 80095ae:	e7da      	b.n	8009566 <_free_r+0x26>
 80095b0:	d902      	bls.n	80095b8 <_free_r+0x78>
 80095b2:	230c      	movs	r3, #12
 80095b4:	6003      	str	r3, [r0, #0]
 80095b6:	e7d6      	b.n	8009566 <_free_r+0x26>
 80095b8:	6825      	ldr	r5, [r4, #0]
 80095ba:	1961      	adds	r1, r4, r5
 80095bc:	428b      	cmp	r3, r1
 80095be:	bf04      	itt	eq
 80095c0:	6819      	ldreq	r1, [r3, #0]
 80095c2:	685b      	ldreq	r3, [r3, #4]
 80095c4:	6063      	str	r3, [r4, #4]
 80095c6:	bf04      	itt	eq
 80095c8:	1949      	addeq	r1, r1, r5
 80095ca:	6021      	streq	r1, [r4, #0]
 80095cc:	6054      	str	r4, [r2, #4]
 80095ce:	e7ca      	b.n	8009566 <_free_r+0x26>
 80095d0:	b003      	add	sp, #12
 80095d2:	bd30      	pop	{r4, r5, pc}
 80095d4:	20004550 	.word	0x20004550

080095d8 <sbrk_aligned>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	4e0e      	ldr	r6, [pc, #56]	; (8009614 <sbrk_aligned+0x3c>)
 80095dc:	460c      	mov	r4, r1
 80095de:	6831      	ldr	r1, [r6, #0]
 80095e0:	4605      	mov	r5, r0
 80095e2:	b911      	cbnz	r1, 80095ea <sbrk_aligned+0x12>
 80095e4:	f000 f8bc 	bl	8009760 <_sbrk_r>
 80095e8:	6030      	str	r0, [r6, #0]
 80095ea:	4621      	mov	r1, r4
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 f8b7 	bl	8009760 <_sbrk_r>
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	d00a      	beq.n	800960c <sbrk_aligned+0x34>
 80095f6:	1cc4      	adds	r4, r0, #3
 80095f8:	f024 0403 	bic.w	r4, r4, #3
 80095fc:	42a0      	cmp	r0, r4
 80095fe:	d007      	beq.n	8009610 <sbrk_aligned+0x38>
 8009600:	1a21      	subs	r1, r4, r0
 8009602:	4628      	mov	r0, r5
 8009604:	f000 f8ac 	bl	8009760 <_sbrk_r>
 8009608:	3001      	adds	r0, #1
 800960a:	d101      	bne.n	8009610 <sbrk_aligned+0x38>
 800960c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009610:	4620      	mov	r0, r4
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	20004554 	.word	0x20004554

08009618 <_malloc_r>:
 8009618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	1ccd      	adds	r5, r1, #3
 800961e:	f025 0503 	bic.w	r5, r5, #3
 8009622:	3508      	adds	r5, #8
 8009624:	2d0c      	cmp	r5, #12
 8009626:	bf38      	it	cc
 8009628:	250c      	movcc	r5, #12
 800962a:	2d00      	cmp	r5, #0
 800962c:	4607      	mov	r7, r0
 800962e:	db01      	blt.n	8009634 <_malloc_r+0x1c>
 8009630:	42a9      	cmp	r1, r5
 8009632:	d905      	bls.n	8009640 <_malloc_r+0x28>
 8009634:	230c      	movs	r3, #12
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	2600      	movs	r6, #0
 800963a:	4630      	mov	r0, r6
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	4e2e      	ldr	r6, [pc, #184]	; (80096fc <_malloc_r+0xe4>)
 8009642:	f000 f89d 	bl	8009780 <__malloc_lock>
 8009646:	6833      	ldr	r3, [r6, #0]
 8009648:	461c      	mov	r4, r3
 800964a:	bb34      	cbnz	r4, 800969a <_malloc_r+0x82>
 800964c:	4629      	mov	r1, r5
 800964e:	4638      	mov	r0, r7
 8009650:	f7ff ffc2 	bl	80095d8 <sbrk_aligned>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	4604      	mov	r4, r0
 8009658:	d14d      	bne.n	80096f6 <_malloc_r+0xde>
 800965a:	6834      	ldr	r4, [r6, #0]
 800965c:	4626      	mov	r6, r4
 800965e:	2e00      	cmp	r6, #0
 8009660:	d140      	bne.n	80096e4 <_malloc_r+0xcc>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	4631      	mov	r1, r6
 8009666:	4638      	mov	r0, r7
 8009668:	eb04 0803 	add.w	r8, r4, r3
 800966c:	f000 f878 	bl	8009760 <_sbrk_r>
 8009670:	4580      	cmp	r8, r0
 8009672:	d13a      	bne.n	80096ea <_malloc_r+0xd2>
 8009674:	6821      	ldr	r1, [r4, #0]
 8009676:	3503      	adds	r5, #3
 8009678:	1a6d      	subs	r5, r5, r1
 800967a:	f025 0503 	bic.w	r5, r5, #3
 800967e:	3508      	adds	r5, #8
 8009680:	2d0c      	cmp	r5, #12
 8009682:	bf38      	it	cc
 8009684:	250c      	movcc	r5, #12
 8009686:	4629      	mov	r1, r5
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff ffa5 	bl	80095d8 <sbrk_aligned>
 800968e:	3001      	adds	r0, #1
 8009690:	d02b      	beq.n	80096ea <_malloc_r+0xd2>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	442b      	add	r3, r5
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	e00e      	b.n	80096b8 <_malloc_r+0xa0>
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	1b52      	subs	r2, r2, r5
 800969e:	d41e      	bmi.n	80096de <_malloc_r+0xc6>
 80096a0:	2a0b      	cmp	r2, #11
 80096a2:	d916      	bls.n	80096d2 <_malloc_r+0xba>
 80096a4:	1961      	adds	r1, r4, r5
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	6025      	str	r5, [r4, #0]
 80096aa:	bf18      	it	ne
 80096ac:	6059      	strne	r1, [r3, #4]
 80096ae:	6863      	ldr	r3, [r4, #4]
 80096b0:	bf08      	it	eq
 80096b2:	6031      	streq	r1, [r6, #0]
 80096b4:	5162      	str	r2, [r4, r5]
 80096b6:	604b      	str	r3, [r1, #4]
 80096b8:	4638      	mov	r0, r7
 80096ba:	f104 060b 	add.w	r6, r4, #11
 80096be:	f000 f865 	bl	800978c <__malloc_unlock>
 80096c2:	f026 0607 	bic.w	r6, r6, #7
 80096c6:	1d23      	adds	r3, r4, #4
 80096c8:	1af2      	subs	r2, r6, r3
 80096ca:	d0b6      	beq.n	800963a <_malloc_r+0x22>
 80096cc:	1b9b      	subs	r3, r3, r6
 80096ce:	50a3      	str	r3, [r4, r2]
 80096d0:	e7b3      	b.n	800963a <_malloc_r+0x22>
 80096d2:	6862      	ldr	r2, [r4, #4]
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	bf0c      	ite	eq
 80096d8:	6032      	streq	r2, [r6, #0]
 80096da:	605a      	strne	r2, [r3, #4]
 80096dc:	e7ec      	b.n	80096b8 <_malloc_r+0xa0>
 80096de:	4623      	mov	r3, r4
 80096e0:	6864      	ldr	r4, [r4, #4]
 80096e2:	e7b2      	b.n	800964a <_malloc_r+0x32>
 80096e4:	4634      	mov	r4, r6
 80096e6:	6876      	ldr	r6, [r6, #4]
 80096e8:	e7b9      	b.n	800965e <_malloc_r+0x46>
 80096ea:	230c      	movs	r3, #12
 80096ec:	603b      	str	r3, [r7, #0]
 80096ee:	4638      	mov	r0, r7
 80096f0:	f000 f84c 	bl	800978c <__malloc_unlock>
 80096f4:	e7a1      	b.n	800963a <_malloc_r+0x22>
 80096f6:	6025      	str	r5, [r4, #0]
 80096f8:	e7de      	b.n	80096b8 <_malloc_r+0xa0>
 80096fa:	bf00      	nop
 80096fc:	20004550 	.word	0x20004550

08009700 <_realloc_r>:
 8009700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	4680      	mov	r8, r0
 8009706:	4614      	mov	r4, r2
 8009708:	460e      	mov	r6, r1
 800970a:	b921      	cbnz	r1, 8009716 <_realloc_r+0x16>
 800970c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	4611      	mov	r1, r2
 8009712:	f7ff bf81 	b.w	8009618 <_malloc_r>
 8009716:	b92a      	cbnz	r2, 8009724 <_realloc_r+0x24>
 8009718:	f7ff ff12 	bl	8009540 <_free_r>
 800971c:	4625      	mov	r5, r4
 800971e:	4628      	mov	r0, r5
 8009720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009724:	f000 f838 	bl	8009798 <_malloc_usable_size_r>
 8009728:	4284      	cmp	r4, r0
 800972a:	4607      	mov	r7, r0
 800972c:	d802      	bhi.n	8009734 <_realloc_r+0x34>
 800972e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009732:	d812      	bhi.n	800975a <_realloc_r+0x5a>
 8009734:	4621      	mov	r1, r4
 8009736:	4640      	mov	r0, r8
 8009738:	f7ff ff6e 	bl	8009618 <_malloc_r>
 800973c:	4605      	mov	r5, r0
 800973e:	2800      	cmp	r0, #0
 8009740:	d0ed      	beq.n	800971e <_realloc_r+0x1e>
 8009742:	42bc      	cmp	r4, r7
 8009744:	4622      	mov	r2, r4
 8009746:	4631      	mov	r1, r6
 8009748:	bf28      	it	cs
 800974a:	463a      	movcs	r2, r7
 800974c:	f7ff fbb8 	bl	8008ec0 <memcpy>
 8009750:	4631      	mov	r1, r6
 8009752:	4640      	mov	r0, r8
 8009754:	f7ff fef4 	bl	8009540 <_free_r>
 8009758:	e7e1      	b.n	800971e <_realloc_r+0x1e>
 800975a:	4635      	mov	r5, r6
 800975c:	e7df      	b.n	800971e <_realloc_r+0x1e>
	...

08009760 <_sbrk_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_sbrk_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f9 f82e 	bl	80027cc <_sbrk>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_sbrk_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_sbrk_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	20004558 	.word	0x20004558

08009780 <__malloc_lock>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__malloc_lock+0x8>)
 8009782:	f000 b811 	b.w	80097a8 <__retarget_lock_acquire_recursive>
 8009786:	bf00      	nop
 8009788:	2000455c 	.word	0x2000455c

0800978c <__malloc_unlock>:
 800978c:	4801      	ldr	r0, [pc, #4]	; (8009794 <__malloc_unlock+0x8>)
 800978e:	f000 b80c 	b.w	80097aa <__retarget_lock_release_recursive>
 8009792:	bf00      	nop
 8009794:	2000455c 	.word	0x2000455c

08009798 <_malloc_usable_size_r>:
 8009798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800979c:	1f18      	subs	r0, r3, #4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	bfbc      	itt	lt
 80097a2:	580b      	ldrlt	r3, [r1, r0]
 80097a4:	18c0      	addlt	r0, r0, r3
 80097a6:	4770      	bx	lr

080097a8 <__retarget_lock_acquire_recursive>:
 80097a8:	4770      	bx	lr

080097aa <__retarget_lock_release_recursive>:
 80097aa:	4770      	bx	lr

080097ac <_init>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr

080097b8 <_fini>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr
