
Pros_Ctrl_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e378  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800e528  0800e528  0001e528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea64  0800ea64  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea64  0800ea64  0001ea64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea6c  0800ea6c  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea6c  0800ea6c  0001ea6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea70  0800ea70  0001ea70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0800ea74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002028c  2**0
                  CONTENTS
 10 .bss          00004470  2000028c  2000028c  0002028c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200046fc  200046fc  0002028c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4f8  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042c6  00000000  00000000  0003a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  000400c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027758  00000000  00000000  00041528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b840  00000000  00000000  00068c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5298  00000000  00000000  000844c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169758  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000706c  00000000  00000000  001697a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e510 	.word	0x0800e510

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000290 	.word	0x20000290
 80001ec:	0800e510 	.word	0x0800e510

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <debugPrint>:
static char tempBuf[40];
extern UART_HandleTypeDef huart8;
static int inHandlerMode(void){
	return __get_IPSR();
}
void debugPrint(char *fmt,...){
 8001018:	b40f      	push	{r0, r1, r2, r3}
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
	//可变长度参数
	va_list argp;
	uint32_t n = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
	// 以fmt为起始地址，获取第一个参数的首地址
	va_start(argp, fmt);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	603b      	str	r3, [r7, #0]
	n = vsprintf((char *) tempBuf, fmt, argp);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	6939      	ldr	r1, [r7, #16]
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <debugPrint+0x48>)
 8001030:	f00a fb50 	bl	800b6d4 <vsiprintf>
 8001034:	4603      	mov	r3, r0
 8001036:	607b      	str	r3, [r7, #4]
	// argp置0
	va_end(argp);
	if (HAL_UART_Transmit(&huart8, (uint8_t *) tempBuf, n, 1000) != HAL_OK) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b29a      	uxth	r2, r3
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <debugPrint+0x48>)
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <debugPrint+0x4c>)
 8001044:	f005 f903 	bl	800624e <HAL_UART_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <debugPrint+0x3a>
		/* Transfer error in transmission process */
		Error_Handler();
 800104e:	f001 ff0d 	bl	8002e6c <Error_Handler>
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800105c:	b004      	add	sp, #16
 800105e:	4770      	bx	lr
 8001060:	200002a8 	.word	0x200002a8
 8001064:	200006e8 	.word	0x200006e8

08001068 <CAN_FilterConfig>:
volatile float pos_desired_rtmotor = 0;
volatile float pos_actual_rtmotor = 0;
extern volatile float pos_desired_rtpc;
extern volatile float pos_actual_rtpc;

void CAN_FilterConfig(){
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTERMODE_IDMASK;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800107a:	2301      	movs	r3, #1
 800107c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow  = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig)!=HAL_OK){
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <CAN_FilterConfig+0x5c>)
 800108c:	f002 fd14 	bl	8003ab8 <HAL_CAN_ConfigFilter>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <CAN_FilterConfig+0x32>
		Error_Handler();
 8001096:	f001 fee9 	bl	8002e6c <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan1)!=HAL_OK){
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <CAN_FilterConfig+0x5c>)
 800109c:	f002 fdec 	bl	8003c78 <HAL_CAN_Start>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <CAN_FilterConfig+0x42>
		Error_Handler();
 80010a6:	f001 fee1 	bl	8002e6c <Error_Handler>
	}
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)){
 80010aa:	2102      	movs	r1, #2
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <CAN_FilterConfig+0x5c>)
 80010ae:	f003 f849 	bl	8004144 <HAL_CAN_ActivateNotification>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <CAN_FilterConfig+0x54>
		Error_Handler();
 80010b8:	f001 fed8 	bl	8002e6c <Error_Handler>
	}
}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200003c4 	.word	0x200003c4

080010c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d107      	bne.n	80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxDataBuffer);
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80010dc:	2100      	movs	r1, #0
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80010e0:	f002 ff1e 	bl	8003f20 <HAL_CAN_GetRxMessage>
		motor_receive();
 80010e4:	f000 f884 	bl	80011f0 <motor_receive>
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200003c4 	.word	0x200003c4
 80010f4:	200002dc 	.word	0x200002dc
 80010f8:	20000300 	.word	0x20000300

080010fc <CAN_SendMessage>:


void CAN_SendMessage(uint16_t id,uint8_t len){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	80fb      	strh	r3, [r7, #6]
 8001108:	4613      	mov	r3, r2
 800110a:	717b      	strb	r3, [r7, #5]
	txHeader.StdId = 0;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <CAN_SendMessage+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_EXT;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <CAN_SendMessage+0x58>)
 8001114:	2204      	movs	r2, #4
 8001116:	609a      	str	r2, [r3, #8]
	txHeader.ExtId = id;
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <CAN_SendMessage+0x58>)
 800111c:	6053      	str	r3, [r2, #4]
	txHeader.RTR = CAN_RTR_DATA;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <CAN_SendMessage+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
	if(len>8){
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	2b08      	cmp	r3, #8
 8001128:	d901      	bls.n	800112e <CAN_SendMessage+0x32>
		len = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	717b      	strb	r3, [r7, #5]
	}
	txHeader.DLC = len;
 800112e:	797b      	ldrb	r3, [r7, #5]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <CAN_SendMessage+0x58>)
 8001132:	6113      	str	r3, [r2, #16]
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0){
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <CAN_SendMessage+0x5c>)
 8001136:	f002 febe 	bl	8003eb6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <CAN_SendMessage+0x50>
		HAL_CAN_AddTxMessage(&hcan1, &txHeader, txDataBuffer, &txMailBox);
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <CAN_SendMessage+0x60>)
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <CAN_SendMessage+0x64>)
 8001144:	4903      	ldr	r1, [pc, #12]	; (8001154 <CAN_SendMessage+0x58>)
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <CAN_SendMessage+0x5c>)
 8001148:	f002 fdda 	bl	8003d00 <HAL_CAN_AddTxMessage>
	}
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002e8 	.word	0x200002e8
 8001158:	200003c4 	.word	0x200003c4
 800115c:	2000031c 	.word	0x2000031c
 8001160:	200002d0 	.word	0x200002d0

08001164 <motor_init>:

void motor_init(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	motor_knee.device_id = 0x01;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <motor_init+0x7c>)
 800116a:	2201      	movs	r2, #1
 800116c:	801a      	strh	r2, [r3, #0]
	motor_ankle.device_id = 0x02;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <motor_init+0x80>)
 8001170:	2202      	movs	r2, #2
 8001172:	801a      	strh	r2, [r3, #0]
	motor_knee.state = 0x01;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <motor_init+0x7c>)
 8001176:	2201      	movs	r2, #1
 8001178:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	motor_ankle.state = 0x01;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <motor_init+0x80>)
 800117e:	2201      	movs	r2, #1
 8001180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	can_set_pos_spd(motor_knee.device_id, 0,4,30000);
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <motor_init+0x7c>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80011e8 <motor_init+0x84>
 8001190:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001194:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80011ec <motor_init+0x88>
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fa45 	bl	8001628 <can_set_pos_spd>
	can_set_pos_spd(motor_ankle.device_id,0,4,30000);
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <motor_init+0x80>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80011e8 <motor_init+0x84>
 80011aa:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80011ae:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80011ec <motor_init+0x88>
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa38 	bl	8001628 <can_set_pos_spd>
	HAL_Delay(2000);
 80011b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011bc:	f002 fb5c 	bl	8003878 <HAL_Delay>
	can_set_origin(motor_knee.device_id);
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <motor_init+0x7c>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fb49 	bl	8001860 <can_set_origin>
	can_set_origin(motor_ankle.device_id);
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <motor_init+0x80>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fb42 	bl	8001860 <can_set_origin>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000030 	.word	0x20000030
 80011e8:	46ea6000 	.word	0x46ea6000
 80011ec:	00000000 	.word	0x00000000

080011f0 <motor_receive>:

void motor_receive(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	if(rxDataBuffer[7]!=0){
 80011f4:	4b98      	ldr	r3, [pc, #608]	; (8001458 <motor_receive+0x268>)
 80011f6:	79db      	ldrb	r3, [r3, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <motor_receive+0x24>
		motor_knee.state = 0x00;
 80011fc:	4b97      	ldr	r3, [pc, #604]	; (800145c <motor_receive+0x26c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		motor_ankle.state = 0x00;
 8001204:	4b96      	ldr	r3, [pc, #600]	; (8001460 <motor_receive+0x270>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		debugPrint("ERROR");
 800120c:	4895      	ldr	r0, [pc, #596]	; (8001464 <motor_receive+0x274>)
 800120e:	f7ff ff03 	bl	8001018 <debugPrint>
			}
			else{}
		}
		Motor_UpdateMessages();
	}
}
 8001212:	e11b      	b.n	800144c <motor_receive+0x25c>
		pos_int = (rxDataBuffer[0]<<8)|rxDataBuffer[1];
 8001214:	4b90      	ldr	r3, [pc, #576]	; (8001458 <motor_receive+0x268>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b8e      	ldr	r3, [pc, #568]	; (8001458 <motor_receive+0x268>)
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b90      	ldr	r3, [pc, #576]	; (8001468 <motor_receive+0x278>)
 8001228:	801a      	strh	r2, [r3, #0]
		vel_int = (rxDataBuffer[2]<<8)|rxDataBuffer[3];
 800122a:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <motor_receive+0x268>)
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b89      	ldr	r3, [pc, #548]	; (8001458 <motor_receive+0x268>)
 8001234:	78db      	ldrb	r3, [r3, #3]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b8b      	ldr	r3, [pc, #556]	; (800146c <motor_receive+0x27c>)
 800123e:	801a      	strh	r2, [r3, #0]
		cur_int = (rxDataBuffer[4]<<8)|rxDataBuffer[5];
 8001240:	4b85      	ldr	r3, [pc, #532]	; (8001458 <motor_receive+0x268>)
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b83      	ldr	r3, [pc, #524]	; (8001458 <motor_receive+0x268>)
 800124a:	795b      	ldrb	r3, [r3, #5]
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b87      	ldr	r3, [pc, #540]	; (8001470 <motor_receive+0x280>)
 8001254:	801a      	strh	r2, [r3, #0]
		temp_int = rxDataBuffer[6];
 8001256:	4b80      	ldr	r3, [pc, #512]	; (8001458 <motor_receive+0x268>)
 8001258:	799b      	ldrb	r3, [r3, #6]
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b85      	ldr	r3, [pc, #532]	; (8001474 <motor_receive+0x284>)
 800125e:	801a      	strh	r2, [r3, #0]
		if(rxHeader.StdId==motor_knee.device_id+0x2900){
 8001260:	4b85      	ldr	r3, [pc, #532]	; (8001478 <motor_receive+0x288>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a7d      	ldr	r2, [pc, #500]	; (800145c <motor_receive+0x26c>)
 8001266:	8812      	ldrh	r2, [r2, #0]
 8001268:	b292      	uxth	r2, r2
 800126a:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 800126e:	4293      	cmp	r3, r2
 8001270:	d171      	bne.n	8001356 <motor_receive+0x166>
			if(motor_knee.is_free==1){
 8001272:	4b7a      	ldr	r3, [pc, #488]	; (800145c <motor_receive+0x26c>)
 8001274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b01      	cmp	r3, #1
 800127c:	f040 80e4 	bne.w	8001448 <motor_receive+0x258>
			motor_knee.is_free = 0;
 8001280:	4b76      	ldr	r3, [pc, #472]	; (800145c <motor_receive+0x26c>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			motor_knee.pos_actual = (float)(pos_int*0.1f);
 8001288:	4b77      	ldr	r3, [pc, #476]	; (8001468 <motor_receive+0x278>)
 800128a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800147c <motor_receive+0x28c>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129e:	4b6f      	ldr	r3, [pc, #444]	; (800145c <motor_receive+0x26c>)
 80012a0:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_knee.vel_actual = (float)(vel_int*10.0f);
 80012a4:	4b71      	ldr	r3, [pc, #452]	; (800146c <motor_receive+0x27c>)
 80012a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <motor_receive+0x26c>)
 80012bc:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_knee.vel_actual = ERPM_TO_RADs(motor_knee.vel_actual);
 80012c0:	4b66      	ldr	r3, [pc, #408]	; (800145c <motor_receive+0x26c>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f94f 	bl	8000568 <__aeabi_f2d>
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <motor_receive+0x290>)
 80012d0:	f7ff facc 	bl	800086c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b68      	ldr	r3, [pc, #416]	; (8001484 <motor_receive+0x294>)
 80012e2:	f7ff fac3 	bl	800086c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	a358      	add	r3, pc, #352	; (adr r3, 8001450 <motor_receive+0x260>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f990 	bl	8000618 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b60      	ldr	r3, [pc, #384]	; (8001488 <motor_receive+0x298>)
 8001306:	f7ff fab1 	bl	800086c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc79 	bl	8000c08 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4a50      	ldr	r2, [pc, #320]	; (800145c <motor_receive+0x26c>)
 800131a:	6093      	str	r3, [r2, #8]
			motor_knee.cur_actual = (float)(cur_int*0.01f);
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <motor_receive+0x280>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800148c <motor_receive+0x29c>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <motor_receive+0x26c>)
 8001334:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_knee.temperature = (float)temp_int;
 8001338:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <motor_receive+0x284>)
 800133a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	4b45      	ldr	r3, [pc, #276]	; (800145c <motor_receive+0x26c>)
 8001348:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			motor_knee.is_free = 1;
 800134c:	4b43      	ldr	r3, [pc, #268]	; (800145c <motor_receive+0x26c>)
 800134e:	2201      	movs	r2, #1
 8001350:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001354:	e078      	b.n	8001448 <motor_receive+0x258>
		}else if (rxHeader.StdId==motor_ankle.device_id+0x2900){
 8001356:	4b48      	ldr	r3, [pc, #288]	; (8001478 <motor_receive+0x288>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a41      	ldr	r2, [pc, #260]	; (8001460 <motor_receive+0x270>)
 800135c:	8812      	ldrh	r2, [r2, #0]
 800135e:	b292      	uxth	r2, r2
 8001360:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 8001364:	4293      	cmp	r3, r2
 8001366:	d16f      	bne.n	8001448 <motor_receive+0x258>
			if(motor_ankle.is_free==1){
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <motor_receive+0x270>)
 800136a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d169      	bne.n	8001448 <motor_receive+0x258>
			motor_ankle.is_free = 0;
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <motor_receive+0x270>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			motor_ankle.pos_actual = (float)(pos_int*0.1f);
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <motor_receive+0x278>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800147c <motor_receive+0x28c>
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <motor_receive+0x270>)
 8001394:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_ankle.vel_actual = (float)(vel_int*10.0f);
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <motor_receive+0x27c>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <motor_receive+0x270>)
 80013b0:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_ankle.vel_actual = ERPM_TO_RADs(motor_ankle.vel_actual);
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <motor_receive+0x270>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8d5 	bl	8000568 <__aeabi_f2d>
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <motor_receive+0x290>)
 80013c4:	f7ff fa52 	bl	800086c <__aeabi_ddiv>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <motor_receive+0x294>)
 80013d6:	f7ff fa49 	bl	800086c <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001450 <motor_receive+0x260>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f916 	bl	8000618 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <motor_receive+0x298>)
 80013fa:	f7ff fa37 	bl	800086c <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fbff 	bl	8000c08 <__aeabi_d2f>
 800140a:	4603      	mov	r3, r0
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <motor_receive+0x270>)
 800140e:	6093      	str	r3, [r2, #8]
			motor_ankle.cur_actual = (float)(cur_int*0.01f);
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <motor_receive+0x280>)
 8001412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800148c <motor_receive+0x29c>
 8001422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <motor_receive+0x270>)
 8001428:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_ankle.temperature = (float)temp_int;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <motor_receive+0x284>)
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <motor_receive+0x270>)
 800143c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			motor_ankle.is_free = 1;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <motor_receive+0x270>)
 8001442:	2201      	movs	r2, #1
 8001444:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		Motor_UpdateMessages();
 8001448:	f000 fb10 	bl	8001a6c <Motor_UpdateMessages>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	54442eea 	.word	0x54442eea
 8001454:	400921fb 	.word	0x400921fb
 8001458:	200002dc 	.word	0x200002dc
 800145c:	20000000 	.word	0x20000000
 8001460:	20000030 	.word	0x20000030
 8001464:	0800e528 	.word	0x0800e528
 8001468:	20000324 	.word	0x20000324
 800146c:	20000326 	.word	0x20000326
 8001470:	20000328 	.word	0x20000328
 8001474:	2000032a 	.word	0x2000032a
 8001478:	20000300 	.word	0x20000300
 800147c:	3dcccccd 	.word	0x3dcccccd
 8001480:	40350000 	.word	0x40350000
 8001484:	40500000 	.word	0x40500000
 8001488:	403e0000 	.word	0x403e0000
 800148c:	3c23d70a 	.word	0x3c23d70a

08001490 <buffer_append_int32>:


void buffer_append_int32(uint8_t* buffer, int32_t number, uint8_t *index) {
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1619      	asrs	r1, r3, #24
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	b2d0      	uxtb	r0, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	7010      	strb	r0, [r2, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	b2ca      	uxtb	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1419      	asrs	r1, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	b2d0      	uxtb	r0, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	7010      	strb	r0, [r2, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1219      	asrs	r1, r3, #8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	b2d0      	uxtb	r0, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	7010      	strb	r0, [r2, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	b2d1      	uxtb	r1, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	7011      	strb	r1, [r2, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <buffer_append_int16>:
void buffer_append_int16(uint8_t* buffer, int16_t number, uint8_t *index) {
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	460b      	mov	r3, r1
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	817b      	strh	r3, [r7, #10]
	buffer[(*index)++] = number >> 8;
 800151c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001520:	121b      	asrs	r3, r3, #8
 8001522:	b219      	sxth	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	b2d0      	uxtb	r0, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	7010      	strb	r0, [r2, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	b2d1      	uxtb	r1, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	7011      	strb	r1, [r2, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	897a      	ldrh	r2, [r7, #10]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <can_set_current>:

void can_set_current(uint8_t controller_id, float current) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	ed87 0a00 	vstr	s0, [r7]
 800156c:	71fb      	strb	r3, [r7, #7]
	send_idx = 0;
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <can_set_current+0xb0>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	current = MAX(MIN(current,current_max),-current_max);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <can_set_current+0xb4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001582:	edd7 7a04 	vldr	s15, [r7, #16]
 8001586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d501      	bpl.n	8001594 <can_set_current+0x34>
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	e000      	b.n	8001596 <can_set_current+0x36>
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <can_set_current+0xb4>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	eef1 7a67 	vneg.f32	s15, s15
 80015a2:	edc7 7a02 	vstr	s15, [r7, #8]
 80015a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	dd01      	ble.n	80015bc <can_set_current+0x5c>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	e000      	b.n	80015be <can_set_current+0x5e>
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	603b      	str	r3, [r7, #0]
	buffer_append_int32(txDataBuffer, (int32_t)(current * 1000.0), &send_idx);
 80015c0:	6838      	ldr	r0, [r7, #0]
 80015c2:	f7fe ffd1 	bl	8000568 <__aeabi_f2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <can_set_current+0xb8>)
 80015cc:	f7ff f824 	bl	8000618 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff face 	bl	8000b78 <__aeabi_d2iz>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <can_set_current+0xb0>)
 80015e0:	4619      	mov	r1, r3
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <can_set_current+0xbc>)
 80015e4:	f7ff ff54 	bl	8001490 <buffer_append_int32>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_CURRENT<<8);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <can_set_current+0xc0>)
 80015f4:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <can_set_current+0xc0>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <can_set_current+0xb0>)
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd7b 	bl	80010fc <CAN_SendMessage>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000320 	.word	0x20000320
 8001614:	20000068 	.word	0x20000068
 8001618:	408f4000 	.word	0x408f4000
 800161c:	200002d0 	.word	0x200002d0
 8001620:	20000322 	.word	0x20000322
 8001624:	00000000 	.word	0x00000000

08001628 <can_set_pos_spd>:

void can_set_pos_spd(uint8_t controller_id, float pos,float vel,float accel ){
 8001628:	b580      	push	{r7, lr}
 800162a:	b090      	sub	sp, #64	; 0x40
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	ed87 0a02 	vstr	s0, [r7, #8]
 8001634:	edc7 0a01 	vstr	s1, [r7, #4]
 8001638:	ed87 1a00 	vstr	s2, [r7]
 800163c:	73fb      	strb	r3, [r7, #15]
	send_idx = 0;
 800163e:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <can_set_pos_spd+0x210>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	pos = MAX(MIN(pos, pos_max),-pos_max);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001648:	4b7c      	ldr	r3, [pc, #496]	; (800183c <can_set_pos_spd+0x214>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
 800164e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001652:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d501      	bpl.n	8001664 <can_set_pos_spd+0x3c>
 8001660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001662:	e000      	b.n	8001666 <can_set_pos_spd+0x3e>
 8001664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
 8001668:	4b74      	ldr	r3, [pc, #464]	; (800183c <can_set_pos_spd+0x214>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eef1 7a67 	vneg.f32	s15, s15
 8001672:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8001676:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800167a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800167e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dd01      	ble.n	800168c <can_set_pos_spd+0x64>
 8001688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168a:	e000      	b.n	800168e <can_set_pos_spd+0x66>
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	60bb      	str	r3, [r7, #8]
	buffer_append_int32(txDataBuffer, (int32_t)(pos * 10000.0), &send_idx);
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f7fe ff69 	bl	8000568 <__aeabi_f2d>
 8001696:	a364      	add	r3, pc, #400	; (adr r3, 8001828 <can_set_pos_spd+0x200>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffbc 	bl	8000618 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fa66 	bl	8000b78 <__aeabi_d2iz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a62      	ldr	r2, [pc, #392]	; (8001838 <can_set_pos_spd+0x210>)
 80016b0:	4619      	mov	r1, r3
 80016b2:	4863      	ldr	r0, [pc, #396]	; (8001840 <can_set_pos_spd+0x218>)
 80016b4:	f7ff feec 	bl	8001490 <buffer_append_int32>
	vel = MAX(MIN(vel,vel_max),-vel_max);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <can_set_pos_spd+0x21c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80016c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	d501      	bpl.n	80016d8 <can_set_pos_spd+0xb0>
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	e000      	b.n	80016da <can_set_pos_spd+0xb2>
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <can_set_pos_spd+0x21c>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eef1 7a67 	vneg.f32	s15, s15
 80016e6:	edc7 7a08 	vstr	s15, [r7, #32]
 80016ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80016f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	dd01      	ble.n	8001700 <can_set_pos_spd+0xd8>
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	e000      	b.n	8001702 <can_set_pos_spd+0xda>
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	607b      	str	r3, [r7, #4]
	vel = RADs_TO_ERPM(vel);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe ff2f 	bl	8000568 <__aeabi_f2d>
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <can_set_pos_spd+0x220>)
 8001710:	f7fe ff82 	bl	8000618 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	a344      	add	r3, pc, #272	; (adr r3, 8001830 <can_set_pos_spd+0x208>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f8a3 	bl	800086c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <can_set_pos_spd+0x224>)
 8001734:	f7fe ff70 	bl	8000618 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <can_set_pos_spd+0x228>)
 8001746:	f7fe ff67 	bl	8000618 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff fa59 	bl	8000c08 <__aeabi_d2f>
 8001756:	4603      	mov	r3, r0
 8001758:	607b      	str	r3, [r7, #4]
	buffer_append_int16(txDataBuffer,(int16_t)(vel/10.0), & send_idx);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe ff04 	bl	8000568 <__aeabi_f2d>
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <can_set_pos_spd+0x22c>)
 8001766:	f7ff f881 	bl	800086c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff fa01 	bl	8000b78 <__aeabi_d2iz>
 8001776:	4603      	mov	r3, r0
 8001778:	b21b      	sxth	r3, r3
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <can_set_pos_spd+0x210>)
 800177c:	4619      	mov	r1, r3
 800177e:	4830      	ldr	r0, [pc, #192]	; (8001840 <can_set_pos_spd+0x218>)
 8001780:	f7ff fec5 	bl	800150e <buffer_append_int16>
	accel = MAX(MIN(accel,accel_max),0);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <can_set_pos_spd+0x230>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001792:	edd7 7a06 	vldr	s15, [r7, #24]
 8001796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d501      	bpl.n	80017a4 <can_set_pos_spd+0x17c>
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	e000      	b.n	80017a6 <can_set_pos_spd+0x17e>
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd02      	ble.n	80017ca <can_set_pos_spd+0x1a2>
 80017c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c8:	e004      	b.n	80017d4 <can_set_pos_spd+0x1ac>
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d4:	edc7 7a00 	vstr	s15, [r7]
	buffer_append_int16(txDataBuffer,(int16_t)(accel/10.0), & send_idx);
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f7fe fec5 	bl	8000568 <__aeabi_f2d>
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <can_set_pos_spd+0x22c>)
 80017e4:	f7ff f842 	bl	800086c <__aeabi_ddiv>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9c2 	bl	8000b78 <__aeabi_d2iz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <can_set_pos_spd+0x210>)
 80017fa:	4619      	mov	r1, r3
 80017fc:	4810      	ldr	r0, [pc, #64]	; (8001840 <can_set_pos_spd+0x218>)
 80017fe:	f7ff fe86 	bl	800150e <buffer_append_int16>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_POS_SPD<<8);
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	b29b      	uxth	r3, r3
 8001806:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <can_set_pos_spd+0x234>)
 800180e:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <can_set_pos_spd+0x234>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <can_set_pos_spd+0x210>)
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fc6e 	bl	80010fc <CAN_SendMessage>
}
 8001820:	bf00      	nop
 8001822:	3740      	adds	r7, #64	; 0x40
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	00000000 	.word	0x00000000
 800182c:	40c38800 	.word	0x40c38800
 8001830:	54442eea 	.word	0x54442eea
 8001834:	400921fb 	.word	0x400921fb
 8001838:	20000320 	.word	0x20000320
 800183c:	20000060 	.word	0x20000060
 8001840:	200002d0 	.word	0x200002d0
 8001844:	20000064 	.word	0x20000064
 8001848:	403e0000 	.word	0x403e0000
 800184c:	40350000 	.word	0x40350000
 8001850:	40500000 	.word	0x40500000
 8001854:	40240000 	.word	0x40240000
 8001858:	2000006c 	.word	0x2000006c
 800185c:	20000322 	.word	0x20000322

08001860 <can_set_origin>:

void can_set_origin(uint8_t controller_id) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_ORIGIN_HERE<<8);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	b29b      	uxth	r3, r3
 800186e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <can_set_origin+0x34>)
 8001876:	801a      	strh	r2, [r3, #0]
	txDataBuffer[0] = 0x01;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <can_set_origin+0x38>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,1);
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <can_set_origin+0x34>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	2101      	movs	r1, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc39 	bl	80010fc <CAN_SendMessage>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000322 	.word	0x20000322
 8001898:	200002d0 	.word	0x200002d0

0800189c <can_set_pos>:

void can_set_pos(uint8_t controller_id, float pos){
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	ed87 0a00 	vstr	s0, [r7]
 80018a8:	71fb      	strb	r3, [r7, #7]
	pos = MAX(MIN(pos,pos_max),-pos_max);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <can_set_pos+0xa4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80018b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	d501      	bpl.n	80018ca <can_set_pos+0x2e>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	e000      	b.n	80018cc <can_set_pos+0x30>
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <can_set_pos+0xa4>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	eef1 7a67 	vneg.f32	s15, s15
 80018d8:	edc7 7a02 	vstr	s15, [r7, #8]
 80018dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80018e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd01      	ble.n	80018f2 <can_set_pos+0x56>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	e000      	b.n	80018f4 <can_set_pos+0x58>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	603b      	str	r3, [r7, #0]
	send_idx = 0;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <can_set_pos+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
	buffer_append_int32(txDataBuffer,(int32_t)(10000*pos),&send_idx);
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001948 <can_set_pos+0xac>
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <can_set_pos+0xa8>)
 800190e:	ee17 1a90 	vmov	r1, s15
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <can_set_pos+0xb0>)
 8001914:	f7ff fdbc 	bl	8001490 <buffer_append_int32>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_POS<<8);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	b29b      	uxth	r3, r3
 800191c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <can_set_pos+0xb4>)
 8001924:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <can_set_pos+0xb4>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	4a06      	ldr	r2, [pc, #24]	; (8001944 <can_set_pos+0xa8>)
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fbe3 	bl	80010fc <CAN_SendMessage>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000060 	.word	0x20000060
 8001944:	20000320 	.word	0x20000320
 8001948:	461c4000 	.word	0x461c4000
 800194c:	200002d0 	.word	0x200002d0
 8001950:	20000322 	.word	0x20000322
 8001954:	00000000 	.word	0x00000000

08001958 <can_set_vel>:
void can_set_vel(uint8_t controller_id, float vel){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	ed87 0a00 	vstr	s0, [r7]
 8001964:	71fb      	strb	r3, [r7, #7]
	vel = MAX(MIN(vel,vel_max),-vel_max);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <can_set_vel+0xf8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	ed97 7a05 	vldr	s14, [r7, #20]
 8001974:	edd7 7a04 	vldr	s15, [r7, #16]
 8001978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	d501      	bpl.n	8001986 <can_set_vel+0x2e>
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	e000      	b.n	8001988 <can_set_vel+0x30>
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <can_set_vel+0xf8>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eef1 7a67 	vneg.f32	s15, s15
 8001994:	edc7 7a02 	vstr	s15, [r7, #8]
 8001998:	ed97 7a03 	vldr	s14, [r7, #12]
 800199c:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	dd01      	ble.n	80019ae <can_set_vel+0x56>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	e000      	b.n	80019b0 <can_set_vel+0x58>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
	vel = RADs_TO_ERPM(vel);
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f7fe fdd8 	bl	8000568 <__aeabi_f2d>
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <can_set_vel+0xfc>)
 80019be:	f7fe fe2b 	bl	8000618 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	a31f      	add	r3, pc, #124	; (adr r3, 8001a48 <can_set_vel+0xf0>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe ff4c 	bl	800086c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <can_set_vel+0x100>)
 80019e2:	f7fe fe19 	bl	8000618 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <can_set_vel+0x104>)
 80019f4:	f7fe fe10 	bl	8000618 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f902 	bl	8000c08 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	603b      	str	r3, [r7, #0]
	buffer_append_int32(txDataBuffer,(int32_t)(vel), &send_idx);
 8001a08:	edd7 7a00 	vldr	s15, [r7]
 8001a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a10:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <can_set_vel+0x108>)
 8001a12:	ee17 1a90 	vmov	r1, s15
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <can_set_vel+0x10c>)
 8001a18:	f7ff fd3a 	bl	8001490 <buffer_append_int32>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_RPM<<8);
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <can_set_vel+0x110>)
 8001a28:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <can_set_vel+0x110>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <can_set_vel+0x108>)
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fb61 	bl	80010fc <CAN_SendMessage>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	54442eea 	.word	0x54442eea
 8001a4c:	400921fb 	.word	0x400921fb
 8001a50:	20000064 	.word	0x20000064
 8001a54:	403e0000 	.word	0x403e0000
 8001a58:	40350000 	.word	0x40350000
 8001a5c:	40500000 	.word	0x40500000
 8001a60:	20000320 	.word	0x20000320
 8001a64:	200002d0 	.word	0x200002d0
 8001a68:	20000322 	.word	0x20000322

08001a6c <Motor_UpdateMessages>:

void Motor_UpdateMessages(){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
//	m2p_motor.value5  =(uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
//
//	temp2 = (uint16_t)(motor_ankle.temperature*k_float2int12+b_float2int12);
//	m2p_motor.value6 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
//	m2p_motor.head = 0xFC;
	if(motor_knee.is_free==1&&motor_ankle.is_free==1){
 8001a72:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <Motor_UpdateMessages+0x25c>)
 8001a74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	f040 811d 	bne.w	8001cba <Motor_UpdateMessages+0x24e>
 8001a80:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <Motor_UpdateMessages+0x260>)
 8001a82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	f040 8116 	bne.w	8001cba <Motor_UpdateMessages+0x24e>
		motor_knee.is_free=0;
 8001a8e:	4b8e      	ldr	r3, [pc, #568]	; (8001cc8 <Motor_UpdateMessages+0x25c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		motor_ankle.is_free=0;
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <Motor_UpdateMessages+0x260>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		m2p.head = 0x01;
 8001a9e:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
		uint16_t temp1 = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	80fb      	strh	r3, [r7, #6]
		uint16_t temp2 = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	80bb      	strh	r3, [r7, #4]
		temp1 = (uint16_t)(motor_knee.pos_actual*k_float2int12+b_float2int12);
 8001aac:	4b86      	ldr	r3, [pc, #536]	; (8001cc8 <Motor_UpdateMessages+0x25c>)
 8001aae:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abc:	4b86      	ldr	r3, [pc, #536]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aca:	ee17 3a90 	vmov	r3, s15
 8001ace:	80fb      	strh	r3, [r7, #6]
		temp2 = (uint16_t)(motor_knee.vel_actual*k_float2int12+b_float2int12);
 8001ad0:	4b7d      	ldr	r3, [pc, #500]	; (8001cc8 <Motor_UpdateMessages+0x25c>)
 8001ad2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae0:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aee:	ee17 3a90 	vmov	r3, s15
 8001af2:	80bb      	strh	r3, [r7, #4]
		m2p.value1 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	88bb      	ldrh	r3, [r7, #4]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001b10:	805a      	strh	r2, [r3, #2]
		pos_actual_rtmotor = (float)(((m2p.value1>>4)&0xfff)-b_float2int12)/k_float2int12;
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001b14:	885b      	ldrh	r3, [r3, #2]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b32:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b3c:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <Motor_UpdateMessages+0x270>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
//						pos_desired_rtmotor-pos_actual_rtmotor,
//						pos_actual_rtmotor-pos_actual_rtpc,
//						pos_desired_rtpc-pos_actual_rtpc,
//						pos_desired_rtpc,
//						pos_actual_rtpc);
		temp1 = (uint16_t)(motor_ankle.pos_actual*k_float2int12+b_float2int12);
 8001b42:	4b62      	ldr	r3, [pc, #392]	; (8001ccc <Motor_UpdateMessages+0x260>)
 8001b44:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b48:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	80fb      	strh	r3, [r7, #6]
		m2p.value2 = (uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 8001b66:	88bb      	ldrh	r3, [r7, #4]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001b80:	809a      	strh	r2, [r3, #4]

		temp2 = (uint16_t)(motor_ankle.vel_actual*k_float2int12+b_float2int12);
 8001b82:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <Motor_UpdateMessages+0x260>)
 8001b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b88:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b92:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba0:	ee17 3a90 	vmov	r3, s15
 8001ba4:	80bb      	strh	r3, [r7, #4]
		m2p.value3 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	031b      	lsls	r3, r3, #12
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001bbe:	80da      	strh	r2, [r3, #6]

		temp1 = (uint16_t)(motor_knee.cur_actual*k_float2int12+b_float2int12);
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <Motor_UpdateMessages+0x25c>)
 8001bc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bde:	ee17 3a90 	vmov	r3, s15
 8001be2:	80fb      	strh	r3, [r7, #6]
		temp2 = (uint16_t)(motor_ankle.cur_actual*k_float2int12+b_float2int12);
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <Motor_UpdateMessages+0x260>)
 8001be6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c02:	ee17 3a90 	vmov	r3, s15
 8001c06:	80bb      	strh	r3, [r7, #4]
		m2p.value4 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	88bb      	ldrh	r3, [r7, #4]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001c24:	811a      	strh	r2, [r3, #8]

		temp1 = (uint16_t)(motor_knee.temperature*k_float2int12+b_float2int12);
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <Motor_UpdateMessages+0x25c>)
 8001c28:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c44:	ee17 3a90 	vmov	r3, s15
 8001c48:	80fb      	strh	r3, [r7, #6]
		m2p.value5  =(uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001c64:	815a      	strh	r2, [r3, #10]

		temp2 = (uint16_t)(motor_ankle.temperature*k_float2int12+b_float2int12);
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <Motor_UpdateMessages+0x260>)
 8001c68:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <Motor_UpdateMessages+0x268>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <Motor_UpdateMessages+0x26c>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	80bb      	strh	r3, [r7, #4]
		m2p.value6 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	031b      	lsls	r3, r3, #12
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001ca2:	819a      	strh	r2, [r3, #12]
		m2p.head = 0xFC;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <Motor_UpdateMessages+0x264>)
 8001ca6:	22fc      	movs	r2, #252	; 0xfc
 8001ca8:	701a      	strb	r2, [r3, #0]
		motor_knee.is_free = 1;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <Motor_UpdateMessages+0x25c>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		motor_ankle.is_free = 1;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <Motor_UpdateMessages+0x260>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}else{}
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000030 	.word	0x20000030
 8001cd0:	20000090 	.word	0x20000090
 8001cd4:	20000078 	.word	0x20000078
 8001cd8:	2000007c 	.word	0x2000007c
 8001cdc:	20000330 	.word	0x20000330

08001ce0 <Motor_CMDUnpack>:

void Motor_CMDUnpack(){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
	uint16_t temp;
	if(p2m.head==0xFC){
 8001ce6:	4bae      	ldr	r3, [pc, #696]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2bfc      	cmp	r3, #252	; 0xfc
 8001cee:	f040 82d3 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
		if(p2m.id==CMD_QUICK_STOP){
 8001cf2:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001cf4:	789b      	ldrb	r3, [r3, #2]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d11a      	bne.n	8001d32 <Motor_CMDUnpack+0x52>
			motor_knee.state = 0x00;
 8001cfc:	4ba9      	ldr	r3, [pc, #676]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			motor_ankle.state = 0x00;
 8001d04:	4ba8      	ldr	r3, [pc, #672]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			can_set_vel(motor_knee.device_id, 0);
 8001d0c:	4ba5      	ldr	r3, [pc, #660]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8001fac <Motor_CMDUnpack+0x2cc>
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe1d 	bl	8001958 <can_set_vel>
			can_set_vel(motor_ankle.device_id, 0);
 8001d1e:	4ba2      	ldr	r3, [pc, #648]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8001fac <Motor_CMDUnpack+0x2cc>
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fe14 	bl	8001958 <can_set_vel>
				can_set_current(motor_knee.device_id, motor_knee.cur_desired);
				can_set_current(motor_ankle.device_id, motor_ankle.cur_desired);
			}else{}
		}else{}//end p2m_motor.id
	}else{}//end p2m_motor.head
}
 8001d30:	e2b2      	b.n	8002298 <Motor_CMDUnpack+0x5b8>
		}else if(p2m.id==CMD_POSITION_CTRL){
 8001d32:	4b9b      	ldr	r3, [pc, #620]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d152      	bne.n	8001de2 <Motor_CMDUnpack+0x102>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001d3c:	4b99      	ldr	r3, [pc, #612]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 82a7 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
 8001d4a:	4b97      	ldr	r3, [pc, #604]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001d4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	f040 82a0 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
				motor_knee.pos_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001d58:	4b91      	ldr	r3, [pc, #580]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d66:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d70:	4b90      	ldr	r3, [pc, #576]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001d72:	ed93 7a00 	vldr	s14, [r3]
 8001d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001d7c:	edc3 7a04 	vstr	s15, [r3, #16]
				can_set_pos(motor_knee.device_id, motor_knee.pos_desired);
 8001d80:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4a86      	ldr	r2, [pc, #536]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001d8a:	edd2 7a04 	vldr	s15, [r2, #16]
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fd82 	bl	800189c <can_set_pos>
				motor_ankle.pos_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001d98:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001d9a:	88db      	ldrh	r3, [r3, #6]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001db0:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dba:	4b7b      	ldr	r3, [pc, #492]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001dbc:	edc3 7a04 	vstr	s15, [r3, #16]
				can_set_pos(motor_ankle.device_id, motor_ankle.pos_desired);
 8001dc0:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4a77      	ldr	r2, [pc, #476]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001dca:	edd2 7a04 	vldr	s15, [r2, #16]
 8001dce:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fd62 	bl	800189c <can_set_pos>
				pos_desired_rtmotor = motor_knee.pos_desired;
 8001dd8:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	4a76      	ldr	r2, [pc, #472]	; (8001fb8 <Motor_CMDUnpack+0x2d8>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	e25a      	b.n	8002298 <Motor_CMDUnpack+0x5b8>
		}else if(p2m.id==CMD_VELOCITY_CTRL){
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d14e      	bne.n	8001e8a <Motor_CMDUnpack+0x1aa>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001dec:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001dee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	f040 824f 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
 8001dfa:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001dfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 8248 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
				motor_knee.vel_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001e08:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001e0a:	889b      	ldrh	r3, [r3, #4]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e16:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e20:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001e22:	ed93 7a00 	vldr	s14, [r3]
 8001e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2a:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001e2c:	edc3 7a05 	vstr	s15, [r3, #20]
				can_set_vel(motor_knee.device_id, motor_knee.vel_desired);
 8001e30:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001e3a:	edd2 7a05 	vldr	s15, [r2, #20]
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fd88 	bl	8001958 <can_set_vel>
				motor_ankle.vel_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001e48:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001e4a:	88db      	ldrh	r3, [r3, #6]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e60:	4b54      	ldr	r3, [pc, #336]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001e62:	ed93 7a00 	vldr	s14, [r3]
 8001e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6a:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001e6c:	edc3 7a05 	vstr	s15, [r3, #20]
				can_set_vel(motor_ankle.device_id, motor_ankle.vel_desired);
 8001e70:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001e7a:	edd2 7a05 	vldr	s15, [r2, #20]
 8001e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fd68 	bl	8001958 <can_set_vel>
}
 8001e88:	e206      	b.n	8002298 <Motor_CMDUnpack+0x5b8>
		}else if(p2m.id==CMD_POSITION_AND_VELOCITY){
 8001e8a:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001e8c:	789b      	ldrb	r3, [r3, #2]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	f040 8095 	bne.w	8001fc0 <Motor_CMDUnpack+0x2e0>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001e98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	f040 81fa 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
 8001ea4:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001ea6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 81f3 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
				motor_knee.pos_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001eb4:	889b      	ldrh	r3, [r3, #4]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eca:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001ecc:	ed93 7a00 	vldr	s14, [r3]
 8001ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001ed6:	edc3 7a04 	vstr	s15, [r3, #16]
				motor_knee.vel_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001edc:	88db      	ldrh	r3, [r3, #6]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001ef4:	ed93 7a00 	vldr	s14, [r3]
 8001ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001efe:	edc3 7a05 	vstr	s15, [r3, #20]
				motor_ankle.pos_desired = (float)((p2m.value3-b_float2int16)/k_float2int16);
 8001f02:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001f04:	891b      	ldrh	r3, [r3, #8]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001f12:	edd3 7a00 	vldr	s15, [r3]
 8001f16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001f26:	edc3 7a04 	vstr	s15, [r3, #16]
				motor_ankle.vel_desired = (float)((p2m.value4-b_float2int16)/k_float2int16);
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <Motor_CMDUnpack+0x2c0>)
 8001f2c:	895b      	ldrh	r3, [r3, #10]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <Motor_CMDUnpack+0x2d0>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <Motor_CMDUnpack+0x2d4>)
 8001f44:	ed93 7a00 	vldr	s14, [r3]
 8001f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001f4e:	edc3 7a05 	vstr	s15, [r3, #20]
				can_set_pos_spd(motor_knee.device_id, motor_knee.pos_desired, motor_knee.vel_desired, 30000);
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001f5c:	edd2 7a04 	vldr	s15, [r2, #16]
 8001f60:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <Motor_CMDUnpack+0x2c4>)
 8001f62:	ed92 7a05 	vldr	s14, [r2, #20]
 8001f66:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8001fbc <Motor_CMDUnpack+0x2dc>
 8001f6a:	eef0 0a47 	vmov.f32	s1, s14
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fb58 	bl	8001628 <can_set_pos_spd>
				can_set_pos_spd(motor_ankle.device_id, motor_ankle.pos_desired, motor_ankle.vel_desired, 30000);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001f82:	edd2 7a04 	vldr	s15, [r2, #16]
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <Motor_CMDUnpack+0x2c8>)
 8001f88:	ed92 7a05 	vldr	s14, [r2, #20]
 8001f8c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8001fbc <Motor_CMDUnpack+0x2dc>
 8001f90:	eef0 0a47 	vmov.f32	s1, s14
 8001f94:	eeb0 0a67 	vmov.f32	s0, s15
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fb45 	bl	8001628 <can_set_pos_spd>
}
 8001f9e:	e17b      	b.n	8002298 <Motor_CMDUnpack+0x5b8>
 8001fa0:	20000080 	.word	0x20000080
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000030 	.word	0x20000030
 8001fac:	00000000 	.word	0x00000000
 8001fb0:	20000074 	.word	0x20000074
 8001fb4:	20000070 	.word	0x20000070
 8001fb8:	2000032c 	.word	0x2000032c
 8001fbc:	46ea6000 	.word	0x46ea6000
		}else if(p2m.id==CMD_TORQUE_CTRL){
 8001fc0:	4bb7      	ldr	r3, [pc, #732]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 8001fc2:	789b      	ldrb	r3, [r3, #2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d14e      	bne.n	8002068 <Motor_CMDUnpack+0x388>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001fca:	4bb6      	ldr	r3, [pc, #728]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8001fcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	f040 8160 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
 8001fd8:	4bb3      	ldr	r3, [pc, #716]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8001fda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f040 8159 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
				motor_knee.cur_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001fe6:	4bae      	ldr	r3, [pc, #696]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 8001fe8:	889b      	ldrh	r3, [r3, #4]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff4:	4bad      	ldr	r3, [pc, #692]	; (80022ac <Motor_CMDUnpack+0x5cc>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ffe:	4bac      	ldr	r3, [pc, #688]	; (80022b0 <Motor_CMDUnpack+0x5d0>)
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002008:	4ba6      	ldr	r3, [pc, #664]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 800200a:	edc3 7a06 	vstr	s15, [r3, #24]
				can_set_current(motor_knee.device_id, motor_knee.cur_desired);
 800200e:	4ba5      	ldr	r3, [pc, #660]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4aa3      	ldr	r2, [pc, #652]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002018:	edd2 7a06 	vldr	s15, [r2, #24]
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fa9d 	bl	8001560 <can_set_current>
				motor_ankle.cur_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8002026:	4b9e      	ldr	r3, [pc, #632]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 8002028:	88db      	ldrh	r3, [r3, #6]
 800202a:	b29b      	uxth	r3, r3
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002034:	4b9d      	ldr	r3, [pc, #628]	; (80022ac <Motor_CMDUnpack+0x5cc>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800203e:	4b9c      	ldr	r3, [pc, #624]	; (80022b0 <Motor_CMDUnpack+0x5d0>)
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002048:	4b97      	ldr	r3, [pc, #604]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 800204a:	edc3 7a06 	vstr	s15, [r3, #24]
				can_set_current(motor_ankle.device_id, motor_ankle.cur_desired);
 800204e:	4b96      	ldr	r3, [pc, #600]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4a94      	ldr	r2, [pc, #592]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002058:	edd2 7a06 	vldr	s15, [r2, #24]
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fa7d 	bl	8001560 <can_set_current>
}
 8002066:	e117      	b.n	8002298 <Motor_CMDUnpack+0x5b8>
		}else if(p2m.id==CMD_IMPEDANCE){
 8002068:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 800206a:	789b      	ldrb	r3, [r3, #2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b04      	cmp	r3, #4
 8002070:	f040 8112 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8002074:	4b8b      	ldr	r3, [pc, #556]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002076:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	f040 810b 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002084:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	f040 8104 	bne.w	8002298 <Motor_CMDUnpack+0x5b8>
				temp = (uint16_t)(p2m.value1>>4&0xfff);
 8002090:	4b83      	ldr	r3, [pc, #524]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	b29b      	uxth	r3, r3
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	b29b      	uxth	r3, r3
 800209a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209e:	80fb      	strh	r3, [r7, #6]
				motor_knee.Kp =(float) (temp-b_float2int12)/k_float2int12;
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020aa:	4b82      	ldr	r3, [pc, #520]	; (80022b4 <Motor_CMDUnpack+0x5d4>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020b4:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <Motor_CMDUnpack+0x5d8>)
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020be:	4b79      	ldr	r3, [pc, #484]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 80020c0:	edc3 7a07 	vstr	s15, [r3, #28]
				temp = (uint16_t)(((p2m.value1&0xf)<<8)|(p2m.value2>>8&0xff));
 80020c4:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	4b72      	ldr	r3, [pc, #456]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 80020d6:	88db      	ldrh	r3, [r3, #6]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	b29b      	uxth	r3, r3
 80020de:	b21b      	sxth	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	80fb      	strh	r3, [r7, #6]
				motor_ankle.Kp = (float) (temp-b_float2int12)/k_float2int12;
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f4:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <Motor_CMDUnpack+0x5d4>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020fe:	4b6e      	ldr	r3, [pc, #440]	; (80022b8 <Motor_CMDUnpack+0x5d8>)
 8002100:	ed93 7a00 	vldr	s14, [r3]
 8002104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002108:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 800210a:	edc3 7a07 	vstr	s15, [r3, #28]
				temp = (uint16_t)(((p2m.value2&0xff)<<4)|(p2m.value3>>12&0xf));
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 8002110:	88db      	ldrh	r3, [r3, #6]
 8002112:	b29b      	uxth	r3, r3
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	b21b      	sxth	r3, r3
 8002118:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800211c:	b21a      	sxth	r2, r3
 800211e:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 8002120:	891b      	ldrh	r3, [r3, #8]
 8002122:	b29b      	uxth	r3, r3
 8002124:	0b1b      	lsrs	r3, r3, #12
 8002126:	b29b      	uxth	r3, r3
 8002128:	b21b      	sxth	r3, r3
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	b21b      	sxth	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b21b      	sxth	r3, r3
 8002134:	80fb      	strh	r3, [r7, #6]
				motor_knee.Kb = (float) (temp-b_float2int12)/k_float2int12;
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002140:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <Motor_CMDUnpack+0x5d4>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee77 6a67 	vsub.f32	s13, s14, s15
 800214a:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <Motor_CMDUnpack+0x5d8>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002154:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002156:	edc3 7a08 	vstr	s15, [r3, #32]
				temp = (uint16_t)(p2m.value3&0xfff);
 800215a:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 800215c:	891b      	ldrh	r3, [r3, #8]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	80fb      	strh	r3, [r7, #6]
				motor_ankle.Kb = (float) (temp-b_float2int12)/k_float2int12;
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <Motor_CMDUnpack+0x5d4>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ee77 6a67 	vsub.f32	s13, s14, s15
 800217a:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <Motor_CMDUnpack+0x5d8>)
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002184:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002186:	edc3 7a08 	vstr	s15, [r3, #32]
				temp = (uint16_t)(p2m.value4>>4&0xfff);
 800218a:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 800218c:	895b      	ldrh	r3, [r3, #10]
 800218e:	b29b      	uxth	r3, r3
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	b29b      	uxth	r3, r3
 8002194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002198:	80fb      	strh	r3, [r7, #6]
				motor_knee.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <Motor_CMDUnpack+0x5d4>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <Motor_CMDUnpack+0x5d8>)
 80021b0:	ed93 7a00 	vldr	s14, [r3]
 80021b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b8:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 80021ba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				temp = (uint16_t)(((p2m.value4&0xf)<<8)|(p2m.ext_value));
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 80021c0:	895b      	ldrh	r3, [r3, #10]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <Motor_CMDUnpack+0x5c0>)
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	80fb      	strh	r3, [r7, #6]
				motor_ankle.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e6:	4b33      	ldr	r3, [pc, #204]	; (80022b4 <Motor_CMDUnpack+0x5d4>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <Motor_CMDUnpack+0x5d8>)
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 80021fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				motor_knee.cur_desired = motor_knee.Kp*(motor_knee.pos_actual-motor_knee.Angle_eq)+motor_knee.Kb*motor_knee.vel_actual;
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002202:	ed93 7a07 	vldr	s14, [r3, #28]
 8002206:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002208:	edd3 6a01 	vldr	s13, [r3, #4]
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 800220e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002212:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 800221c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002222:	edd3 7a02 	vldr	s15, [r3, #8]
 8002226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002230:	edc3 7a06 	vstr	s15, [r3, #24]
				motor_ankle.cur_desired = motor_ankle.Kp*(motor_ankle.pos_actual-motor_ankle.Angle_eq)+motor_ankle.Kb*motor_ankle.vel_actual;
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002236:	ed93 7a07 	vldr	s14, [r3, #28]
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 800223c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002242:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002246:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800224a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002250:	edd3 6a08 	vldr	s13, [r3, #32]
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002256:	edd3 7a02 	vldr	s15, [r3, #8]
 800225a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002264:	edc3 7a06 	vstr	s15, [r3, #24]
				can_set_current(motor_knee.device_id, motor_knee.cur_desired);
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <Motor_CMDUnpack+0x5c4>)
 8002272:	edd2 7a06 	vldr	s15, [r2, #24]
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f970 	bl	8001560 <can_set_current>
				can_set_current(motor_ankle.device_id, motor_ankle.cur_desired);
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <Motor_CMDUnpack+0x5c8>)
 800228a:	edd2 7a06 	vldr	s15, [r2, #24]
 800228e:	eeb0 0a67 	vmov.f32	s0, s15
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f964 	bl	8001560 <can_set_current>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000080 	.word	0x20000080
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000030 	.word	0x20000030
 80022ac:	20000074 	.word	0x20000074
 80022b0:	20000070 	.word	0x20000070
 80022b4:	2000007c 	.word	0x2000007c
 80022b8:	20000078 	.word	0x20000078

080022bc <m2pmsg_memcpy>:
volatile M2P m2p = {0x01,0xFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000};//

void p2mmsg_memcpy(uint8_t* buffer,volatile P2M p2m_){
	//TODO
}
void m2pmsg_memcpy(uint8_t* buffer,volatile M2P m2p_){
 80022bc:	b084      	sub	sp, #16
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	f107 0014 	add.w	r0, r7, #20
 80022ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	buffer[0] = m2p_.head;
 80022ce:	7d3b      	ldrb	r3, [r7, #20]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	701a      	strb	r2, [r3, #0]
	buffer[1] = m2p_.value1>>8&0xff;
 80022d6:	8afb      	ldrh	r3, [r7, #22]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
	buffer[2] = m2p_.value1&0xff;
 80022e6:	8afb      	ldrh	r3, [r7, #22]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3302      	adds	r3, #2
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
	buffer[3] = m2p_.value2>>8&0xff;
 80022f2:	8b3b      	ldrh	r3, [r7, #24]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3303      	adds	r3, #3
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]
	buffer[4] = m2p_.value2&0xff;
 8002302:	8b3b      	ldrh	r3, [r7, #24]
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
	buffer[5] = m2p_.value3>>8&0xff;
 800230e:	8b7b      	ldrh	r3, [r7, #26]
 8002310:	b29b      	uxth	r3, r3
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3305      	adds	r3, #5
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
	buffer[6] = m2p_.value3&0xff;
 800231e:	8b7b      	ldrh	r3, [r7, #26]
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3306      	adds	r3, #6
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
	buffer[7] = m2p_.value4>>8&0xff;
 800232a:	8bbb      	ldrh	r3, [r7, #28]
 800232c:	b29b      	uxth	r3, r3
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3307      	adds	r3, #7
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
	buffer[8] = m2p_.value4&0xff;
 800233a:	8bbb      	ldrh	r3, [r7, #28]
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3308      	adds	r3, #8
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]
	buffer[9] = m2p_.value5>>8&0xff;
 8002346:	8bfb      	ldrh	r3, [r7, #30]
 8002348:	b29b      	uxth	r3, r3
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29a      	uxth	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3309      	adds	r3, #9
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]
	buffer[10] = m2p_.value5&0xff;
 8002356:	8bfb      	ldrh	r3, [r7, #30]
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	330a      	adds	r3, #10
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
	buffer[11] = m2p_.value6>>8&0xff;
 8002362:	8c3b      	ldrh	r3, [r7, #32]
 8002364:	b29b      	uxth	r3, r3
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	330b      	adds	r3, #11
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
	buffer[12] = m2p_.value6&0xff;
 8002372:	8c3b      	ldrh	r3, [r7, #32]
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	330c      	adds	r3, #12
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
	buffer[13] = m2p_.end;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	330d      	adds	r3, #13
 8002382:	7d7a      	ldrb	r2, [r7, #21]
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	b004      	add	sp, #16
 8002394:	4770      	bx	lr
	...

08002398 <RingBuf_WriteByteArray>:
			buffer->headPosition = 0;
		}
		write_residual+=1;
	}else{}
}
void RingBuf_WriteByteArray(ringBuffer_t* buffer, uint8_t* pData, uint32_t length){
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
	buffer->newest_frame_position = buffer->tailPosition;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	785a      	ldrb	r2, [r3, #1]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	75da      	strb	r2, [r3, #23]
	if(length+buffer->tailPosition>=Buffer_MAX){
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	2b14      	cmp	r3, #20
 80023b8:	d928      	bls.n	800240c <RingBuf_WriteByteArray+0x74>
		i = Buffer_MAX-buffer->tailPosition;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	f1c3 0315 	rsb	r3, r3, #21
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <RingBuf_WriteByteArray+0xa0>)
 80023c6:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)(buffer->ringBuf)+buffer->tailPosition,pData,i);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3302      	adds	r3, #2
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	7852      	ldrb	r2, [r2, #1]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a19      	ldr	r2, [pc, #100]	; (8002438 <RingBuf_WriteByteArray+0xa0>)
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f007 fc01 	bl	8009be0 <memcpy>
		buffer->tailPosition = length-i;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <RingBuf_WriteByteArray+0xa0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	705a      	strb	r2, [r3, #1]
		memcpy((uint8_t*)(buffer->ringBuf),(uint8_t*)pData+i,length-i);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1c98      	adds	r0, r3, #2
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <RingBuf_WriteByteArray+0xa0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	18d1      	adds	r1, r2, r3
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <RingBuf_WriteByteArray+0xa0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	461a      	mov	r2, r3
 8002406:	f007 fbeb 	bl	8009be0 <memcpy>
		buffer->tailPosition = buffer->tailPosition+length;
	}
//	for(i=0;i<length;i++){
//		RingBuf_WriteByte(buffer, *(pData+i));
//	}
}
 800240a:	e011      	b.n	8002430 <RingBuf_WriteByteArray+0x98>
		memcpy((uint8_t*)(buffer->ringBuf)+buffer->tailPosition,pData,length);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3302      	adds	r3, #2
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	7852      	ldrb	r2, [r2, #1]
 8002414:	4413      	add	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f007 fbe0 	bl	8009be0 <memcpy>
		buffer->tailPosition = buffer->tailPosition+length;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	785a      	ldrb	r2, [r3, #1]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4413      	add	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	705a      	strb	r2, [r3, #1]
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000334 	.word	0x20000334

0800243c <RingBuf_ReadByteArray>:
		}
	}
	return 1;
}

int RingBuf_ReadByteArray(ringBuffer_t* buffer, uint8_t* pData, uint32_t length){
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	read_ok = 1;
 8002448:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]
//	for(j=0;j<length;j++){
//		read_ok *= RingBuf_ReadByte(buffer, (uint8_t*)(pData+j));
//	}
	if(buffer->headPosition+length>Buffer_MAX){
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	2b15      	cmp	r3, #21
 800245a:	d947      	bls.n	80024ec <RingBuf_ReadByteArray+0xb0>
		i = Buffer_MAX-buffer->headPosition;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f1c3 0315 	rsb	r3, r3, #21
 8002464:	461a      	mov	r2, r3
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <RingBuf_ReadByteArray+0x108>)
 8002468:	601a      	str	r2, [r3, #0]
		j = length-i;
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <RingBuf_ReadByteArray+0x108>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	4a35      	ldr	r2, [pc, #212]	; (8002548 <RingBuf_ReadByteArray+0x10c>)
 8002474:	6013      	str	r3, [r2, #0]
		if(i<=(buffer->tailPosition)||(buffer->tailPosition)<j){
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	461a      	mov	r2, r3
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <RingBuf_ReadByteArray+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d206      	bcs.n	8002492 <RingBuf_ReadByteArray+0x56>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	461a      	mov	r2, r3
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <RingBuf_ReadByteArray+0x10c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d205      	bcs.n	800249e <RingBuf_ReadByteArray+0x62>
			read_ok = 0;
 8002492:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
			return read_ok;
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e04c      	b.n	8002538 <RingBuf_ReadByteArray+0xfc>
		}else{
			memcpy((uint8_t*)pData,(uint8_t*)(buffer->ringBuf)+buffer->headPosition,i);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3302      	adds	r3, #2
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <RingBuf_ReadByteArray+0x108>)
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	68b8      	ldr	r0, [r7, #8]
 80024b0:	f007 fb96 	bl	8009be0 <memcpy>
			buffer->headPosition = length-i;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <RingBuf_ReadByteArray+0x108>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*)pData+i,(uint8_t*)(buffer->ringBuf),length-i);
 80024c6:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <RingBuf_ReadByteArray+0x108>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	18d0      	adds	r0, r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1c99      	adds	r1, r3, #2
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <RingBuf_ReadByteArray+0x108>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	f007 fb80 	bl	8009be0 <memcpy>
			read_ok = 1;
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
			return read_ok;
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	e025      	b.n	8002538 <RingBuf_ReadByteArray+0xfc>
		}
	}else{
		if(buffer->headPosition+length>buffer->tailPosition){
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	7852      	ldrb	r2, [r2, #1]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d905      	bls.n	800250a <RingBuf_ReadByteArray+0xce>
			read_ok = 0;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
			return read_ok;
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	e016      	b.n	8002538 <RingBuf_ReadByteArray+0xfc>
		}else{
			memcpy(pData,(uint8_t*)(buffer->ringBuf)+buffer->headPosition,length);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3302      	adds	r3, #2
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	4413      	add	r3, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4619      	mov	r1, r3
 8002518:	68b8      	ldr	r0, [r7, #8]
 800251a:	f007 fb61 	bl	8009be0 <memcpy>
			buffer->headPosition = buffer->headPosition+length;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4413      	add	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	701a      	strb	r2, [r3, #0]
			read_ok = 1;
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
			return read_ok;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <RingBuf_ReadByteArray+0x104>)
 8002536:	681b      	ldr	r3, [r3, #0]
		}
	}
	return read_ok;
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200000a0 	.word	0x200000a0
 8002544:	20000334 	.word	0x20000334
 8002548:	20000338 	.word	0x20000338

0800254c <RingBuf_ReadByteNewestArray>:
int RingBuf_ReadByteNewestArray(ringBuffer_t* buffer,uint8_t* pData, uint32_t length){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
	buffer->headPosition = buffer->newest_frame_position;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	7dda      	ldrb	r2, [r3, #23]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	701a      	strb	r2, [r3, #0]
	read_ok = RingBuf_ReadByteArray(buffer,pData,length);
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff ff69 	bl	800243c <RingBuf_ReadByteArray>
 800256a:	4603      	mov	r3, r0
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <RingBuf_ReadByteNewestArray+0x30>)
 800256e:	6013      	str	r3, [r2, #0]
	return read_ok;
 8002570:	4b02      	ldr	r3, [pc, #8]	; (800257c <RingBuf_ReadByteNewestArray+0x30>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200000a0 	.word	0x200000a0

08002580 <Start_PCReceiveIT>:
volatile float pos_desired_rtpc = 0;
volatile float pos_actual_rtpc = 0;
uint32_t msg_receive;
uint32_t msg_send;

void Start_PCReceiveIT(){
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxData));
 8002584:	220b      	movs	r2, #11
 8002586:	4907      	ldr	r1, [pc, #28]	; (80025a4 <Start_PCReceiveIT+0x24>)
 8002588:	4807      	ldr	r0, [pc, #28]	; (80025a8 <Start_PCReceiveIT+0x28>)
 800258a:	f003 ff71 	bl	8006470 <HAL_UARTEx_ReceiveToIdle_DMA>
//	HAL_UART_Receive_DMA(&huart6, rxDataBuffer,11);
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <Start_PCReceiveIT+0x2c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <Start_PCReceiveIT+0x2c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000364 	.word	0x20000364
 80025a8:	20000770 	.word	0x20000770
 80025ac:	200008d4 	.word	0x200008d4

080025b0 <HAL_UARTEx_RxEventCallback>:
//		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxData));
//		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
//	}
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
	if(huart==&huart6){
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_UARTEx_RxEventCallback+0x4c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d116      	bne.n	80025f2 <HAL_UARTEx_RxEventCallback+0x42>
		RingBuf_WriteByteArray(&buffer, rxDataBuffer, Size);
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	461a      	mov	r2, r3
 80025c8:	490d      	ldr	r1, [pc, #52]	; (8002600 <HAL_UARTEx_RxEventCallback+0x50>)
 80025ca:	480e      	ldr	r0, [pc, #56]	; (8002604 <HAL_UARTEx_RxEventCallback+0x54>)
 80025cc:	f7ff fee4 	bl	8002398 <RingBuf_WriteByteArray>
		RingBuf_ReadByteNewestArray(&buffer, rxData, sizeof(rxData));
 80025d0:	220b      	movs	r2, #11
 80025d2:	490d      	ldr	r1, [pc, #52]	; (8002608 <HAL_UARTEx_RxEventCallback+0x58>)
 80025d4:	480b      	ldr	r0, [pc, #44]	; (8002604 <HAL_UARTEx_RxEventCallback+0x54>)
 80025d6:	f7ff ffb9 	bl	800254c <RingBuf_ReadByteNewestArray>
		tx_len = size_m2p;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_UARTEx_RxEventCallback+0x5c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <HAL_UARTEx_RxEventCallback+0x60>)
 80025e0:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart6, txDataBuffer,tx_len);
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_UARTEx_RxEventCallback+0x60>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_UARTEx_RxEventCallback+0x64>)
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <HAL_UARTEx_RxEventCallback+0x4c>)
 80025ee:	f003 fec1 	bl	8006374 <HAL_UART_Transmit_DMA>
//		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxData));
//		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
	}

}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000770 	.word	0x20000770
 8002600:	20000364 	.word	0x20000364
 8002604:	2000039c 	.word	0x2000039c
 8002608:	2000038c 	.word	0x2000038c
 800260c:	200000a4 	.word	0x200000a4
 8002610:	20000398 	.word	0x20000398
 8002614:	2000033c 	.word	0x2000033c

08002618 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	if(huart==&huart6){
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a16      	ldr	r2, [pc, #88]	; (800267c <HAL_UART_RxCpltCallback+0x64>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d124      	bne.n	8002672 <HAL_UART_RxCpltCallback+0x5a>
		msg_send+=1;
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	4a14      	ldr	r2, [pc, #80]	; (8002680 <HAL_UART_RxCpltCallback+0x68>)
 8002630:	6013      	str	r3, [r2, #0]
		if(rxDataBuffer[0]==0xfc&&((rxDataBuffer[10]&0xf)==0xf)){
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_UART_RxCpltCallback+0x6c>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2bfc      	cmp	r3, #252	; 0xfc
 8002638:	d116      	bne.n	8002668 <HAL_UART_RxCpltCallback+0x50>
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_UART_RxCpltCallback+0x6c>)
 800263c:	7a9b      	ldrb	r3, [r3, #10]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	2b0f      	cmp	r3, #15
 8002644:	d110      	bne.n	8002668 <HAL_UART_RxCpltCallback+0x50>
			msg_receive +=1;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_UART_RxCpltCallback+0x70>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_UART_RxCpltCallback+0x70>)
 800264e:	6013      	str	r3, [r2, #0]
			memcpy(rxData,rxDataBuffer,sizeof(rxData));
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_UART_RxCpltCallback+0x74>)
 8002652:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <HAL_UART_RxCpltCallback+0x6c>)
 8002654:	ca07      	ldmia	r2, {r0, r1, r2}
 8002656:	c303      	stmia	r3!, {r0, r1}
 8002658:	801a      	strh	r2, [r3, #0]
 800265a:	3302      	adds	r3, #2
 800265c:	0c12      	lsrs	r2, r2, #16
 800265e:	701a      	strb	r2, [r3, #0]
			PC_UnpackMessage();
 8002660:	f000 f826 	bl	80026b0 <PC_UnpackMessage>
			PC_PackMessage();
 8002664:	f000 f8a2 	bl	80027ac <PC_PackMessage>
		}
		HAL_UART_Transmit_DMA(&huart6, txDataBuffer, 14);
 8002668:	220e      	movs	r2, #14
 800266a:	4909      	ldr	r1, [pc, #36]	; (8002690 <HAL_UART_RxCpltCallback+0x78>)
 800266c:	4803      	ldr	r0, [pc, #12]	; (800267c <HAL_UART_RxCpltCallback+0x64>)
 800266e:	f003 fe81 	bl	8006374 <HAL_UART_Transmit_DMA>
//		HAL_UART_Receive_DMA(&huart6, rxDataBuffer,11);
	}
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000770 	.word	0x20000770
 8002680:	200003c0 	.word	0x200003c0
 8002684:	20000364 	.word	0x20000364
 8002688:	200003bc 	.word	0x200003bc
 800268c:	2000038c 	.word	0x2000038c
 8002690:	2000033c 	.word	0x2000033c

08002694 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	huart->gState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <PC_UnpackMessage>:
// [0]0x(id)* ,[9]0x*F
void PC_UnpackMessage(){
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
//				pos_desired_rtpc = (float)((p2m.value1-b_float2int16)/k_float2int16);
//
//			}else{}
//		}else{}
//	}
	if(rxData[0]==0xfc&&rxData[0]==0xfc&&((rxData[10]&0xf)==0xf)){
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <PC_UnpackMessage+0xe8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2bfc      	cmp	r3, #252	; 0xfc
 80026ba:	d167      	bne.n	800278c <PC_UnpackMessage+0xdc>
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <PC_UnpackMessage+0xe8>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2bfc      	cmp	r3, #252	; 0xfc
 80026c2:	d163      	bne.n	800278c <PC_UnpackMessage+0xdc>
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <PC_UnpackMessage+0xe8>)
 80026c6:	7a9b      	ldrb	r3, [r3, #10]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	d15d      	bne.n	800278c <PC_UnpackMessage+0xdc>
		p2m.head = 0x01;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <PC_UnpackMessage+0xec>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
		p2m.id = (uint8_t)(rxData[1]>>4&0xf);
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <PC_UnpackMessage+0xe8>)
 80026d8:	785b      	ldrb	r3, [r3, #1]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <PC_UnpackMessage+0xec>)
 80026e0:	709a      	strb	r2, [r3, #2]
		p2m.value1 = (uint16_t)(rxData[2]<<8|rxData[3]);
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <PC_UnpackMessage+0xe8>)
 80026e4:	789b      	ldrb	r3, [r3, #2]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <PC_UnpackMessage+0xe8>)
 80026ec:	78db      	ldrb	r3, [r3, #3]
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <PC_UnpackMessage+0xec>)
 80026f8:	809a      	strh	r2, [r3, #4]
		p2m.value2 = (uint16_t)(rxData[4]<<8|rxData[5]);
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <PC_UnpackMessage+0xe8>)
 80026fc:	791b      	ldrb	r3, [r3, #4]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	b21a      	sxth	r2, r3
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <PC_UnpackMessage+0xe8>)
 8002704:	795b      	ldrb	r3, [r3, #5]
 8002706:	b21b      	sxth	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b21b      	sxth	r3, r3
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <PC_UnpackMessage+0xec>)
 8002710:	80da      	strh	r2, [r3, #6]
		p2m.value3 = (uint16_t)(rxData[6]<<8|rxData[7]);
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <PC_UnpackMessage+0xe8>)
 8002714:	799b      	ldrb	r3, [r3, #6]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	b21a      	sxth	r2, r3
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <PC_UnpackMessage+0xe8>)
 800271c:	79db      	ldrb	r3, [r3, #7]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <PC_UnpackMessage+0xec>)
 8002728:	811a      	strh	r2, [r3, #8]
		p2m.value4 = (uint16_t)(rxData[8]<<8|rxData[9]);
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <PC_UnpackMessage+0xe8>)
 800272c:	7a1b      	ldrb	r3, [r3, #8]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b21a      	sxth	r2, r3
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <PC_UnpackMessage+0xe8>)
 8002734:	7a5b      	ldrb	r3, [r3, #9]
 8002736:	b21b      	sxth	r3, r3
 8002738:	4313      	orrs	r3, r2
 800273a:	b21b      	sxth	r3, r3
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <PC_UnpackMessage+0xec>)
 8002740:	815a      	strh	r2, [r3, #10]
		p2m.ext_value = (uint8_t)(((rxData[1]&0xf)<<4)|(rxData[10]>>4&0xf));
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <PC_UnpackMessage+0xe8>)
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	b25a      	sxtb	r2, r3
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <PC_UnpackMessage+0xe8>)
 800274c:	7a9b      	ldrb	r3, [r3, #10]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	b2db      	uxtb	r3, r3
 8002752:	b25b      	sxtb	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b25b      	sxtb	r3, r3
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <PC_UnpackMessage+0xec>)
 800275c:	731a      	strb	r2, [r3, #12]
		p2m.head = 0xFC;
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <PC_UnpackMessage+0xec>)
 8002760:	22fc      	movs	r2, #252	; 0xfc
 8002762:	701a      	strb	r2, [r3, #0]
		pos_desired_rtpc = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <PC_UnpackMessage+0xec>)
 8002766:	889b      	ldrh	r3, [r3, #4]
 8002768:	b29b      	uxth	r3, r3
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <PC_UnpackMessage+0xf0>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	ee77 6a67 	vsub.f32	s13, s14, s15
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <PC_UnpackMessage+0xf4>)
 800277e:	ed93 7a00 	vldr	s14, [r3]
 8002782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <PC_UnpackMessage+0xf8>)
 8002788:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	2000038c 	.word	0x2000038c
 800279c:	20000080 	.word	0x20000080
 80027a0:	20000074 	.word	0x20000074
 80027a4:	20000070 	.word	0x20000070
 80027a8:	200003b4 	.word	0x200003b4

080027ac <PC_PackMessage>:

void PC_PackMessage(){
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af02      	add	r7, sp, #8
//				osDelay(1);
//				count+=1;
//			}
//		}
//	}
	if(m2p.head==0xFC && m2p.end==0xFF){
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <PC_PackMessage+0x78>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2bfc      	cmp	r3, #252	; 0xfc
 80027ba:	d12e      	bne.n	800281a <PC_PackMessage+0x6e>
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <PC_PackMessage+0x78>)
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2bff      	cmp	r3, #255	; 0xff
 80027c4:	d129      	bne.n	800281a <PC_PackMessage+0x6e>
			pos_actual_rtpc = (float)(((m2p.value1>>4)&0xfff)-b_float2int12)/k_float2int12;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <PC_PackMessage+0x78>)
 80027c8:	885b      	ldrh	r3, [r3, #2]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <PC_PackMessage+0x7c>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <PC_PackMessage+0x80>)
 80027e8:	ed93 7a00 	vldr	s14, [r3]
 80027ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <PC_PackMessage+0x84>)
 80027f2:	edc3 7a00 	vstr	s15, [r3]
			m2pmsg_memcpy(txDataBuffer, m2p);
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <PC_PackMessage+0x78>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4611      	mov	r1, r2
 80027fc:	6858      	ldr	r0, [r3, #4]
 80027fe:	4602      	mov	r2, r0
 8002800:	689c      	ldr	r4, [r3, #8]
 8002802:	4620      	mov	r0, r4
 8002804:	899b      	ldrh	r3, [r3, #12]
 8002806:	f8ad 3000 	strh.w	r3, [sp]
 800280a:	4603      	mov	r3, r0
 800280c:	4809      	ldr	r0, [pc, #36]	; (8002834 <PC_PackMessage+0x88>)
 800280e:	f7ff fd55 	bl	80022bc <m2pmsg_memcpy>
			tx_len = size_m2p;
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <PC_PackMessage+0x8c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <PC_PackMessage+0x90>)
 8002818:	6013      	str	r3, [r2, #0]
//				}else{
//					count+=1;
//				}
//			}
		}
}
 800281a:	bf00      	nop
 800281c:	3704      	adds	r7, #4
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	20000090 	.word	0x20000090
 8002828:	2000007c 	.word	0x2000007c
 800282c:	20000078 	.word	0x20000078
 8002830:	200003b8 	.word	0x200003b8
 8002834:	2000033c 	.word	0x2000033c
 8002838:	200000a4 	.word	0x200000a4
 800283c:	20000398 	.word	0x20000398

08002840 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <MX_CAN1_Init+0x68>)
 8002848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MX_CAN1_Init+0x64>)
 800284c:	2206      	movs	r2, #6
 800284e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_CAN1_Init+0x64>)
 800285e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002866:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800286a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <MX_CAN1_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002874:	2200      	movs	r2, #0
 8002876:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <MX_CAN1_Init+0x64>)
 800287a:	2200      	movs	r2, #0
 800287c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002880:	2200      	movs	r2, #0
 8002882:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_CAN1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002890:	4804      	ldr	r0, [pc, #16]	; (80028a4 <MX_CAN1_Init+0x64>)
 8002892:	f001 f815 	bl	80038c0 <HAL_CAN_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800289c:	f000 fae6 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200003c4 	.word	0x200003c4
 80028a8:	40006400 	.word	0x40006400

080028ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <HAL_CAN_MspInit+0x94>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d133      	bne.n	8002936 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_CAN_MspInit+0x98>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_CAN_MspInit+0x98>)
 80028d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_CAN_MspInit+0x98>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_CAN_MspInit+0x98>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_CAN_MspInit+0x98>)
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_CAN_MspInit+0x98>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002906:	2303      	movs	r3, #3
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002916:	2309      	movs	r3, #9
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4809      	ldr	r0, [pc, #36]	; (8002948 <HAL_CAN_MspInit+0x9c>)
 8002922:	f002 fb49 	bl	8004fb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2105      	movs	r1, #5
 800292a:	2014      	movs	r0, #20
 800292c:	f001 ff18 	bl	8004760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002930:	2014      	movs	r0, #20
 8002932:	f001 ff31 	bl	8004798 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40006400 	.word	0x40006400
 8002944:	40023800 	.word	0x40023800
 8002948:	40020c00 	.word	0x40020c00

0800294c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <MX_DMA_Init+0x98>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <MX_DMA_Init+0x98>)
 800295c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <MX_DMA_Init+0x98>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <MX_DMA_Init+0x98>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <MX_DMA_Init+0x98>)
 8002978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <MX_DMA_Init+0x98>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2106      	movs	r1, #6
 800298e:	200c      	movs	r0, #12
 8002990:	f001 fee6 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002994:	200c      	movs	r0, #12
 8002996:	f001 feff 	bl	8004798 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2106      	movs	r1, #6
 800299e:	200e      	movs	r0, #14
 80029a0:	f001 fede 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80029a4:	200e      	movs	r0, #14
 80029a6:	f001 fef7 	bl	8004798 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2106      	movs	r1, #6
 80029ae:	200f      	movs	r0, #15
 80029b0:	f001 fed6 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80029b4:	200f      	movs	r0, #15
 80029b6:	f001 feef 	bl	8004798 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2105      	movs	r1, #5
 80029be:	2039      	movs	r0, #57	; 0x39
 80029c0:	f001 fece 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80029c4:	2039      	movs	r0, #57	; 0x39
 80029c6:	f001 fee7 	bl	8004798 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2105      	movs	r1, #5
 80029ce:	2045      	movs	r0, #69	; 0x45
 80029d0:	f001 fec6 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80029d4:	2045      	movs	r0, #69	; 0x45
 80029d6:	f001 fedf 	bl	8004798 <HAL_NVIC_EnableIRQ>

}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <vApplicationGetIdleTaskMemory+0x2c>)
 80029f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <vApplicationGetIdleTaskMemory+0x30>)
 80029fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000404 	.word	0x20000404
 8002a18:	20000458 	.word	0x20000458

08002a1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002a1c:	b5b0      	push	{r4, r5, r7, lr}
 8002a1e:	b09a      	sub	sp, #104	; 0x68
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of p2mMutex */
  osMutexDef(p2mMutex);
 8002a22:	2300      	movs	r3, #0
 8002a24:	663b      	str	r3, [r7, #96]	; 0x60
 8002a26:	2300      	movs	r3, #0
 8002a28:	667b      	str	r3, [r7, #100]	; 0x64
  p2mMutexHandle = osMutexCreate(osMutex(p2mMutex));
 8002a2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 ff45 	bl	80078be <osMutexCreate>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <MX_FREERTOS_Init+0xc4>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* definition and creation of m2pMutex */
  osMutexDef(m2pMutex);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a3e:	2300      	movs	r3, #0
 8002a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  m2pMutexHandle = osMutexCreate(osMutex(m2pMutex));
 8002a42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 ff39 	bl	80078be <osMutexCreate>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <MX_FREERTOS_Init+0xc8>)
 8002a50:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PC_To_MotorQueue */
  osMessageQDef(PC_To_MotorQueue, 5, P2M);
 8002a52:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <MX_FREERTOS_Init+0xcc>)
 8002a54:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PC_To_MotorQueueHandle = osMessageCreate(osMessageQ(PC_To_MotorQueue), NULL);
 8002a5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 ff42 	bl	80078ee <osMessageCreate>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <MX_FREERTOS_Init+0xd0>)
 8002a6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motor_To_PC_Queue */
  osMessageQDef(Motor_To_PC_Queue, 5, M2P);
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <MX_FREERTOS_Init+0xcc>)
 8002a72:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Motor_To_PC_QueueHandle = osMessageCreate(osMessageQ(Motor_To_PC_Queue), NULL);
 8002a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 ff33 	bl	80078ee <osMessageCreate>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <MX_FREERTOS_Init+0xd4>)
 8002a8c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CommucationTask */
  osThreadDef(CommucationTask, Task_Commucation, osPriorityNormal, 0, 400);
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <MX_FREERTOS_Init+0xd8>)
 8002a90:	f107 041c 	add.w	r4, r7, #28
 8002a94:	461d      	mov	r5, r3
 8002a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommucationTaskHandle = osThreadCreate(osThread(CommucationTask), NULL);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 fea8 	bl	80077fe <osThreadCreate>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <MX_FREERTOS_Init+0xdc>)
 8002ab2:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorCtrlTask */
  osThreadDef(MotorCtrlTask, Task_MotorCtrl, osPriorityNormal, 0, 400);
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_FREERTOS_Init+0xe0>)
 8002ab6:	463c      	mov	r4, r7
 8002ab8:	461d      	mov	r5, r3
 8002aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002abe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorCtrlTaskHandle = osThreadCreate(osThread(MotorCtrlTask), NULL);
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fe97 	bl	80077fe <osThreadCreate>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <MX_FREERTOS_Init+0xe4>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002ad6:	bf00      	nop
 8002ad8:	3768      	adds	r7, #104	; 0x68
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200003fc 	.word	0x200003fc
 8002ae4:	20000400 	.word	0x20000400
 8002ae8:	0800e550 	.word	0x0800e550
 8002aec:	200003f4 	.word	0x200003f4
 8002af0:	200003f8 	.word	0x200003f8
 8002af4:	0800e560 	.word	0x0800e560
 8002af8:	200003ec 	.word	0x200003ec
 8002afc:	0800e57c 	.word	0x0800e57c
 8002b00:	200003f0 	.word	0x200003f0

08002b04 <Task_Commucation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Commucation */
void Task_Commucation(void const * argument)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
//		if(m2p_pc.head==0xFC&&m2p_pc.end==0xFF){
//			PC_PackMessage();
//		}else{m2p_pc_wrong+=1;}//end m2p_pc.id
//	}else{}//end xStatus_Receive

	if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <Task_Commucation+0x58>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 fa4c 	bl	8007fb0 <xQueueSemaphoreTake>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d108      	bne.n	8002b30 <Task_Commucation+0x2c>
		PC_UnpackMessage();
 8002b1e:	f7ff fdc7 	bl	80026b0 <PC_UnpackMessage>
		xSemaphoreGive(p2mMutexHandle);
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <Task_Commucation+0x58>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	2300      	movs	r3, #0
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	f005 f942 	bl	8007db4 <xQueueGenericSend>
	}
	if(xSemaphoreTake(m2pMutexHandle, 0)==pdTRUE){
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <Task_Commucation+0x5c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fa3a 	bl	8007fb0 <xQueueSemaphoreTake>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d108      	bne.n	8002b54 <Task_Commucation+0x50>
		PC_PackMessage();
 8002b42:	f7ff fe33 	bl	80027ac <PC_PackMessage>
		xSemaphoreGive(m2pMutexHandle);
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <Task_Commucation+0x5c>)
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f005 f930 	bl	8007db4 <xQueueGenericSend>
	}

//	debugPrintMultiThread("Hello:Communication Task \r\n");
    osDelay(10);
 8002b54:	200a      	movs	r0, #10
 8002b56:	f004 fe9e 	bl	8007896 <osDelay>
	if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002b5a:	e7d7      	b.n	8002b0c <Task_Commucation+0x8>
 8002b5c:	200003fc 	.word	0x200003fc
 8002b60:	20000400 	.word	0x20000400

08002b64 <Task_MotorCtrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_MotorCtrl */
void Task_MotorCtrl(void const * argument)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
//	if(m2p_motor.head==0xFC&&m2p_motor.end==0xFF){
//		xStatus_Send = xQueueSend(Motor_To_PC_QueueHandle,&m2p_motor,0);
//		if(xStatus_Send==pdPASS){
//		}else{}
//	}
	  if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <Task_MotorCtrl+0x58>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 fa1c 	bl	8007fb0 <xQueueSemaphoreTake>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <Task_MotorCtrl+0x2c>
//		  Motor_Debug_CMDUnpack();
		  Motor_CMDUnpack();
 8002b7e:	f7ff f8af 	bl	8001ce0 <Motor_CMDUnpack>
		  xSemaphoreGive(p2mMutexHandle);
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <Task_MotorCtrl+0x58>)
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f005 f912 	bl	8007db4 <xQueueGenericSend>
	  }
	  if(xSemaphoreTake(m2pMutexHandle, 0)==pdTRUE){
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <Task_MotorCtrl+0x5c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 fa0a 	bl	8007fb0 <xQueueSemaphoreTake>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d108      	bne.n	8002bb4 <Task_MotorCtrl+0x50>
		  Motor_UpdateMessages();
 8002ba2:	f7fe ff63 	bl	8001a6c <Motor_UpdateMessages>
		  xSemaphoreGive(m2pMutexHandle);
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <Task_MotorCtrl+0x5c>)
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	2300      	movs	r3, #0
 8002bac:	2200      	movs	r2, #0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	f005 f900 	bl	8007db4 <xQueueGenericSend>
	  }
//	  debugPrintMultiThread("Hello: Task Motor\r\n");
	  osDelay(5);
 8002bb4:	2005      	movs	r0, #5
 8002bb6:	f004 fe6e 	bl	8007896 <osDelay>
	  if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002bba:	e7d7      	b.n	8002b6c <Task_MotorCtrl+0x8>
 8002bbc:	200003fc 	.word	0x200003fc
 8002bc0:	20000400 	.word	0x20000400

08002bc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	; 0x30
 8002bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a50      	ldr	r2, [pc, #320]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002be4:	f043 0310 	orr.w	r3, r3, #16
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a3b      	ldr	r2, [pc, #236]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a2d      	ldr	r2, [pc, #180]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c8c:	f043 0320 	orr.w	r3, r3, #32
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <MX_GPIO_Init+0x160>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002ca4:	4820      	ldr	r0, [pc, #128]	; (8002d28 <MX_GPIO_Init+0x164>)
 8002ca6:	f002 fb33 	bl	8005310 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002caa:	2200      	movs	r2, #0
 8002cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cb0:	481e      	ldr	r0, [pc, #120]	; (8002d2c <MX_GPIO_Init+0x168>)
 8002cb2:	f002 fb2d 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cbc:	481c      	ldr	r0, [pc, #112]	; (8002d30 <MX_GPIO_Init+0x16c>)
 8002cbe:	f002 fb27 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG8 PG7 PG6 PG5
                           PG4 PG3 PG2 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
 8002cc2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002cc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cd4:	f107 031c 	add.w	r3, r7, #28
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4813      	ldr	r0, [pc, #76]	; (8002d28 <MX_GPIO_Init+0x164>)
 8002cdc:	f002 f96c 	bl	8004fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <MX_GPIO_Init+0x168>)
 8002cfa:	f002 f95d 	bl	8004fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d04:	2301      	movs	r3, #1
 8002d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <MX_GPIO_Init+0x16c>)
 8002d18:	f002 f94e 	bl	8004fb8 <HAL_GPIO_Init>

}
 8002d1c:	bf00      	nop
 8002d1e:	3730      	adds	r7, #48	; 0x30
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40021400 	.word	0x40021400

08002d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d38:	f000 fd5c 	bl	80037f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d3c:	f000 f81a 	bl	8002d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d40:	f7ff ff40 	bl	8002bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d44:	f7ff fe02 	bl	800294c <MX_DMA_Init>
  MX_CAN1_Init();
 8002d48:	f7ff fd7a 	bl	8002840 <MX_CAN1_Init>
  MX_UART7_Init();
 8002d4c:	f000 fa84 	bl	8003258 <MX_UART7_Init>
  MX_UART8_Init();
 8002d50:	f000 faac 	bl	80032ac <MX_UART8_Init>
  MX_USART6_UART_Init();
 8002d54:	f000 fafe 	bl	8003354 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002d58:	f000 fad2 	bl	8003300 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig();
 8002d5c:	f7fe f984 	bl	8001068 <CAN_FilterConfig>
  motor_init();
 8002d60:	f7fe fa00 	bl	8001164 <motor_init>
  Start_PCReceiveIT();
 8002d64:	f7ff fc0c 	bl	8002580 <Start_PCReceiveIT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002d68:	f7ff fe58 	bl	8002a1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d6c:	f004 fd40 	bl	80077f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <main+0x3c>
	...

08002d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b094      	sub	sp, #80	; 0x50
 8002d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7a:	f107 0320 	add.w	r3, r7, #32
 8002d7e:	2230      	movs	r2, #48	; 0x30
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f006 ff3a 	bl	8009bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <SystemClock_Config+0xcc>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <SystemClock_Config+0xcc>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6413      	str	r3, [r2, #64]	; 0x40
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <SystemClock_Config+0xcc>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <SystemClock_Config+0xd0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <SystemClock_Config+0xd0>)
 8002dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <SystemClock_Config+0xd0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002de4:	2306      	movs	r3, #6
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002de8:	23a8      	movs	r3, #168	; 0xa8
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dec:	2302      	movs	r3, #2
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002df0:	2304      	movs	r3, #4
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df4:	f107 0320 	add.w	r3, r7, #32
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 faa3 	bl	8005344 <HAL_RCC_OscConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e04:	f000 f832 	bl	8002e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e08:	230f      	movs	r3, #15
 8002e0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	2105      	movs	r1, #5
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fd04 	bl	8005834 <HAL_RCC_ClockConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e32:	f000 f81b 	bl	8002e6c <Error_Handler>
  }
}
 8002e36:	bf00      	nop
 8002e38:	3750      	adds	r7, #80	; 0x50
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000

08002e48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e5a:	f000 fced 	bl	8003838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40000800 	.word	0x40000800

08002e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e70:	b672      	cpsid	i
}
 8002e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <Error_Handler+0x8>
	...

08002e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_MspInit+0x54>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_MspInit+0x54>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_MspInit+0x54>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_MspInit+0x54>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <HAL_MspInit+0x54>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_MspInit+0x54>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	210f      	movs	r1, #15
 8002eba:	f06f 0001 	mvn.w	r0, #1
 8002ebe:	f001 fc4f 	bl	8004760 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	; 0x38
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_InitTick+0xe4>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	4a32      	ldr	r2, [pc, #200]	; (8002fb4 <HAL_InitTick+0xe4>)
 8002eea:	f043 0304 	orr.w	r3, r3, #4
 8002eee:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef0:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_InitTick+0xe4>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002efc:	f107 0210 	add.w	r2, r7, #16
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fe74 	bl	8005bf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f16:	f002 fe45 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8002f1a:	6378      	str	r0, [r7, #52]	; 0x34
 8002f1c:	e004      	b.n	8002f28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f1e:	f002 fe41 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8002f22:	4603      	mov	r3, r0
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <HAL_InitTick+0xe8>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	3b01      	subs	r3, #1
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002f36:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_InitTick+0xec>)
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <HAL_InitTick+0xf0>)
 8002f3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <HAL_InitTick+0xec>)
 8002f3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f42:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_InitTick+0xec>)
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_InitTick+0xec>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_InitTick+0xec>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f56:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_InitTick+0xec>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002f5c:	4817      	ldr	r0, [pc, #92]	; (8002fbc <HAL_InitTick+0xec>)
 8002f5e:	f002 fe7b 	bl	8005c58 <HAL_TIM_Base_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002f70:	4812      	ldr	r0, [pc, #72]	; (8002fbc <HAL_InitTick+0xec>)
 8002f72:	f002 fecb 	bl	8005d0c <HAL_TIM_Base_Start_IT>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f84:	201e      	movs	r0, #30
 8002f86:	f001 fc07 	bl	8004798 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d808      	bhi.n	8002fa2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	201e      	movs	r0, #30
 8002f96:	f001 fbe3 	bl	8004760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_InitTick+0xf4>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e002      	b.n	8002fa8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3738      	adds	r7, #56	; 0x38
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	20000658 	.word	0x20000658
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	200000ac 	.word	0x200000ac

08002fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <NMI_Handler+0x4>

08002fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <DMA1_Stream1_IRQHandler+0x10>)
 8002ffa:	f001 fd73 	bl	8004ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000814 	.word	0x20000814

08003008 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <DMA1_Stream3_IRQHandler+0x10>)
 800300e:	f001 fd69 	bl	8004ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200007b4 	.word	0x200007b4

0800301c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <DMA1_Stream4_IRQHandler+0x10>)
 8003022:	f001 fd5f 	bl	8004ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000874 	.word	0x20000874

08003030 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <CAN1_RX0_IRQHandler+0x10>)
 8003036:	f001 f8ab 	bl	8004190 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200003c4 	.word	0x200003c4

08003044 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <TIM4_IRQHandler+0x10>)
 800304a:	f002 fecf 	bl	8005dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000658 	.word	0x20000658

08003058 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <DMA2_Stream1_IRQHandler+0x10>)
 800305e:	f001 fd41 	bl	8004ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200008d4 	.word	0x200008d4

0800306c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <DMA2_Stream6_IRQHandler+0x10>)
 8003072:	f001 fd37 	bl	8004ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000934 	.word	0x20000934

08003080 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003084:	4802      	ldr	r0, [pc, #8]	; (8003090 <USART6_IRQHandler+0x10>)
 8003086:	f003 fa59 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000770 	.word	0x20000770

08003094 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <UART7_IRQHandler+0x10>)
 800309a:	f003 fa4f 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200006a4 	.word	0x200006a4

080030a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return 1;
 80030ac:	2301      	movs	r3, #1
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <_kill>:

int _kill(int pid, int sig)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030c2:	f006 fd63 	bl	8009b8c <__errno>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2216      	movs	r2, #22
 80030ca:	601a      	str	r2, [r3, #0]
  return -1;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_exit>:

void _exit (int status)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ffe7 	bl	80030b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030ea:	e7fe      	b.n	80030ea <_exit+0x12>

080030ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e00a      	b.n	8003114 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030fe:	f3af 8000 	nop.w
 8003102:	4601      	mov	r1, r0
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	b2ca      	uxtb	r2, r1
 800310c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3301      	adds	r3, #1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	dbf0      	blt.n	80030fe <_read+0x12>
  }

  return len;
 800311c:	687b      	ldr	r3, [r7, #4]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e009      	b.n	800314c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	60ba      	str	r2, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3301      	adds	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	dbf1      	blt.n	8003138 <_write+0x12>
  }
  return len;
 8003154:	687b      	ldr	r3, [r7, #4]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <_close>:

int _close(int file)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003186:	605a      	str	r2, [r3, #4]
  return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <_isatty>:

int _isatty(int file)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <_sbrk+0x5c>)
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <_sbrk+0x60>)
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <_sbrk+0x64>)
 80031e6:	4a12      	ldr	r2, [pc, #72]	; (8003230 <_sbrk+0x68>)
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <_sbrk+0x64>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f8:	f006 fcc8 	bl	8009b8c <__errno>
 80031fc:	4603      	mov	r3, r0
 80031fe:	220c      	movs	r2, #12
 8003200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003206:	e009      	b.n	800321c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	4a05      	ldr	r2, [pc, #20]	; (800322c <_sbrk+0x64>)
 8003218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20030000 	.word	0x20030000
 8003228:	00000400 	.word	0x00000400
 800322c:	200006a0 	.word	0x200006a0
 8003230:	20004700 	.word	0x20004700

08003234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <SystemInit+0x20>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	4a05      	ldr	r2, [pc, #20]	; (8003254 <SystemInit+0x20>)
 8003240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <MX_UART7_Init+0x4c>)
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <MX_UART7_Init+0x50>)
 8003260:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <MX_UART7_Init+0x4c>)
 8003264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003268:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <MX_UART7_Init+0x4c>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <MX_UART7_Init+0x4c>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <MX_UART7_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <MX_UART7_Init+0x4c>)
 800327e:	220c      	movs	r2, #12
 8003280:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <MX_UART7_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <MX_UART7_Init+0x4c>)
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800328e:	4805      	ldr	r0, [pc, #20]	; (80032a4 <MX_UART7_Init+0x4c>)
 8003290:	f002 ff90 	bl	80061b4 <HAL_UART_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800329a:	f7ff fde7 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200006a4 	.word	0x200006a4
 80032a8:	40007800 	.word	0x40007800

080032ac <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032b2:	4a12      	ldr	r2, [pc, #72]	; (80032fc <MX_UART8_Init+0x50>)
 80032b4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032bc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032d2:	220c      	movs	r2, #12
 80032d4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80032e2:	4805      	ldr	r0, [pc, #20]	; (80032f8 <MX_UART8_Init+0x4c>)
 80032e4:	f002 ff66 	bl	80061b4 <HAL_UART_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80032ee:	f7ff fdbd 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200006e8 	.word	0x200006e8
 80032fc:	40007c00 	.word	0x40007c00

08003300 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <MX_USART3_UART_Init+0x4c>)
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <MX_USART3_UART_Init+0x50>)
 8003308:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <MX_USART3_UART_Init+0x4c>)
 800330c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003310:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <MX_USART3_UART_Init+0x4c>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <MX_USART3_UART_Init+0x4c>)
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <MX_USART3_UART_Init+0x4c>)
 8003320:	2200      	movs	r2, #0
 8003322:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <MX_USART3_UART_Init+0x4c>)
 8003326:	220c      	movs	r2, #12
 8003328:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <MX_USART3_UART_Init+0x4c>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <MX_USART3_UART_Init+0x4c>)
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003336:	4805      	ldr	r0, [pc, #20]	; (800334c <MX_USART3_UART_Init+0x4c>)
 8003338:	f002 ff3c 	bl	80061b4 <HAL_UART_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003342:	f7ff fd93 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	2000072c 	.word	0x2000072c
 8003350:	40004800 	.word	0x40004800

08003354 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <MX_USART6_UART_Init+0x50>)
 800335c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 8003360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003364:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 800337a:	220c      	movs	r2, #12
 800337c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <MX_USART6_UART_Init+0x4c>)
 800338c:	f002 ff12 	bl	80061b4 <HAL_UART_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003396:	f7ff fd69 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000770 	.word	0x20000770
 80033a4:	40011400 	.word	0x40011400

080033a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b090      	sub	sp, #64	; 0x40
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a94      	ldr	r2, [pc, #592]	; (8003618 <HAL_UART_MspInit+0x270>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d164      	bne.n	8003494 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ce:	4b93      	ldr	r3, [pc, #588]	; (800361c <HAL_UART_MspInit+0x274>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a92      	ldr	r2, [pc, #584]	; (800361c <HAL_UART_MspInit+0x274>)
 80033d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b90      	ldr	r3, [pc, #576]	; (800361c <HAL_UART_MspInit+0x274>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	4b8c      	ldr	r3, [pc, #560]	; (800361c <HAL_UART_MspInit+0x274>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a8b      	ldr	r2, [pc, #556]	; (800361c <HAL_UART_MspInit+0x274>)
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b89      	ldr	r3, [pc, #548]	; (800361c <HAL_UART_MspInit+0x274>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8003402:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003410:	2303      	movs	r3, #3
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003414:	2308      	movs	r3, #8
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341c:	4619      	mov	r1, r3
 800341e:	4880      	ldr	r0, [pc, #512]	; (8003620 <HAL_UART_MspInit+0x278>)
 8003420:	f001 fdca 	bl	8004fb8 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8003424:	4b7f      	ldr	r3, [pc, #508]	; (8003624 <HAL_UART_MspInit+0x27c>)
 8003426:	4a80      	ldr	r2, [pc, #512]	; (8003628 <HAL_UART_MspInit+0x280>)
 8003428:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800342a:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_UART_MspInit+0x27c>)
 800342c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003430:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003432:	4b7c      	ldr	r3, [pc, #496]	; (8003624 <HAL_UART_MspInit+0x27c>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003438:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_UART_MspInit+0x27c>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800343e:	4b79      	ldr	r3, [pc, #484]	; (8003624 <HAL_UART_MspInit+0x27c>)
 8003440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003444:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003446:	4b77      	ldr	r3, [pc, #476]	; (8003624 <HAL_UART_MspInit+0x27c>)
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344c:	4b75      	ldr	r3, [pc, #468]	; (8003624 <HAL_UART_MspInit+0x27c>)
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8003452:	4b74      	ldr	r3, [pc, #464]	; (8003624 <HAL_UART_MspInit+0x27c>)
 8003454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003458:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800345a:	4b72      	ldr	r3, [pc, #456]	; (8003624 <HAL_UART_MspInit+0x27c>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003460:	4b70      	ldr	r3, [pc, #448]	; (8003624 <HAL_UART_MspInit+0x27c>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8003466:	486f      	ldr	r0, [pc, #444]	; (8003624 <HAL_UART_MspInit+0x27c>)
 8003468:	f001 f9a4 	bl	80047b4 <HAL_DMA_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003472:	f7ff fcfb 	bl	8002e6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a6a      	ldr	r2, [pc, #424]	; (8003624 <HAL_UART_MspInit+0x27c>)
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
 800347c:	4a69      	ldr	r2, [pc, #420]	; (8003624 <HAL_UART_MspInit+0x27c>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 7, 0);
 8003482:	2200      	movs	r2, #0
 8003484:	2107      	movs	r1, #7
 8003486:	2052      	movs	r0, #82	; 0x52
 8003488:	f001 f96a 	bl	8004760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800348c:	2052      	movs	r0, #82	; 0x52
 800348e:	f001 f983 	bl	8004798 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003492:	e173      	b.n	800377c <HAL_UART_MspInit+0x3d4>
  else if(uartHandle->Instance==UART8)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a64      	ldr	r2, [pc, #400]	; (800362c <HAL_UART_MspInit+0x284>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12c      	bne.n	80034f8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART8_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	4b5e      	ldr	r3, [pc, #376]	; (800361c <HAL_UART_MspInit+0x274>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a5d      	ldr	r2, [pc, #372]	; (800361c <HAL_UART_MspInit+0x274>)
 80034a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
 80034ae:	4b5b      	ldr	r3, [pc, #364]	; (800361c <HAL_UART_MspInit+0x274>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_UART_MspInit+0x274>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a56      	ldr	r2, [pc, #344]	; (800361c <HAL_UART_MspInit+0x274>)
 80034c4:	f043 0310 	orr.w	r3, r3, #16
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b54      	ldr	r3, [pc, #336]	; (800361c <HAL_UART_MspInit+0x274>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80034d6:	2303      	movs	r3, #3
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	2303      	movs	r3, #3
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80034e6:	2308      	movs	r3, #8
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ee:	4619      	mov	r1, r3
 80034f0:	484b      	ldr	r0, [pc, #300]	; (8003620 <HAL_UART_MspInit+0x278>)
 80034f2:	f001 fd61 	bl	8004fb8 <HAL_GPIO_Init>
}
 80034f6:	e141      	b.n	800377c <HAL_UART_MspInit+0x3d4>
  else if(uartHandle->Instance==USART3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a4c      	ldr	r2, [pc, #304]	; (8003630 <HAL_UART_MspInit+0x288>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f040 80a2 	bne.w	8003648 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	4b44      	ldr	r3, [pc, #272]	; (800361c <HAL_UART_MspInit+0x274>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	4a43      	ldr	r2, [pc, #268]	; (800361c <HAL_UART_MspInit+0x274>)
 800350e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003512:	6413      	str	r3, [r2, #64]	; 0x40
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_UART_MspInit+0x274>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_UART_MspInit+0x274>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4a3c      	ldr	r2, [pc, #240]	; (800361c <HAL_UART_MspInit+0x274>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6313      	str	r3, [r2, #48]	; 0x30
 8003530:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_UART_MspInit+0x274>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800353c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800354e:	2307      	movs	r3, #7
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003556:	4619      	mov	r1, r3
 8003558:	4836      	ldr	r0, [pc, #216]	; (8003634 <HAL_UART_MspInit+0x28c>)
 800355a:	f001 fd2d 	bl	8004fb8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_UART_MspInit+0x290>)
 8003560:	4a36      	ldr	r2, [pc, #216]	; (800363c <HAL_UART_MspInit+0x294>)
 8003562:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_UART_MspInit+0x290>)
 8003566:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800356a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <HAL_UART_MspInit+0x290>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <HAL_UART_MspInit+0x290>)
 8003574:	2200      	movs	r2, #0
 8003576:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003578:	4b2f      	ldr	r3, [pc, #188]	; (8003638 <HAL_UART_MspInit+0x290>)
 800357a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800357e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003580:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_UART_MspInit+0x290>)
 8003582:	2200      	movs	r2, #0
 8003584:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HAL_UART_MspInit+0x290>)
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800358c:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_UART_MspInit+0x290>)
 800358e:	2200      	movs	r2, #0
 8003590:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_UART_MspInit+0x290>)
 8003594:	2200      	movs	r2, #0
 8003596:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003598:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_UART_MspInit+0x290>)
 800359a:	2200      	movs	r2, #0
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800359e:	4826      	ldr	r0, [pc, #152]	; (8003638 <HAL_UART_MspInit+0x290>)
 80035a0:	f001 f908 	bl	80047b4 <HAL_DMA_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_UART_MspInit+0x206>
      Error_Handler();
 80035aa:	f7ff fc5f 	bl	8002e6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_UART_MspInit+0x290>)
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
 80035b4:	4a20      	ldr	r2, [pc, #128]	; (8003638 <HAL_UART_MspInit+0x290>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035bc:	4a21      	ldr	r2, [pc, #132]	; (8003644 <HAL_UART_MspInit+0x29c>)
 80035be:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035c2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80035c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035da:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80035fa:	4811      	ldr	r0, [pc, #68]	; (8003640 <HAL_UART_MspInit+0x298>)
 80035fc:	f001 f8da 	bl	80047b4 <HAL_DMA_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_UART_MspInit+0x262>
      Error_Handler();
 8003606:	f7ff fc31 	bl	8002e6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <HAL_UART_MspInit+0x298>)
 800360e:	635a      	str	r2, [r3, #52]	; 0x34
 8003610:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <HAL_UART_MspInit+0x298>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003616:	e0b1      	b.n	800377c <HAL_UART_MspInit+0x3d4>
 8003618:	40007800 	.word	0x40007800
 800361c:	40023800 	.word	0x40023800
 8003620:	40021000 	.word	0x40021000
 8003624:	200007b4 	.word	0x200007b4
 8003628:	40026058 	.word	0x40026058
 800362c:	40007c00 	.word	0x40007c00
 8003630:	40004800 	.word	0x40004800
 8003634:	40020800 	.word	0x40020800
 8003638:	20000814 	.word	0x20000814
 800363c:	40026028 	.word	0x40026028
 8003640:	20000874 	.word	0x20000874
 8003644:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==USART6)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a4d      	ldr	r2, [pc, #308]	; (8003784 <HAL_UART_MspInit+0x3dc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	f040 8094 	bne.w	800377c <HAL_UART_MspInit+0x3d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_UART_MspInit+0x3e0>)
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	4a4a      	ldr	r2, [pc, #296]	; (8003788 <HAL_UART_MspInit+0x3e0>)
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	6453      	str	r3, [r2, #68]	; 0x44
 8003664:	4b48      	ldr	r3, [pc, #288]	; (8003788 <HAL_UART_MspInit+0x3e0>)
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_UART_MspInit+0x3e0>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a43      	ldr	r2, [pc, #268]	; (8003788 <HAL_UART_MspInit+0x3e0>)
 800367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367e:	6313      	str	r3, [r2, #48]	; 0x30
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_UART_MspInit+0x3e0>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800368c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369a:	2303      	movs	r3, #3
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800369e:	2308      	movs	r3, #8
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a6:	4619      	mov	r1, r3
 80036a8:	4838      	ldr	r0, [pc, #224]	; (800378c <HAL_UART_MspInit+0x3e4>)
 80036aa:	f001 fc85 	bl	8004fb8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80036ae:	4b38      	ldr	r3, [pc, #224]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036b0:	4a38      	ldr	r2, [pc, #224]	; (8003794 <HAL_UART_MspInit+0x3ec>)
 80036b2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80036b4:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036b6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80036ba:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036bc:	4b34      	ldr	r3, [pc, #208]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c2:	4b33      	ldr	r3, [pc, #204]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ce:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80036dc:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036ea:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ec:	4b28      	ldr	r3, [pc, #160]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80036f2:	4827      	ldr	r0, [pc, #156]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 80036f4:	f001 f85e 	bl	80047b4 <HAL_DMA_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_UART_MspInit+0x35a>
      Error_Handler();
 80036fe:	f7ff fbb5 	bl	8002e6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a22      	ldr	r2, [pc, #136]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
 8003708:	4a21      	ldr	r2, [pc, #132]	; (8003790 <HAL_UART_MspInit+0x3e8>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800370e:	4b22      	ldr	r3, [pc, #136]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <HAL_UART_MspInit+0x3f4>)
 8003712:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003716:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800371a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800371c:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003724:	2200      	movs	r2, #0
 8003726:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 800372a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800372e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003732:	2200      	movs	r2, #0
 8003734:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003748:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 800374c:	2200      	movs	r2, #0
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003750:	4811      	ldr	r0, [pc, #68]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003752:	f001 f82f 	bl	80047b4 <HAL_DMA_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_UART_MspInit+0x3b8>
      Error_Handler();
 800375c:	f7ff fb86 	bl	8002e6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003764:	635a      	str	r2, [r3, #52]	; 0x34
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_UART_MspInit+0x3f0>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800376c:	2200      	movs	r2, #0
 800376e:	2105      	movs	r1, #5
 8003770:	2047      	movs	r0, #71	; 0x47
 8003772:	f000 fff5 	bl	8004760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003776:	2047      	movs	r0, #71	; 0x47
 8003778:	f001 f80e 	bl	8004798 <HAL_NVIC_EnableIRQ>
}
 800377c:	bf00      	nop
 800377e:	3740      	adds	r7, #64	; 0x40
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40011400 	.word	0x40011400
 8003788:	40023800 	.word	0x40023800
 800378c:	40021800 	.word	0x40021800
 8003790:	200008d4 	.word	0x200008d4
 8003794:	40026428 	.word	0x40026428
 8003798:	20000934 	.word	0x20000934
 800379c:	400264a0 	.word	0x400264a0

080037a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037a4:	480d      	ldr	r0, [pc, #52]	; (80037dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037a6:	490e      	ldr	r1, [pc, #56]	; (80037e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037a8:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ac:	e002      	b.n	80037b4 <LoopCopyDataInit>

080037ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b2:	3304      	adds	r3, #4

080037b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b8:	d3f9      	bcc.n	80037ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ba:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037bc:	4c0b      	ldr	r4, [pc, #44]	; (80037ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80037be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c0:	e001      	b.n	80037c6 <LoopFillZerobss>

080037c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c4:	3204      	adds	r2, #4

080037c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c8:	d3fb      	bcc.n	80037c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037ca:	f7ff fd33 	bl	8003234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ce:	f006 f9e3 	bl	8009b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d2:	f7ff faaf 	bl	8002d34 <main>
  bx  lr    
 80037d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80037dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e0:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80037e4:	0800ea74 	.word	0x0800ea74
  ldr r2, =_sbss
 80037e8:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 80037ec:	200046fc 	.word	0x200046fc

080037f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f0:	e7fe      	b.n	80037f0 <ADC_IRQHandler>
	...

080037f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <HAL_Init+0x40>)
 80037fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_Init+0x40>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <HAL_Init+0x40>)
 800380a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <HAL_Init+0x40>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800381c:	2003      	movs	r0, #3
 800381e:	f000 ff94 	bl	800474a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003822:	200f      	movs	r0, #15
 8003824:	f7ff fb54 	bl	8002ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003828:	f7ff fb26 	bl	8002e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00

08003838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_IncTick+0x20>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_IncTick+0x24>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4413      	add	r3, r2
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_IncTick+0x24>)
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200000b0 	.word	0x200000b0
 800385c:	20000994 	.word	0x20000994

08003860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return uwTick;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_GetTick+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000994 	.word	0x20000994

08003878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003880:	f7ff ffee 	bl	8003860 <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003890:	d005      	beq.n	800389e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_Delay+0x44>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800389e:	bf00      	nop
 80038a0:	f7ff ffde 	bl	8003860 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d8f7      	bhi.n	80038a0 <HAL_Delay+0x28>
  {
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200000b0 	.word	0x200000b0

080038c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0ed      	b.n	8003aae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe ffe4 	bl	80028ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f4:	f7ff ffb4 	bl	8003860 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038fa:	e012      	b.n	8003922 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038fc:	f7ff ffb0 	bl	8003860 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b0a      	cmp	r3, #10
 8003908:	d90b      	bls.n	8003922 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2205      	movs	r2, #5
 800391a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0c5      	b.n	8003aae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0e5      	beq.n	80038fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0202 	bic.w	r2, r2, #2
 800393e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003940:	f7ff ff8e 	bl	8003860 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003946:	e012      	b.n	800396e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003948:	f7ff ff8a 	bl	8003860 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b0a      	cmp	r3, #10
 8003954:	d90b      	bls.n	800396e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2205      	movs	r2, #5
 8003966:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e09f      	b.n	8003aae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7e1b      	ldrb	r3, [r3, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d108      	bne.n	8003996 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e007      	b.n	80039a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7e5b      	ldrb	r3, [r3, #25]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d108      	bne.n	80039c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e007      	b.n	80039d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7e9b      	ldrb	r3, [r3, #26]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d108      	bne.n	80039ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0220 	orr.w	r2, r2, #32
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e007      	b.n	80039fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0220 	bic.w	r2, r2, #32
 80039f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7edb      	ldrb	r3, [r3, #27]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d108      	bne.n	8003a14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0210 	bic.w	r2, r2, #16
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e007      	b.n	8003a24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0210 	orr.w	r2, r2, #16
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7f1b      	ldrb	r3, [r3, #28]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d108      	bne.n	8003a3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0208 	orr.w	r2, r2, #8
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e007      	b.n	8003a4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7f5b      	ldrb	r3, [r3, #29]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d108      	bne.n	8003a68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0204 	orr.w	r2, r2, #4
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e007      	b.n	8003a78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	ea42 0103 	orr.w	r1, r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ace:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d003      	beq.n	8003ade <HAL_CAN_ConfigFilter+0x26>
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f040 80be 	bne.w	8003c5a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003ade:	4b65      	ldr	r3, [pc, #404]	; (8003c74 <HAL_CAN_ConfigFilter+0x1bc>)
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003af8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2201      	movs	r2, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	401a      	ands	r2, r3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d123      	bne.n	8003b88 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3248      	adds	r2, #72	; 0x48
 8003b68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	3348      	adds	r3, #72	; 0x48
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d122      	bne.n	8003bd6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bb0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3248      	adds	r2, #72	; 0x48
 8003bb6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bcc:	6979      	ldr	r1, [r7, #20]
 8003bce:	3348      	adds	r3, #72	; 0x48
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	401a      	ands	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003bf0:	e007      	b.n	8003c02 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	401a      	ands	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c1c:	e007      	b.n	8003c2e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c4c:	f023 0201 	bic.w	r2, r3, #1
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e006      	b.n	8003c68 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40006400 	.word	0x40006400

08003c78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d12e      	bne.n	8003cea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca4:	f7ff fddc 	bl	8003860 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003caa:	e012      	b.n	8003cd2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cac:	f7ff fdd8 	bl	8003860 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b0a      	cmp	r3, #10
 8003cb8:	d90b      	bls.n	8003cd2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2205      	movs	r2, #5
 8003cca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e012      	b.n	8003cf8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e006      	b.n	8003cf8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
  }
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d1e:	7ffb      	ldrb	r3, [r7, #31]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d003      	beq.n	8003d2c <HAL_CAN_AddTxMessage+0x2c>
 8003d24:	7ffb      	ldrb	r3, [r7, #31]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	f040 80b8 	bne.w	8003e9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80a0 	beq.w	8003e8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	0e1b      	lsrs	r3, r3, #24
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d907      	bls.n	8003d6c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e09e      	b.n	8003eaa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	409a      	lsls	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	6809      	ldr	r1, [r1, #0]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3318      	adds	r3, #24
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	440b      	add	r3, r1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e00f      	b.n	8003dba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003da4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003daa:	68f9      	ldr	r1, [r7, #12]
 8003dac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003dae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3318      	adds	r3, #24
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	440b      	add	r3, r1
 8003db8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	440b      	add	r3, r1
 8003dca:	3304      	adds	r3, #4
 8003dcc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	7d1b      	ldrb	r3, [r3, #20]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d111      	bne.n	8003dfa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3318      	adds	r3, #24
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	6811      	ldr	r1, [r2, #0]
 8003dea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3318      	adds	r3, #24
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	440b      	add	r3, r1
 8003df6:	3304      	adds	r3, #4
 8003df8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3307      	adds	r3, #7
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	061a      	lsls	r2, r3, #24
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3306      	adds	r3, #6
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3305      	adds	r3, #5
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	4313      	orrs	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	3204      	adds	r2, #4
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6811      	ldr	r1, [r2, #0]
 8003e22:	ea43 0200 	orr.w	r2, r3, r0
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003e30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3303      	adds	r3, #3
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	061a      	lsls	r2, r3, #24
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3301      	adds	r3, #1
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	4610      	mov	r0, r2
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	6811      	ldr	r1, [r2, #0]
 8003e58:	ea43 0200 	orr.w	r2, r3, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003e66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3318      	adds	r3, #24
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	4413      	add	r3, r2
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	6811      	ldr	r1, [r2, #0]
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	3318      	adds	r3, #24
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	440b      	add	r3, r1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e00e      	b.n	8003eaa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e006      	b.n	8003eaa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003eca:	7afb      	ldrb	r3, [r7, #11]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d002      	beq.n	8003ed6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003ed0:	7afb      	ldrb	r3, [r7, #11]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d11d      	bne.n	8003f12 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3301      	adds	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d003      	beq.n	8003f44 <HAL_CAN_GetRxMessage+0x24>
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	f040 80f3 	bne.w	800412a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10e      	bne.n	8003f68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d116      	bne.n	8003f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0e7      	b.n	8004138 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0d8      	b.n	8004138 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	331b      	adds	r3, #27
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	4413      	add	r3, r2
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0204 	and.w	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10c      	bne.n	8003fbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	331b      	adds	r3, #27
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	4413      	add	r3, r2
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0d5b      	lsrs	r3, r3, #21
 8003fb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e00b      	b.n	8003fd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	331b      	adds	r3, #27
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4413      	add	r3, r2
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	331b      	adds	r3, #27
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0202 	and.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	331b      	adds	r3, #27
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	331b      	adds	r3, #27
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	b2da      	uxtb	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	331b      	adds	r3, #27
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	4413      	add	r3, r2
 800403e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	4413      	add	r3, r2
 8004054:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	0a1a      	lsrs	r2, r3, #8
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0c1a      	lsrs	r2, r3, #16
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3302      	adds	r3, #2
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	4413      	add	r3, r2
 8004088:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	0e1a      	lsrs	r2, r3, #24
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	3303      	adds	r3, #3
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	3304      	adds	r3, #4
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0a1a      	lsrs	r2, r3, #8
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	3305      	adds	r3, #5
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	0c1a      	lsrs	r2, r3, #16
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	3306      	adds	r3, #6
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e1a      	lsrs	r2, r3, #24
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	3307      	adds	r3, #7
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d108      	bne.n	8004116 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	e007      	b.n	8004126 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e006      	b.n	8004138 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004154:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d002      	beq.n	8004162 <HAL_CAN_ActivateNotification+0x1e>
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d109      	bne.n	8004176 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6959      	ldr	r1, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e006      	b.n	8004184 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d07c      	beq.n	80042d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f983 	bl	80044fe <HAL_CAN_TxMailbox0CompleteCallback>
 80041f8:	e016      	b.n	8004228 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	e00c      	b.n	8004228 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
 8004220:	e002      	b.n	8004228 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f989 	bl	800453a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d024      	beq.n	800427c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f963 	bl	8004512 <HAL_CAN_TxMailbox1CompleteCallback>
 800424c:	e016      	b.n	800427c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
 8004260:	e00c      	b.n	800427c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	e002      	b.n	800427c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f969 	bl	800454e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d024      	beq.n	80042d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800428e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f943 	bl	8004526 <HAL_CAN_TxMailbox2CompleteCallback>
 80042a0:	e016      	b.n	80042d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	e00c      	b.n	80042d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
 80042c8:	e002      	b.n	80042d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f949 	bl	8004562 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f930 	bl	8004576 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fc feca 	bl	80010c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d006      	beq.n	800437a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f912 	bl	800459e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8f9 	bl	800458a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2210      	movs	r2, #16
 80043b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8fc 	bl	80045b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2208      	movs	r2, #8
 80043d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8f5 	bl	80045c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d07b      	beq.n	80044de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d072      	beq.n	80044d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f043 0304 	orr.w	r3, r3, #4
 8004442:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444a:	2b00      	cmp	r3, #0
 800444c:	d043      	beq.n	80044d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004454:	2b00      	cmp	r3, #0
 8004456:	d03e      	beq.n	80044d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800445e:	2b60      	cmp	r3, #96	; 0x60
 8004460:	d02b      	beq.n	80044ba <HAL_CAN_IRQHandler+0x32a>
 8004462:	2b60      	cmp	r3, #96	; 0x60
 8004464:	d82e      	bhi.n	80044c4 <HAL_CAN_IRQHandler+0x334>
 8004466:	2b50      	cmp	r3, #80	; 0x50
 8004468:	d022      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x320>
 800446a:	2b50      	cmp	r3, #80	; 0x50
 800446c:	d82a      	bhi.n	80044c4 <HAL_CAN_IRQHandler+0x334>
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d019      	beq.n	80044a6 <HAL_CAN_IRQHandler+0x316>
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d826      	bhi.n	80044c4 <HAL_CAN_IRQHandler+0x334>
 8004476:	2b30      	cmp	r3, #48	; 0x30
 8004478:	d010      	beq.n	800449c <HAL_CAN_IRQHandler+0x30c>
 800447a:	2b30      	cmp	r3, #48	; 0x30
 800447c:	d822      	bhi.n	80044c4 <HAL_CAN_IRQHandler+0x334>
 800447e:	2b10      	cmp	r3, #16
 8004480:	d002      	beq.n	8004488 <HAL_CAN_IRQHandler+0x2f8>
 8004482:	2b20      	cmp	r3, #32
 8004484:	d005      	beq.n	8004492 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004486:	e01d      	b.n	80044c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f043 0308 	orr.w	r3, r3, #8
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004490:	e019      	b.n	80044c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	f043 0310 	orr.w	r3, r3, #16
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800449a:	e014      	b.n	80044c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	f043 0320 	orr.w	r3, r3, #32
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044a4:	e00f      	b.n	80044c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044ae:	e00a      	b.n	80044c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044b8:	e005      	b.n	80044c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044c2:	e000      	b.n	80044c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80044c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80044d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2204      	movs	r2, #4
 80044dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f872 	bl	80045da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80044f6:	bf00      	nop
 80044f8:	3728      	adds	r7, #40	; 0x28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800460c:	4013      	ands	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800461c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004622:	4a04      	ldr	r2, [pc, #16]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	60d3      	str	r3, [r2, #12]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_GetPriorityGrouping+0x18>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 0307 	and.w	r3, r3, #7
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db0b      	blt.n	800467e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	4907      	ldr	r1, [pc, #28]	; (800468c <__NVIC_EnableIRQ+0x38>)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2001      	movs	r0, #1
 8004676:	fa00 f202 	lsl.w	r2, r0, r2
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e100 	.word	0xe000e100

08004690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	db0a      	blt.n	80046ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	490c      	ldr	r1, [pc, #48]	; (80046dc <__NVIC_SetPriority+0x4c>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	440b      	add	r3, r1
 80046b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b8:	e00a      	b.n	80046d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4908      	ldr	r1, [pc, #32]	; (80046e0 <__NVIC_SetPriority+0x50>)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	3b04      	subs	r3, #4
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	440b      	add	r3, r1
 80046ce:	761a      	strb	r2, [r3, #24]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000e100 	.word	0xe000e100
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	bf28      	it	cs
 8004702:	2304      	movcs	r3, #4
 8004704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3304      	adds	r3, #4
 800470a:	2b06      	cmp	r3, #6
 800470c:	d902      	bls.n	8004714 <NVIC_EncodePriority+0x30>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3b03      	subs	r3, #3
 8004712:	e000      	b.n	8004716 <NVIC_EncodePriority+0x32>
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	401a      	ands	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800472c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	43d9      	mvns	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	4313      	orrs	r3, r2
         );
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ff4c 	bl	80045f0 <__NVIC_SetPriorityGrouping>
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004772:	f7ff ff61 	bl	8004638 <__NVIC_GetPriorityGrouping>
 8004776:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	6978      	ldr	r0, [r7, #20]
 800477e:	f7ff ffb1 	bl	80046e4 <NVIC_EncodePriority>
 8004782:	4602      	mov	r2, r0
 8004784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff80 	bl	8004690 <__NVIC_SetPriority>
}
 8004790:	bf00      	nop
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff54 	bl	8004654 <__NVIC_EnableIRQ>
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7ff f84e 	bl	8003860 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e099      	b.n	8004904 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0201 	bic.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f0:	e00f      	b.n	8004812 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047f2:	f7ff f835 	bl	8003860 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d908      	bls.n	8004812 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2203      	movs	r2, #3
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e078      	b.n	8004904 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e8      	bne.n	80047f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4b38      	ldr	r3, [pc, #224]	; (800490c <HAL_DMA_Init+0x158>)
 800482c:	4013      	ands	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	2b04      	cmp	r3, #4
 800486a:	d107      	bne.n	800487c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	4313      	orrs	r3, r2
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 0307 	bic.w	r3, r3, #7
 8004892:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d117      	bne.n	80048d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fb01 	bl	8004ec0 <DMA_CheckFifoParam>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2240      	movs	r2, #64	; 0x40
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048d2:	2301      	movs	r3, #1
 80048d4:	e016      	b.n	8004904 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fab8 	bl	8004e54 <DMA_CalcBaseAndBitshift>
 80048e4:	4603      	mov	r3, r0
 80048e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	223f      	movs	r2, #63	; 0x3f
 80048ee:	409a      	lsls	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	f010803f 	.word	0xf010803f

08004910 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_DMA_Start_IT+0x26>
 8004932:	2302      	movs	r3, #2
 8004934:	e040      	b.n	80049b8 <HAL_DMA_Start_IT+0xa8>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d12f      	bne.n	80049aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fa4a 	bl	8004df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004968:	223f      	movs	r2, #63	; 0x3f
 800496a:	409a      	lsls	r2, r3
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0216 	orr.w	r2, r2, #22
 800497e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0208 	orr.w	r2, r2, #8
 8004996:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e005      	b.n	80049b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
 80049b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ce:	f7fe ff47 	bl	8003860 <HAL_GetTick>
 80049d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d008      	beq.n	80049f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2280      	movs	r2, #128	; 0x80
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e052      	b.n	8004a98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0216 	bic.w	r2, r2, #22
 8004a00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <HAL_DMA_Abort+0x62>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0208 	bic.w	r2, r2, #8
 8004a30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0201 	bic.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a42:	e013      	b.n	8004a6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a44:	f7fe ff0c 	bl	8003860 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d90c      	bls.n	8004a6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e015      	b.n	8004a98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e4      	bne.n	8004a44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	223f      	movs	r2, #63	; 0x3f
 8004a80:	409a      	lsls	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d004      	beq.n	8004abe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00c      	b.n	8004ad8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2205      	movs	r2, #5
 8004ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004af0:	4b8e      	ldr	r3, [pc, #568]	; (8004d2c <HAL_DMA_IRQHandler+0x248>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a8e      	ldr	r2, [pc, #568]	; (8004d30 <HAL_DMA_IRQHandler+0x24c>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	0a9b      	lsrs	r3, r3, #10
 8004afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	2208      	movs	r2, #8
 8004b10:	409a      	lsls	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01a      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0204 	bic.w	r2, r2, #4
 8004b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	f043 0201 	orr.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d012      	beq.n	8004b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	2201      	movs	r2, #1
 8004b74:	409a      	lsls	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	f043 0202 	orr.w	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d012      	beq.n	8004bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	2204      	movs	r2, #4
 8004baa:	409a      	lsls	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d043      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d03c      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	2210      	movs	r2, #16
 8004be0:	409a      	lsls	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d018      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d108      	bne.n	8004c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d024      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
 8004c12:	e01f      	b.n	8004c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
 8004c24:	e016      	b.n	8004c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0208 	bic.w	r2, r2, #8
 8004c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2220      	movs	r2, #32
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 808f 	beq.w	8004d84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8087 	beq.w	8004d84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d136      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0216 	bic.w	r2, r2, #22
 8004c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x1da>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0208 	bic.w	r2, r2, #8
 8004ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	223f      	movs	r2, #63	; 0x3f
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d07e      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
        }
        return;
 8004cfa:	e079      	b.n	8004df0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01d      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10d      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d031      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e02c      	b.n	8004d84 <HAL_DMA_IRQHandler+0x2a0>
 8004d2a:	bf00      	nop
 8004d2c:	200000a8 	.word	0x200000a8
 8004d30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d023      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
 8004d44:	e01e      	b.n	8004d84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10f      	bne.n	8004d74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0210 	bic.w	r2, r2, #16
 8004d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d032      	beq.n	8004df2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d022      	beq.n	8004dde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d307      	bcc.n	8004dcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f2      	bne.n	8004db0 <HAL_DMA_IRQHandler+0x2cc>
 8004dca:	e000      	b.n	8004dce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004dcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
 8004dee:	e000      	b.n	8004df2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004df0:	bf00      	nop
    }
  }
}
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d108      	bne.n	8004e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e36:	e007      	b.n	8004e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3b10      	subs	r3, #16
 8004e64:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <DMA_CalcBaseAndBitshift+0x68>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d909      	bls.n	8004e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	659a      	str	r2, [r3, #88]	; 0x58
 8004e94:	e007      	b.n	8004ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	aaaaaaab 	.word	0xaaaaaaab
 8004ebc:	0800e5b8 	.word	0x0800e5b8

08004ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11f      	bne.n	8004f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d856      	bhi.n	8004f8e <DMA_CheckFifoParam+0xce>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <DMA_CheckFifoParam+0x28>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f0b 	.word	0x08004f0b
 8004ef0:	08004ef9 	.word	0x08004ef9
 8004ef4:	08004f8f 	.word	0x08004f8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d046      	beq.n	8004f92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e043      	b.n	8004f92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f12:	d140      	bne.n	8004f96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f18:	e03d      	b.n	8004f96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	d121      	bne.n	8004f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d837      	bhi.n	8004f9a <DMA_CheckFifoParam+0xda>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <DMA_CheckFifoParam+0x70>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f47 	.word	0x08004f47
 8004f38:	08004f41 	.word	0x08004f41
 8004f3c:	08004f59 	.word	0x08004f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
      break;
 8004f44:	e030      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d025      	beq.n	8004f9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f56:	e022      	b.n	8004f9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f60:	d11f      	bne.n	8004fa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f66:	e01c      	b.n	8004fa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d903      	bls.n	8004f76 <DMA_CheckFifoParam+0xb6>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d003      	beq.n	8004f7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f74:	e018      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7a:	e015      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00e      	beq.n	8004fa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8c:	e00b      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e00a      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e008      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e006      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e004      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e002      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fa6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b089      	sub	sp, #36	; 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e177      	b.n	80052c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	f040 8166 	bne.w	80052be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d005      	beq.n	800500a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005006:	2b02      	cmp	r3, #2
 8005008:	d130      	bne.n	800506c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	2203      	movs	r2, #3
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005040:	2201      	movs	r2, #1
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 0201 	and.w	r2, r3, #1
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	2b03      	cmp	r3, #3
 8005076:	d017      	beq.n	80050a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	2203      	movs	r2, #3
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d123      	bne.n	80050fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	08da      	lsrs	r2, r3, #3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3208      	adds	r2, #8
 80050bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	220f      	movs	r2, #15
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	08da      	lsrs	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3208      	adds	r2, #8
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	2203      	movs	r2, #3
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4013      	ands	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f003 0203 	and.w	r2, r3, #3
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80c0 	beq.w	80052be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	4b66      	ldr	r3, [pc, #408]	; (80052dc <HAL_GPIO_Init+0x324>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	4a65      	ldr	r2, [pc, #404]	; (80052dc <HAL_GPIO_Init+0x324>)
 8005148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800514c:	6453      	str	r3, [r2, #68]	; 0x44
 800514e:	4b63      	ldr	r3, [pc, #396]	; (80052dc <HAL_GPIO_Init+0x324>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800515a:	4a61      	ldr	r2, [pc, #388]	; (80052e0 <HAL_GPIO_Init+0x328>)
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	089b      	lsrs	r3, r3, #2
 8005160:	3302      	adds	r3, #2
 8005162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	220f      	movs	r2, #15
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a58      	ldr	r2, [pc, #352]	; (80052e4 <HAL_GPIO_Init+0x32c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d037      	beq.n	80051f6 <HAL_GPIO_Init+0x23e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a57      	ldr	r2, [pc, #348]	; (80052e8 <HAL_GPIO_Init+0x330>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d031      	beq.n	80051f2 <HAL_GPIO_Init+0x23a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a56      	ldr	r2, [pc, #344]	; (80052ec <HAL_GPIO_Init+0x334>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d02b      	beq.n	80051ee <HAL_GPIO_Init+0x236>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a55      	ldr	r2, [pc, #340]	; (80052f0 <HAL_GPIO_Init+0x338>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d025      	beq.n	80051ea <HAL_GPIO_Init+0x232>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a54      	ldr	r2, [pc, #336]	; (80052f4 <HAL_GPIO_Init+0x33c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01f      	beq.n	80051e6 <HAL_GPIO_Init+0x22e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a53      	ldr	r2, [pc, #332]	; (80052f8 <HAL_GPIO_Init+0x340>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d019      	beq.n	80051e2 <HAL_GPIO_Init+0x22a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a52      	ldr	r2, [pc, #328]	; (80052fc <HAL_GPIO_Init+0x344>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_GPIO_Init+0x226>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a51      	ldr	r2, [pc, #324]	; (8005300 <HAL_GPIO_Init+0x348>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00d      	beq.n	80051da <HAL_GPIO_Init+0x222>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a50      	ldr	r2, [pc, #320]	; (8005304 <HAL_GPIO_Init+0x34c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <HAL_GPIO_Init+0x21e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a4f      	ldr	r2, [pc, #316]	; (8005308 <HAL_GPIO_Init+0x350>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_GPIO_Init+0x21a>
 80051ce:	2309      	movs	r3, #9
 80051d0:	e012      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051d2:	230a      	movs	r3, #10
 80051d4:	e010      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051d6:	2308      	movs	r3, #8
 80051d8:	e00e      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051da:	2307      	movs	r3, #7
 80051dc:	e00c      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051de:	2306      	movs	r3, #6
 80051e0:	e00a      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051e2:	2305      	movs	r3, #5
 80051e4:	e008      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051e6:	2304      	movs	r3, #4
 80051e8:	e006      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051ea:	2303      	movs	r3, #3
 80051ec:	e004      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e002      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_GPIO_Init+0x240>
 80051f6:	2300      	movs	r3, #0
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	f002 0203 	and.w	r2, r2, #3
 80051fe:	0092      	lsls	r2, r2, #2
 8005200:	4093      	lsls	r3, r2
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005208:	4935      	ldr	r1, [pc, #212]	; (80052e0 <HAL_GPIO_Init+0x328>)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	089b      	lsrs	r3, r3, #2
 800520e:	3302      	adds	r3, #2
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005216:	4b3d      	ldr	r3, [pc, #244]	; (800530c <HAL_GPIO_Init+0x354>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800523a:	4a34      	ldr	r2, [pc, #208]	; (800530c <HAL_GPIO_Init+0x354>)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005240:	4b32      	ldr	r3, [pc, #200]	; (800530c <HAL_GPIO_Init+0x354>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005264:	4a29      	ldr	r2, [pc, #164]	; (800530c <HAL_GPIO_Init+0x354>)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800526a:	4b28      	ldr	r3, [pc, #160]	; (800530c <HAL_GPIO_Init+0x354>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	43db      	mvns	r3, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4013      	ands	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800528e:	4a1f      	ldr	r2, [pc, #124]	; (800530c <HAL_GPIO_Init+0x354>)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_GPIO_Init+0x354>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	43db      	mvns	r3, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4013      	ands	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <HAL_GPIO_Init+0x354>)
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	3301      	adds	r3, #1
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b0f      	cmp	r3, #15
 80052c8:	f67f ae84 	bls.w	8004fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3724      	adds	r7, #36	; 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40013800 	.word	0x40013800
 80052e4:	40020000 	.word	0x40020000
 80052e8:	40020400 	.word	0x40020400
 80052ec:	40020800 	.word	0x40020800
 80052f0:	40020c00 	.word	0x40020c00
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40021400 	.word	0x40021400
 80052fc:	40021800 	.word	0x40021800
 8005300:	40021c00 	.word	0x40021c00
 8005304:	40022000 	.word	0x40022000
 8005308:	40022400 	.word	0x40022400
 800530c:	40013c00 	.word	0x40013c00

08005310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005320:	787b      	ldrb	r3, [r7, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800532c:	e003      	b.n	8005336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800532e:	887b      	ldrh	r3, [r7, #2]
 8005330:	041a      	lsls	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	619a      	str	r2, [r3, #24]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e267      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d075      	beq.n	800544e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005362:	4b88      	ldr	r3, [pc, #544]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b04      	cmp	r3, #4
 800536c:	d00c      	beq.n	8005388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800536e:	4b85      	ldr	r3, [pc, #532]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005376:	2b08      	cmp	r3, #8
 8005378:	d112      	bne.n	80053a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537a:	4b82      	ldr	r3, [pc, #520]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005386:	d10b      	bne.n	80053a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4b7e      	ldr	r3, [pc, #504]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d05b      	beq.n	800544c <HAL_RCC_OscConfig+0x108>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d157      	bne.n	800544c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e242      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCC_OscConfig+0x74>
 80053aa:	4b76      	ldr	r3, [pc, #472]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a75      	ldr	r2, [pc, #468]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e01d      	b.n	80053f4 <HAL_RCC_OscConfig+0xb0>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0x98>
 80053c2:	4b70      	ldr	r3, [pc, #448]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6f      	ldr	r2, [pc, #444]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b6d      	ldr	r3, [pc, #436]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a6c      	ldr	r2, [pc, #432]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0xb0>
 80053dc:	4b69      	ldr	r3, [pc, #420]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a68      	ldr	r2, [pc, #416]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4b66      	ldr	r3, [pc, #408]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a65      	ldr	r2, [pc, #404]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d013      	beq.n	8005424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fe fa30 	bl	8003860 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005404:	f7fe fa2c 	bl	8003860 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e207      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0xc0>
 8005422:	e014      	b.n	800544e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fe fa1c 	bl	8003860 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800542c:	f7fe fa18 	bl	8003860 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b64      	cmp	r3, #100	; 0x64
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e1f3      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543e:	4b51      	ldr	r3, [pc, #324]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0xe8>
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d063      	beq.n	8005522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800545a:	4b4a      	ldr	r3, [pc, #296]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800546e:	2b08      	cmp	r3, #8
 8005470:	d11c      	bne.n	80054ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005472:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d116      	bne.n	80054ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800547e:	4b41      	ldr	r3, [pc, #260]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_RCC_OscConfig+0x152>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d001      	beq.n	8005496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e1c7      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005496:	4b3b      	ldr	r3, [pc, #236]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	4937      	ldr	r1, [pc, #220]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	e03a      	b.n	8005522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d020      	beq.n	80054f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b4:	4b34      	ldr	r3, [pc, #208]	; (8005588 <HAL_RCC_OscConfig+0x244>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ba:	f7fe f9d1 	bl	8003860 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c2:	f7fe f9cd 	bl	8003860 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e1a8      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d4:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4925      	ldr	r1, [pc, #148]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]
 80054f4:	e015      	b.n	8005522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_RCC_OscConfig+0x244>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fe f9b0 	bl	8003860 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005504:	f7fe f9ac 	bl	8003860 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e187      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005516:	4b1b      	ldr	r3, [pc, #108]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d036      	beq.n	800559c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <HAL_RCC_OscConfig+0x248>)
 8005538:	2201      	movs	r2, #1
 800553a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fe f990 	bl	8003860 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005544:	f7fe f98c 	bl	8003860 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e167      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x200>
 8005562:	e01b      	b.n	800559c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <HAL_RCC_OscConfig+0x248>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556a:	f7fe f979 	bl	8003860 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005570:	e00e      	b.n	8005590 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005572:	f7fe f975 	bl	8003860 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d907      	bls.n	8005590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e150      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
 8005584:	40023800 	.word	0x40023800
 8005588:	42470000 	.word	0x42470000
 800558c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005590:	4b88      	ldr	r3, [pc, #544]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ea      	bne.n	8005572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8097 	beq.w	80056d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ae:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	4b7d      	ldr	r3, [pc, #500]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	4a7c      	ldr	r2, [pc, #496]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ca:	4b7a      	ldr	r3, [pc, #488]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055da:	4b77      	ldr	r3, [pc, #476]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d118      	bne.n	8005618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e6:	4b74      	ldr	r3, [pc, #464]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a73      	ldr	r2, [pc, #460]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f2:	f7fe f935 	bl	8003860 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fe f931 	bl	8003860 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e10c      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560c:	4b6a      	ldr	r3, [pc, #424]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d106      	bne.n	800562e <HAL_RCC_OscConfig+0x2ea>
 8005620:	4b64      	ldr	r3, [pc, #400]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	4a63      	ldr	r2, [pc, #396]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6713      	str	r3, [r2, #112]	; 0x70
 800562c:	e01c      	b.n	8005668 <HAL_RCC_OscConfig+0x324>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b05      	cmp	r3, #5
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0x30c>
 8005636:	4b5f      	ldr	r3, [pc, #380]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a5e      	ldr	r2, [pc, #376]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800563c:	f043 0304 	orr.w	r3, r3, #4
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
 8005642:	4b5c      	ldr	r3, [pc, #368]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a5b      	ldr	r2, [pc, #364]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	e00b      	b.n	8005668 <HAL_RCC_OscConfig+0x324>
 8005650:	4b58      	ldr	r3, [pc, #352]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a57      	ldr	r2, [pc, #348]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
 800565c:	4b55      	ldr	r3, [pc, #340]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005662:	f023 0304 	bic.w	r3, r3, #4
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fe f8f6 	bl	8003860 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005676:	e00a      	b.n	800568e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f7fe f8f2 	bl	8003860 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e0cb      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568e:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0ee      	beq.n	8005678 <HAL_RCC_OscConfig+0x334>
 800569a:	e014      	b.n	80056c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569c:	f7fe f8e0 	bl	8003860 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fe f8dc 	bl	8003860 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0b5      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ba:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1ee      	bne.n	80056a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d105      	bne.n	80056d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056cc:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80a1 	beq.w	8005824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056e2:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d05c      	beq.n	80057a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d141      	bne.n	800577a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <HAL_RCC_OscConfig+0x478>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fc:	f7fe f8b0 	bl	8003860 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005704:	f7fe f8ac 	bl	8003860 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e087      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005716:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	019b      	lsls	r3, r3, #6
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	3b01      	subs	r3, #1
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	061b      	lsls	r3, r3, #24
 8005746:	491b      	ldr	r1, [pc, #108]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005748:	4313      	orrs	r3, r2
 800574a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <HAL_RCC_OscConfig+0x478>)
 800574e:	2201      	movs	r2, #1
 8005750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005752:	f7fe f885 	bl	8003860 <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800575a:	f7fe f881 	bl	8003860 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e05c      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f0      	beq.n	800575a <HAL_RCC_OscConfig+0x416>
 8005778:	e054      	b.n	8005824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577a:	4b10      	ldr	r3, [pc, #64]	; (80057bc <HAL_RCC_OscConfig+0x478>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005780:	f7fe f86e 	bl	8003860 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005788:	f7fe f86a 	bl	8003860 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e045      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x444>
 80057a6:	e03d      	b.n	8005824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e038      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40007000 	.word	0x40007000
 80057bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057c0:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <HAL_RCC_OscConfig+0x4ec>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d028      	beq.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d121      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d11a      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057f0:	4013      	ands	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d111      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	3b01      	subs	r3, #1
 800580a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d107      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40023800 	.word	0x40023800

08005834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0cc      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005848:	4b68      	ldr	r3, [pc, #416]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d90c      	bls.n	8005870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005856:	4b65      	ldr	r3, [pc, #404]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0b8      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005888:	4b59      	ldr	r3, [pc, #356]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a0:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ac:	4b50      	ldr	r3, [pc, #320]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	494d      	ldr	r1, [pc, #308]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d044      	beq.n	8005954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d107      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d119      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e07f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d003      	beq.n	80058f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d107      	bne.n	8005902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f2:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e06f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005902:	4b3b      	ldr	r3, [pc, #236]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e067      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005912:	4b37      	ldr	r3, [pc, #220]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f023 0203 	bic.w	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4934      	ldr	r1, [pc, #208]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005924:	f7fd ff9c 	bl	8003860 <HAL_GetTick>
 8005928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	e00a      	b.n	8005942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592c:	f7fd ff98 	bl	8003860 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e04f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005942:	4b2b      	ldr	r3, [pc, #172]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 020c 	and.w	r2, r3, #12
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	429a      	cmp	r2, r3
 8005952:	d1eb      	bne.n	800592c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005954:	4b25      	ldr	r3, [pc, #148]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d20c      	bcs.n	800597c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005962:	4b22      	ldr	r3, [pc, #136]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e032      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4916      	ldr	r1, [pc, #88]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	490e      	ldr	r1, [pc, #56]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ba:	f000 f821 	bl	8005a00 <HAL_RCC_GetSysClockFreq>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	490a      	ldr	r1, [pc, #40]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 80059cc:	5ccb      	ldrb	r3, [r1, r3]
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80059d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <HAL_RCC_ClockConfig+0x1c8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fd fa78 	bl	8002ed0 <HAL_InitTick>

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40023c00 	.word	0x40023c00
 80059f0:	40023800 	.word	0x40023800
 80059f4:	0800e5a0 	.word	0x0800e5a0
 80059f8:	200000a8 	.word	0x200000a8
 80059fc:	200000ac 	.word	0x200000ac

08005a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a04:	b090      	sub	sp, #64	; 0x40
 8005a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a10:	2300      	movs	r3, #0
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a18:	4b59      	ldr	r3, [pc, #356]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d00d      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0x40>
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	f200 80a1 	bhi.w	8005b6c <HAL_RCC_GetSysClockFreq+0x16c>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x34>
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a32:	e09b      	b.n	8005b6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a34:	4b53      	ldr	r3, [pc, #332]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a38:	e09b      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a3a:	4b53      	ldr	r3, [pc, #332]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a3e:	e098      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a40:	4b4f      	ldr	r3, [pc, #316]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a4a:	4b4d      	ldr	r3, [pc, #308]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d028      	beq.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a56:	4b4a      	ldr	r3, [pc, #296]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	099b      	lsrs	r3, r3, #6
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	627a      	str	r2, [r7, #36]	; 0x24
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4b47      	ldr	r3, [pc, #284]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a6c:	fb03 f201 	mul.w	r2, r3, r1
 8005a70:	2300      	movs	r3, #0
 8005a72:	fb00 f303 	mul.w	r3, r0, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	4a43      	ldr	r2, [pc, #268]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a7a:	fba0 1202 	umull	r1, r2, r0, r2
 8005a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a80:	460a      	mov	r2, r1
 8005a82:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a86:	4413      	add	r3, r2
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	61fa      	str	r2, [r7, #28]
 8005a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a9a:	f7fb f905 	bl	8000ca8 <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa6:	e053      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa8:	4b35      	ldr	r3, [pc, #212]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	099b      	lsrs	r3, r3, #6
 8005aae:	2200      	movs	r2, #0
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	617a      	str	r2, [r7, #20]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005aba:	f04f 0b00 	mov.w	fp, #0
 8005abe:	4652      	mov	r2, sl
 8005ac0:	465b      	mov	r3, fp
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	0159      	lsls	r1, r3, #5
 8005acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad0:	0150      	lsls	r0, r2, #5
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	ebb2 080a 	subs.w	r8, r2, sl
 8005ada:	eb63 090b 	sbc.w	r9, r3, fp
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005aea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005aee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005af2:	ebb2 0408 	subs.w	r4, r2, r8
 8005af6:	eb63 0509 	sbc.w	r5, r3, r9
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	00eb      	lsls	r3, r5, #3
 8005b04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b08:	00e2      	lsls	r2, r4, #3
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	461d      	mov	r5, r3
 8005b0e:	eb14 030a 	adds.w	r3, r4, sl
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	eb45 030b 	adc.w	r3, r5, fp
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b26:	4629      	mov	r1, r5
 8005b28:	028b      	lsls	r3, r1, #10
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b30:	4621      	mov	r1, r4
 8005b32:	028a      	lsls	r2, r1, #10
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	60fa      	str	r2, [r7, #12]
 8005b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b44:	f7fb f8b0 	bl	8000ca8 <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b6a:	e002      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3740      	adds	r7, #64	; 0x40
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7e:	bf00      	nop
 8005b80:	40023800 	.word	0x40023800
 8005b84:	00f42400 	.word	0x00f42400
 8005b88:	00b71b00 	.word	0x00b71b00

08005b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	200000a8 	.word	0x200000a8

08005ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba8:	f7ff fff0 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	0a9b      	lsrs	r3, r3, #10
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4903      	ldr	r1, [pc, #12]	; (8005bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	0800e5b0 	.word	0x0800e5b0

08005bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bd0:	f7ff ffdc 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	0b5b      	lsrs	r3, r3, #13
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005be2:	5ccb      	ldrb	r3, [r1, r3]
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	0800e5b0 	.word	0x0800e5b0

08005bf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	220f      	movs	r2, #15
 8005c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0203 	and.w	r2, r3, #3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c10:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <HAL_RCC_GetClockConfig+0x5c>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	08db      	lsrs	r3, r3, #3
 8005c2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <HAL_RCC_GetClockConfig+0x60>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 020f 	and.w	r2, r3, #15
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	601a      	str	r2, [r3, #0]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40023c00 	.word	0x40023c00

08005c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e041      	b.n	8005cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f839 	bl	8005cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f000 f9d8 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d001      	beq.n	8005d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e04e      	b.n	8005dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d01d      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a19      	ldr	r2, [pc, #100]	; (8005de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x80>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d111      	bne.n	8005db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d010      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	e007      	b.n	8005dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40001800 	.word	0x40001800

08005dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d122      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0202 	mvn.w	r2, #2
 8005e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8ee 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f8e0 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f8f1 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0204 	mvn.w	r2, #4
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f8c4 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f8b6 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8c7 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0208 	mvn.w	r2, #8
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f89a 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f88c 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f89d 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0210 	mvn.w	r2, #16
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2208      	movs	r2, #8
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f870 	bl	8006010 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f862 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f873 	bl	8006024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0201 	mvn.w	r2, #1
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fc ff6c 	bl	8002e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f88:	2b80      	cmp	r3, #128	; 0x80
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f902 	bl	80061a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f838 	bl	8006038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0220 	mvn.w	r2, #32
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8cc 	bl	800618c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a40      	ldr	r2, [pc, #256]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3d      	ldr	r2, [pc, #244]	; (8006164 <TIM_Base_SetConfig+0x118>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3c      	ldr	r2, [pc, #240]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3b      	ldr	r2, [pc, #236]	; (800616c <TIM_Base_SetConfig+0x120>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <TIM_Base_SetConfig+0x114>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d02b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d027      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <TIM_Base_SetConfig+0x118>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d023      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	; (8006168 <TIM_Base_SetConfig+0x11c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2a      	ldr	r2, [pc, #168]	; (800616c <TIM_Base_SetConfig+0x120>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a29      	ldr	r2, [pc, #164]	; (8006170 <TIM_Base_SetConfig+0x124>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d017      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a28      	ldr	r2, [pc, #160]	; (8006174 <TIM_Base_SetConfig+0x128>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a27      	ldr	r2, [pc, #156]	; (8006178 <TIM_Base_SetConfig+0x12c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00f      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a26      	ldr	r2, [pc, #152]	; (800617c <TIM_Base_SetConfig+0x130>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00b      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a25      	ldr	r2, [pc, #148]	; (8006180 <TIM_Base_SetConfig+0x134>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a24      	ldr	r2, [pc, #144]	; (8006184 <TIM_Base_SetConfig+0x138>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a23      	ldr	r2, [pc, #140]	; (8006188 <TIM_Base_SetConfig+0x13c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <TIM_Base_SetConfig+0x114>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_Base_SetConfig+0xf8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <TIM_Base_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d103      	bne.n	800614c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	615a      	str	r2, [r3, #20]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40010400 	.word	0x40010400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800
 8006180:	40001800 	.word	0x40001800
 8006184:	40001c00 	.word	0x40001c00
 8006188:	40002000 	.word	0x40002000

0800618c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e03f      	b.n	8006246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fd f8e4 	bl	80033a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2224      	movs	r2, #36	; 0x24
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 f86d 	bl	80072d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800620c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800621c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800622c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b08a      	sub	sp, #40	; 0x28
 8006252:	af02      	add	r7, sp, #8
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	4613      	mov	r3, r2
 800625c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b20      	cmp	r3, #32
 800626c:	d17c      	bne.n	8006368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_UART_Transmit+0x2c>
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e075      	b.n	800636a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_UART_Transmit+0x3e>
 8006288:	2302      	movs	r3, #2
 800628a:	e06e      	b.n	800636a <HAL_UART_Transmit+0x11c>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2221      	movs	r2, #33	; 0x21
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062a2:	f7fd fadd 	bl	8003860 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d108      	bne.n	80062d0 <HAL_UART_Transmit+0x82>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	e003      	b.n	80062d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062e0:	e02a      	b.n	8006338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fd24 	bl	8006d3a <UART_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e036      	b.n	800636a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	3302      	adds	r3, #2
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e007      	b.n	800632a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	3301      	adds	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1cf      	bne.n	80062e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	2140      	movs	r1, #64	; 0x40
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fcf4 	bl	8006d3a <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e006      	b.n	800636a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e000      	b.n	800636a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006368:	2302      	movs	r3, #2
  }
}
 800636a:	4618      	mov	r0, r3
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08c      	sub	sp, #48	; 0x30
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b20      	cmp	r3, #32
 800638c:	d165      	bne.n	800645a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_UART_Transmit_DMA+0x26>
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e05e      	b.n	800645c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Transmit_DMA+0x38>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e057      	b.n	800645c <HAL_UART_Transmit_DMA+0xe8>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2221      	movs	r2, #33	; 0x21
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d8:	4a22      	ldr	r2, [pc, #136]	; (8006464 <HAL_UART_Transmit_DMA+0xf0>)
 80063da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	4a21      	ldr	r2, [pc, #132]	; (8006468 <HAL_UART_Transmit_DMA+0xf4>)
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	4a20      	ldr	r2, [pc, #128]	; (800646c <HAL_UART_Transmit_DMA+0xf8>)
 80063ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	2200      	movs	r2, #0
 80063f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80063f4:	f107 0308 	add.w	r3, r7, #8
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	461a      	mov	r2, r3
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	f7fe fa80 	bl	8004910 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006418:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3314      	adds	r3, #20
 8006428:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	617b      	str	r3, [r7, #20]
   return(result);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3314      	adds	r3, #20
 8006440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006442:	627a      	str	r2, [r7, #36]	; 0x24
 8006444:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6a39      	ldr	r1, [r7, #32]
 8006448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	e000      	b.n	800645c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
  }
}
 800645c:	4618      	mov	r0, r3
 800645e:	3730      	adds	r7, #48	; 0x30
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	08006a95 	.word	0x08006a95
 8006468:	08006b2f 	.word	0x08006b2f
 800646c:	08006ca7 	.word	0x08006ca7

08006470 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08c      	sub	sp, #48	; 0x30
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b20      	cmp	r3, #32
 8006488:	d152      	bne.n	8006530 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e04b      	b.n	8006532 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e044      	b.n	8006532 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	461a      	mov	r2, r3
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fcab 	bl	8006e18 <UART_Start_Receive_DMA>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80064c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d12c      	bne.n	800652a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d125      	bne.n	8006524 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064d8:	2300      	movs	r3, #0
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	617b      	str	r3, [r7, #20]
   return(result);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f043 0310 	orr.w	r3, r3, #16
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650e:	627a      	str	r2, [r7, #36]	; 0x24
 8006510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6a39      	ldr	r1, [r7, #32]
 8006514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	61fb      	str	r3, [r7, #28]
   return(result);
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006522:	e002      	b.n	800652a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800652a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800652e:	e000      	b.n	8006532 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3730      	adds	r7, #48	; 0x30
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b0ba      	sub	sp, #232	; 0xe8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006562:	2300      	movs	r3, #0
 8006564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800657a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <HAL_UART_IRQHandler+0x66>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fde1 	bl	8007162 <UART_Receive_IT>
      return;
 80065a0:	e256      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80de 	beq.w	8006768 <HAL_UART_IRQHandler+0x22c>
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80d1 	beq.w	8006768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0xae>
 80065d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <HAL_UART_IRQHandler+0xd2>
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f043 0202 	orr.w	r2, r3, #2
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <HAL_UART_IRQHandler+0xf6>
 800661a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f043 0204 	orr.w	r2, r3, #4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d011      	beq.n	8006662 <HAL_UART_IRQHandler+0x126>
 800663e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f043 0208 	orr.w	r2, r3, #8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 81ed 	beq.w	8006a46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d008      	beq.n	800668a <HAL_UART_IRQHandler+0x14e>
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fd6c 	bl	8007162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_UART_IRQHandler+0x17a>
 80066ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d04f      	beq.n	8006756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fc74 	bl	8006fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d141      	bne.n	800674e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3314      	adds	r3, #20
 80066d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800670e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1d9      	bne.n	80066ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	2b00      	cmp	r3, #0
 800671c:	d013      	beq.n	8006746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	4a7d      	ldr	r2, [pc, #500]	; (8006918 <HAL_UART_IRQHandler+0x3dc>)
 8006724:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe f9b8 	bl	8004aa0 <HAL_DMA_Abort_IT>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	e00e      	b.n	8006764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f99a 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e00a      	b.n	8006764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f996 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e006      	b.n	8006764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f992 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006762:	e170      	b.n	8006a46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	bf00      	nop
    return;
 8006766:	e16e      	b.n	8006a46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 814a 	bne.w	8006a06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8143 	beq.w	8006a06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 813c 	beq.w	8006a06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	f040 80b4 	bne.w	800691c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8140 	beq.w	8006a4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067d2:	429a      	cmp	r2, r3
 80067d4:	f080 8139 	bcs.w	8006a4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ea:	f000 8088 	beq.w	80068fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800681a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800681e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1d9      	bne.n	80067ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800684a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3314      	adds	r3, #20
 800685a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800685e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e1      	bne.n	800683a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800689a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800689c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e3      	bne.n	8006876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ce:	f023 0310 	bic.w	r3, r3, #16
 80068d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80068e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e3      	bne.n	80068bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe f861 	bl	80049c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006906:	b29b      	uxth	r3, r3
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	b29b      	uxth	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fb fe4e 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006914:	e099      	b.n	8006a4a <HAL_UART_IRQHandler+0x50e>
 8006916:	bf00      	nop
 8006918:	0800706b 	.word	0x0800706b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006924:	b29b      	uxth	r3, r3
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 808b 	beq.w	8006a4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8086 	beq.w	8006a4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	330c      	adds	r3, #12
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006966:	647a      	str	r2, [r7, #68]	; 0x44
 8006968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800696c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e3      	bne.n	8006942 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	623b      	str	r3, [r7, #32]
   return(result);
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3314      	adds	r3, #20
 800699a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800699e:	633a      	str	r2, [r7, #48]	; 0x30
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e3      	bne.n	800697a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0310 	bic.w	r3, r3, #16
 80069d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069e4:	61fa      	str	r2, [r7, #28]
 80069e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	69b9      	ldr	r1, [r7, #24]
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	617b      	str	r3, [r7, #20]
   return(result);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e3      	bne.n	80069c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fb fdd6 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a04:	e023      	b.n	8006a4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_UART_IRQHandler+0x4ea>
 8006a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fb37 	bl	8007092 <UART_Transmit_IT>
    return;
 8006a24:	e014      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <HAL_UART_IRQHandler+0x514>
 8006a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb77 	bl	8007132 <UART_EndTransmit_IT>
    return;
 8006a44:	e004      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
    return;
 8006a46:	bf00      	nop
 8006a48:	e002      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
      return;
 8006a4a:	bf00      	nop
 8006a4c:	e000      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
      return;
 8006a4e:	bf00      	nop
  }
}
 8006a50:	37e8      	adds	r7, #232	; 0xe8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop

08006a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b090      	sub	sp, #64	; 0x40
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d137      	bne.n	8006b20 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3314      	adds	r3, #20
 8006ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ad6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0a:	61fa      	str	r2, [r7, #28]
 8006b0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	69b9      	ldr	r1, [r7, #24]
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	617b      	str	r3, [r7, #20]
   return(result);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b1e:	e002      	b.n	8006b26 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b22:	f7ff ff99 	bl	8006a58 <HAL_UART_TxCpltCallback>
}
 8006b26:	bf00      	nop
 8006b28:	3740      	adds	r7, #64	; 0x40
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7fb fda9 	bl	8002694 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b09c      	sub	sp, #112	; 0x70
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d172      	bne.n	8006c4c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b68:	2200      	movs	r2, #0
 8006b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	330c      	adds	r3, #12
 8006b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	330c      	adds	r3, #12
 8006b8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3314      	adds	r3, #20
 8006ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8006bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bc0:	647a      	str	r2, [r7, #68]	; 0x44
 8006bc2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e5      	bne.n	8006ba0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3314      	adds	r3, #20
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	623b      	str	r3, [r7, #32]
   return(result);
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bea:	663b      	str	r3, [r7, #96]	; 0x60
 8006bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3314      	adds	r3, #20
 8006bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bf4:	633a      	str	r2, [r7, #48]	; 0x30
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e5      	bne.n	8006bd4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d119      	bne.n	8006c4c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c38:	61fa      	str	r2, [r7, #28]
 8006c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	617b      	str	r3, [r7, #20]
   return(result);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e5      	bne.n	8006c18 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d106      	bne.n	8006c62 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c5c:	f7fb fca8 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c60:	e002      	b.n	8006c68 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006c62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c64:	f7fb fcd8 	bl	8002618 <HAL_UART_RxCpltCallback>
}
 8006c68:	bf00      	nop
 8006c6a:	3770      	adds	r7, #112	; 0x70
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d108      	bne.n	8006c98 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7fb fc8d 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c96:	e002      	b.n	8006c9e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff fee7 	bl	8006a6c <HAL_UART_RxHalfCpltCallback>
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b21      	cmp	r3, #33	; 0x21
 8006cd8:	d108      	bne.n	8006cec <UART_DMAError+0x46>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006ce6:	68b8      	ldr	r0, [r7, #8]
 8006ce8:	f000 f934 	bl	8006f54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf6:	2b40      	cmp	r3, #64	; 0x40
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2301      	moveq	r3, #1
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b22      	cmp	r3, #34	; 0x22
 8006d0c:	d108      	bne.n	8006d20 <UART_DMAError+0x7a>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d1a:	68b8      	ldr	r0, [r7, #8]
 8006d1c:	f000 f942 	bl	8006fa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	f043 0210 	orr.w	r2, r3, #16
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d2c:	68b8      	ldr	r0, [r7, #8]
 8006d2e:	f7ff fea7 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b090      	sub	sp, #64	; 0x40
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4a:	e050      	b.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d52:	d04c      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8006d5a:	f7fc fd81 	bl	8003860 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d241      	bcs.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	330c      	adds	r3, #12
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	330c      	adds	r3, #12
 8006d88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d8a:	637a      	str	r2, [r7, #52]	; 0x34
 8006d8c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3314      	adds	r3, #20
 8006da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	613b      	str	r3, [r7, #16]
   return(result);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3314      	adds	r3, #20
 8006dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dbe:	623a      	str	r2, [r7, #32]
 8006dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	69f9      	ldr	r1, [r7, #28]
 8006dc4:	6a3a      	ldr	r2, [r7, #32]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e5      	bne.n	8006d9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e00f      	b.n	8006e0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4013      	ands	r3, r2
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	bf0c      	ite	eq
 8006dfe:	2301      	moveq	r3, #1
 8006e00:	2300      	movne	r3, #0
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d09f      	beq.n	8006d4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3740      	adds	r7, #64	; 0x40
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b098      	sub	sp, #96	; 0x60
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2222      	movs	r2, #34	; 0x22
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	4a40      	ldr	r2, [pc, #256]	; (8006f48 <UART_Start_Receive_DMA+0x130>)
 8006e46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	4a3f      	ldr	r2, [pc, #252]	; (8006f4c <UART_Start_Receive_DMA+0x134>)
 8006e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	4a3e      	ldr	r2, [pc, #248]	; (8006f50 <UART_Start_Receive_DMA+0x138>)
 8006e56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4619      	mov	r1, r3
 8006e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	f7fd fd4a 	bl	8004910 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d019      	beq.n	8006ed6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006ec4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3314      	adds	r3, #20
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	657b      	str	r3, [r7, #84]	; 0x54
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3314      	adds	r3, #20
 8006ef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ef6:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e5      	bne.n	8006ed6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3314      	adds	r3, #20
 8006f10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	617b      	str	r3, [r7, #20]
   return(result);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f20:	653b      	str	r3, [r7, #80]	; 0x50
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f2a:	627a      	str	r2, [r7, #36]	; 0x24
 8006f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6a39      	ldr	r1, [r7, #32]
 8006f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3760      	adds	r7, #96	; 0x60
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	08006b4b 	.word	0x08006b4b
 8006f4c:	08006c71 	.word	0x08006c71
 8006f50:	08006ca7 	.word	0x08006ca7

08006f54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	61ba      	str	r2, [r7, #24]
 8006f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6979      	ldr	r1, [r7, #20]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006f98:	bf00      	nop
 8006f9a:	3724      	adds	r7, #36	; 0x24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b095      	sub	sp, #84	; 0x54
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fcc:	643a      	str	r2, [r7, #64]	; 0x40
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e5      	bne.n	8006fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3314      	adds	r3, #20
 8006ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e5      	bne.n	8006fe0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	2b01      	cmp	r3, #1
 800701a:	d119      	bne.n	8007050 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60bb      	str	r3, [r7, #8]
   return(result);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f023 0310 	bic.w	r3, r3, #16
 8007032:	647b      	str	r3, [r7, #68]	; 0x44
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800703c:	61ba      	str	r2, [r7, #24]
 800703e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6979      	ldr	r1, [r7, #20]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	613b      	str	r3, [r7, #16]
   return(result);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e5      	bne.n	800701c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800705e:	bf00      	nop
 8007060:	3754      	adds	r7, #84	; 0x54
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff fcfb 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b21      	cmp	r3, #33	; 0x21
 80070a4:	d13e      	bne.n	8007124 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ae:	d114      	bne.n	80070da <UART_Transmit_IT+0x48>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d110      	bne.n	80070da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	621a      	str	r2, [r3, #32]
 80070d8:	e008      	b.n	80070ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	1c59      	adds	r1, r3, #1
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6211      	str	r1, [r2, #32]
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	4619      	mov	r1, r3
 80070fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10f      	bne.n	8007120 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800710e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	e000      	b.n	8007126 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007124:	2302      	movs	r3, #2
  }
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fc80 	bl	8006a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b08c      	sub	sp, #48	; 0x30
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b22      	cmp	r3, #34	; 0x22
 8007174:	f040 80ab 	bne.w	80072ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007180:	d117      	bne.n	80071b2 <UART_Receive_IT+0x50>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d113      	bne.n	80071b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071aa:	1c9a      	adds	r2, r3, #2
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	629a      	str	r2, [r3, #40]	; 0x28
 80071b0:	e026      	b.n	8007200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c4:	d007      	beq.n	80071d6 <UART_Receive_IT+0x74>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <UART_Receive_IT+0x82>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e008      	b.n	80071f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29b      	uxth	r3, r3
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	4619      	mov	r1, r3
 800720e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007210:	2b00      	cmp	r3, #0
 8007212:	d15a      	bne.n	80072ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0220 	bic.w	r2, r2, #32
 8007222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	2b01      	cmp	r3, #1
 8007252:	d135      	bne.n	80072c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	330c      	adds	r3, #12
 8007260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	613b      	str	r3, [r7, #16]
   return(result);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f023 0310 	bic.w	r3, r3, #16
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	330c      	adds	r3, #12
 8007278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727a:	623a      	str	r2, [r7, #32]
 800727c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	69f9      	ldr	r1, [r7, #28]
 8007280:	6a3a      	ldr	r2, [r7, #32]
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	61bb      	str	r3, [r7, #24]
   return(result);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e5      	bne.n	800725a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b10      	cmp	r3, #16
 800729a:	d10a      	bne.n	80072b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7fb f979 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
 80072be:	e002      	b.n	80072c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fb f9a9 	bl	8002618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e002      	b.n	80072d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3730      	adds	r7, #48	; 0x30
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b0c0      	sub	sp, #256	; 0x100
 80072de:	af00      	add	r7, sp, #0
 80072e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f4:	68d9      	ldr	r1, [r3, #12]
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	ea40 0301 	orr.w	r3, r0, r1
 8007300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	431a      	orrs	r2, r3
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	431a      	orrs	r2, r3
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007330:	f021 010c 	bic.w	r1, r1, #12
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800733e:	430b      	orrs	r3, r1
 8007340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800734e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007352:	6999      	ldr	r1, [r3, #24]
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	ea40 0301 	orr.w	r3, r0, r1
 800735e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b8f      	ldr	r3, [pc, #572]	; (80075a4 <UART_SetConfig+0x2cc>)
 8007368:	429a      	cmp	r2, r3
 800736a:	d005      	beq.n	8007378 <UART_SetConfig+0xa0>
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b8d      	ldr	r3, [pc, #564]	; (80075a8 <UART_SetConfig+0x2d0>)
 8007374:	429a      	cmp	r2, r3
 8007376:	d104      	bne.n	8007382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fe fc28 	bl	8005bcc <HAL_RCC_GetPCLK2Freq>
 800737c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007380:	e003      	b.n	800738a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007382:	f7fe fc0f 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8007386:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007394:	f040 810c 	bne.w	80075b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800739c:	2200      	movs	r2, #0
 800739e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073aa:	4622      	mov	r2, r4
 80073ac:	462b      	mov	r3, r5
 80073ae:	1891      	adds	r1, r2, r2
 80073b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80073b2:	415b      	adcs	r3, r3
 80073b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073ba:	4621      	mov	r1, r4
 80073bc:	eb12 0801 	adds.w	r8, r2, r1
 80073c0:	4629      	mov	r1, r5
 80073c2:	eb43 0901 	adc.w	r9, r3, r1
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073da:	4690      	mov	r8, r2
 80073dc:	4699      	mov	r9, r3
 80073de:	4623      	mov	r3, r4
 80073e0:	eb18 0303 	adds.w	r3, r8, r3
 80073e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073e8:	462b      	mov	r3, r5
 80073ea:	eb49 0303 	adc.w	r3, r9, r3
 80073ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007406:	460b      	mov	r3, r1
 8007408:	18db      	adds	r3, r3, r3
 800740a:	653b      	str	r3, [r7, #80]	; 0x50
 800740c:	4613      	mov	r3, r2
 800740e:	eb42 0303 	adc.w	r3, r2, r3
 8007412:	657b      	str	r3, [r7, #84]	; 0x54
 8007414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800741c:	f7f9 fc44 	bl	8000ca8 <__aeabi_uldivmod>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4b61      	ldr	r3, [pc, #388]	; (80075ac <UART_SetConfig+0x2d4>)
 8007426:	fba3 2302 	umull	r2, r3, r3, r2
 800742a:	095b      	lsrs	r3, r3, #5
 800742c:	011c      	lsls	r4, r3, #4
 800742e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007432:	2200      	movs	r2, #0
 8007434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007438:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800743c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007440:	4642      	mov	r2, r8
 8007442:	464b      	mov	r3, r9
 8007444:	1891      	adds	r1, r2, r2
 8007446:	64b9      	str	r1, [r7, #72]	; 0x48
 8007448:	415b      	adcs	r3, r3
 800744a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007450:	4641      	mov	r1, r8
 8007452:	eb12 0a01 	adds.w	sl, r2, r1
 8007456:	4649      	mov	r1, r9
 8007458:	eb43 0b01 	adc.w	fp, r3, r1
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800746c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007470:	4692      	mov	sl, r2
 8007472:	469b      	mov	fp, r3
 8007474:	4643      	mov	r3, r8
 8007476:	eb1a 0303 	adds.w	r3, sl, r3
 800747a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800747e:	464b      	mov	r3, r9
 8007480:	eb4b 0303 	adc.w	r3, fp, r3
 8007484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800749c:	460b      	mov	r3, r1
 800749e:	18db      	adds	r3, r3, r3
 80074a0:	643b      	str	r3, [r7, #64]	; 0x40
 80074a2:	4613      	mov	r3, r2
 80074a4:	eb42 0303 	adc.w	r3, r2, r3
 80074a8:	647b      	str	r3, [r7, #68]	; 0x44
 80074aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074b2:	f7f9 fbf9 	bl	8000ca8 <__aeabi_uldivmod>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	4b3b      	ldr	r3, [pc, #236]	; (80075ac <UART_SetConfig+0x2d4>)
 80074be:	fba3 2301 	umull	r2, r3, r3, r1
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	2264      	movs	r2, #100	; 0x64
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	1acb      	subs	r3, r1, r3
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074d2:	4b36      	ldr	r3, [pc, #216]	; (80075ac <UART_SetConfig+0x2d4>)
 80074d4:	fba3 2302 	umull	r2, r3, r3, r2
 80074d8:	095b      	lsrs	r3, r3, #5
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074e0:	441c      	add	r4, r3
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80074fc:	415b      	adcs	r3, r3
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007504:	4641      	mov	r1, r8
 8007506:	1851      	adds	r1, r2, r1
 8007508:	6339      	str	r1, [r7, #48]	; 0x30
 800750a:	4649      	mov	r1, r9
 800750c:	414b      	adcs	r3, r1
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800751c:	4659      	mov	r1, fp
 800751e:	00cb      	lsls	r3, r1, #3
 8007520:	4651      	mov	r1, sl
 8007522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007526:	4651      	mov	r1, sl
 8007528:	00ca      	lsls	r2, r1, #3
 800752a:	4610      	mov	r0, r2
 800752c:	4619      	mov	r1, r3
 800752e:	4603      	mov	r3, r0
 8007530:	4642      	mov	r2, r8
 8007532:	189b      	adds	r3, r3, r2
 8007534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007538:	464b      	mov	r3, r9
 800753a:	460a      	mov	r2, r1
 800753c:	eb42 0303 	adc.w	r3, r2, r3
 8007540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007550:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007558:	460b      	mov	r3, r1
 800755a:	18db      	adds	r3, r3, r3
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
 800755e:	4613      	mov	r3, r2
 8007560:	eb42 0303 	adc.w	r3, r2, r3
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800756a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800756e:	f7f9 fb9b 	bl	8000ca8 <__aeabi_uldivmod>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <UART_SetConfig+0x2d4>)
 8007578:	fba3 1302 	umull	r1, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	2164      	movs	r1, #100	; 0x64
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	3332      	adds	r3, #50	; 0x32
 800758a:	4a08      	ldr	r2, [pc, #32]	; (80075ac <UART_SetConfig+0x2d4>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f003 0207 	and.w	r2, r3, #7
 8007596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4422      	add	r2, r4
 800759e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075a0:	e105      	b.n	80077ae <UART_SetConfig+0x4d6>
 80075a2:	bf00      	nop
 80075a4:	40011000 	.word	0x40011000
 80075a8:	40011400 	.word	0x40011400
 80075ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	1891      	adds	r1, r2, r2
 80075c8:	6239      	str	r1, [r7, #32]
 80075ca:	415b      	adcs	r3, r3
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
 80075ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075d2:	4641      	mov	r1, r8
 80075d4:	1854      	adds	r4, r2, r1
 80075d6:	4649      	mov	r1, r9
 80075d8:	eb43 0501 	adc.w	r5, r3, r1
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	00eb      	lsls	r3, r5, #3
 80075e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ea:	00e2      	lsls	r2, r4, #3
 80075ec:	4614      	mov	r4, r2
 80075ee:	461d      	mov	r5, r3
 80075f0:	4643      	mov	r3, r8
 80075f2:	18e3      	adds	r3, r4, r3
 80075f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075f8:	464b      	mov	r3, r9
 80075fa:	eb45 0303 	adc.w	r3, r5, r3
 80075fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800760e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800761e:	4629      	mov	r1, r5
 8007620:	008b      	lsls	r3, r1, #2
 8007622:	4621      	mov	r1, r4
 8007624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007628:	4621      	mov	r1, r4
 800762a:	008a      	lsls	r2, r1, #2
 800762c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007630:	f7f9 fb3a 	bl	8000ca8 <__aeabi_uldivmod>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4b60      	ldr	r3, [pc, #384]	; (80077bc <UART_SetConfig+0x4e4>)
 800763a:	fba3 2302 	umull	r2, r3, r3, r2
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	011c      	lsls	r4, r3, #4
 8007642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007646:	2200      	movs	r2, #0
 8007648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800764c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	1891      	adds	r1, r2, r2
 800765a:	61b9      	str	r1, [r7, #24]
 800765c:	415b      	adcs	r3, r3
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007664:	4641      	mov	r1, r8
 8007666:	1851      	adds	r1, r2, r1
 8007668:	6139      	str	r1, [r7, #16]
 800766a:	4649      	mov	r1, r9
 800766c:	414b      	adcs	r3, r1
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800767c:	4659      	mov	r1, fp
 800767e:	00cb      	lsls	r3, r1, #3
 8007680:	4651      	mov	r1, sl
 8007682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007686:	4651      	mov	r1, sl
 8007688:	00ca      	lsls	r2, r1, #3
 800768a:	4610      	mov	r0, r2
 800768c:	4619      	mov	r1, r3
 800768e:	4603      	mov	r3, r0
 8007690:	4642      	mov	r2, r8
 8007692:	189b      	adds	r3, r3, r2
 8007694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007698:	464b      	mov	r3, r9
 800769a:	460a      	mov	r2, r1
 800769c:	eb42 0303 	adc.w	r3, r2, r3
 80076a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80076ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076bc:	4649      	mov	r1, r9
 80076be:	008b      	lsls	r3, r1, #2
 80076c0:	4641      	mov	r1, r8
 80076c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c6:	4641      	mov	r1, r8
 80076c8:	008a      	lsls	r2, r1, #2
 80076ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076ce:	f7f9 faeb 	bl	8000ca8 <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4b39      	ldr	r3, [pc, #228]	; (80077bc <UART_SetConfig+0x4e4>)
 80076d8:	fba3 1302 	umull	r1, r3, r3, r2
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	2164      	movs	r1, #100	; 0x64
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	3332      	adds	r3, #50	; 0x32
 80076ea:	4a34      	ldr	r2, [pc, #208]	; (80077bc <UART_SetConfig+0x4e4>)
 80076ec:	fba2 2303 	umull	r2, r3, r2, r3
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f6:	441c      	add	r4, r3
 80076f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fc:	2200      	movs	r2, #0
 80076fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007700:	677a      	str	r2, [r7, #116]	; 0x74
 8007702:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007706:	4642      	mov	r2, r8
 8007708:	464b      	mov	r3, r9
 800770a:	1891      	adds	r1, r2, r2
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	415b      	adcs	r3, r3
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007716:	4641      	mov	r1, r8
 8007718:	1851      	adds	r1, r2, r1
 800771a:	6039      	str	r1, [r7, #0]
 800771c:	4649      	mov	r1, r9
 800771e:	414b      	adcs	r3, r1
 8007720:	607b      	str	r3, [r7, #4]
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	f04f 0300 	mov.w	r3, #0
 800772a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800772e:	4659      	mov	r1, fp
 8007730:	00cb      	lsls	r3, r1, #3
 8007732:	4651      	mov	r1, sl
 8007734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007738:	4651      	mov	r1, sl
 800773a:	00ca      	lsls	r2, r1, #3
 800773c:	4610      	mov	r0, r2
 800773e:	4619      	mov	r1, r3
 8007740:	4603      	mov	r3, r0
 8007742:	4642      	mov	r2, r8
 8007744:	189b      	adds	r3, r3, r2
 8007746:	66bb      	str	r3, [r7, #104]	; 0x68
 8007748:	464b      	mov	r3, r9
 800774a:	460a      	mov	r2, r1
 800774c:	eb42 0303 	adc.w	r3, r2, r3
 8007750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	663b      	str	r3, [r7, #96]	; 0x60
 800775c:	667a      	str	r2, [r7, #100]	; 0x64
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	f04f 0300 	mov.w	r3, #0
 8007766:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800776a:	4649      	mov	r1, r9
 800776c:	008b      	lsls	r3, r1, #2
 800776e:	4641      	mov	r1, r8
 8007770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007774:	4641      	mov	r1, r8
 8007776:	008a      	lsls	r2, r1, #2
 8007778:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800777c:	f7f9 fa94 	bl	8000ca8 <__aeabi_uldivmod>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <UART_SetConfig+0x4e4>)
 8007786:	fba3 1302 	umull	r1, r3, r3, r2
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	2164      	movs	r1, #100	; 0x64
 800778e:	fb01 f303 	mul.w	r3, r1, r3
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	3332      	adds	r3, #50	; 0x32
 8007798:	4a08      	ldr	r2, [pc, #32]	; (80077bc <UART_SetConfig+0x4e4>)
 800779a:	fba2 2303 	umull	r2, r3, r2, r3
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	f003 020f 	and.w	r2, r3, #15
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4422      	add	r2, r4
 80077ac:	609a      	str	r2, [r3, #8]
}
 80077ae:	bf00      	nop
 80077b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077b4:	46bd      	mov	sp, r7
 80077b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ba:	bf00      	nop
 80077bc:	51eb851f 	.word	0x51eb851f

080077c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80077ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077d2:	2b84      	cmp	r3, #132	; 0x84
 80077d4:	d005      	beq.n	80077e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80077d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	3303      	adds	r3, #3
 80077e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80077e2:	68fb      	ldr	r3, [r7, #12]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80077f4:	f000 ffb2 	bl	800875c <vTaskStartScheduler>
  
  return osOK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	bd80      	pop	{r7, pc}

080077fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007800:	b089      	sub	sp, #36	; 0x24
 8007802:	af04      	add	r7, sp, #16
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d020      	beq.n	8007852 <osThreadCreate+0x54>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01c      	beq.n	8007852 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685c      	ldr	r4, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681d      	ldr	r5, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691e      	ldr	r6, [r3, #16]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff ffc8 	bl	80077c0 <makeFreeRtosPriority>
 8007830:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800783a:	9202      	str	r2, [sp, #8]
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	9100      	str	r1, [sp, #0]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	4632      	mov	r2, r6
 8007844:	4629      	mov	r1, r5
 8007846:	4620      	mov	r0, r4
 8007848:	f000 fdc0 	bl	80083cc <xTaskCreateStatic>
 800784c:	4603      	mov	r3, r0
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	e01c      	b.n	800788c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685c      	ldr	r4, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800785e:	b29e      	uxth	r6, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff ffaa 	bl	80077c0 <makeFreeRtosPriority>
 800786c:	4602      	mov	r2, r0
 800786e:	f107 030c 	add.w	r3, r7, #12
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	9200      	str	r2, [sp, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	4632      	mov	r2, r6
 800787a:	4629      	mov	r1, r5
 800787c:	4620      	mov	r0, r4
 800787e:	f000 fe02 	bl	8008486 <xTaskCreate>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	d001      	beq.n	800788c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007888:	2300      	movs	r3, #0
 800788a:	e000      	b.n	800788e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800788c:	68fb      	ldr	r3, [r7, #12]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007896 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <osDelay+0x16>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	e000      	b.n	80078ae <osDelay+0x18>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ff20 	bl	80086f4 <vTaskDelay>
  
  return osOK;
 80078b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	4619      	mov	r1, r3
 80078d4:	2001      	movs	r0, #1
 80078d6:	f000 fa52 	bl	8007d7e <xQueueCreateMutexStatic>
 80078da:	4603      	mov	r3, r0
 80078dc:	e003      	b.n	80078e6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80078de:	2001      	movs	r0, #1
 80078e0:	f000 fa35 	bl	8007d4e <xQueueCreateMutex>
 80078e4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80078ee:	b590      	push	{r4, r7, lr}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af02      	add	r7, sp, #8
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d011      	beq.n	8007924 <osMessageCreate+0x36>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00d      	beq.n	8007924 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6859      	ldr	r1, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	2400      	movs	r4, #0
 800791a:	9400      	str	r4, [sp, #0]
 800791c:	f000 f92c 	bl	8007b78 <xQueueGenericCreateStatic>
 8007920:	4603      	mov	r3, r0
 8007922:	e008      	b.n	8007936 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	4619      	mov	r1, r3
 8007930:	f000 f99a 	bl	8007c68 <xQueueGenericCreate>
 8007934:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	bd90      	pop	{r4, r7, pc}

0800793e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f103 0208 	add.w	r2, r3, #8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007956:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f103 0208 	add.w	r2, r3, #8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f103 0208 	add.w	r2, r3, #8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f6:	d103      	bne.n	8007a00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	e00c      	b.n	8007a1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3308      	adds	r3, #8
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e002      	b.n	8007a0e <vListInsert+0x2e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d2f6      	bcs.n	8007a08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6892      	ldr	r2, [r2, #8]
 8007a68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6852      	ldr	r2, [r2, #4]
 8007a72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d103      	bne.n	8007a86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	1e5a      	subs	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ad2:	f001 fd8f 	bl	80095f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ae2:	fb01 f303 	mul.w	r3, r1, r3
 8007ae6:	441a      	add	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b02:	3b01      	subs	r3, #1
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b08:	fb01 f303 	mul.w	r3, r1, r3
 8007b0c:	441a      	add	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	22ff      	movs	r2, #255	; 0xff
 8007b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	22ff      	movs	r2, #255	; 0xff
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d114      	bne.n	8007b52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01a      	beq.n	8007b66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3310      	adds	r3, #16
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 f853 	bl	8008be0 <xTaskRemoveFromEventList>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d012      	beq.n	8007b66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b40:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <xQueueGenericReset+0xcc>)
 8007b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	e009      	b.n	8007b66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3310      	adds	r3, #16
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fef1 	bl	800793e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff feec 	bl	800793e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b66:	f001 fd75 	bl	8009654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b6a:	2301      	movs	r3, #1
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08e      	sub	sp, #56	; 0x38
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <xQueueGenericCreateStatic+0x52>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <xQueueGenericCreateStatic+0x56>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <xQueueGenericCreateStatic+0x58>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	623b      	str	r3, [r7, #32]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d102      	bne.n	8007bf6 <xQueueGenericCreateStatic+0x7e>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <xQueueGenericCreateStatic+0x82>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e000      	b.n	8007bfc <xQueueGenericCreateStatic+0x84>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	61fb      	str	r3, [r7, #28]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c16:	2348      	movs	r3, #72	; 0x48
 8007c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b48      	cmp	r3, #72	; 0x48
 8007c1e:	d00a      	beq.n	8007c36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	61bb      	str	r3, [r7, #24]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	4613      	mov	r3, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f83f 	bl	8007cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3730      	adds	r7, #48	; 0x30
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	613b      	str	r3, [r7, #16]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	fb02 f303 	mul.w	r3, r2, r3
 8007c9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	3348      	adds	r3, #72	; 0x48
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 fd89 	bl	80097b8 <pvPortMalloc>
 8007ca6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d011      	beq.n	8007cd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	3348      	adds	r3, #72	; 0x48
 8007cb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cc0:	79fa      	ldrb	r2, [r7, #7]
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f805 	bl	8007cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
	}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	69b8      	ldr	r0, [r7, #24]
 8007d0e:	f7ff fecb 	bl	8007aa8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00e      	beq.n	8007d46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2100      	movs	r1, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f837 	bl	8007db4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	4603      	mov	r3, r0
 8007d56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007d60:	79fb      	ldrb	r3, [r7, #7]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6939      	ldr	r1, [r7, #16]
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f7ff ff7e 	bl	8007c68 <xQueueGenericCreate>
 8007d6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff ffd3 	bl	8007d1a <prvInitialiseMutex>

		return xNewQueue;
 8007d74:	68fb      	ldr	r3, [r7, #12]
	}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b088      	sub	sp, #32
 8007d82:	af02      	add	r7, sp, #8
 8007d84:	4603      	mov	r3, r0
 8007d86:	6039      	str	r1, [r7, #0]
 8007d88:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	6939      	ldr	r1, [r7, #16]
 8007d9c:	6978      	ldr	r0, [r7, #20]
 8007d9e:	f7ff feeb 	bl	8007b78 <xQueueGenericCreateStatic>
 8007da2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff ffb8 	bl	8007d1a <prvInitialiseMutex>

		return xNewQueue;
 8007daa:	68fb      	ldr	r3, [r7, #12]
	}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08e      	sub	sp, #56	; 0x38
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xQueueGenericSend+0x32>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d103      	bne.n	8007df4 <xQueueGenericSend+0x40>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <xQueueGenericSend+0x44>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <xQueueGenericSend+0x46>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <xQueueGenericSend+0x60>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d103      	bne.n	8007e22 <xQueueGenericSend+0x6e>
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <xQueueGenericSend+0x72>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <xQueueGenericSend+0x74>
 8007e26:	2300      	movs	r3, #0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xQueueGenericSend+0x8e>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	623b      	str	r3, [r7, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e42:	f001 f889 	bl	8008f58 <xTaskGetSchedulerState>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <xQueueGenericSend+0x9e>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <xQueueGenericSend+0xa2>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <xQueueGenericSend+0xa4>
 8007e56:	2300      	movs	r3, #0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	61fb      	str	r3, [r7, #28]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e72:	f001 fbbf 	bl	80095f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d302      	bcc.n	8007e88 <xQueueGenericSend+0xd4>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d129      	bne.n	8007edc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e8e:	f000 f9b3 	bl	80081f8 <prvCopyDataToQueue>
 8007e92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d010      	beq.n	8007ebe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	3324      	adds	r3, #36	; 0x24
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fe9d 	bl	8008be0 <xTaskRemoveFromEventList>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d013      	beq.n	8007ed4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007eac:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <xQueueGenericSend+0x1f8>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	e00a      	b.n	8007ed4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ec4:	4b39      	ldr	r3, [pc, #228]	; (8007fac <xQueueGenericSend+0x1f8>)
 8007ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ed4:	f001 fbbe 	bl	8009654 <vPortExitCritical>
				return pdPASS;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e063      	b.n	8007fa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d103      	bne.n	8007eea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ee2:	f001 fbb7 	bl	8009654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e05c      	b.n	8007fa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fed5 	bl	8008ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007efa:	2301      	movs	r3, #1
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007efe:	f001 fba9 	bl	8009654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f02:	f000 fc8b 	bl	800881c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f06:	f001 fb75 	bl	80095f4 <vPortEnterCritical>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f10:	b25b      	sxtb	r3, r3
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f16:	d103      	bne.n	8007f20 <xQueueGenericSend+0x16c>
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f2c:	d103      	bne.n	8007f36 <xQueueGenericSend+0x182>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f36:	f001 fb8d 	bl	8009654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f3a:	1d3a      	adds	r2, r7, #4
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fec4 	bl	8008cd0 <xTaskCheckForTimeOut>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d124      	bne.n	8007f98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f50:	f000 fa24 	bl	800839c <prvIsQueueFull>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d018      	beq.n	8007f8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	3310      	adds	r3, #16
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fe18 	bl	8008b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6a:	f000 f9af 	bl	80082cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f6e:	f000 fc63 	bl	8008838 <xTaskResumeAll>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f47f af7c 	bne.w	8007e72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <xQueueGenericSend+0x1f8>)
 8007f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	e772      	b.n	8007e72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f8e:	f000 f99d 	bl	80082cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f92:	f000 fc51 	bl	8008838 <xTaskResumeAll>
 8007f96:	e76c      	b.n	8007e72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9a:	f000 f997 	bl	80082cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f9e:	f000 fc4b 	bl	8008838 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3738      	adds	r7, #56	; 0x38
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08e      	sub	sp, #56	; 0x38
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	623b      	str	r3, [r7, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	61fb      	str	r3, [r7, #28]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008000:	f000 ffaa 	bl	8008f58 <xTaskGetSchedulerState>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <xQueueSemaphoreTake+0x60>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <xQueueSemaphoreTake+0x64>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <xQueueSemaphoreTake+0x66>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	61bb      	str	r3, [r7, #24]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008030:	f001 fae0 	bl	80095f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	d024      	beq.n	800808a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	1e5a      	subs	r2, r3, #1
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008050:	f001 f92a 	bl	80092a8 <pvTaskIncrementMutexHeldCount>
 8008054:	4602      	mov	r2, r0
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00f      	beq.n	8008082 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	3310      	adds	r3, #16
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fdba 	bl	8008be0 <xTaskRemoveFromEventList>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d007      	beq.n	8008082 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008072:	4b54      	ldr	r3, [pc, #336]	; (80081c4 <xQueueSemaphoreTake+0x214>)
 8008074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008082:	f001 fae7 	bl	8009654 <vPortExitCritical>
				return pdPASS;
 8008086:	2301      	movs	r3, #1
 8008088:	e097      	b.n	80081ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d111      	bne.n	80080b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	617b      	str	r3, [r7, #20]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080ac:	f001 fad2 	bl	8009654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080b0:	2300      	movs	r3, #0
 80080b2:	e082      	b.n	80081ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080ba:	f107 030c 	add.w	r3, r7, #12
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fdf0 	bl	8008ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080c8:	f001 fac4 	bl	8009654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080cc:	f000 fba6 	bl	800881c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080d0:	f001 fa90 	bl	80095f4 <vPortEnterCritical>
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080da:	b25b      	sxtb	r3, r3
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e0:	d103      	bne.n	80080ea <xQueueSemaphoreTake+0x13a>
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080f0:	b25b      	sxtb	r3, r3
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f6:	d103      	bne.n	8008100 <xQueueSemaphoreTake+0x150>
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008100:	f001 faa8 	bl	8009654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008104:	463a      	mov	r2, r7
 8008106:	f107 030c 	add.w	r3, r7, #12
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fddf 	bl	8008cd0 <xTaskCheckForTimeOut>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d132      	bne.n	800817e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800811a:	f000 f929 	bl	8008370 <prvIsQueueEmpty>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d026      	beq.n	8008172 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d109      	bne.n	8008140 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800812c:	f001 fa62 	bl	80095f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 ff2d 	bl	8008f94 <xTaskPriorityInherit>
 800813a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800813c:	f001 fa8a 	bl	8009654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008142:	3324      	adds	r3, #36	; 0x24
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fd25 	bl	8008b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800814e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008150:	f000 f8bc 	bl	80082cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008154:	f000 fb70 	bl	8008838 <xTaskResumeAll>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	f47f af68 	bne.w	8008030 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008160:	4b18      	ldr	r3, [pc, #96]	; (80081c4 <xQueueSemaphoreTake+0x214>)
 8008162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	e75e      	b.n	8008030 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008174:	f000 f8aa 	bl	80082cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008178:	f000 fb5e 	bl	8008838 <xTaskResumeAll>
 800817c:	e758      	b.n	8008030 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800817e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008180:	f000 f8a4 	bl	80082cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008184:	f000 fb58 	bl	8008838 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800818a:	f000 f8f1 	bl	8008370 <prvIsQueueEmpty>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	f43f af4d 	beq.w	8008030 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00d      	beq.n	80081b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800819c:	f001 fa2a 	bl	80095f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80081a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081a2:	f000 f811 	bl	80081c8 <prvGetDisinheritPriorityAfterTimeout>
 80081a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 ffec 	bl	800918c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081b4:	f001 fa4e 	bl	8009654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3738      	adds	r7, #56	; 0x38
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f1c3 0307 	rsb	r3, r3, #7
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e001      	b.n	80081ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081ea:	68fb      	ldr	r3, [r7, #12]
	}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10d      	bne.n	8008232 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d14d      	bne.n	80082ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 ff2c 	bl	8009080 <xTaskPriorityDisinherit>
 8008228:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	609a      	str	r2, [r3, #8]
 8008230:	e043      	b.n	80082ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d119      	bne.n	800826c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6858      	ldr	r0, [r3, #4]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	461a      	mov	r2, r3
 8008242:	68b9      	ldr	r1, [r7, #8]
 8008244:	f001 fccc 	bl	8009be0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	441a      	add	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	429a      	cmp	r2, r3
 8008260:	d32b      	bcc.n	80082ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	605a      	str	r2, [r3, #4]
 800826a:	e026      	b.n	80082ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68d8      	ldr	r0, [r3, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	461a      	mov	r2, r3
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	f001 fcb2 	bl	8009be0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008284:	425b      	negs	r3, r3
 8008286:	441a      	add	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d207      	bcs.n	80082a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	425b      	negs	r3, r3
 80082a2:	441a      	add	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d105      	bne.n	80082ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082c2:	697b      	ldr	r3, [r7, #20]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082d4:	f001 f98e 	bl	80095f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082e0:	e011      	b.n	8008306 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d012      	beq.n	8008310 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3324      	adds	r3, #36	; 0x24
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fc76 	bl	8008be0 <xTaskRemoveFromEventList>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082fa:	f000 fd4b 	bl	8008d94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	3b01      	subs	r3, #1
 8008302:	b2db      	uxtb	r3, r3
 8008304:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dce9      	bgt.n	80082e2 <prvUnlockQueue+0x16>
 800830e:	e000      	b.n	8008312 <prvUnlockQueue+0x46>
					break;
 8008310:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	22ff      	movs	r2, #255	; 0xff
 8008316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800831a:	f001 f99b 	bl	8009654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800831e:	f001 f969 	bl	80095f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008328:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800832a:	e011      	b.n	8008350 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d012      	beq.n	800835a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3310      	adds	r3, #16
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fc51 	bl	8008be0 <xTaskRemoveFromEventList>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008344:	f000 fd26 	bl	8008d94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	3b01      	subs	r3, #1
 800834c:	b2db      	uxtb	r3, r3
 800834e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dce9      	bgt.n	800832c <prvUnlockQueue+0x60>
 8008358:	e000      	b.n	800835c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800835a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	22ff      	movs	r2, #255	; 0xff
 8008360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008364:	f001 f976 	bl	8009654 <vPortExitCritical>
}
 8008368:	bf00      	nop
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008378:	f001 f93c 	bl	80095f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	e001      	b.n	800838e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800838e:	f001 f961 	bl	8009654 <vPortExitCritical>

	return xReturn;
 8008392:	68fb      	ldr	r3, [r7, #12]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083a4:	f001 f926 	bl	80095f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d102      	bne.n	80083ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e001      	b.n	80083be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083be:	f001 f949 	bl	8009654 <vPortExitCritical>

	return xReturn;
 80083c2:	68fb      	ldr	r3, [r7, #12]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08e      	sub	sp, #56	; 0x38
 80083d0:	af04      	add	r7, sp, #16
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10a      	bne.n	80083f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	623b      	str	r3, [r7, #32]
}
 80083f2:	bf00      	nop
 80083f4:	e7fe      	b.n	80083f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xTaskCreateStatic+0x46>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	61fb      	str	r3, [r7, #28]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008412:	2354      	movs	r3, #84	; 0x54
 8008414:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b54      	cmp	r3, #84	; 0x54
 800841a:	d00a      	beq.n	8008432 <xTaskCreateStatic+0x66>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	61bb      	str	r3, [r7, #24]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008432:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01e      	beq.n	8008478 <xTaskCreateStatic+0xac>
 800843a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01b      	beq.n	8008478 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008448:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	2202      	movs	r2, #2
 800844e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008452:	2300      	movs	r3, #0
 8008454:	9303      	str	r3, [sp, #12]
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	9302      	str	r3, [sp, #8]
 800845a:	f107 0314 	add.w	r3, r7, #20
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	68b9      	ldr	r1, [r7, #8]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f850 	bl	8008510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008472:	f000 f8d5 	bl	8008620 <prvAddNewTaskToReadyList>
 8008476:	e001      	b.n	800847c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800847c:	697b      	ldr	r3, [r7, #20]
	}
 800847e:	4618      	mov	r0, r3
 8008480:	3728      	adds	r7, #40	; 0x28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008486:	b580      	push	{r7, lr}
 8008488:	b08c      	sub	sp, #48	; 0x30
 800848a:	af04      	add	r7, sp, #16
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	603b      	str	r3, [r7, #0]
 8008492:	4613      	mov	r3, r2
 8008494:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4618      	mov	r0, r3
 800849c:	f001 f98c 	bl	80097b8 <pvPortMalloc>
 80084a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00e      	beq.n	80084c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084a8:	2054      	movs	r0, #84	; 0x54
 80084aa:	f001 f985 	bl	80097b8 <pvPortMalloc>
 80084ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30
 80084bc:	e005      	b.n	80084ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084be:	6978      	ldr	r0, [r7, #20]
 80084c0:	f001 fa46 	bl	8009950 <vPortFree>
 80084c4:	e001      	b.n	80084ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d017      	beq.n	8008500 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084d8:	88fa      	ldrh	r2, [r7, #6]
 80084da:	2300      	movs	r3, #0
 80084dc:	9303      	str	r3, [sp, #12]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	9302      	str	r3, [sp, #8]
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f80e 	bl	8008510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084f4:	69f8      	ldr	r0, [r7, #28]
 80084f6:	f000 f893 	bl	8008620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084fa:	2301      	movs	r3, #1
 80084fc:	61bb      	str	r3, [r7, #24]
 80084fe:	e002      	b.n	8008506 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008504:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008506:	69bb      	ldr	r3, [r7, #24]
	}
 8008508:	4618      	mov	r0, r3
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008528:	3b01      	subs	r3, #1
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	f023 0307 	bic.w	r3, r3, #7
 8008536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	617b      	str	r3, [r7, #20]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01f      	beq.n	800859e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800855e:	2300      	movs	r3, #0
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	e012      	b.n	800858a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	7819      	ldrb	r1, [r3, #0]
 800856c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	3334      	adds	r3, #52	; 0x34
 8008574:	460a      	mov	r2, r1
 8008576:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	4413      	add	r3, r2
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	3301      	adds	r3, #1
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	2b0f      	cmp	r3, #15
 800858e:	d9e9      	bls.n	8008564 <prvInitialiseNewTask+0x54>
 8008590:	e000      	b.n	8008594 <prvInitialiseNewTask+0x84>
			{
				break;
 8008592:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800859c:	e003      	b.n	80085a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	2b06      	cmp	r3, #6
 80085aa:	d901      	bls.n	80085b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085ac:	2306      	movs	r3, #6
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	2200      	movs	r2, #0
 80085c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff f9d9 	bl	800797e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	3318      	adds	r3, #24
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff f9d4 	bl	800797e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	f1c3 0207 	rsb	r2, r3, #7
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	2200      	movs	r2, #0
 80085f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	68f9      	ldr	r1, [r7, #12]
 80085fe:	69b8      	ldr	r0, [r7, #24]
 8008600:	f000 fecc 	bl	800939c <pxPortInitialiseStack>
 8008604:	4602      	mov	r2, r0
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008616:	bf00      	nop
 8008618:	3720      	adds	r7, #32
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008628:	f000 ffe4 	bl	80095f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800862c:	4b2a      	ldr	r3, [pc, #168]	; (80086d8 <prvAddNewTaskToReadyList+0xb8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a29      	ldr	r2, [pc, #164]	; (80086d8 <prvAddNewTaskToReadyList+0xb8>)
 8008634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008636:	4b29      	ldr	r3, [pc, #164]	; (80086dc <prvAddNewTaskToReadyList+0xbc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800863e:	4a27      	ldr	r2, [pc, #156]	; (80086dc <prvAddNewTaskToReadyList+0xbc>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008644:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <prvAddNewTaskToReadyList+0xb8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d110      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800864c:	f000 fbc6 	bl	8008ddc <prvInitialiseTaskLists>
 8008650:	e00d      	b.n	800866e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008652:	4b23      	ldr	r3, [pc, #140]	; (80086e0 <prvAddNewTaskToReadyList+0xc0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800865a:	4b20      	ldr	r3, [pc, #128]	; (80086dc <prvAddNewTaskToReadyList+0xbc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	429a      	cmp	r2, r3
 8008666:	d802      	bhi.n	800866e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008668:	4a1c      	ldr	r2, [pc, #112]	; (80086dc <prvAddNewTaskToReadyList+0xbc>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800866e:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008676:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	2201      	movs	r2, #1
 800867e:	409a      	lsls	r2, r3
 8008680:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4313      	orrs	r3, r2
 8008686:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4a15      	ldr	r2, [pc, #84]	; (80086ec <prvAddNewTaskToReadyList+0xcc>)
 8008698:	441a      	add	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3304      	adds	r3, #4
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f7ff f979 	bl	8007998 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086a6:	f000 ffd5 	bl	8009654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086aa:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <prvAddNewTaskToReadyList+0xc0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00e      	beq.n	80086d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086b2:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <prvAddNewTaskToReadyList+0xbc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	429a      	cmp	r2, r3
 80086be:	d207      	bcs.n	80086d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20000a98 	.word	0x20000a98
 80086dc:	20000998 	.word	0x20000998
 80086e0:	20000aa4 	.word	0x20000aa4
 80086e4:	20000ab4 	.word	0x20000ab4
 80086e8:	20000aa0 	.word	0x20000aa0
 80086ec:	2000099c 	.word	0x2000099c
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d017      	beq.n	8008736 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008706:	4b13      	ldr	r3, [pc, #76]	; (8008754 <vTaskDelay+0x60>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <vTaskDelay+0x30>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	60bb      	str	r3, [r7, #8]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008724:	f000 f87a 	bl	800881c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008728:	2100      	movs	r1, #0
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fdd0 	bl	80092d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008730:	f000 f882 	bl	8008838 <xTaskResumeAll>
 8008734:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d107      	bne.n	800874c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <vTaskDelay+0x64>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20000ac0 	.word	0x20000ac0
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08a      	sub	sp, #40	; 0x28
 8008760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800876a:	463a      	mov	r2, r7
 800876c:	1d39      	adds	r1, r7, #4
 800876e:	f107 0308 	add.w	r3, r7, #8
 8008772:	4618      	mov	r0, r3
 8008774:	f7fa f938 	bl	80029e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	9202      	str	r2, [sp, #8]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	2300      	movs	r3, #0
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	460a      	mov	r2, r1
 800878a:	491e      	ldr	r1, [pc, #120]	; (8008804 <vTaskStartScheduler+0xa8>)
 800878c:	481e      	ldr	r0, [pc, #120]	; (8008808 <vTaskStartScheduler+0xac>)
 800878e:	f7ff fe1d 	bl	80083cc <xTaskCreateStatic>
 8008792:	4603      	mov	r3, r0
 8008794:	4a1d      	ldr	r2, [pc, #116]	; (800880c <vTaskStartScheduler+0xb0>)
 8008796:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008798:	4b1c      	ldr	r3, [pc, #112]	; (800880c <vTaskStartScheduler+0xb0>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087a0:	2301      	movs	r3, #1
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	e001      	b.n	80087aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d116      	bne.n	80087de <vTaskStartScheduler+0x82>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087c4:	4b12      	ldr	r3, [pc, #72]	; (8008810 <vTaskStartScheduler+0xb4>)
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087cc:	4b11      	ldr	r3, [pc, #68]	; (8008814 <vTaskStartScheduler+0xb8>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087d2:	4b11      	ldr	r3, [pc, #68]	; (8008818 <vTaskStartScheduler+0xbc>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087d8:	f000 fe6a 	bl	80094b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087dc:	e00e      	b.n	80087fc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e4:	d10a      	bne.n	80087fc <vTaskStartScheduler+0xa0>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	60fb      	str	r3, [r7, #12]
}
 80087f8:	bf00      	nop
 80087fa:	e7fe      	b.n	80087fa <vTaskStartScheduler+0x9e>
}
 80087fc:	bf00      	nop
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	0800e598 	.word	0x0800e598
 8008808:	08008dad 	.word	0x08008dad
 800880c:	20000abc 	.word	0x20000abc
 8008810:	20000ab8 	.word	0x20000ab8
 8008814:	20000aa4 	.word	0x20000aa4
 8008818:	20000a9c 	.word	0x20000a9c

0800881c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008820:	4b04      	ldr	r3, [pc, #16]	; (8008834 <vTaskSuspendAll+0x18>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3301      	adds	r3, #1
 8008826:	4a03      	ldr	r2, [pc, #12]	; (8008834 <vTaskSuspendAll+0x18>)
 8008828:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800882a:	bf00      	nop
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	20000ac0 	.word	0x20000ac0

08008838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008842:	2300      	movs	r3, #0
 8008844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008846:	4b41      	ldr	r3, [pc, #260]	; (800894c <xTaskResumeAll+0x114>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <xTaskResumeAll+0x2c>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	603b      	str	r3, [r7, #0]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008864:	f000 fec6 	bl	80095f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008868:	4b38      	ldr	r3, [pc, #224]	; (800894c <xTaskResumeAll+0x114>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3b01      	subs	r3, #1
 800886e:	4a37      	ldr	r2, [pc, #220]	; (800894c <xTaskResumeAll+0x114>)
 8008870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008872:	4b36      	ldr	r3, [pc, #216]	; (800894c <xTaskResumeAll+0x114>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d161      	bne.n	800893e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800887a:	4b35      	ldr	r3, [pc, #212]	; (8008950 <xTaskResumeAll+0x118>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d05d      	beq.n	800893e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008882:	e02e      	b.n	80088e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008884:	4b33      	ldr	r3, [pc, #204]	; (8008954 <xTaskResumeAll+0x11c>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3318      	adds	r3, #24
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff f8de 	bl	8007a52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3304      	adds	r3, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff f8d9 	bl	8007a52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	2201      	movs	r2, #1
 80088a6:	409a      	lsls	r2, r3
 80088a8:	4b2b      	ldr	r3, [pc, #172]	; (8008958 <xTaskResumeAll+0x120>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	4a2a      	ldr	r2, [pc, #168]	; (8008958 <xTaskResumeAll+0x120>)
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4a27      	ldr	r2, [pc, #156]	; (800895c <xTaskResumeAll+0x124>)
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f7ff f865 	bl	8007998 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4b23      	ldr	r3, [pc, #140]	; (8008960 <xTaskResumeAll+0x128>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	429a      	cmp	r2, r3
 80088da:	d302      	bcc.n	80088e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80088dc:	4b21      	ldr	r3, [pc, #132]	; (8008964 <xTaskResumeAll+0x12c>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e2:	4b1c      	ldr	r3, [pc, #112]	; (8008954 <xTaskResumeAll+0x11c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1cc      	bne.n	8008884 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088f0:	f000 fb12 	bl	8008f18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088f4:	4b1c      	ldr	r3, [pc, #112]	; (8008968 <xTaskResumeAll+0x130>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d010      	beq.n	8008922 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008900:	f000 f836 	bl	8008970 <xTaskIncrementTick>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800890a:	4b16      	ldr	r3, [pc, #88]	; (8008964 <xTaskResumeAll+0x12c>)
 800890c:	2201      	movs	r2, #1
 800890e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3b01      	subs	r3, #1
 8008914:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f1      	bne.n	8008900 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800891c:	4b12      	ldr	r3, [pc, #72]	; (8008968 <xTaskResumeAll+0x130>)
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008922:	4b10      	ldr	r3, [pc, #64]	; (8008964 <xTaskResumeAll+0x12c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800892a:	2301      	movs	r3, #1
 800892c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800892e:	4b0f      	ldr	r3, [pc, #60]	; (800896c <xTaskResumeAll+0x134>)
 8008930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800893e:	f000 fe89 	bl	8009654 <vPortExitCritical>

	return xAlreadyYielded;
 8008942:	68bb      	ldr	r3, [r7, #8]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	20000ac0 	.word	0x20000ac0
 8008950:	20000a98 	.word	0x20000a98
 8008954:	20000a58 	.word	0x20000a58
 8008958:	20000aa0 	.word	0x20000aa0
 800895c:	2000099c 	.word	0x2000099c
 8008960:	20000998 	.word	0x20000998
 8008964:	20000aac 	.word	0x20000aac
 8008968:	20000aa8 	.word	0x20000aa8
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800897a:	4b4e      	ldr	r3, [pc, #312]	; (8008ab4 <xTaskIncrementTick+0x144>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 808e 	bne.w	8008aa0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008984:	4b4c      	ldr	r3, [pc, #304]	; (8008ab8 <xTaskIncrementTick+0x148>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3301      	adds	r3, #1
 800898a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800898c:	4a4a      	ldr	r2, [pc, #296]	; (8008ab8 <xTaskIncrementTick+0x148>)
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d120      	bne.n	80089da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008998:	4b48      	ldr	r3, [pc, #288]	; (8008abc <xTaskIncrementTick+0x14c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	603b      	str	r3, [r7, #0]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <xTaskIncrementTick+0x46>
 80089b8:	4b40      	ldr	r3, [pc, #256]	; (8008abc <xTaskIncrementTick+0x14c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	4b40      	ldr	r3, [pc, #256]	; (8008ac0 <xTaskIncrementTick+0x150>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a3e      	ldr	r2, [pc, #248]	; (8008abc <xTaskIncrementTick+0x14c>)
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	4a3e      	ldr	r2, [pc, #248]	; (8008ac0 <xTaskIncrementTick+0x150>)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	4b3d      	ldr	r3, [pc, #244]	; (8008ac4 <xTaskIncrementTick+0x154>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3301      	adds	r3, #1
 80089d2:	4a3c      	ldr	r2, [pc, #240]	; (8008ac4 <xTaskIncrementTick+0x154>)
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	f000 fa9f 	bl	8008f18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089da:	4b3b      	ldr	r3, [pc, #236]	; (8008ac8 <xTaskIncrementTick+0x158>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d348      	bcc.n	8008a76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e4:	4b35      	ldr	r3, [pc, #212]	; (8008abc <xTaskIncrementTick+0x14c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ee:	4b36      	ldr	r3, [pc, #216]	; (8008ac8 <xTaskIncrementTick+0x158>)
 80089f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089f4:	601a      	str	r2, [r3, #0]
					break;
 80089f6:	e03e      	b.n	8008a76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f8:	4b30      	ldr	r3, [pc, #192]	; (8008abc <xTaskIncrementTick+0x14c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d203      	bcs.n	8008a18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a10:	4a2d      	ldr	r2, [pc, #180]	; (8008ac8 <xTaskIncrementTick+0x158>)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a16:	e02e      	b.n	8008a76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff f818 	bl	8007a52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	3318      	adds	r3, #24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff f80f 	bl	8007a52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	2201      	movs	r2, #1
 8008a3a:	409a      	lsls	r2, r3
 8008a3c:	4b23      	ldr	r3, [pc, #140]	; (8008acc <xTaskIncrementTick+0x15c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	4a22      	ldr	r2, [pc, #136]	; (8008acc <xTaskIncrementTick+0x15c>)
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <xTaskIncrementTick+0x160>)
 8008a54:	441a      	add	r2, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f7fe ff9b 	bl	8007998 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a66:	4b1b      	ldr	r3, [pc, #108]	; (8008ad4 <xTaskIncrementTick+0x164>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d3b9      	bcc.n	80089e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a70:	2301      	movs	r3, #1
 8008a72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a74:	e7b6      	b.n	80089e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a76:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <xTaskIncrementTick+0x164>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7c:	4914      	ldr	r1, [pc, #80]	; (8008ad0 <xTaskIncrementTick+0x160>)
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d901      	bls.n	8008a92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a92:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <xTaskIncrementTick+0x168>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	e004      	b.n	8008aaa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008aa0:	4b0e      	ldr	r3, [pc, #56]	; (8008adc <xTaskIncrementTick+0x16c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	4a0d      	ldr	r2, [pc, #52]	; (8008adc <xTaskIncrementTick+0x16c>)
 8008aa8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008aaa:	697b      	ldr	r3, [r7, #20]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	20000ac0 	.word	0x20000ac0
 8008ab8:	20000a9c 	.word	0x20000a9c
 8008abc:	20000a50 	.word	0x20000a50
 8008ac0:	20000a54 	.word	0x20000a54
 8008ac4:	20000ab0 	.word	0x20000ab0
 8008ac8:	20000ab8 	.word	0x20000ab8
 8008acc:	20000aa0 	.word	0x20000aa0
 8008ad0:	2000099c 	.word	0x2000099c
 8008ad4:	20000998 	.word	0x20000998
 8008ad8:	20000aac 	.word	0x20000aac
 8008adc:	20000aa8 	.word	0x20000aa8

08008ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ae6:	4b27      	ldr	r3, [pc, #156]	; (8008b84 <vTaskSwitchContext+0xa4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008aee:	4b26      	ldr	r3, [pc, #152]	; (8008b88 <vTaskSwitchContext+0xa8>)
 8008af0:	2201      	movs	r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008af4:	e03f      	b.n	8008b76 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008af6:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <vTaskSwitchContext+0xa8>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afc:	4b23      	ldr	r3, [pc, #140]	; (8008b8c <vTaskSwitchContext+0xac>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	fab3 f383 	clz	r3, r3
 8008b08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	f1c3 031f 	rsb	r3, r3, #31
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	491f      	ldr	r1, [pc, #124]	; (8008b90 <vTaskSwitchContext+0xb0>)
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	440b      	add	r3, r1
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10a      	bne.n	8008b3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	607b      	str	r3, [r7, #4]
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <vTaskSwitchContext+0x5a>
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4a12      	ldr	r2, [pc, #72]	; (8008b90 <vTaskSwitchContext+0xb0>)
 8008b48:	4413      	add	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	605a      	str	r2, [r3, #4]
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d104      	bne.n	8008b6c <vTaskSwitchContext+0x8c>
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	605a      	str	r2, [r3, #4]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	4a08      	ldr	r2, [pc, #32]	; (8008b94 <vTaskSwitchContext+0xb4>)
 8008b74:	6013      	str	r3, [r2, #0]
}
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000ac0 	.word	0x20000ac0
 8008b88:	20000aac 	.word	0x20000aac
 8008b8c:	20000aa0 	.word	0x20000aa0
 8008b90:	2000099c 	.word	0x2000099c
 8008b94:	20000998 	.word	0x20000998

08008b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	60fb      	str	r3, [r7, #12]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bbe:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <vTaskPlaceOnEventList+0x44>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3318      	adds	r3, #24
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7fe ff0a 	bl	80079e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bcc:	2101      	movs	r1, #1
 8008bce:	6838      	ldr	r0, [r7, #0]
 8008bd0:	f000 fb7e 	bl	80092d0 <prvAddCurrentTaskToDelayedList>
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000998 	.word	0x20000998

08008be0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60fb      	str	r3, [r7, #12]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	3318      	adds	r3, #24
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe ff1e 	bl	8007a52 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c16:	4b1d      	ldr	r3, [pc, #116]	; (8008c8c <xTaskRemoveFromEventList+0xac>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d11c      	bne.n	8008c58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe ff15 	bl	8007a52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	409a      	lsls	r2, r3
 8008c30:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <xTaskRemoveFromEventList+0xb0>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	4a16      	ldr	r2, [pc, #88]	; (8008c90 <xTaskRemoveFromEventList+0xb0>)
 8008c38:	6013      	str	r3, [r2, #0]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4a13      	ldr	r2, [pc, #76]	; (8008c94 <xTaskRemoveFromEventList+0xb4>)
 8008c48:	441a      	add	r2, r3
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f7fe fea1 	bl	8007998 <vListInsertEnd>
 8008c56:	e005      	b.n	8008c64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	3318      	adds	r3, #24
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	480e      	ldr	r0, [pc, #56]	; (8008c98 <xTaskRemoveFromEventList+0xb8>)
 8008c60:	f7fe fe9a 	bl	8007998 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <xTaskRemoveFromEventList+0xbc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d905      	bls.n	8008c7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c72:	2301      	movs	r3, #1
 8008c74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c76:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <xTaskRemoveFromEventList+0xc0>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	e001      	b.n	8008c82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c82:	697b      	ldr	r3, [r7, #20]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000ac0 	.word	0x20000ac0
 8008c90:	20000aa0 	.word	0x20000aa0
 8008c94:	2000099c 	.word	0x2000099c
 8008c98:	20000a58 	.word	0x20000a58
 8008c9c:	20000998 	.word	0x20000998
 8008ca0:	20000aac 	.word	0x20000aac

08008ca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <vTaskInternalSetTimeOutState+0x24>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cb4:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <vTaskInternalSetTimeOutState+0x28>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	20000ab0 	.word	0x20000ab0
 8008ccc:	20000a9c 	.word	0x20000a9c

08008cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	613b      	str	r3, [r7, #16]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	60fb      	str	r3, [r7, #12]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d12:	f000 fc6f 	bl	80095f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d16:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <xTaskCheckForTimeOut+0xbc>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d2e:	d102      	bne.n	8008d36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	e023      	b.n	8008d7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <xTaskCheckForTimeOut+0xc0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d007      	beq.n	8008d52 <xTaskCheckForTimeOut+0x82>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d302      	bcc.n	8008d52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	61fb      	str	r3, [r7, #28]
 8008d50:	e015      	b.n	8008d7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d20b      	bcs.n	8008d74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	1ad2      	subs	r2, r2, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff ff9b 	bl	8008ca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	e004      	b.n	8008d7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d7e:	f000 fc69 	bl	8009654 <vPortExitCritical>

	return xReturn;
 8008d82:	69fb      	ldr	r3, [r7, #28]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3720      	adds	r7, #32
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000a9c 	.word	0x20000a9c
 8008d90:	20000ab0 	.word	0x20000ab0

08008d94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d98:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <vTaskMissedYield+0x14>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
}
 8008d9e:	bf00      	nop
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	20000aac 	.word	0x20000aac

08008dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008db4:	f000 f852 	bl	8008e5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008db8:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <prvIdleTask+0x28>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d9f9      	bls.n	8008db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008dc0:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <prvIdleTask+0x2c>)
 8008dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008dd0:	e7f0      	b.n	8008db4 <prvIdleTask+0x8>
 8008dd2:	bf00      	nop
 8008dd4:	2000099c 	.word	0x2000099c
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008de2:	2300      	movs	r3, #0
 8008de4:	607b      	str	r3, [r7, #4]
 8008de6:	e00c      	b.n	8008e02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <prvInitialiseTaskLists+0x60>)
 8008df4:	4413      	add	r3, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fda1 	bl	800793e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b06      	cmp	r3, #6
 8008e06:	d9ef      	bls.n	8008de8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e08:	480d      	ldr	r0, [pc, #52]	; (8008e40 <prvInitialiseTaskLists+0x64>)
 8008e0a:	f7fe fd98 	bl	800793e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e0e:	480d      	ldr	r0, [pc, #52]	; (8008e44 <prvInitialiseTaskLists+0x68>)
 8008e10:	f7fe fd95 	bl	800793e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e14:	480c      	ldr	r0, [pc, #48]	; (8008e48 <prvInitialiseTaskLists+0x6c>)
 8008e16:	f7fe fd92 	bl	800793e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e1a:	480c      	ldr	r0, [pc, #48]	; (8008e4c <prvInitialiseTaskLists+0x70>)
 8008e1c:	f7fe fd8f 	bl	800793e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e20:	480b      	ldr	r0, [pc, #44]	; (8008e50 <prvInitialiseTaskLists+0x74>)
 8008e22:	f7fe fd8c 	bl	800793e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e26:	4b0b      	ldr	r3, [pc, #44]	; (8008e54 <prvInitialiseTaskLists+0x78>)
 8008e28:	4a05      	ldr	r2, [pc, #20]	; (8008e40 <prvInitialiseTaskLists+0x64>)
 8008e2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <prvInitialiseTaskLists+0x7c>)
 8008e2e:	4a05      	ldr	r2, [pc, #20]	; (8008e44 <prvInitialiseTaskLists+0x68>)
 8008e30:	601a      	str	r2, [r3, #0]
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	2000099c 	.word	0x2000099c
 8008e40:	20000a28 	.word	0x20000a28
 8008e44:	20000a3c 	.word	0x20000a3c
 8008e48:	20000a58 	.word	0x20000a58
 8008e4c:	20000a6c 	.word	0x20000a6c
 8008e50:	20000a84 	.word	0x20000a84
 8008e54:	20000a50 	.word	0x20000a50
 8008e58:	20000a54 	.word	0x20000a54

08008e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e62:	e019      	b.n	8008e98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e64:	f000 fbc6 	bl	80095f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e68:	4b10      	ldr	r3, [pc, #64]	; (8008eac <prvCheckTasksWaitingTermination+0x50>)
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fdec 	bl	8007a52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <prvCheckTasksWaitingTermination+0x54>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	4a0b      	ldr	r2, [pc, #44]	; (8008eb0 <prvCheckTasksWaitingTermination+0x54>)
 8008e82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <prvCheckTasksWaitingTermination+0x58>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	4a0a      	ldr	r2, [pc, #40]	; (8008eb4 <prvCheckTasksWaitingTermination+0x58>)
 8008e8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e8e:	f000 fbe1 	bl	8009654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f810 	bl	8008eb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <prvCheckTasksWaitingTermination+0x58>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e1      	bne.n	8008e64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000a6c 	.word	0x20000a6c
 8008eb0:	20000a98 	.word	0x20000a98
 8008eb4:	20000a80 	.word	0x20000a80

08008eb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d108      	bne.n	8008edc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 fd3e 	bl	8009950 <vPortFree>
				vPortFree( pxTCB );
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fd3b 	bl	8009950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008eda:	e018      	b.n	8008f0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d103      	bne.n	8008eee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fd32 	bl	8009950 <vPortFree>
	}
 8008eec:	e00f      	b.n	8008f0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d00a      	beq.n	8008f0e <prvDeleteTCB+0x56>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60fb      	str	r3, [r7, #12]
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <prvDeleteTCB+0x54>
	}
 8008f0e:	bf00      	nop
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f1e:	4b0c      	ldr	r3, [pc, #48]	; (8008f50 <prvResetNextTaskUnblockTime+0x38>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <prvResetNextTaskUnblockTime+0x3c>)
 8008f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f30:	e008      	b.n	8008f44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <prvResetNextTaskUnblockTime+0x38>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	4a04      	ldr	r2, [pc, #16]	; (8008f54 <prvResetNextTaskUnblockTime+0x3c>)
 8008f42:	6013      	str	r3, [r2, #0]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	20000a50 	.word	0x20000a50
 8008f54:	20000ab8 	.word	0x20000ab8

08008f58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <xTaskGetSchedulerState+0x34>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f66:	2301      	movs	r3, #1
 8008f68:	607b      	str	r3, [r7, #4]
 8008f6a:	e008      	b.n	8008f7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f6c:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <xTaskGetSchedulerState+0x38>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f74:	2302      	movs	r3, #2
 8008f76:	607b      	str	r3, [r7, #4]
 8008f78:	e001      	b.n	8008f7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f7e:	687b      	ldr	r3, [r7, #4]
	}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	20000aa4 	.word	0x20000aa4
 8008f90:	20000ac0 	.word	0x20000ac0

08008f94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d05e      	beq.n	8009068 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fae:	4b31      	ldr	r3, [pc, #196]	; (8009074 <xTaskPriorityInherit+0xe0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d24e      	bcs.n	8009056 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	db06      	blt.n	8008fce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc0:	4b2c      	ldr	r3, [pc, #176]	; (8009074 <xTaskPriorityInherit+0xe0>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc6:	f1c3 0207 	rsb	r2, r3, #7
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	6959      	ldr	r1, [r3, #20]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4a26      	ldr	r2, [pc, #152]	; (8009078 <xTaskPriorityInherit+0xe4>)
 8008fe0:	4413      	add	r3, r2
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	d12f      	bne.n	8009046 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fd31 	bl	8007a52 <uxListRemove>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8009000:	43da      	mvns	r2, r3
 8009002:	4b1e      	ldr	r3, [pc, #120]	; (800907c <xTaskPriorityInherit+0xe8>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4013      	ands	r3, r2
 8009008:	4a1c      	ldr	r2, [pc, #112]	; (800907c <xTaskPriorityInherit+0xe8>)
 800900a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800900c:	4b19      	ldr	r3, [pc, #100]	; (8009074 <xTaskPriorityInherit+0xe0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	2201      	movs	r2, #1
 800901c:	409a      	lsls	r2, r3
 800901e:	4b17      	ldr	r3, [pc, #92]	; (800907c <xTaskPriorityInherit+0xe8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4313      	orrs	r3, r2
 8009024:	4a15      	ldr	r2, [pc, #84]	; (800907c <xTaskPriorityInherit+0xe8>)
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4a10      	ldr	r2, [pc, #64]	; (8009078 <xTaskPriorityInherit+0xe4>)
 8009036:	441a      	add	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	3304      	adds	r3, #4
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7fe fcaa 	bl	8007998 <vListInsertEnd>
 8009044:	e004      	b.n	8009050 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009046:	4b0b      	ldr	r3, [pc, #44]	; (8009074 <xTaskPriorityInherit+0xe0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e008      	b.n	8009068 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <xTaskPriorityInherit+0xe0>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	429a      	cmp	r2, r3
 8009062:	d201      	bcs.n	8009068 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009064:	2301      	movs	r3, #1
 8009066:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009068:	68fb      	ldr	r3, [r7, #12]
	}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000998 	.word	0x20000998
 8009078:	2000099c 	.word	0x2000099c
 800907c:	20000aa0 	.word	0x20000aa0

08009080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d06e      	beq.n	8009174 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009096:	4b3a      	ldr	r3, [pc, #232]	; (8009180 <xTaskPriorityDisinherit+0x100>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	429a      	cmp	r2, r3
 800909e:	d00a      	beq.n	80090b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60fb      	str	r3, [r7, #12]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	60bb      	str	r3, [r7, #8]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d044      	beq.n	8009174 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d140      	bne.n	8009174 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fcab 	bl	8007a52 <uxListRemove>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d115      	bne.n	800912e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	491f      	ldr	r1, [pc, #124]	; (8009184 <xTaskPriorityDisinherit+0x104>)
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <xTaskPriorityDisinherit+0xae>
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	2201      	movs	r2, #1
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	43da      	mvns	r2, r3
 8009124:	4b18      	ldr	r3, [pc, #96]	; (8009188 <xTaskPriorityDisinherit+0x108>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4013      	ands	r3, r2
 800912a:	4a17      	ldr	r2, [pc, #92]	; (8009188 <xTaskPriorityDisinherit+0x108>)
 800912c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	f1c3 0207 	rsb	r2, r3, #7
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	2201      	movs	r2, #1
 8009148:	409a      	lsls	r2, r3
 800914a:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <xTaskPriorityDisinherit+0x108>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4313      	orrs	r3, r2
 8009150:	4a0d      	ldr	r2, [pc, #52]	; (8009188 <xTaskPriorityDisinherit+0x108>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4a08      	ldr	r2, [pc, #32]	; (8009184 <xTaskPriorityDisinherit+0x104>)
 8009162:	441a      	add	r2, r3
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	3304      	adds	r3, #4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fc14 	bl	8007998 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009174:	697b      	ldr	r3, [r7, #20]
	}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000998 	.word	0x20000998
 8009184:	2000099c 	.word	0x2000099c
 8009188:	20000aa0 	.word	0x20000aa0

0800918c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800919a:	2301      	movs	r3, #1
 800919c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d077      	beq.n	8009294 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60fb      	str	r3, [r7, #12]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d902      	bls.n	80091d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	e002      	b.n	80091d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d058      	beq.n	8009294 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d153      	bne.n	8009294 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80091ec:	4b2b      	ldr	r3, [pc, #172]	; (800929c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d10a      	bne.n	800920c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	60bb      	str	r3, [r7, #8]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	db04      	blt.n	800922a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	f1c3 0207 	rsb	r2, r3, #7
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	6959      	ldr	r1, [r3, #20]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	4613      	mov	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4a19      	ldr	r2, [pc, #100]	; (80092a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800923a:	4413      	add	r3, r2
 800923c:	4299      	cmp	r1, r3
 800923e:	d129      	bne.n	8009294 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	3304      	adds	r3, #4
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe fc04 	bl	8007a52 <uxListRemove>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	2201      	movs	r2, #1
 8009256:	fa02 f303 	lsl.w	r3, r2, r3
 800925a:	43da      	mvns	r2, r3
 800925c:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4013      	ands	r3, r2
 8009262:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009264:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	2201      	movs	r2, #1
 800926c:	409a      	lsls	r2, r3
 800926e:	4b0d      	ldr	r3, [pc, #52]	; (80092a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4313      	orrs	r3, r2
 8009274:	4a0b      	ldr	r2, [pc, #44]	; (80092a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a06      	ldr	r2, [pc, #24]	; (80092a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009286:	441a      	add	r2, r3
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe fb82 	bl	8007998 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009294:	bf00      	nop
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20000998 	.word	0x20000998
 80092a0:	2000099c 	.word	0x2000099c
 80092a4:	20000aa0 	.word	0x20000aa0

080092a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <pvTaskIncrementMutexHeldCount+0x24>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <pvTaskIncrementMutexHeldCount+0x24>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ba:	3201      	adds	r2, #1
 80092bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80092be:	4b03      	ldr	r3, [pc, #12]	; (80092cc <pvTaskIncrementMutexHeldCount+0x24>)
 80092c0:	681b      	ldr	r3, [r3, #0]
	}
 80092c2:	4618      	mov	r0, r3
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	20000998 	.word	0x20000998

080092d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092da:	4b29      	ldr	r3, [pc, #164]	; (8009380 <prvAddCurrentTaskToDelayedList+0xb0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092e0:	4b28      	ldr	r3, [pc, #160]	; (8009384 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3304      	adds	r3, #4
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fbb3 	bl	8007a52 <uxListRemove>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10b      	bne.n	800930a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80092f2:	4b24      	ldr	r3, [pc, #144]	; (8009384 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	2201      	movs	r2, #1
 80092fa:	fa02 f303 	lsl.w	r3, r2, r3
 80092fe:	43da      	mvns	r2, r3
 8009300:	4b21      	ldr	r3, [pc, #132]	; (8009388 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4013      	ands	r3, r2
 8009306:	4a20      	ldr	r2, [pc, #128]	; (8009388 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009308:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009310:	d10a      	bne.n	8009328 <prvAddCurrentTaskToDelayedList+0x58>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009318:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <prvAddCurrentTaskToDelayedList+0xb4>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3304      	adds	r3, #4
 800931e:	4619      	mov	r1, r3
 8009320:	481a      	ldr	r0, [pc, #104]	; (800938c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009322:	f7fe fb39 	bl	8007998 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009326:	e026      	b.n	8009376 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009330:	4b14      	ldr	r3, [pc, #80]	; (8009384 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	429a      	cmp	r2, r3
 800933e:	d209      	bcs.n	8009354 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009340:	4b13      	ldr	r3, [pc, #76]	; (8009390 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b0f      	ldr	r3, [pc, #60]	; (8009384 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe fb47 	bl	80079e0 <vListInsert>
}
 8009352:	e010      	b.n	8009376 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009354:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <prvAddCurrentTaskToDelayedList+0xb4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3304      	adds	r3, #4
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7fe fb3d 	bl	80079e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	429a      	cmp	r2, r3
 800936e:	d202      	bcs.n	8009376 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009370:	4a09      	ldr	r2, [pc, #36]	; (8009398 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	6013      	str	r3, [r2, #0]
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000a9c 	.word	0x20000a9c
 8009384:	20000998 	.word	0x20000998
 8009388:	20000aa0 	.word	0x20000aa0
 800938c:	20000a84 	.word	0x20000a84
 8009390:	20000a54 	.word	0x20000a54
 8009394:	20000a50 	.word	0x20000a50
 8009398:	20000ab8 	.word	0x20000ab8

0800939c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3b04      	subs	r3, #4
 80093ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3b04      	subs	r3, #4
 80093ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f023 0201 	bic.w	r2, r3, #1
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3b04      	subs	r3, #4
 80093ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093cc:	4a0c      	ldr	r2, [pc, #48]	; (8009400 <pxPortInitialiseStack+0x64>)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3b14      	subs	r3, #20
 80093d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3b04      	subs	r3, #4
 80093e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f06f 0202 	mvn.w	r2, #2
 80093ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3b20      	subs	r3, #32
 80093f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093f2:	68fb      	ldr	r3, [r7, #12]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	08009405 	.word	0x08009405

08009404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800940e:	4b12      	ldr	r3, [pc, #72]	; (8009458 <prvTaskExitError+0x54>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009416:	d00a      	beq.n	800942e <prvTaskExitError+0x2a>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	60fb      	str	r3, [r7, #12]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <prvTaskExitError+0x28>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	60bb      	str	r3, [r7, #8]
}
 8009440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009442:	bf00      	nop
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0fc      	beq.n	8009444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800944a:	bf00      	nop
 800944c:	bf00      	nop
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	200000b4 	.word	0x200000b4
 800945c:	00000000 	.word	0x00000000

08009460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <pxCurrentTCBConst2>)
 8009462:	6819      	ldr	r1, [r3, #0]
 8009464:	6808      	ldr	r0, [r1, #0]
 8009466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946a:	f380 8809 	msr	PSP, r0
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f04f 0000 	mov.w	r0, #0
 8009476:	f380 8811 	msr	BASEPRI, r0
 800947a:	4770      	bx	lr
 800947c:	f3af 8000 	nop.w

08009480 <pxCurrentTCBConst2>:
 8009480:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop

08009488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009488:	4808      	ldr	r0, [pc, #32]	; (80094ac <prvPortStartFirstTask+0x24>)
 800948a:	6800      	ldr	r0, [r0, #0]
 800948c:	6800      	ldr	r0, [r0, #0]
 800948e:	f380 8808 	msr	MSP, r0
 8009492:	f04f 0000 	mov.w	r0, #0
 8009496:	f380 8814 	msr	CONTROL, r0
 800949a:	b662      	cpsie	i
 800949c:	b661      	cpsie	f
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	df00      	svc	0
 80094a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094aa:	bf00      	nop
 80094ac:	e000ed08 	.word	0xe000ed08

080094b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80094b6:	4b46      	ldr	r3, [pc, #280]	; (80095d0 <xPortStartScheduler+0x120>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a46      	ldr	r2, [pc, #280]	; (80095d4 <xPortStartScheduler+0x124>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d10a      	bne.n	80094d6 <xPortStartScheduler+0x26>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	613b      	str	r3, [r7, #16]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80094d6:	4b3e      	ldr	r3, [pc, #248]	; (80095d0 <xPortStartScheduler+0x120>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a3f      	ldr	r2, [pc, #252]	; (80095d8 <xPortStartScheduler+0x128>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d10a      	bne.n	80094f6 <xPortStartScheduler+0x46>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	60fb      	str	r3, [r7, #12]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094f6:	4b39      	ldr	r3, [pc, #228]	; (80095dc <xPortStartScheduler+0x12c>)
 80094f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	22ff      	movs	r2, #255	; 0xff
 8009506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009518:	b2da      	uxtb	r2, r3
 800951a:	4b31      	ldr	r3, [pc, #196]	; (80095e0 <xPortStartScheduler+0x130>)
 800951c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800951e:	4b31      	ldr	r3, [pc, #196]	; (80095e4 <xPortStartScheduler+0x134>)
 8009520:	2207      	movs	r2, #7
 8009522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009524:	e009      	b.n	800953a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009526:	4b2f      	ldr	r3, [pc, #188]	; (80095e4 <xPortStartScheduler+0x134>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3b01      	subs	r3, #1
 800952c:	4a2d      	ldr	r2, [pc, #180]	; (80095e4 <xPortStartScheduler+0x134>)
 800952e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	b2db      	uxtb	r3, r3
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	b2db      	uxtb	r3, r3
 8009538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009542:	2b80      	cmp	r3, #128	; 0x80
 8009544:	d0ef      	beq.n	8009526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009546:	4b27      	ldr	r3, [pc, #156]	; (80095e4 <xPortStartScheduler+0x134>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f1c3 0307 	rsb	r3, r3, #7
 800954e:	2b04      	cmp	r3, #4
 8009550:	d00a      	beq.n	8009568 <xPortStartScheduler+0xb8>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	60bb      	str	r3, [r7, #8]
}
 8009564:	bf00      	nop
 8009566:	e7fe      	b.n	8009566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009568:	4b1e      	ldr	r3, [pc, #120]	; (80095e4 <xPortStartScheduler+0x134>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <xPortStartScheduler+0x134>)
 8009570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009572:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <xPortStartScheduler+0x134>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800957a:	4a1a      	ldr	r2, [pc, #104]	; (80095e4 <xPortStartScheduler+0x134>)
 800957c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	b2da      	uxtb	r2, r3
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009586:	4b18      	ldr	r3, [pc, #96]	; (80095e8 <xPortStartScheduler+0x138>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a17      	ldr	r2, [pc, #92]	; (80095e8 <xPortStartScheduler+0x138>)
 800958c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009592:	4b15      	ldr	r3, [pc, #84]	; (80095e8 <xPortStartScheduler+0x138>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a14      	ldr	r2, [pc, #80]	; (80095e8 <xPortStartScheduler+0x138>)
 8009598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800959c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800959e:	f000 f8dd 	bl	800975c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <xPortStartScheduler+0x13c>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095a8:	f000 f8fc 	bl	80097a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095ac:	4b10      	ldr	r3, [pc, #64]	; (80095f0 <xPortStartScheduler+0x140>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a0f      	ldr	r2, [pc, #60]	; (80095f0 <xPortStartScheduler+0x140>)
 80095b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095b8:	f7ff ff66 	bl	8009488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095bc:	f7ff fa90 	bl	8008ae0 <vTaskSwitchContext>
	prvTaskExitError();
 80095c0:	f7ff ff20 	bl	8009404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	e000ed00 	.word	0xe000ed00
 80095d4:	410fc271 	.word	0x410fc271
 80095d8:	410fc270 	.word	0x410fc270
 80095dc:	e000e400 	.word	0xe000e400
 80095e0:	20000ac4 	.word	0x20000ac4
 80095e4:	20000ac8 	.word	0x20000ac8
 80095e8:	e000ed20 	.word	0xe000ed20
 80095ec:	200000b4 	.word	0x200000b4
 80095f0:	e000ef34 	.word	0xe000ef34

080095f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	607b      	str	r3, [r7, #4]
}
 800960c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800960e:	4b0f      	ldr	r3, [pc, #60]	; (800964c <vPortEnterCritical+0x58>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3301      	adds	r3, #1
 8009614:	4a0d      	ldr	r2, [pc, #52]	; (800964c <vPortEnterCritical+0x58>)
 8009616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009618:	4b0c      	ldr	r3, [pc, #48]	; (800964c <vPortEnterCritical+0x58>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d10f      	bne.n	8009640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <vPortEnterCritical+0x5c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <vPortEnterCritical+0x4c>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	603b      	str	r3, [r7, #0]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <vPortEnterCritical+0x4a>
	}
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	200000b4 	.word	0x200000b4
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <vPortExitCritical+0x50>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10a      	bne.n	8009678 <vPortExitCritical+0x24>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	607b      	str	r3, [r7, #4]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009678:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <vPortExitCritical+0x50>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3b01      	subs	r3, #1
 800967e:	4a09      	ldr	r2, [pc, #36]	; (80096a4 <vPortExitCritical+0x50>)
 8009680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009682:	4b08      	ldr	r3, [pc, #32]	; (80096a4 <vPortExitCritical+0x50>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d105      	bne.n	8009696 <vPortExitCritical+0x42>
 800968a:	2300      	movs	r3, #0
 800968c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	200000b4 	.word	0x200000b4
	...

080096b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096b0:	f3ef 8009 	mrs	r0, PSP
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	4b15      	ldr	r3, [pc, #84]	; (8009710 <pxCurrentTCBConst>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	f01e 0f10 	tst.w	lr, #16
 80096c0:	bf08      	it	eq
 80096c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	6010      	str	r0, [r2, #0]
 80096cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096d4:	f380 8811 	msr	BASEPRI, r0
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f7ff f9fe 	bl	8008ae0 <vTaskSwitchContext>
 80096e4:	f04f 0000 	mov.w	r0, #0
 80096e8:	f380 8811 	msr	BASEPRI, r0
 80096ec:	bc09      	pop	{r0, r3}
 80096ee:	6819      	ldr	r1, [r3, #0]
 80096f0:	6808      	ldr	r0, [r1, #0]
 80096f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f6:	f01e 0f10 	tst.w	lr, #16
 80096fa:	bf08      	it	eq
 80096fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009700:	f380 8809 	msr	PSP, r0
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	f3af 8000 	nop.w

08009710 <pxCurrentTCBConst>:
 8009710:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop

08009718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	607b      	str	r3, [r7, #4]
}
 8009730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009732:	f7ff f91d 	bl	8008970 <xTaskIncrementTick>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <SysTick_Handler+0x40>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	2300      	movs	r3, #0
 8009746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f383 8811 	msr	BASEPRI, r3
}
 800974e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009760:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <vPortSetupTimerInterrupt+0x34>)
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <vPortSetupTimerInterrupt+0x38>)
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800976c:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <vPortSetupTimerInterrupt+0x3c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <vPortSetupTimerInterrupt+0x40>)
 8009772:	fba2 2303 	umull	r2, r3, r2, r3
 8009776:	099b      	lsrs	r3, r3, #6
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <vPortSetupTimerInterrupt+0x44>)
 800977a:	3b01      	subs	r3, #1
 800977c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <vPortSetupTimerInterrupt+0x34>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	e000e010 	.word	0xe000e010
 8009794:	e000e018 	.word	0xe000e018
 8009798:	200000a8 	.word	0x200000a8
 800979c:	10624dd3 	.word	0x10624dd3
 80097a0:	e000e014 	.word	0xe000e014

080097a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097b4 <vPortEnableVFP+0x10>
 80097a8:	6801      	ldr	r1, [r0, #0]
 80097aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097ae:	6001      	str	r1, [r0, #0]
 80097b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097b2:	bf00      	nop
 80097b4:	e000ed88 	.word	0xe000ed88

080097b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08a      	sub	sp, #40	; 0x28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097c4:	f7ff f82a 	bl	800881c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097c8:	4b5b      	ldr	r3, [pc, #364]	; (8009938 <pvPortMalloc+0x180>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097d0:	f000 f920 	bl	8009a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097d4:	4b59      	ldr	r3, [pc, #356]	; (800993c <pvPortMalloc+0x184>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f040 8093 	bne.w	8009908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01d      	beq.n	8009824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097e8:	2208      	movs	r2, #8
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d014      	beq.n	8009824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f023 0307 	bic.w	r3, r3, #7
 8009800:	3308      	adds	r3, #8
 8009802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00a      	beq.n	8009824 <pvPortMalloc+0x6c>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	617b      	str	r3, [r7, #20]
}
 8009820:	bf00      	nop
 8009822:	e7fe      	b.n	8009822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d06e      	beq.n	8009908 <pvPortMalloc+0x150>
 800982a:	4b45      	ldr	r3, [pc, #276]	; (8009940 <pvPortMalloc+0x188>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d869      	bhi.n	8009908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009834:	4b43      	ldr	r3, [pc, #268]	; (8009944 <pvPortMalloc+0x18c>)
 8009836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009838:	4b42      	ldr	r3, [pc, #264]	; (8009944 <pvPortMalloc+0x18c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800983e:	e004      	b.n	800984a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	429a      	cmp	r2, r3
 8009852:	d903      	bls.n	800985c <pvPortMalloc+0xa4>
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f1      	bne.n	8009840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800985c:	4b36      	ldr	r3, [pc, #216]	; (8009938 <pvPortMalloc+0x180>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009862:	429a      	cmp	r2, r3
 8009864:	d050      	beq.n	8009908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2208      	movs	r2, #8
 800986c:	4413      	add	r3, r2
 800986e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	2308      	movs	r3, #8
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	429a      	cmp	r2, r3
 8009886:	d91f      	bls.n	80098c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	f003 0307 	and.w	r3, r3, #7
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <pvPortMalloc+0xf8>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	613b      	str	r3, [r7, #16]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	1ad2      	subs	r2, r2, r3
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098c2:	69b8      	ldr	r0, [r7, #24]
 80098c4:	f000 f908 	bl	8009ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098c8:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <pvPortMalloc+0x188>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	4a1b      	ldr	r2, [pc, #108]	; (8009940 <pvPortMalloc+0x188>)
 80098d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098d6:	4b1a      	ldr	r3, [pc, #104]	; (8009940 <pvPortMalloc+0x188>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <pvPortMalloc+0x190>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d203      	bcs.n	80098ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098e2:	4b17      	ldr	r3, [pc, #92]	; (8009940 <pvPortMalloc+0x188>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a18      	ldr	r2, [pc, #96]	; (8009948 <pvPortMalloc+0x190>)
 80098e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <pvPortMalloc+0x184>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	431a      	orrs	r2, r3
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <pvPortMalloc+0x194>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3301      	adds	r3, #1
 8009904:	4a11      	ldr	r2, [pc, #68]	; (800994c <pvPortMalloc+0x194>)
 8009906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009908:	f7fe ff96 	bl	8008838 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	f003 0307 	and.w	r3, r3, #7
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <pvPortMalloc+0x174>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60fb      	str	r3, [r7, #12]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <pvPortMalloc+0x172>
	return pvReturn;
 800992c:	69fb      	ldr	r3, [r7, #28]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3728      	adds	r7, #40	; 0x28
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	200046d4 	.word	0x200046d4
 800993c:	200046e8 	.word	0x200046e8
 8009940:	200046d8 	.word	0x200046d8
 8009944:	200046cc 	.word	0x200046cc
 8009948:	200046dc 	.word	0x200046dc
 800994c:	200046e0 	.word	0x200046e0

08009950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d04d      	beq.n	80099fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009962:	2308      	movs	r3, #8
 8009964:	425b      	negs	r3, r3
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	4b24      	ldr	r3, [pc, #144]	; (8009a08 <vPortFree+0xb8>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4013      	ands	r3, r2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <vPortFree+0x44>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	60fb      	str	r3, [r7, #12]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00a      	beq.n	80099b2 <vPortFree+0x62>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	60bb      	str	r3, [r7, #8]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	4b14      	ldr	r3, [pc, #80]	; (8009a08 <vPortFree+0xb8>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4013      	ands	r3, r2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01e      	beq.n	80099fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11a      	bne.n	80099fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <vPortFree+0xb8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	43db      	mvns	r3, r3
 80099d2:	401a      	ands	r2, r3
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099d8:	f7fe ff20 	bl	800881c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <vPortFree+0xbc>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4413      	add	r3, r2
 80099e6:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <vPortFree+0xbc>)
 80099e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ea:	6938      	ldr	r0, [r7, #16]
 80099ec:	f000 f874 	bl	8009ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <vPortFree+0xc0>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	4a06      	ldr	r2, [pc, #24]	; (8009a10 <vPortFree+0xc0>)
 80099f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099fa:	f7fe ff1d 	bl	8008838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099fe:	bf00      	nop
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200046e8 	.word	0x200046e8
 8009a0c:	200046d8 	.word	0x200046d8
 8009a10:	200046e4 	.word	0x200046e4

08009a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a20:	4b27      	ldr	r3, [pc, #156]	; (8009ac0 <prvHeapInit+0xac>)
 8009a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00c      	beq.n	8009a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	4a1f      	ldr	r2, [pc, #124]	; (8009ac0 <prvHeapInit+0xac>)
 8009a44:	4413      	add	r3, r2
 8009a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ac4 <prvHeapInit+0xb0>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a52:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <prvHeapInit+0xb0>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a60:	2208      	movs	r2, #8
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4a15      	ldr	r2, [pc, #84]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a76:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a7e:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a94:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <prvHeapInit+0xb4>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4a0a      	ldr	r2, [pc, #40]	; (8009acc <prvHeapInit+0xb8>)
 8009aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	4a09      	ldr	r2, [pc, #36]	; (8009ad0 <prvHeapInit+0xbc>)
 8009aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <prvHeapInit+0xc0>)
 8009aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ab2:	601a      	str	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	20000acc 	.word	0x20000acc
 8009ac4:	200046cc 	.word	0x200046cc
 8009ac8:	200046d4 	.word	0x200046d4
 8009acc:	200046dc 	.word	0x200046dc
 8009ad0:	200046d8 	.word	0x200046d8
 8009ad4:	200046e8 	.word	0x200046e8

08009ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ae0:	4b28      	ldr	r3, [pc, #160]	; (8009b84 <prvInsertBlockIntoFreeList+0xac>)
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e002      	b.n	8009aec <prvInsertBlockIntoFreeList+0x14>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d8f7      	bhi.n	8009ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	4413      	add	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d108      	bne.n	8009b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	441a      	add	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d118      	bne.n	8009b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <prvInsertBlockIntoFreeList+0xb0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d00d      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	441a      	add	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e008      	b.n	8009b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b56:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <prvInsertBlockIntoFreeList+0xb0>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e003      	b.n	8009b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d002      	beq.n	8009b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	200046cc 	.word	0x200046cc
 8009b88:	200046d4 	.word	0x200046d4

08009b8c <__errno>:
 8009b8c:	4b01      	ldr	r3, [pc, #4]	; (8009b94 <__errno+0x8>)
 8009b8e:	6818      	ldr	r0, [r3, #0]
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	200000b8 	.word	0x200000b8

08009b98 <__libc_init_array>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	4d0d      	ldr	r5, [pc, #52]	; (8009bd0 <__libc_init_array+0x38>)
 8009b9c:	4c0d      	ldr	r4, [pc, #52]	; (8009bd4 <__libc_init_array+0x3c>)
 8009b9e:	1b64      	subs	r4, r4, r5
 8009ba0:	10a4      	asrs	r4, r4, #2
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	d109      	bne.n	8009bbc <__libc_init_array+0x24>
 8009ba8:	4d0b      	ldr	r5, [pc, #44]	; (8009bd8 <__libc_init_array+0x40>)
 8009baa:	4c0c      	ldr	r4, [pc, #48]	; (8009bdc <__libc_init_array+0x44>)
 8009bac:	f004 fcb0 	bl	800e510 <_init>
 8009bb0:	1b64      	subs	r4, r4, r5
 8009bb2:	10a4      	asrs	r4, r4, #2
 8009bb4:	2600      	movs	r6, #0
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	d105      	bne.n	8009bc6 <__libc_init_array+0x2e>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc0:	4798      	blx	r3
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7ee      	b.n	8009ba4 <__libc_init_array+0xc>
 8009bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bca:	4798      	blx	r3
 8009bcc:	3601      	adds	r6, #1
 8009bce:	e7f2      	b.n	8009bb6 <__libc_init_array+0x1e>
 8009bd0:	0800ea6c 	.word	0x0800ea6c
 8009bd4:	0800ea6c 	.word	0x0800ea6c
 8009bd8:	0800ea6c 	.word	0x0800ea6c
 8009bdc:	0800ea70 	.word	0x0800ea70

08009be0 <memcpy>:
 8009be0:	440a      	add	r2, r1
 8009be2:	4291      	cmp	r1, r2
 8009be4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009be8:	d100      	bne.n	8009bec <memcpy+0xc>
 8009bea:	4770      	bx	lr
 8009bec:	b510      	push	{r4, lr}
 8009bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf6:	4291      	cmp	r1, r2
 8009bf8:	d1f9      	bne.n	8009bee <memcpy+0xe>
 8009bfa:	bd10      	pop	{r4, pc}

08009bfc <memset>:
 8009bfc:	4402      	add	r2, r0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d100      	bne.n	8009c06 <memset+0xa>
 8009c04:	4770      	bx	lr
 8009c06:	f803 1b01 	strb.w	r1, [r3], #1
 8009c0a:	e7f9      	b.n	8009c00 <memset+0x4>

08009c0c <__cvt>:
 8009c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	ec55 4b10 	vmov	r4, r5, d0
 8009c14:	2d00      	cmp	r5, #0
 8009c16:	460e      	mov	r6, r1
 8009c18:	4619      	mov	r1, r3
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	bfbb      	ittet	lt
 8009c1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c22:	461d      	movlt	r5, r3
 8009c24:	2300      	movge	r3, #0
 8009c26:	232d      	movlt	r3, #45	; 0x2d
 8009c28:	700b      	strb	r3, [r1, #0]
 8009c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c30:	4691      	mov	r9, r2
 8009c32:	f023 0820 	bic.w	r8, r3, #32
 8009c36:	bfbc      	itt	lt
 8009c38:	4622      	movlt	r2, r4
 8009c3a:	4614      	movlt	r4, r2
 8009c3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c40:	d005      	beq.n	8009c4e <__cvt+0x42>
 8009c42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c46:	d100      	bne.n	8009c4a <__cvt+0x3e>
 8009c48:	3601      	adds	r6, #1
 8009c4a:	2102      	movs	r1, #2
 8009c4c:	e000      	b.n	8009c50 <__cvt+0x44>
 8009c4e:	2103      	movs	r1, #3
 8009c50:	ab03      	add	r3, sp, #12
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	ab02      	add	r3, sp, #8
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	ec45 4b10 	vmov	d0, r4, r5
 8009c5c:	4653      	mov	r3, sl
 8009c5e:	4632      	mov	r2, r6
 8009c60:	f001 fdce 	bl	800b800 <_dtoa_r>
 8009c64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c68:	4607      	mov	r7, r0
 8009c6a:	d102      	bne.n	8009c72 <__cvt+0x66>
 8009c6c:	f019 0f01 	tst.w	r9, #1
 8009c70:	d022      	beq.n	8009cb8 <__cvt+0xac>
 8009c72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c76:	eb07 0906 	add.w	r9, r7, r6
 8009c7a:	d110      	bne.n	8009c9e <__cvt+0x92>
 8009c7c:	783b      	ldrb	r3, [r7, #0]
 8009c7e:	2b30      	cmp	r3, #48	; 0x30
 8009c80:	d10a      	bne.n	8009c98 <__cvt+0x8c>
 8009c82:	2200      	movs	r2, #0
 8009c84:	2300      	movs	r3, #0
 8009c86:	4620      	mov	r0, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	f7f6 ff2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c8e:	b918      	cbnz	r0, 8009c98 <__cvt+0x8c>
 8009c90:	f1c6 0601 	rsb	r6, r6, #1
 8009c94:	f8ca 6000 	str.w	r6, [sl]
 8009c98:	f8da 3000 	ldr.w	r3, [sl]
 8009c9c:	4499      	add	r9, r3
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7f6 ff1f 	bl	8000ae8 <__aeabi_dcmpeq>
 8009caa:	b108      	cbz	r0, 8009cb0 <__cvt+0xa4>
 8009cac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cb0:	2230      	movs	r2, #48	; 0x30
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	454b      	cmp	r3, r9
 8009cb6:	d307      	bcc.n	8009cc8 <__cvt+0xbc>
 8009cb8:	9b03      	ldr	r3, [sp, #12]
 8009cba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cbc:	1bdb      	subs	r3, r3, r7
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	b004      	add	sp, #16
 8009cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc8:	1c59      	adds	r1, r3, #1
 8009cca:	9103      	str	r1, [sp, #12]
 8009ccc:	701a      	strb	r2, [r3, #0]
 8009cce:	e7f0      	b.n	8009cb2 <__cvt+0xa6>

08009cd0 <__exponent>:
 8009cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	bfb8      	it	lt
 8009cd8:	4249      	neglt	r1, r1
 8009cda:	f803 2b02 	strb.w	r2, [r3], #2
 8009cde:	bfb4      	ite	lt
 8009ce0:	222d      	movlt	r2, #45	; 0x2d
 8009ce2:	222b      	movge	r2, #43	; 0x2b
 8009ce4:	2909      	cmp	r1, #9
 8009ce6:	7042      	strb	r2, [r0, #1]
 8009ce8:	dd2a      	ble.n	8009d40 <__exponent+0x70>
 8009cea:	f10d 0407 	add.w	r4, sp, #7
 8009cee:	46a4      	mov	ip, r4
 8009cf0:	270a      	movs	r7, #10
 8009cf2:	46a6      	mov	lr, r4
 8009cf4:	460a      	mov	r2, r1
 8009cf6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009cfa:	fb07 1516 	mls	r5, r7, r6, r1
 8009cfe:	3530      	adds	r5, #48	; 0x30
 8009d00:	2a63      	cmp	r2, #99	; 0x63
 8009d02:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009d06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	dcf1      	bgt.n	8009cf2 <__exponent+0x22>
 8009d0e:	3130      	adds	r1, #48	; 0x30
 8009d10:	f1ae 0502 	sub.w	r5, lr, #2
 8009d14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d18:	1c44      	adds	r4, r0, #1
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4561      	cmp	r1, ip
 8009d1e:	d30a      	bcc.n	8009d36 <__exponent+0x66>
 8009d20:	f10d 0209 	add.w	r2, sp, #9
 8009d24:	eba2 020e 	sub.w	r2, r2, lr
 8009d28:	4565      	cmp	r5, ip
 8009d2a:	bf88      	it	hi
 8009d2c:	2200      	movhi	r2, #0
 8009d2e:	4413      	add	r3, r2
 8009d30:	1a18      	subs	r0, r3, r0
 8009d32:	b003      	add	sp, #12
 8009d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d3e:	e7ed      	b.n	8009d1c <__exponent+0x4c>
 8009d40:	2330      	movs	r3, #48	; 0x30
 8009d42:	3130      	adds	r1, #48	; 0x30
 8009d44:	7083      	strb	r3, [r0, #2]
 8009d46:	70c1      	strb	r1, [r0, #3]
 8009d48:	1d03      	adds	r3, r0, #4
 8009d4a:	e7f1      	b.n	8009d30 <__exponent+0x60>

08009d4c <_printf_float>:
 8009d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	ed2d 8b02 	vpush	{d8}
 8009d54:	b08d      	sub	sp, #52	; 0x34
 8009d56:	460c      	mov	r4, r1
 8009d58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d5c:	4616      	mov	r6, r2
 8009d5e:	461f      	mov	r7, r3
 8009d60:	4605      	mov	r5, r0
 8009d62:	f002 feab 	bl	800cabc <_localeconv_r>
 8009d66:	f8d0 a000 	ldr.w	sl, [r0]
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f7f6 fa40 	bl	80001f0 <strlen>
 8009d70:	2300      	movs	r3, #0
 8009d72:	930a      	str	r3, [sp, #40]	; 0x28
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	9305      	str	r3, [sp, #20]
 8009d78:	f8d8 3000 	ldr.w	r3, [r8]
 8009d7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d80:	3307      	adds	r3, #7
 8009d82:	f023 0307 	bic.w	r3, r3, #7
 8009d86:	f103 0208 	add.w	r2, r3, #8
 8009d8a:	f8c8 2000 	str.w	r2, [r8]
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d9e:	9307      	str	r3, [sp, #28]
 8009da0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009da4:	ee08 0a10 	vmov	s16, r0
 8009da8:	4b9f      	ldr	r3, [pc, #636]	; (800a028 <_printf_float+0x2dc>)
 8009daa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009db2:	f7f6 fecb 	bl	8000b4c <__aeabi_dcmpun>
 8009db6:	bb88      	cbnz	r0, 8009e1c <_printf_float+0xd0>
 8009db8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dbc:	4b9a      	ldr	r3, [pc, #616]	; (800a028 <_printf_float+0x2dc>)
 8009dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dc2:	f7f6 fea5 	bl	8000b10 <__aeabi_dcmple>
 8009dc6:	bb48      	cbnz	r0, 8009e1c <_printf_float+0xd0>
 8009dc8:	2200      	movs	r2, #0
 8009dca:	2300      	movs	r3, #0
 8009dcc:	4640      	mov	r0, r8
 8009dce:	4649      	mov	r1, r9
 8009dd0:	f7f6 fe94 	bl	8000afc <__aeabi_dcmplt>
 8009dd4:	b110      	cbz	r0, 8009ddc <_printf_float+0x90>
 8009dd6:	232d      	movs	r3, #45	; 0x2d
 8009dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ddc:	4b93      	ldr	r3, [pc, #588]	; (800a02c <_printf_float+0x2e0>)
 8009dde:	4894      	ldr	r0, [pc, #592]	; (800a030 <_printf_float+0x2e4>)
 8009de0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009de4:	bf94      	ite	ls
 8009de6:	4698      	movls	r8, r3
 8009de8:	4680      	movhi	r8, r0
 8009dea:	2303      	movs	r3, #3
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	9b05      	ldr	r3, [sp, #20]
 8009df0:	f023 0204 	bic.w	r2, r3, #4
 8009df4:	6022      	str	r2, [r4, #0]
 8009df6:	f04f 0900 	mov.w	r9, #0
 8009dfa:	9700      	str	r7, [sp, #0]
 8009dfc:	4633      	mov	r3, r6
 8009dfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e00:	4621      	mov	r1, r4
 8009e02:	4628      	mov	r0, r5
 8009e04:	f000 f9d8 	bl	800a1b8 <_printf_common>
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f040 8090 	bne.w	8009f2e <_printf_float+0x1e2>
 8009e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e12:	b00d      	add	sp, #52	; 0x34
 8009e14:	ecbd 8b02 	vpop	{d8}
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	4640      	mov	r0, r8
 8009e22:	4649      	mov	r1, r9
 8009e24:	f7f6 fe92 	bl	8000b4c <__aeabi_dcmpun>
 8009e28:	b140      	cbz	r0, 8009e3c <_printf_float+0xf0>
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bfbc      	itt	lt
 8009e30:	232d      	movlt	r3, #45	; 0x2d
 8009e32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e36:	487f      	ldr	r0, [pc, #508]	; (800a034 <_printf_float+0x2e8>)
 8009e38:	4b7f      	ldr	r3, [pc, #508]	; (800a038 <_printf_float+0x2ec>)
 8009e3a:	e7d1      	b.n	8009de0 <_printf_float+0x94>
 8009e3c:	6863      	ldr	r3, [r4, #4]
 8009e3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009e42:	9206      	str	r2, [sp, #24]
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	d13f      	bne.n	8009ec8 <_printf_float+0x17c>
 8009e48:	2306      	movs	r3, #6
 8009e4a:	6063      	str	r3, [r4, #4]
 8009e4c:	9b05      	ldr	r3, [sp, #20]
 8009e4e:	6861      	ldr	r1, [r4, #4]
 8009e50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e54:	2300      	movs	r3, #0
 8009e56:	9303      	str	r3, [sp, #12]
 8009e58:	ab0a      	add	r3, sp, #40	; 0x28
 8009e5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e5e:	ab09      	add	r3, sp, #36	; 0x24
 8009e60:	ec49 8b10 	vmov	d0, r8, r9
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	6022      	str	r2, [r4, #0]
 8009e68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f7ff fecd 	bl	8009c0c <__cvt>
 8009e72:	9b06      	ldr	r3, [sp, #24]
 8009e74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e76:	2b47      	cmp	r3, #71	; 0x47
 8009e78:	4680      	mov	r8, r0
 8009e7a:	d108      	bne.n	8009e8e <_printf_float+0x142>
 8009e7c:	1cc8      	adds	r0, r1, #3
 8009e7e:	db02      	blt.n	8009e86 <_printf_float+0x13a>
 8009e80:	6863      	ldr	r3, [r4, #4]
 8009e82:	4299      	cmp	r1, r3
 8009e84:	dd41      	ble.n	8009f0a <_printf_float+0x1be>
 8009e86:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e8a:	fa5f fb8b 	uxtb.w	fp, fp
 8009e8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e92:	d820      	bhi.n	8009ed6 <_printf_float+0x18a>
 8009e94:	3901      	subs	r1, #1
 8009e96:	465a      	mov	r2, fp
 8009e98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e9c:	9109      	str	r1, [sp, #36]	; 0x24
 8009e9e:	f7ff ff17 	bl	8009cd0 <__exponent>
 8009ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ea4:	1813      	adds	r3, r2, r0
 8009ea6:	2a01      	cmp	r2, #1
 8009ea8:	4681      	mov	r9, r0
 8009eaa:	6123      	str	r3, [r4, #16]
 8009eac:	dc02      	bgt.n	8009eb4 <_printf_float+0x168>
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	07d2      	lsls	r2, r2, #31
 8009eb2:	d501      	bpl.n	8009eb8 <_printf_float+0x16c>
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	6123      	str	r3, [r4, #16]
 8009eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d09c      	beq.n	8009dfa <_printf_float+0xae>
 8009ec0:	232d      	movs	r3, #45	; 0x2d
 8009ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec6:	e798      	b.n	8009dfa <_printf_float+0xae>
 8009ec8:	9a06      	ldr	r2, [sp, #24]
 8009eca:	2a47      	cmp	r2, #71	; 0x47
 8009ecc:	d1be      	bne.n	8009e4c <_printf_float+0x100>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1bc      	bne.n	8009e4c <_printf_float+0x100>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e7b9      	b.n	8009e4a <_printf_float+0xfe>
 8009ed6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009eda:	d118      	bne.n	8009f0e <_printf_float+0x1c2>
 8009edc:	2900      	cmp	r1, #0
 8009ede:	6863      	ldr	r3, [r4, #4]
 8009ee0:	dd0b      	ble.n	8009efa <_printf_float+0x1ae>
 8009ee2:	6121      	str	r1, [r4, #16]
 8009ee4:	b913      	cbnz	r3, 8009eec <_printf_float+0x1a0>
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	07d0      	lsls	r0, r2, #31
 8009eea:	d502      	bpl.n	8009ef2 <_printf_float+0x1a6>
 8009eec:	3301      	adds	r3, #1
 8009eee:	440b      	add	r3, r1
 8009ef0:	6123      	str	r3, [r4, #16]
 8009ef2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ef4:	f04f 0900 	mov.w	r9, #0
 8009ef8:	e7de      	b.n	8009eb8 <_printf_float+0x16c>
 8009efa:	b913      	cbnz	r3, 8009f02 <_printf_float+0x1b6>
 8009efc:	6822      	ldr	r2, [r4, #0]
 8009efe:	07d2      	lsls	r2, r2, #31
 8009f00:	d501      	bpl.n	8009f06 <_printf_float+0x1ba>
 8009f02:	3302      	adds	r3, #2
 8009f04:	e7f4      	b.n	8009ef0 <_printf_float+0x1a4>
 8009f06:	2301      	movs	r3, #1
 8009f08:	e7f2      	b.n	8009ef0 <_printf_float+0x1a4>
 8009f0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f10:	4299      	cmp	r1, r3
 8009f12:	db05      	blt.n	8009f20 <_printf_float+0x1d4>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	6121      	str	r1, [r4, #16]
 8009f18:	07d8      	lsls	r0, r3, #31
 8009f1a:	d5ea      	bpl.n	8009ef2 <_printf_float+0x1a6>
 8009f1c:	1c4b      	adds	r3, r1, #1
 8009f1e:	e7e7      	b.n	8009ef0 <_printf_float+0x1a4>
 8009f20:	2900      	cmp	r1, #0
 8009f22:	bfd4      	ite	le
 8009f24:	f1c1 0202 	rsble	r2, r1, #2
 8009f28:	2201      	movgt	r2, #1
 8009f2a:	4413      	add	r3, r2
 8009f2c:	e7e0      	b.n	8009ef0 <_printf_float+0x1a4>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	055a      	lsls	r2, r3, #21
 8009f32:	d407      	bmi.n	8009f44 <_printf_float+0x1f8>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	4642      	mov	r2, r8
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d12c      	bne.n	8009f9c <_printf_float+0x250>
 8009f42:	e764      	b.n	8009e0e <_printf_float+0xc2>
 8009f44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f48:	f240 80e0 	bls.w	800a10c <_printf_float+0x3c0>
 8009f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	f7f6 fdc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d034      	beq.n	8009fc6 <_printf_float+0x27a>
 8009f5c:	4a37      	ldr	r2, [pc, #220]	; (800a03c <_printf_float+0x2f0>)
 8009f5e:	2301      	movs	r3, #1
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f af51 	beq.w	8009e0e <_printf_float+0xc2>
 8009f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f70:	429a      	cmp	r2, r3
 8009f72:	db02      	blt.n	8009f7a <_printf_float+0x22e>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	07d8      	lsls	r0, r3, #31
 8009f78:	d510      	bpl.n	8009f9c <_printf_float+0x250>
 8009f7a:	ee18 3a10 	vmov	r3, s16
 8009f7e:	4652      	mov	r2, sl
 8009f80:	4631      	mov	r1, r6
 8009f82:	4628      	mov	r0, r5
 8009f84:	47b8      	blx	r7
 8009f86:	3001      	adds	r0, #1
 8009f88:	f43f af41 	beq.w	8009e0e <_printf_float+0xc2>
 8009f8c:	f04f 0800 	mov.w	r8, #0
 8009f90:	f104 091a 	add.w	r9, r4, #26
 8009f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f96:	3b01      	subs	r3, #1
 8009f98:	4543      	cmp	r3, r8
 8009f9a:	dc09      	bgt.n	8009fb0 <_printf_float+0x264>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	079b      	lsls	r3, r3, #30
 8009fa0:	f100 8105 	bmi.w	800a1ae <_printf_float+0x462>
 8009fa4:	68e0      	ldr	r0, [r4, #12]
 8009fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa8:	4298      	cmp	r0, r3
 8009faa:	bfb8      	it	lt
 8009fac:	4618      	movlt	r0, r3
 8009fae:	e730      	b.n	8009e12 <_printf_float+0xc6>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	464a      	mov	r2, r9
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b8      	blx	r7
 8009fba:	3001      	adds	r0, #1
 8009fbc:	f43f af27 	beq.w	8009e0e <_printf_float+0xc2>
 8009fc0:	f108 0801 	add.w	r8, r8, #1
 8009fc4:	e7e6      	b.n	8009f94 <_printf_float+0x248>
 8009fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	dc39      	bgt.n	800a040 <_printf_float+0x2f4>
 8009fcc:	4a1b      	ldr	r2, [pc, #108]	; (800a03c <_printf_float+0x2f0>)
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f af19 	beq.w	8009e0e <_printf_float+0xc2>
 8009fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	d102      	bne.n	8009fea <_printf_float+0x29e>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	07d9      	lsls	r1, r3, #31
 8009fe8:	d5d8      	bpl.n	8009f9c <_printf_float+0x250>
 8009fea:	ee18 3a10 	vmov	r3, s16
 8009fee:	4652      	mov	r2, sl
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	47b8      	blx	r7
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	f43f af09 	beq.w	8009e0e <_printf_float+0xc2>
 8009ffc:	f04f 0900 	mov.w	r9, #0
 800a000:	f104 0a1a 	add.w	sl, r4, #26
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	425b      	negs	r3, r3
 800a008:	454b      	cmp	r3, r9
 800a00a:	dc01      	bgt.n	800a010 <_printf_float+0x2c4>
 800a00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00e:	e792      	b.n	8009f36 <_printf_float+0x1ea>
 800a010:	2301      	movs	r3, #1
 800a012:	4652      	mov	r2, sl
 800a014:	4631      	mov	r1, r6
 800a016:	4628      	mov	r0, r5
 800a018:	47b8      	blx	r7
 800a01a:	3001      	adds	r0, #1
 800a01c:	f43f aef7 	beq.w	8009e0e <_printf_float+0xc2>
 800a020:	f109 0901 	add.w	r9, r9, #1
 800a024:	e7ee      	b.n	800a004 <_printf_float+0x2b8>
 800a026:	bf00      	nop
 800a028:	7fefffff 	.word	0x7fefffff
 800a02c:	0800e5c4 	.word	0x0800e5c4
 800a030:	0800e5c8 	.word	0x0800e5c8
 800a034:	0800e5d0 	.word	0x0800e5d0
 800a038:	0800e5cc 	.word	0x0800e5cc
 800a03c:	0800e5d4 	.word	0x0800e5d4
 800a040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a044:	429a      	cmp	r2, r3
 800a046:	bfa8      	it	ge
 800a048:	461a      	movge	r2, r3
 800a04a:	2a00      	cmp	r2, #0
 800a04c:	4691      	mov	r9, r2
 800a04e:	dc37      	bgt.n	800a0c0 <_printf_float+0x374>
 800a050:	f04f 0b00 	mov.w	fp, #0
 800a054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a058:	f104 021a 	add.w	r2, r4, #26
 800a05c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a05e:	9305      	str	r3, [sp, #20]
 800a060:	eba3 0309 	sub.w	r3, r3, r9
 800a064:	455b      	cmp	r3, fp
 800a066:	dc33      	bgt.n	800a0d0 <_printf_float+0x384>
 800a068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a06c:	429a      	cmp	r2, r3
 800a06e:	db3b      	blt.n	800a0e8 <_printf_float+0x39c>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	07da      	lsls	r2, r3, #31
 800a074:	d438      	bmi.n	800a0e8 <_printf_float+0x39c>
 800a076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a078:	9a05      	ldr	r2, [sp, #20]
 800a07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a07c:	1a9a      	subs	r2, r3, r2
 800a07e:	eba3 0901 	sub.w	r9, r3, r1
 800a082:	4591      	cmp	r9, r2
 800a084:	bfa8      	it	ge
 800a086:	4691      	movge	r9, r2
 800a088:	f1b9 0f00 	cmp.w	r9, #0
 800a08c:	dc35      	bgt.n	800a0fa <_printf_float+0x3ae>
 800a08e:	f04f 0800 	mov.w	r8, #0
 800a092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a096:	f104 0a1a 	add.w	sl, r4, #26
 800a09a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a09e:	1a9b      	subs	r3, r3, r2
 800a0a0:	eba3 0309 	sub.w	r3, r3, r9
 800a0a4:	4543      	cmp	r3, r8
 800a0a6:	f77f af79 	ble.w	8009f9c <_printf_float+0x250>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4652      	mov	r2, sl
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	47b8      	blx	r7
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	f43f aeaa 	beq.w	8009e0e <_printf_float+0xc2>
 800a0ba:	f108 0801 	add.w	r8, r8, #1
 800a0be:	e7ec      	b.n	800a09a <_printf_float+0x34e>
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	4631      	mov	r1, r6
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b8      	blx	r7
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d1c0      	bne.n	800a050 <_printf_float+0x304>
 800a0ce:	e69e      	b.n	8009e0e <_printf_float+0xc2>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	9205      	str	r2, [sp, #20]
 800a0d8:	47b8      	blx	r7
 800a0da:	3001      	adds	r0, #1
 800a0dc:	f43f ae97 	beq.w	8009e0e <_printf_float+0xc2>
 800a0e0:	9a05      	ldr	r2, [sp, #20]
 800a0e2:	f10b 0b01 	add.w	fp, fp, #1
 800a0e6:	e7b9      	b.n	800a05c <_printf_float+0x310>
 800a0e8:	ee18 3a10 	vmov	r3, s16
 800a0ec:	4652      	mov	r2, sl
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d1be      	bne.n	800a076 <_printf_float+0x32a>
 800a0f8:	e689      	b.n	8009e0e <_printf_float+0xc2>
 800a0fa:	9a05      	ldr	r2, [sp, #20]
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	4442      	add	r2, r8
 800a100:	4631      	mov	r1, r6
 800a102:	4628      	mov	r0, r5
 800a104:	47b8      	blx	r7
 800a106:	3001      	adds	r0, #1
 800a108:	d1c1      	bne.n	800a08e <_printf_float+0x342>
 800a10a:	e680      	b.n	8009e0e <_printf_float+0xc2>
 800a10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a10e:	2a01      	cmp	r2, #1
 800a110:	dc01      	bgt.n	800a116 <_printf_float+0x3ca>
 800a112:	07db      	lsls	r3, r3, #31
 800a114:	d538      	bpl.n	800a188 <_printf_float+0x43c>
 800a116:	2301      	movs	r3, #1
 800a118:	4642      	mov	r2, r8
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f ae74 	beq.w	8009e0e <_printf_float+0xc2>
 800a126:	ee18 3a10 	vmov	r3, s16
 800a12a:	4652      	mov	r2, sl
 800a12c:	4631      	mov	r1, r6
 800a12e:	4628      	mov	r0, r5
 800a130:	47b8      	blx	r7
 800a132:	3001      	adds	r0, #1
 800a134:	f43f ae6b 	beq.w	8009e0e <_printf_float+0xc2>
 800a138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a13c:	2200      	movs	r2, #0
 800a13e:	2300      	movs	r3, #0
 800a140:	f7f6 fcd2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a144:	b9d8      	cbnz	r0, 800a17e <_printf_float+0x432>
 800a146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a148:	f108 0201 	add.w	r2, r8, #1
 800a14c:	3b01      	subs	r3, #1
 800a14e:	4631      	mov	r1, r6
 800a150:	4628      	mov	r0, r5
 800a152:	47b8      	blx	r7
 800a154:	3001      	adds	r0, #1
 800a156:	d10e      	bne.n	800a176 <_printf_float+0x42a>
 800a158:	e659      	b.n	8009e0e <_printf_float+0xc2>
 800a15a:	2301      	movs	r3, #1
 800a15c:	4652      	mov	r2, sl
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	f43f ae52 	beq.w	8009e0e <_printf_float+0xc2>
 800a16a:	f108 0801 	add.w	r8, r8, #1
 800a16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a170:	3b01      	subs	r3, #1
 800a172:	4543      	cmp	r3, r8
 800a174:	dcf1      	bgt.n	800a15a <_printf_float+0x40e>
 800a176:	464b      	mov	r3, r9
 800a178:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a17c:	e6dc      	b.n	8009f38 <_printf_float+0x1ec>
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	f104 0a1a 	add.w	sl, r4, #26
 800a186:	e7f2      	b.n	800a16e <_printf_float+0x422>
 800a188:	2301      	movs	r3, #1
 800a18a:	4642      	mov	r2, r8
 800a18c:	e7df      	b.n	800a14e <_printf_float+0x402>
 800a18e:	2301      	movs	r3, #1
 800a190:	464a      	mov	r2, r9
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	f43f ae38 	beq.w	8009e0e <_printf_float+0xc2>
 800a19e:	f108 0801 	add.w	r8, r8, #1
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1a6:	1a5b      	subs	r3, r3, r1
 800a1a8:	4543      	cmp	r3, r8
 800a1aa:	dcf0      	bgt.n	800a18e <_printf_float+0x442>
 800a1ac:	e6fa      	b.n	8009fa4 <_printf_float+0x258>
 800a1ae:	f04f 0800 	mov.w	r8, #0
 800a1b2:	f104 0919 	add.w	r9, r4, #25
 800a1b6:	e7f4      	b.n	800a1a2 <_printf_float+0x456>

0800a1b8 <_printf_common>:
 800a1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1bc:	4616      	mov	r6, r2
 800a1be:	4699      	mov	r9, r3
 800a1c0:	688a      	ldr	r2, [r1, #8]
 800a1c2:	690b      	ldr	r3, [r1, #16]
 800a1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bfb8      	it	lt
 800a1cc:	4613      	movlt	r3, r2
 800a1ce:	6033      	str	r3, [r6, #0]
 800a1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	b10a      	cbz	r2, 800a1de <_printf_common+0x26>
 800a1da:	3301      	adds	r3, #1
 800a1dc:	6033      	str	r3, [r6, #0]
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	0699      	lsls	r1, r3, #26
 800a1e2:	bf42      	ittt	mi
 800a1e4:	6833      	ldrmi	r3, [r6, #0]
 800a1e6:	3302      	addmi	r3, #2
 800a1e8:	6033      	strmi	r3, [r6, #0]
 800a1ea:	6825      	ldr	r5, [r4, #0]
 800a1ec:	f015 0506 	ands.w	r5, r5, #6
 800a1f0:	d106      	bne.n	800a200 <_printf_common+0x48>
 800a1f2:	f104 0a19 	add.w	sl, r4, #25
 800a1f6:	68e3      	ldr	r3, [r4, #12]
 800a1f8:	6832      	ldr	r2, [r6, #0]
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	42ab      	cmp	r3, r5
 800a1fe:	dc26      	bgt.n	800a24e <_printf_common+0x96>
 800a200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a204:	1e13      	subs	r3, r2, #0
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	bf18      	it	ne
 800a20a:	2301      	movne	r3, #1
 800a20c:	0692      	lsls	r2, r2, #26
 800a20e:	d42b      	bmi.n	800a268 <_printf_common+0xb0>
 800a210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a214:	4649      	mov	r1, r9
 800a216:	4638      	mov	r0, r7
 800a218:	47c0      	blx	r8
 800a21a:	3001      	adds	r0, #1
 800a21c:	d01e      	beq.n	800a25c <_printf_common+0xa4>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	68e5      	ldr	r5, [r4, #12]
 800a222:	6832      	ldr	r2, [r6, #0]
 800a224:	f003 0306 	and.w	r3, r3, #6
 800a228:	2b04      	cmp	r3, #4
 800a22a:	bf08      	it	eq
 800a22c:	1aad      	subeq	r5, r5, r2
 800a22e:	68a3      	ldr	r3, [r4, #8]
 800a230:	6922      	ldr	r2, [r4, #16]
 800a232:	bf0c      	ite	eq
 800a234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a238:	2500      	movne	r5, #0
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bfc4      	itt	gt
 800a23e:	1a9b      	subgt	r3, r3, r2
 800a240:	18ed      	addgt	r5, r5, r3
 800a242:	2600      	movs	r6, #0
 800a244:	341a      	adds	r4, #26
 800a246:	42b5      	cmp	r5, r6
 800a248:	d11a      	bne.n	800a280 <_printf_common+0xc8>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e008      	b.n	800a260 <_printf_common+0xa8>
 800a24e:	2301      	movs	r3, #1
 800a250:	4652      	mov	r2, sl
 800a252:	4649      	mov	r1, r9
 800a254:	4638      	mov	r0, r7
 800a256:	47c0      	blx	r8
 800a258:	3001      	adds	r0, #1
 800a25a:	d103      	bne.n	800a264 <_printf_common+0xac>
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a264:	3501      	adds	r5, #1
 800a266:	e7c6      	b.n	800a1f6 <_printf_common+0x3e>
 800a268:	18e1      	adds	r1, r4, r3
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	2030      	movs	r0, #48	; 0x30
 800a26e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a272:	4422      	add	r2, r4
 800a274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a27c:	3302      	adds	r3, #2
 800a27e:	e7c7      	b.n	800a210 <_printf_common+0x58>
 800a280:	2301      	movs	r3, #1
 800a282:	4622      	mov	r2, r4
 800a284:	4649      	mov	r1, r9
 800a286:	4638      	mov	r0, r7
 800a288:	47c0      	blx	r8
 800a28a:	3001      	adds	r0, #1
 800a28c:	d0e6      	beq.n	800a25c <_printf_common+0xa4>
 800a28e:	3601      	adds	r6, #1
 800a290:	e7d9      	b.n	800a246 <_printf_common+0x8e>
	...

0800a294 <_printf_i>:
 800a294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a298:	7e0f      	ldrb	r7, [r1, #24]
 800a29a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a29c:	2f78      	cmp	r7, #120	; 0x78
 800a29e:	4691      	mov	r9, r2
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	469a      	mov	sl, r3
 800a2a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2aa:	d807      	bhi.n	800a2bc <_printf_i+0x28>
 800a2ac:	2f62      	cmp	r7, #98	; 0x62
 800a2ae:	d80a      	bhi.n	800a2c6 <_printf_i+0x32>
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	f000 80d8 	beq.w	800a466 <_printf_i+0x1d2>
 800a2b6:	2f58      	cmp	r7, #88	; 0x58
 800a2b8:	f000 80a3 	beq.w	800a402 <_printf_i+0x16e>
 800a2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2c4:	e03a      	b.n	800a33c <_printf_i+0xa8>
 800a2c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2ca:	2b15      	cmp	r3, #21
 800a2cc:	d8f6      	bhi.n	800a2bc <_printf_i+0x28>
 800a2ce:	a101      	add	r1, pc, #4	; (adr r1, 800a2d4 <_printf_i+0x40>)
 800a2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2d4:	0800a32d 	.word	0x0800a32d
 800a2d8:	0800a341 	.word	0x0800a341
 800a2dc:	0800a2bd 	.word	0x0800a2bd
 800a2e0:	0800a2bd 	.word	0x0800a2bd
 800a2e4:	0800a2bd 	.word	0x0800a2bd
 800a2e8:	0800a2bd 	.word	0x0800a2bd
 800a2ec:	0800a341 	.word	0x0800a341
 800a2f0:	0800a2bd 	.word	0x0800a2bd
 800a2f4:	0800a2bd 	.word	0x0800a2bd
 800a2f8:	0800a2bd 	.word	0x0800a2bd
 800a2fc:	0800a2bd 	.word	0x0800a2bd
 800a300:	0800a44d 	.word	0x0800a44d
 800a304:	0800a371 	.word	0x0800a371
 800a308:	0800a42f 	.word	0x0800a42f
 800a30c:	0800a2bd 	.word	0x0800a2bd
 800a310:	0800a2bd 	.word	0x0800a2bd
 800a314:	0800a46f 	.word	0x0800a46f
 800a318:	0800a2bd 	.word	0x0800a2bd
 800a31c:	0800a371 	.word	0x0800a371
 800a320:	0800a2bd 	.word	0x0800a2bd
 800a324:	0800a2bd 	.word	0x0800a2bd
 800a328:	0800a437 	.word	0x0800a437
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	1d1a      	adds	r2, r3, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	602a      	str	r2, [r5, #0]
 800a334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a33c:	2301      	movs	r3, #1
 800a33e:	e0a3      	b.n	800a488 <_printf_i+0x1f4>
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	6829      	ldr	r1, [r5, #0]
 800a344:	0606      	lsls	r6, r0, #24
 800a346:	f101 0304 	add.w	r3, r1, #4
 800a34a:	d50a      	bpl.n	800a362 <_printf_i+0xce>
 800a34c:	680e      	ldr	r6, [r1, #0]
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	2e00      	cmp	r6, #0
 800a352:	da03      	bge.n	800a35c <_printf_i+0xc8>
 800a354:	232d      	movs	r3, #45	; 0x2d
 800a356:	4276      	negs	r6, r6
 800a358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a35c:	485e      	ldr	r0, [pc, #376]	; (800a4d8 <_printf_i+0x244>)
 800a35e:	230a      	movs	r3, #10
 800a360:	e019      	b.n	800a396 <_printf_i+0x102>
 800a362:	680e      	ldr	r6, [r1, #0]
 800a364:	602b      	str	r3, [r5, #0]
 800a366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a36a:	bf18      	it	ne
 800a36c:	b236      	sxthne	r6, r6
 800a36e:	e7ef      	b.n	800a350 <_printf_i+0xbc>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	6820      	ldr	r0, [r4, #0]
 800a374:	1d19      	adds	r1, r3, #4
 800a376:	6029      	str	r1, [r5, #0]
 800a378:	0601      	lsls	r1, r0, #24
 800a37a:	d501      	bpl.n	800a380 <_printf_i+0xec>
 800a37c:	681e      	ldr	r6, [r3, #0]
 800a37e:	e002      	b.n	800a386 <_printf_i+0xf2>
 800a380:	0646      	lsls	r6, r0, #25
 800a382:	d5fb      	bpl.n	800a37c <_printf_i+0xe8>
 800a384:	881e      	ldrh	r6, [r3, #0]
 800a386:	4854      	ldr	r0, [pc, #336]	; (800a4d8 <_printf_i+0x244>)
 800a388:	2f6f      	cmp	r7, #111	; 0x6f
 800a38a:	bf0c      	ite	eq
 800a38c:	2308      	moveq	r3, #8
 800a38e:	230a      	movne	r3, #10
 800a390:	2100      	movs	r1, #0
 800a392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a396:	6865      	ldr	r5, [r4, #4]
 800a398:	60a5      	str	r5, [r4, #8]
 800a39a:	2d00      	cmp	r5, #0
 800a39c:	bfa2      	ittt	ge
 800a39e:	6821      	ldrge	r1, [r4, #0]
 800a3a0:	f021 0104 	bicge.w	r1, r1, #4
 800a3a4:	6021      	strge	r1, [r4, #0]
 800a3a6:	b90e      	cbnz	r6, 800a3ac <_printf_i+0x118>
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	d04d      	beq.n	800a448 <_printf_i+0x1b4>
 800a3ac:	4615      	mov	r5, r2
 800a3ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a3b6:	5dc7      	ldrb	r7, [r0, r7]
 800a3b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3bc:	4637      	mov	r7, r6
 800a3be:	42bb      	cmp	r3, r7
 800a3c0:	460e      	mov	r6, r1
 800a3c2:	d9f4      	bls.n	800a3ae <_printf_i+0x11a>
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d10b      	bne.n	800a3e0 <_printf_i+0x14c>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	07de      	lsls	r6, r3, #31
 800a3cc:	d508      	bpl.n	800a3e0 <_printf_i+0x14c>
 800a3ce:	6923      	ldr	r3, [r4, #16]
 800a3d0:	6861      	ldr	r1, [r4, #4]
 800a3d2:	4299      	cmp	r1, r3
 800a3d4:	bfde      	ittt	le
 800a3d6:	2330      	movle	r3, #48	; 0x30
 800a3d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a3e0:	1b52      	subs	r2, r2, r5
 800a3e2:	6122      	str	r2, [r4, #16]
 800a3e4:	f8cd a000 	str.w	sl, [sp]
 800a3e8:	464b      	mov	r3, r9
 800a3ea:	aa03      	add	r2, sp, #12
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	f7ff fee2 	bl	800a1b8 <_printf_common>
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d14c      	bne.n	800a492 <_printf_i+0x1fe>
 800a3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3fc:	b004      	add	sp, #16
 800a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a402:	4835      	ldr	r0, [pc, #212]	; (800a4d8 <_printf_i+0x244>)
 800a404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a408:	6829      	ldr	r1, [r5, #0]
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a410:	6029      	str	r1, [r5, #0]
 800a412:	061d      	lsls	r5, r3, #24
 800a414:	d514      	bpl.n	800a440 <_printf_i+0x1ac>
 800a416:	07df      	lsls	r7, r3, #31
 800a418:	bf44      	itt	mi
 800a41a:	f043 0320 	orrmi.w	r3, r3, #32
 800a41e:	6023      	strmi	r3, [r4, #0]
 800a420:	b91e      	cbnz	r6, 800a42a <_printf_i+0x196>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	f023 0320 	bic.w	r3, r3, #32
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	2310      	movs	r3, #16
 800a42c:	e7b0      	b.n	800a390 <_printf_i+0xfc>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	f043 0320 	orr.w	r3, r3, #32
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	2378      	movs	r3, #120	; 0x78
 800a438:	4828      	ldr	r0, [pc, #160]	; (800a4dc <_printf_i+0x248>)
 800a43a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a43e:	e7e3      	b.n	800a408 <_printf_i+0x174>
 800a440:	0659      	lsls	r1, r3, #25
 800a442:	bf48      	it	mi
 800a444:	b2b6      	uxthmi	r6, r6
 800a446:	e7e6      	b.n	800a416 <_printf_i+0x182>
 800a448:	4615      	mov	r5, r2
 800a44a:	e7bb      	b.n	800a3c4 <_printf_i+0x130>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	6826      	ldr	r6, [r4, #0]
 800a450:	6961      	ldr	r1, [r4, #20]
 800a452:	1d18      	adds	r0, r3, #4
 800a454:	6028      	str	r0, [r5, #0]
 800a456:	0635      	lsls	r5, r6, #24
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	d501      	bpl.n	800a460 <_printf_i+0x1cc>
 800a45c:	6019      	str	r1, [r3, #0]
 800a45e:	e002      	b.n	800a466 <_printf_i+0x1d2>
 800a460:	0670      	lsls	r0, r6, #25
 800a462:	d5fb      	bpl.n	800a45c <_printf_i+0x1c8>
 800a464:	8019      	strh	r1, [r3, #0]
 800a466:	2300      	movs	r3, #0
 800a468:	6123      	str	r3, [r4, #16]
 800a46a:	4615      	mov	r5, r2
 800a46c:	e7ba      	b.n	800a3e4 <_printf_i+0x150>
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	1d1a      	adds	r2, r3, #4
 800a472:	602a      	str	r2, [r5, #0]
 800a474:	681d      	ldr	r5, [r3, #0]
 800a476:	6862      	ldr	r2, [r4, #4]
 800a478:	2100      	movs	r1, #0
 800a47a:	4628      	mov	r0, r5
 800a47c:	f7f5 fec0 	bl	8000200 <memchr>
 800a480:	b108      	cbz	r0, 800a486 <_printf_i+0x1f2>
 800a482:	1b40      	subs	r0, r0, r5
 800a484:	6060      	str	r0, [r4, #4]
 800a486:	6863      	ldr	r3, [r4, #4]
 800a488:	6123      	str	r3, [r4, #16]
 800a48a:	2300      	movs	r3, #0
 800a48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a490:	e7a8      	b.n	800a3e4 <_printf_i+0x150>
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	462a      	mov	r2, r5
 800a496:	4649      	mov	r1, r9
 800a498:	4640      	mov	r0, r8
 800a49a:	47d0      	blx	sl
 800a49c:	3001      	adds	r0, #1
 800a49e:	d0ab      	beq.n	800a3f8 <_printf_i+0x164>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	079b      	lsls	r3, r3, #30
 800a4a4:	d413      	bmi.n	800a4ce <_printf_i+0x23a>
 800a4a6:	68e0      	ldr	r0, [r4, #12]
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	4298      	cmp	r0, r3
 800a4ac:	bfb8      	it	lt
 800a4ae:	4618      	movlt	r0, r3
 800a4b0:	e7a4      	b.n	800a3fc <_printf_i+0x168>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	47d0      	blx	sl
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d09b      	beq.n	800a3f8 <_printf_i+0x164>
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	68e3      	ldr	r3, [r4, #12]
 800a4c4:	9903      	ldr	r1, [sp, #12]
 800a4c6:	1a5b      	subs	r3, r3, r1
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	dcf2      	bgt.n	800a4b2 <_printf_i+0x21e>
 800a4cc:	e7eb      	b.n	800a4a6 <_printf_i+0x212>
 800a4ce:	2500      	movs	r5, #0
 800a4d0:	f104 0619 	add.w	r6, r4, #25
 800a4d4:	e7f5      	b.n	800a4c2 <_printf_i+0x22e>
 800a4d6:	bf00      	nop
 800a4d8:	0800e5d6 	.word	0x0800e5d6
 800a4dc:	0800e5e7 	.word	0x0800e5e7

0800a4e0 <_scanf_float>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	b087      	sub	sp, #28
 800a4e6:	4617      	mov	r7, r2
 800a4e8:	9303      	str	r3, [sp, #12]
 800a4ea:	688b      	ldr	r3, [r1, #8]
 800a4ec:	1e5a      	subs	r2, r3, #1
 800a4ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a4f2:	bf83      	ittte	hi
 800a4f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a4f8:	195b      	addhi	r3, r3, r5
 800a4fa:	9302      	strhi	r3, [sp, #8]
 800a4fc:	2300      	movls	r3, #0
 800a4fe:	bf86      	itte	hi
 800a500:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a504:	608b      	strhi	r3, [r1, #8]
 800a506:	9302      	strls	r3, [sp, #8]
 800a508:	680b      	ldr	r3, [r1, #0]
 800a50a:	468b      	mov	fp, r1
 800a50c:	2500      	movs	r5, #0
 800a50e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a512:	f84b 3b1c 	str.w	r3, [fp], #28
 800a516:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a51a:	4680      	mov	r8, r0
 800a51c:	460c      	mov	r4, r1
 800a51e:	465e      	mov	r6, fp
 800a520:	46aa      	mov	sl, r5
 800a522:	46a9      	mov	r9, r5
 800a524:	9501      	str	r5, [sp, #4]
 800a526:	68a2      	ldr	r2, [r4, #8]
 800a528:	b152      	cbz	r2, 800a540 <_scanf_float+0x60>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b4e      	cmp	r3, #78	; 0x4e
 800a530:	d864      	bhi.n	800a5fc <_scanf_float+0x11c>
 800a532:	2b40      	cmp	r3, #64	; 0x40
 800a534:	d83c      	bhi.n	800a5b0 <_scanf_float+0xd0>
 800a536:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a53a:	b2c8      	uxtb	r0, r1
 800a53c:	280e      	cmp	r0, #14
 800a53e:	d93a      	bls.n	800a5b6 <_scanf_float+0xd6>
 800a540:	f1b9 0f00 	cmp.w	r9, #0
 800a544:	d003      	beq.n	800a54e <_scanf_float+0x6e>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a552:	f1ba 0f01 	cmp.w	sl, #1
 800a556:	f200 8113 	bhi.w	800a780 <_scanf_float+0x2a0>
 800a55a:	455e      	cmp	r6, fp
 800a55c:	f200 8105 	bhi.w	800a76a <_scanf_float+0x28a>
 800a560:	2501      	movs	r5, #1
 800a562:	4628      	mov	r0, r5
 800a564:	b007      	add	sp, #28
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a56e:	2a0d      	cmp	r2, #13
 800a570:	d8e6      	bhi.n	800a540 <_scanf_float+0x60>
 800a572:	a101      	add	r1, pc, #4	; (adr r1, 800a578 <_scanf_float+0x98>)
 800a574:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a578:	0800a6b7 	.word	0x0800a6b7
 800a57c:	0800a541 	.word	0x0800a541
 800a580:	0800a541 	.word	0x0800a541
 800a584:	0800a541 	.word	0x0800a541
 800a588:	0800a717 	.word	0x0800a717
 800a58c:	0800a6ef 	.word	0x0800a6ef
 800a590:	0800a541 	.word	0x0800a541
 800a594:	0800a541 	.word	0x0800a541
 800a598:	0800a6c5 	.word	0x0800a6c5
 800a59c:	0800a541 	.word	0x0800a541
 800a5a0:	0800a541 	.word	0x0800a541
 800a5a4:	0800a541 	.word	0x0800a541
 800a5a8:	0800a541 	.word	0x0800a541
 800a5ac:	0800a67d 	.word	0x0800a67d
 800a5b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a5b4:	e7db      	b.n	800a56e <_scanf_float+0x8e>
 800a5b6:	290e      	cmp	r1, #14
 800a5b8:	d8c2      	bhi.n	800a540 <_scanf_float+0x60>
 800a5ba:	a001      	add	r0, pc, #4	; (adr r0, 800a5c0 <_scanf_float+0xe0>)
 800a5bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a5c0:	0800a66f 	.word	0x0800a66f
 800a5c4:	0800a541 	.word	0x0800a541
 800a5c8:	0800a66f 	.word	0x0800a66f
 800a5cc:	0800a703 	.word	0x0800a703
 800a5d0:	0800a541 	.word	0x0800a541
 800a5d4:	0800a61d 	.word	0x0800a61d
 800a5d8:	0800a659 	.word	0x0800a659
 800a5dc:	0800a659 	.word	0x0800a659
 800a5e0:	0800a659 	.word	0x0800a659
 800a5e4:	0800a659 	.word	0x0800a659
 800a5e8:	0800a659 	.word	0x0800a659
 800a5ec:	0800a659 	.word	0x0800a659
 800a5f0:	0800a659 	.word	0x0800a659
 800a5f4:	0800a659 	.word	0x0800a659
 800a5f8:	0800a659 	.word	0x0800a659
 800a5fc:	2b6e      	cmp	r3, #110	; 0x6e
 800a5fe:	d809      	bhi.n	800a614 <_scanf_float+0x134>
 800a600:	2b60      	cmp	r3, #96	; 0x60
 800a602:	d8b2      	bhi.n	800a56a <_scanf_float+0x8a>
 800a604:	2b54      	cmp	r3, #84	; 0x54
 800a606:	d077      	beq.n	800a6f8 <_scanf_float+0x218>
 800a608:	2b59      	cmp	r3, #89	; 0x59
 800a60a:	d199      	bne.n	800a540 <_scanf_float+0x60>
 800a60c:	2d07      	cmp	r5, #7
 800a60e:	d197      	bne.n	800a540 <_scanf_float+0x60>
 800a610:	2508      	movs	r5, #8
 800a612:	e029      	b.n	800a668 <_scanf_float+0x188>
 800a614:	2b74      	cmp	r3, #116	; 0x74
 800a616:	d06f      	beq.n	800a6f8 <_scanf_float+0x218>
 800a618:	2b79      	cmp	r3, #121	; 0x79
 800a61a:	e7f6      	b.n	800a60a <_scanf_float+0x12a>
 800a61c:	6821      	ldr	r1, [r4, #0]
 800a61e:	05c8      	lsls	r0, r1, #23
 800a620:	d51a      	bpl.n	800a658 <_scanf_float+0x178>
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a628:	6021      	str	r1, [r4, #0]
 800a62a:	f109 0901 	add.w	r9, r9, #1
 800a62e:	b11b      	cbz	r3, 800a638 <_scanf_float+0x158>
 800a630:	3b01      	subs	r3, #1
 800a632:	3201      	adds	r2, #1
 800a634:	9302      	str	r3, [sp, #8]
 800a636:	60a2      	str	r2, [r4, #8]
 800a638:	68a3      	ldr	r3, [r4, #8]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	3301      	adds	r3, #1
 800a642:	6123      	str	r3, [r4, #16]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3b01      	subs	r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	f340 8084 	ble.w	800a758 <_scanf_float+0x278>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	3301      	adds	r3, #1
 800a654:	603b      	str	r3, [r7, #0]
 800a656:	e766      	b.n	800a526 <_scanf_float+0x46>
 800a658:	eb1a 0f05 	cmn.w	sl, r5
 800a65c:	f47f af70 	bne.w	800a540 <_scanf_float+0x60>
 800a660:	6822      	ldr	r2, [r4, #0]
 800a662:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a666:	6022      	str	r2, [r4, #0]
 800a668:	f806 3b01 	strb.w	r3, [r6], #1
 800a66c:	e7e4      	b.n	800a638 <_scanf_float+0x158>
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	0610      	lsls	r0, r2, #24
 800a672:	f57f af65 	bpl.w	800a540 <_scanf_float+0x60>
 800a676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a67a:	e7f4      	b.n	800a666 <_scanf_float+0x186>
 800a67c:	f1ba 0f00 	cmp.w	sl, #0
 800a680:	d10e      	bne.n	800a6a0 <_scanf_float+0x1c0>
 800a682:	f1b9 0f00 	cmp.w	r9, #0
 800a686:	d10e      	bne.n	800a6a6 <_scanf_float+0x1c6>
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a68e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a692:	d108      	bne.n	800a6a6 <_scanf_float+0x1c6>
 800a694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	f04f 0a01 	mov.w	sl, #1
 800a69e:	e7e3      	b.n	800a668 <_scanf_float+0x188>
 800a6a0:	f1ba 0f02 	cmp.w	sl, #2
 800a6a4:	d055      	beq.n	800a752 <_scanf_float+0x272>
 800a6a6:	2d01      	cmp	r5, #1
 800a6a8:	d002      	beq.n	800a6b0 <_scanf_float+0x1d0>
 800a6aa:	2d04      	cmp	r5, #4
 800a6ac:	f47f af48 	bne.w	800a540 <_scanf_float+0x60>
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	b2ed      	uxtb	r5, r5
 800a6b4:	e7d8      	b.n	800a668 <_scanf_float+0x188>
 800a6b6:	f1ba 0f01 	cmp.w	sl, #1
 800a6ba:	f47f af41 	bne.w	800a540 <_scanf_float+0x60>
 800a6be:	f04f 0a02 	mov.w	sl, #2
 800a6c2:	e7d1      	b.n	800a668 <_scanf_float+0x188>
 800a6c4:	b97d      	cbnz	r5, 800a6e6 <_scanf_float+0x206>
 800a6c6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ca:	f47f af3c 	bne.w	800a546 <_scanf_float+0x66>
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a6d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a6d8:	f47f af39 	bne.w	800a54e <_scanf_float+0x6e>
 800a6dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a6e0:	6022      	str	r2, [r4, #0]
 800a6e2:	2501      	movs	r5, #1
 800a6e4:	e7c0      	b.n	800a668 <_scanf_float+0x188>
 800a6e6:	2d03      	cmp	r5, #3
 800a6e8:	d0e2      	beq.n	800a6b0 <_scanf_float+0x1d0>
 800a6ea:	2d05      	cmp	r5, #5
 800a6ec:	e7de      	b.n	800a6ac <_scanf_float+0x1cc>
 800a6ee:	2d02      	cmp	r5, #2
 800a6f0:	f47f af26 	bne.w	800a540 <_scanf_float+0x60>
 800a6f4:	2503      	movs	r5, #3
 800a6f6:	e7b7      	b.n	800a668 <_scanf_float+0x188>
 800a6f8:	2d06      	cmp	r5, #6
 800a6fa:	f47f af21 	bne.w	800a540 <_scanf_float+0x60>
 800a6fe:	2507      	movs	r5, #7
 800a700:	e7b2      	b.n	800a668 <_scanf_float+0x188>
 800a702:	6822      	ldr	r2, [r4, #0]
 800a704:	0591      	lsls	r1, r2, #22
 800a706:	f57f af1b 	bpl.w	800a540 <_scanf_float+0x60>
 800a70a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a70e:	6022      	str	r2, [r4, #0]
 800a710:	f8cd 9004 	str.w	r9, [sp, #4]
 800a714:	e7a8      	b.n	800a668 <_scanf_float+0x188>
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a71c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a720:	d006      	beq.n	800a730 <_scanf_float+0x250>
 800a722:	0550      	lsls	r0, r2, #21
 800a724:	f57f af0c 	bpl.w	800a540 <_scanf_float+0x60>
 800a728:	f1b9 0f00 	cmp.w	r9, #0
 800a72c:	f43f af0f 	beq.w	800a54e <_scanf_float+0x6e>
 800a730:	0591      	lsls	r1, r2, #22
 800a732:	bf58      	it	pl
 800a734:	9901      	ldrpl	r1, [sp, #4]
 800a736:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a73a:	bf58      	it	pl
 800a73c:	eba9 0101 	subpl.w	r1, r9, r1
 800a740:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a744:	bf58      	it	pl
 800a746:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a74a:	6022      	str	r2, [r4, #0]
 800a74c:	f04f 0900 	mov.w	r9, #0
 800a750:	e78a      	b.n	800a668 <_scanf_float+0x188>
 800a752:	f04f 0a03 	mov.w	sl, #3
 800a756:	e787      	b.n	800a668 <_scanf_float+0x188>
 800a758:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a75c:	4639      	mov	r1, r7
 800a75e:	4640      	mov	r0, r8
 800a760:	4798      	blx	r3
 800a762:	2800      	cmp	r0, #0
 800a764:	f43f aedf 	beq.w	800a526 <_scanf_float+0x46>
 800a768:	e6ea      	b.n	800a540 <_scanf_float+0x60>
 800a76a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a76e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a772:	463a      	mov	r2, r7
 800a774:	4640      	mov	r0, r8
 800a776:	4798      	blx	r3
 800a778:	6923      	ldr	r3, [r4, #16]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	6123      	str	r3, [r4, #16]
 800a77e:	e6ec      	b.n	800a55a <_scanf_float+0x7a>
 800a780:	1e6b      	subs	r3, r5, #1
 800a782:	2b06      	cmp	r3, #6
 800a784:	d825      	bhi.n	800a7d2 <_scanf_float+0x2f2>
 800a786:	2d02      	cmp	r5, #2
 800a788:	d836      	bhi.n	800a7f8 <_scanf_float+0x318>
 800a78a:	455e      	cmp	r6, fp
 800a78c:	f67f aee8 	bls.w	800a560 <_scanf_float+0x80>
 800a790:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a794:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a798:	463a      	mov	r2, r7
 800a79a:	4640      	mov	r0, r8
 800a79c:	4798      	blx	r3
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	6123      	str	r3, [r4, #16]
 800a7a4:	e7f1      	b.n	800a78a <_scanf_float+0x2aa>
 800a7a6:	9802      	ldr	r0, [sp, #8]
 800a7a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a7b0:	9002      	str	r0, [sp, #8]
 800a7b2:	463a      	mov	r2, r7
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	4798      	blx	r3
 800a7b8:	6923      	ldr	r3, [r4, #16]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	6123      	str	r3, [r4, #16]
 800a7be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a7c2:	fa5f fa8a 	uxtb.w	sl, sl
 800a7c6:	f1ba 0f02 	cmp.w	sl, #2
 800a7ca:	d1ec      	bne.n	800a7a6 <_scanf_float+0x2c6>
 800a7cc:	3d03      	subs	r5, #3
 800a7ce:	b2ed      	uxtb	r5, r5
 800a7d0:	1b76      	subs	r6, r6, r5
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	05da      	lsls	r2, r3, #23
 800a7d6:	d52f      	bpl.n	800a838 <_scanf_float+0x358>
 800a7d8:	055b      	lsls	r3, r3, #21
 800a7da:	d510      	bpl.n	800a7fe <_scanf_float+0x31e>
 800a7dc:	455e      	cmp	r6, fp
 800a7de:	f67f aebf 	bls.w	800a560 <_scanf_float+0x80>
 800a7e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	4798      	blx	r3
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	e7f1      	b.n	800a7dc <_scanf_float+0x2fc>
 800a7f8:	46aa      	mov	sl, r5
 800a7fa:	9602      	str	r6, [sp, #8]
 800a7fc:	e7df      	b.n	800a7be <_scanf_float+0x2de>
 800a7fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	2965      	cmp	r1, #101	; 0x65
 800a806:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a80a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a80e:	6123      	str	r3, [r4, #16]
 800a810:	d00c      	beq.n	800a82c <_scanf_float+0x34c>
 800a812:	2945      	cmp	r1, #69	; 0x45
 800a814:	d00a      	beq.n	800a82c <_scanf_float+0x34c>
 800a816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a81a:	463a      	mov	r2, r7
 800a81c:	4640      	mov	r0, r8
 800a81e:	4798      	blx	r3
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a826:	3b01      	subs	r3, #1
 800a828:	1eb5      	subs	r5, r6, #2
 800a82a:	6123      	str	r3, [r4, #16]
 800a82c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a830:	463a      	mov	r2, r7
 800a832:	4640      	mov	r0, r8
 800a834:	4798      	blx	r3
 800a836:	462e      	mov	r6, r5
 800a838:	6825      	ldr	r5, [r4, #0]
 800a83a:	f015 0510 	ands.w	r5, r5, #16
 800a83e:	d159      	bne.n	800a8f4 <_scanf_float+0x414>
 800a840:	7035      	strb	r5, [r6, #0]
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a84c:	d11b      	bne.n	800a886 <_scanf_float+0x3a6>
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	454b      	cmp	r3, r9
 800a852:	eba3 0209 	sub.w	r2, r3, r9
 800a856:	d123      	bne.n	800a8a0 <_scanf_float+0x3c0>
 800a858:	2200      	movs	r2, #0
 800a85a:	4659      	mov	r1, fp
 800a85c:	4640      	mov	r0, r8
 800a85e:	f000 fe99 	bl	800b594 <_strtod_r>
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	f012 0f02 	tst.w	r2, #2
 800a86a:	ec57 6b10 	vmov	r6, r7, d0
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	d021      	beq.n	800a8b6 <_scanf_float+0x3d6>
 800a872:	9903      	ldr	r1, [sp, #12]
 800a874:	1d1a      	adds	r2, r3, #4
 800a876:	600a      	str	r2, [r1, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	e9c3 6700 	strd	r6, r7, [r3]
 800a87e:	68e3      	ldr	r3, [r4, #12]
 800a880:	3301      	adds	r3, #1
 800a882:	60e3      	str	r3, [r4, #12]
 800a884:	e66d      	b.n	800a562 <_scanf_float+0x82>
 800a886:	9b04      	ldr	r3, [sp, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0e5      	beq.n	800a858 <_scanf_float+0x378>
 800a88c:	9905      	ldr	r1, [sp, #20]
 800a88e:	230a      	movs	r3, #10
 800a890:	462a      	mov	r2, r5
 800a892:	3101      	adds	r1, #1
 800a894:	4640      	mov	r0, r8
 800a896:	f000 ff05 	bl	800b6a4 <_strtol_r>
 800a89a:	9b04      	ldr	r3, [sp, #16]
 800a89c:	9e05      	ldr	r6, [sp, #20]
 800a89e:	1ac2      	subs	r2, r0, r3
 800a8a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a8a4:	429e      	cmp	r6, r3
 800a8a6:	bf28      	it	cs
 800a8a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a8ac:	4912      	ldr	r1, [pc, #72]	; (800a8f8 <_scanf_float+0x418>)
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f000 f82c 	bl	800a90c <siprintf>
 800a8b4:	e7d0      	b.n	800a858 <_scanf_float+0x378>
 800a8b6:	9903      	ldr	r1, [sp, #12]
 800a8b8:	f012 0f04 	tst.w	r2, #4
 800a8bc:	f103 0204 	add.w	r2, r3, #4
 800a8c0:	600a      	str	r2, [r1, #0]
 800a8c2:	d1d9      	bne.n	800a878 <_scanf_float+0x398>
 800a8c4:	f8d3 8000 	ldr.w	r8, [r3]
 800a8c8:	ee10 2a10 	vmov	r2, s0
 800a8cc:	ee10 0a10 	vmov	r0, s0
 800a8d0:	463b      	mov	r3, r7
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f6 f93a 	bl	8000b4c <__aeabi_dcmpun>
 800a8d8:	b128      	cbz	r0, 800a8e6 <_scanf_float+0x406>
 800a8da:	4808      	ldr	r0, [pc, #32]	; (800a8fc <_scanf_float+0x41c>)
 800a8dc:	f000 f810 	bl	800a900 <nanf>
 800a8e0:	ed88 0a00 	vstr	s0, [r8]
 800a8e4:	e7cb      	b.n	800a87e <_scanf_float+0x39e>
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f7f6 f98d 	bl	8000c08 <__aeabi_d2f>
 800a8ee:	f8c8 0000 	str.w	r0, [r8]
 800a8f2:	e7c4      	b.n	800a87e <_scanf_float+0x39e>
 800a8f4:	2500      	movs	r5, #0
 800a8f6:	e634      	b.n	800a562 <_scanf_float+0x82>
 800a8f8:	0800e5f8 	.word	0x0800e5f8
 800a8fc:	0800ea00 	.word	0x0800ea00

0800a900 <nanf>:
 800a900:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a908 <nanf+0x8>
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	7fc00000 	.word	0x7fc00000

0800a90c <siprintf>:
 800a90c:	b40e      	push	{r1, r2, r3}
 800a90e:	b500      	push	{lr}
 800a910:	b09c      	sub	sp, #112	; 0x70
 800a912:	ab1d      	add	r3, sp, #116	; 0x74
 800a914:	9002      	str	r0, [sp, #8]
 800a916:	9006      	str	r0, [sp, #24]
 800a918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a91c:	4809      	ldr	r0, [pc, #36]	; (800a944 <siprintf+0x38>)
 800a91e:	9107      	str	r1, [sp, #28]
 800a920:	9104      	str	r1, [sp, #16]
 800a922:	4909      	ldr	r1, [pc, #36]	; (800a948 <siprintf+0x3c>)
 800a924:	f853 2b04 	ldr.w	r2, [r3], #4
 800a928:	9105      	str	r1, [sp, #20]
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	9301      	str	r3, [sp, #4]
 800a92e:	a902      	add	r1, sp, #8
 800a930:	f002 fef6 	bl	800d720 <_svfiprintf_r>
 800a934:	9b02      	ldr	r3, [sp, #8]
 800a936:	2200      	movs	r2, #0
 800a938:	701a      	strb	r2, [r3, #0]
 800a93a:	b01c      	add	sp, #112	; 0x70
 800a93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a940:	b003      	add	sp, #12
 800a942:	4770      	bx	lr
 800a944:	200000b8 	.word	0x200000b8
 800a948:	ffff0208 	.word	0xffff0208

0800a94c <sulp>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	ec45 4b10 	vmov	d0, r4, r5
 800a956:	4616      	mov	r6, r2
 800a958:	f002 fc40 	bl	800d1dc <__ulp>
 800a95c:	ec51 0b10 	vmov	r0, r1, d0
 800a960:	b17e      	cbz	r6, 800a982 <sulp+0x36>
 800a962:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a966:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	dd09      	ble.n	800a982 <sulp+0x36>
 800a96e:	051b      	lsls	r3, r3, #20
 800a970:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a974:	2400      	movs	r4, #0
 800a976:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a97a:	4622      	mov	r2, r4
 800a97c:	462b      	mov	r3, r5
 800a97e:	f7f5 fe4b 	bl	8000618 <__aeabi_dmul>
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	0000      	movs	r0, r0
	...

0800a988 <_strtod_l>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	ed2d 8b02 	vpush	{d8}
 800a990:	b09d      	sub	sp, #116	; 0x74
 800a992:	461f      	mov	r7, r3
 800a994:	2300      	movs	r3, #0
 800a996:	9318      	str	r3, [sp, #96]	; 0x60
 800a998:	4ba2      	ldr	r3, [pc, #648]	; (800ac24 <_strtod_l+0x29c>)
 800a99a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	9305      	str	r3, [sp, #20]
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	4688      	mov	r8, r1
 800a9a6:	f7f5 fc23 	bl	80001f0 <strlen>
 800a9aa:	f04f 0a00 	mov.w	sl, #0
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	f04f 0b00 	mov.w	fp, #0
 800a9b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	2a2b      	cmp	r2, #43	; 0x2b
 800a9be:	d04e      	beq.n	800aa5e <_strtod_l+0xd6>
 800a9c0:	d83b      	bhi.n	800aa3a <_strtod_l+0xb2>
 800a9c2:	2a0d      	cmp	r2, #13
 800a9c4:	d834      	bhi.n	800aa30 <_strtod_l+0xa8>
 800a9c6:	2a08      	cmp	r2, #8
 800a9c8:	d834      	bhi.n	800aa34 <_strtod_l+0xac>
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	d03e      	beq.n	800aa4c <_strtod_l+0xc4>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	930a      	str	r3, [sp, #40]	; 0x28
 800a9d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a9d4:	7833      	ldrb	r3, [r6, #0]
 800a9d6:	2b30      	cmp	r3, #48	; 0x30
 800a9d8:	f040 80b0 	bne.w	800ab3c <_strtod_l+0x1b4>
 800a9dc:	7873      	ldrb	r3, [r6, #1]
 800a9de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9e2:	2b58      	cmp	r3, #88	; 0x58
 800a9e4:	d168      	bne.n	800aab8 <_strtod_l+0x130>
 800a9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	ab18      	add	r3, sp, #96	; 0x60
 800a9ec:	9702      	str	r7, [sp, #8]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4a8d      	ldr	r2, [pc, #564]	; (800ac28 <_strtod_l+0x2a0>)
 800a9f2:	ab19      	add	r3, sp, #100	; 0x64
 800a9f4:	a917      	add	r1, sp, #92	; 0x5c
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f001 fd58 	bl	800c4ac <__gethex>
 800a9fc:	f010 0707 	ands.w	r7, r0, #7
 800aa00:	4605      	mov	r5, r0
 800aa02:	d005      	beq.n	800aa10 <_strtod_l+0x88>
 800aa04:	2f06      	cmp	r7, #6
 800aa06:	d12c      	bne.n	800aa62 <_strtod_l+0xda>
 800aa08:	3601      	adds	r6, #1
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9617      	str	r6, [sp, #92]	; 0x5c
 800aa0e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f040 8590 	bne.w	800b538 <_strtod_l+0xbb0>
 800aa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1a:	b1eb      	cbz	r3, 800aa58 <_strtod_l+0xd0>
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa22:	ec43 2b10 	vmov	d0, r2, r3
 800aa26:	b01d      	add	sp, #116	; 0x74
 800aa28:	ecbd 8b02 	vpop	{d8}
 800aa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa30:	2a20      	cmp	r2, #32
 800aa32:	d1cc      	bne.n	800a9ce <_strtod_l+0x46>
 800aa34:	3301      	adds	r3, #1
 800aa36:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa38:	e7be      	b.n	800a9b8 <_strtod_l+0x30>
 800aa3a:	2a2d      	cmp	r2, #45	; 0x2d
 800aa3c:	d1c7      	bne.n	800a9ce <_strtod_l+0x46>
 800aa3e:	2201      	movs	r2, #1
 800aa40:	920a      	str	r2, [sp, #40]	; 0x28
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1c2      	bne.n	800a9d2 <_strtod_l+0x4a>
 800aa4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 856e 	bne.w	800b534 <_strtod_l+0xbac>
 800aa58:	4652      	mov	r2, sl
 800aa5a:	465b      	mov	r3, fp
 800aa5c:	e7e1      	b.n	800aa22 <_strtod_l+0x9a>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	e7ee      	b.n	800aa40 <_strtod_l+0xb8>
 800aa62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa64:	b13a      	cbz	r2, 800aa76 <_strtod_l+0xee>
 800aa66:	2135      	movs	r1, #53	; 0x35
 800aa68:	a81a      	add	r0, sp, #104	; 0x68
 800aa6a:	f002 fcc2 	bl	800d3f2 <__copybits>
 800aa6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa70:	4620      	mov	r0, r4
 800aa72:	f002 f881 	bl	800cb78 <_Bfree>
 800aa76:	3f01      	subs	r7, #1
 800aa78:	2f04      	cmp	r7, #4
 800aa7a:	d806      	bhi.n	800aa8a <_strtod_l+0x102>
 800aa7c:	e8df f007 	tbb	[pc, r7]
 800aa80:	1714030a 	.word	0x1714030a
 800aa84:	0a          	.byte	0x0a
 800aa85:	00          	.byte	0x00
 800aa86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aa8a:	0728      	lsls	r0, r5, #28
 800aa8c:	d5c0      	bpl.n	800aa10 <_strtod_l+0x88>
 800aa8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aa92:	e7bd      	b.n	800aa10 <_strtod_l+0x88>
 800aa94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800aa98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aa9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aaa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aaa6:	e7f0      	b.n	800aa8a <_strtod_l+0x102>
 800aaa8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ac2c <_strtod_l+0x2a4>
 800aaac:	e7ed      	b.n	800aa8a <_strtod_l+0x102>
 800aaae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aab2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800aab6:	e7e8      	b.n	800aa8a <_strtod_l+0x102>
 800aab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	9217      	str	r2, [sp, #92]	; 0x5c
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	2b30      	cmp	r3, #48	; 0x30
 800aac2:	d0f9      	beq.n	800aab8 <_strtod_l+0x130>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0a3      	beq.n	800aa10 <_strtod_l+0x88>
 800aac8:	2301      	movs	r3, #1
 800aaca:	f04f 0900 	mov.w	r9, #0
 800aace:	9304      	str	r3, [sp, #16]
 800aad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	f8cd 901c 	str.w	r9, [sp, #28]
 800aad8:	464f      	mov	r7, r9
 800aada:	220a      	movs	r2, #10
 800aadc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aade:	7806      	ldrb	r6, [r0, #0]
 800aae0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aae4:	b2d9      	uxtb	r1, r3
 800aae6:	2909      	cmp	r1, #9
 800aae8:	d92a      	bls.n	800ab40 <_strtod_l+0x1b8>
 800aaea:	9905      	ldr	r1, [sp, #20]
 800aaec:	462a      	mov	r2, r5
 800aaee:	f002 ff2f 	bl	800d950 <strncmp>
 800aaf2:	b398      	cbz	r0, 800ab5c <_strtod_l+0x1d4>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	463d      	mov	r5, r7
 800aafa:	9005      	str	r0, [sp, #20]
 800aafc:	4603      	mov	r3, r0
 800aafe:	2a65      	cmp	r2, #101	; 0x65
 800ab00:	d001      	beq.n	800ab06 <_strtod_l+0x17e>
 800ab02:	2a45      	cmp	r2, #69	; 0x45
 800ab04:	d118      	bne.n	800ab38 <_strtod_l+0x1b0>
 800ab06:	b91d      	cbnz	r5, 800ab10 <_strtod_l+0x188>
 800ab08:	9a04      	ldr	r2, [sp, #16]
 800ab0a:	4302      	orrs	r2, r0
 800ab0c:	d09e      	beq.n	800aa4c <_strtod_l+0xc4>
 800ab0e:	2500      	movs	r5, #0
 800ab10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ab14:	f108 0201 	add.w	r2, r8, #1
 800ab18:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ab1e:	2a2b      	cmp	r2, #43	; 0x2b
 800ab20:	d075      	beq.n	800ac0e <_strtod_l+0x286>
 800ab22:	2a2d      	cmp	r2, #45	; 0x2d
 800ab24:	d07b      	beq.n	800ac1e <_strtod_l+0x296>
 800ab26:	f04f 0c00 	mov.w	ip, #0
 800ab2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ab2e:	2909      	cmp	r1, #9
 800ab30:	f240 8082 	bls.w	800ac38 <_strtod_l+0x2b0>
 800ab34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab38:	2600      	movs	r6, #0
 800ab3a:	e09d      	b.n	800ac78 <_strtod_l+0x2f0>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e7c4      	b.n	800aaca <_strtod_l+0x142>
 800ab40:	2f08      	cmp	r7, #8
 800ab42:	bfd8      	it	le
 800ab44:	9907      	ldrle	r1, [sp, #28]
 800ab46:	f100 0001 	add.w	r0, r0, #1
 800ab4a:	bfda      	itte	le
 800ab4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab50:	9307      	strle	r3, [sp, #28]
 800ab52:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ab56:	3701      	adds	r7, #1
 800ab58:	9017      	str	r0, [sp, #92]	; 0x5c
 800ab5a:	e7bf      	b.n	800aadc <_strtod_l+0x154>
 800ab5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab5e:	195a      	adds	r2, r3, r5
 800ab60:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab62:	5d5a      	ldrb	r2, [r3, r5]
 800ab64:	2f00      	cmp	r7, #0
 800ab66:	d037      	beq.n	800abd8 <_strtod_l+0x250>
 800ab68:	9005      	str	r0, [sp, #20]
 800ab6a:	463d      	mov	r5, r7
 800ab6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ab70:	2b09      	cmp	r3, #9
 800ab72:	d912      	bls.n	800ab9a <_strtod_l+0x212>
 800ab74:	2301      	movs	r3, #1
 800ab76:	e7c2      	b.n	800aafe <_strtod_l+0x176>
 800ab78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab7e:	785a      	ldrb	r2, [r3, #1]
 800ab80:	3001      	adds	r0, #1
 800ab82:	2a30      	cmp	r2, #48	; 0x30
 800ab84:	d0f8      	beq.n	800ab78 <_strtod_l+0x1f0>
 800ab86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ab8a:	2b08      	cmp	r3, #8
 800ab8c:	f200 84d9 	bhi.w	800b542 <_strtod_l+0xbba>
 800ab90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab92:	9005      	str	r0, [sp, #20]
 800ab94:	2000      	movs	r0, #0
 800ab96:	9308      	str	r3, [sp, #32]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	3a30      	subs	r2, #48	; 0x30
 800ab9c:	f100 0301 	add.w	r3, r0, #1
 800aba0:	d014      	beq.n	800abcc <_strtod_l+0x244>
 800aba2:	9905      	ldr	r1, [sp, #20]
 800aba4:	4419      	add	r1, r3
 800aba6:	9105      	str	r1, [sp, #20]
 800aba8:	462b      	mov	r3, r5
 800abaa:	eb00 0e05 	add.w	lr, r0, r5
 800abae:	210a      	movs	r1, #10
 800abb0:	4573      	cmp	r3, lr
 800abb2:	d113      	bne.n	800abdc <_strtod_l+0x254>
 800abb4:	182b      	adds	r3, r5, r0
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	f105 0501 	add.w	r5, r5, #1
 800abbc:	4405      	add	r5, r0
 800abbe:	dc1c      	bgt.n	800abfa <_strtod_l+0x272>
 800abc0:	9907      	ldr	r1, [sp, #28]
 800abc2:	230a      	movs	r3, #10
 800abc4:	fb03 2301 	mla	r3, r3, r1, r2
 800abc8:	9307      	str	r3, [sp, #28]
 800abca:	2300      	movs	r3, #0
 800abcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abce:	1c51      	adds	r1, r2, #1
 800abd0:	9117      	str	r1, [sp, #92]	; 0x5c
 800abd2:	7852      	ldrb	r2, [r2, #1]
 800abd4:	4618      	mov	r0, r3
 800abd6:	e7c9      	b.n	800ab6c <_strtod_l+0x1e4>
 800abd8:	4638      	mov	r0, r7
 800abda:	e7d2      	b.n	800ab82 <_strtod_l+0x1fa>
 800abdc:	2b08      	cmp	r3, #8
 800abde:	dc04      	bgt.n	800abea <_strtod_l+0x262>
 800abe0:	9e07      	ldr	r6, [sp, #28]
 800abe2:	434e      	muls	r6, r1
 800abe4:	9607      	str	r6, [sp, #28]
 800abe6:	3301      	adds	r3, #1
 800abe8:	e7e2      	b.n	800abb0 <_strtod_l+0x228>
 800abea:	f103 0c01 	add.w	ip, r3, #1
 800abee:	f1bc 0f10 	cmp.w	ip, #16
 800abf2:	bfd8      	it	le
 800abf4:	fb01 f909 	mulle.w	r9, r1, r9
 800abf8:	e7f5      	b.n	800abe6 <_strtod_l+0x25e>
 800abfa:	2d10      	cmp	r5, #16
 800abfc:	bfdc      	itt	le
 800abfe:	230a      	movle	r3, #10
 800ac00:	fb03 2909 	mlale	r9, r3, r9, r2
 800ac04:	e7e1      	b.n	800abca <_strtod_l+0x242>
 800ac06:	2300      	movs	r3, #0
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e77c      	b.n	800ab08 <_strtod_l+0x180>
 800ac0e:	f04f 0c00 	mov.w	ip, #0
 800ac12:	f108 0202 	add.w	r2, r8, #2
 800ac16:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac18:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ac1c:	e785      	b.n	800ab2a <_strtod_l+0x1a2>
 800ac1e:	f04f 0c01 	mov.w	ip, #1
 800ac22:	e7f6      	b.n	800ac12 <_strtod_l+0x28a>
 800ac24:	0800e848 	.word	0x0800e848
 800ac28:	0800e600 	.word	0x0800e600
 800ac2c:	7ff00000 	.word	0x7ff00000
 800ac30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac32:	1c51      	adds	r1, r2, #1
 800ac34:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac36:	7852      	ldrb	r2, [r2, #1]
 800ac38:	2a30      	cmp	r2, #48	; 0x30
 800ac3a:	d0f9      	beq.n	800ac30 <_strtod_l+0x2a8>
 800ac3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ac40:	2908      	cmp	r1, #8
 800ac42:	f63f af79 	bhi.w	800ab38 <_strtod_l+0x1b0>
 800ac46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ac4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac4c:	9206      	str	r2, [sp, #24]
 800ac4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac50:	1c51      	adds	r1, r2, #1
 800ac52:	9117      	str	r1, [sp, #92]	; 0x5c
 800ac54:	7852      	ldrb	r2, [r2, #1]
 800ac56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ac5a:	2e09      	cmp	r6, #9
 800ac5c:	d937      	bls.n	800acce <_strtod_l+0x346>
 800ac5e:	9e06      	ldr	r6, [sp, #24]
 800ac60:	1b89      	subs	r1, r1, r6
 800ac62:	2908      	cmp	r1, #8
 800ac64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ac68:	dc02      	bgt.n	800ac70 <_strtod_l+0x2e8>
 800ac6a:	4576      	cmp	r6, lr
 800ac6c:	bfa8      	it	ge
 800ac6e:	4676      	movge	r6, lr
 800ac70:	f1bc 0f00 	cmp.w	ip, #0
 800ac74:	d000      	beq.n	800ac78 <_strtod_l+0x2f0>
 800ac76:	4276      	negs	r6, r6
 800ac78:	2d00      	cmp	r5, #0
 800ac7a:	d14d      	bne.n	800ad18 <_strtod_l+0x390>
 800ac7c:	9904      	ldr	r1, [sp, #16]
 800ac7e:	4301      	orrs	r1, r0
 800ac80:	f47f aec6 	bne.w	800aa10 <_strtod_l+0x88>
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f47f aee1 	bne.w	800aa4c <_strtod_l+0xc4>
 800ac8a:	2a69      	cmp	r2, #105	; 0x69
 800ac8c:	d027      	beq.n	800acde <_strtod_l+0x356>
 800ac8e:	dc24      	bgt.n	800acda <_strtod_l+0x352>
 800ac90:	2a49      	cmp	r2, #73	; 0x49
 800ac92:	d024      	beq.n	800acde <_strtod_l+0x356>
 800ac94:	2a4e      	cmp	r2, #78	; 0x4e
 800ac96:	f47f aed9 	bne.w	800aa4c <_strtod_l+0xc4>
 800ac9a:	499f      	ldr	r1, [pc, #636]	; (800af18 <_strtod_l+0x590>)
 800ac9c:	a817      	add	r0, sp, #92	; 0x5c
 800ac9e:	f001 fe5d 	bl	800c95c <__match>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	f43f aed2 	beq.w	800aa4c <_strtod_l+0xc4>
 800aca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b28      	cmp	r3, #40	; 0x28
 800acae:	d12d      	bne.n	800ad0c <_strtod_l+0x384>
 800acb0:	499a      	ldr	r1, [pc, #616]	; (800af1c <_strtod_l+0x594>)
 800acb2:	aa1a      	add	r2, sp, #104	; 0x68
 800acb4:	a817      	add	r0, sp, #92	; 0x5c
 800acb6:	f001 fe65 	bl	800c984 <__hexnan>
 800acba:	2805      	cmp	r0, #5
 800acbc:	d126      	bne.n	800ad0c <_strtod_l+0x384>
 800acbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800acc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800acc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800accc:	e6a0      	b.n	800aa10 <_strtod_l+0x88>
 800acce:	210a      	movs	r1, #10
 800acd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800acd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800acd8:	e7b9      	b.n	800ac4e <_strtod_l+0x2c6>
 800acda:	2a6e      	cmp	r2, #110	; 0x6e
 800acdc:	e7db      	b.n	800ac96 <_strtod_l+0x30e>
 800acde:	4990      	ldr	r1, [pc, #576]	; (800af20 <_strtod_l+0x598>)
 800ace0:	a817      	add	r0, sp, #92	; 0x5c
 800ace2:	f001 fe3b 	bl	800c95c <__match>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f aeb0 	beq.w	800aa4c <_strtod_l+0xc4>
 800acec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acee:	498d      	ldr	r1, [pc, #564]	; (800af24 <_strtod_l+0x59c>)
 800acf0:	3b01      	subs	r3, #1
 800acf2:	a817      	add	r0, sp, #92	; 0x5c
 800acf4:	9317      	str	r3, [sp, #92]	; 0x5c
 800acf6:	f001 fe31 	bl	800c95c <__match>
 800acfa:	b910      	cbnz	r0, 800ad02 <_strtod_l+0x37a>
 800acfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acfe:	3301      	adds	r3, #1
 800ad00:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad02:	f8df b230 	ldr.w	fp, [pc, #560]	; 800af34 <_strtod_l+0x5ac>
 800ad06:	f04f 0a00 	mov.w	sl, #0
 800ad0a:	e681      	b.n	800aa10 <_strtod_l+0x88>
 800ad0c:	4886      	ldr	r0, [pc, #536]	; (800af28 <_strtod_l+0x5a0>)
 800ad0e:	f002 fe07 	bl	800d920 <nan>
 800ad12:	ec5b ab10 	vmov	sl, fp, d0
 800ad16:	e67b      	b.n	800aa10 <_strtod_l+0x88>
 800ad18:	9b05      	ldr	r3, [sp, #20]
 800ad1a:	9807      	ldr	r0, [sp, #28]
 800ad1c:	1af3      	subs	r3, r6, r3
 800ad1e:	2f00      	cmp	r7, #0
 800ad20:	bf08      	it	eq
 800ad22:	462f      	moveq	r7, r5
 800ad24:	2d10      	cmp	r5, #16
 800ad26:	9306      	str	r3, [sp, #24]
 800ad28:	46a8      	mov	r8, r5
 800ad2a:	bfa8      	it	ge
 800ad2c:	f04f 0810 	movge.w	r8, #16
 800ad30:	f7f5 fbf8 	bl	8000524 <__aeabi_ui2d>
 800ad34:	2d09      	cmp	r5, #9
 800ad36:	4682      	mov	sl, r0
 800ad38:	468b      	mov	fp, r1
 800ad3a:	dd13      	ble.n	800ad64 <_strtod_l+0x3dc>
 800ad3c:	4b7b      	ldr	r3, [pc, #492]	; (800af2c <_strtod_l+0x5a4>)
 800ad3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad46:	f7f5 fc67 	bl	8000618 <__aeabi_dmul>
 800ad4a:	4682      	mov	sl, r0
 800ad4c:	4648      	mov	r0, r9
 800ad4e:	468b      	mov	fp, r1
 800ad50:	f7f5 fbe8 	bl	8000524 <__aeabi_ui2d>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4650      	mov	r0, sl
 800ad5a:	4659      	mov	r1, fp
 800ad5c:	f7f5 faa6 	bl	80002ac <__adddf3>
 800ad60:	4682      	mov	sl, r0
 800ad62:	468b      	mov	fp, r1
 800ad64:	2d0f      	cmp	r5, #15
 800ad66:	dc38      	bgt.n	800adda <_strtod_l+0x452>
 800ad68:	9b06      	ldr	r3, [sp, #24]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f43f ae50 	beq.w	800aa10 <_strtod_l+0x88>
 800ad70:	dd24      	ble.n	800adbc <_strtod_l+0x434>
 800ad72:	2b16      	cmp	r3, #22
 800ad74:	dc0b      	bgt.n	800ad8e <_strtod_l+0x406>
 800ad76:	496d      	ldr	r1, [pc, #436]	; (800af2c <_strtod_l+0x5a4>)
 800ad78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad80:	4652      	mov	r2, sl
 800ad82:	465b      	mov	r3, fp
 800ad84:	f7f5 fc48 	bl	8000618 <__aeabi_dmul>
 800ad88:	4682      	mov	sl, r0
 800ad8a:	468b      	mov	fp, r1
 800ad8c:	e640      	b.n	800aa10 <_strtod_l+0x88>
 800ad8e:	9a06      	ldr	r2, [sp, #24]
 800ad90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ad94:	4293      	cmp	r3, r2
 800ad96:	db20      	blt.n	800adda <_strtod_l+0x452>
 800ad98:	4c64      	ldr	r4, [pc, #400]	; (800af2c <_strtod_l+0x5a4>)
 800ad9a:	f1c5 050f 	rsb	r5, r5, #15
 800ad9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ada2:	4652      	mov	r2, sl
 800ada4:	465b      	mov	r3, fp
 800ada6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adaa:	f7f5 fc35 	bl	8000618 <__aeabi_dmul>
 800adae:	9b06      	ldr	r3, [sp, #24]
 800adb0:	1b5d      	subs	r5, r3, r5
 800adb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800adb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800adba:	e7e3      	b.n	800ad84 <_strtod_l+0x3fc>
 800adbc:	9b06      	ldr	r3, [sp, #24]
 800adbe:	3316      	adds	r3, #22
 800adc0:	db0b      	blt.n	800adda <_strtod_l+0x452>
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	1b9e      	subs	r6, r3, r6
 800adc6:	4b59      	ldr	r3, [pc, #356]	; (800af2c <_strtod_l+0x5a4>)
 800adc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800adcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800add0:	4650      	mov	r0, sl
 800add2:	4659      	mov	r1, fp
 800add4:	f7f5 fd4a 	bl	800086c <__aeabi_ddiv>
 800add8:	e7d6      	b.n	800ad88 <_strtod_l+0x400>
 800adda:	9b06      	ldr	r3, [sp, #24]
 800addc:	eba5 0808 	sub.w	r8, r5, r8
 800ade0:	4498      	add	r8, r3
 800ade2:	f1b8 0f00 	cmp.w	r8, #0
 800ade6:	dd74      	ble.n	800aed2 <_strtod_l+0x54a>
 800ade8:	f018 030f 	ands.w	r3, r8, #15
 800adec:	d00a      	beq.n	800ae04 <_strtod_l+0x47c>
 800adee:	494f      	ldr	r1, [pc, #316]	; (800af2c <_strtod_l+0x5a4>)
 800adf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adf4:	4652      	mov	r2, sl
 800adf6:	465b      	mov	r3, fp
 800adf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfc:	f7f5 fc0c 	bl	8000618 <__aeabi_dmul>
 800ae00:	4682      	mov	sl, r0
 800ae02:	468b      	mov	fp, r1
 800ae04:	f038 080f 	bics.w	r8, r8, #15
 800ae08:	d04f      	beq.n	800aeaa <_strtod_l+0x522>
 800ae0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ae0e:	dd22      	ble.n	800ae56 <_strtod_l+0x4ce>
 800ae10:	2500      	movs	r5, #0
 800ae12:	462e      	mov	r6, r5
 800ae14:	9507      	str	r5, [sp, #28]
 800ae16:	9505      	str	r5, [sp, #20]
 800ae18:	2322      	movs	r3, #34	; 0x22
 800ae1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800af34 <_strtod_l+0x5ac>
 800ae1e:	6023      	str	r3, [r4, #0]
 800ae20:	f04f 0a00 	mov.w	sl, #0
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f43f adf2 	beq.w	800aa10 <_strtod_l+0x88>
 800ae2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f001 fea2 	bl	800cb78 <_Bfree>
 800ae34:	9905      	ldr	r1, [sp, #20]
 800ae36:	4620      	mov	r0, r4
 800ae38:	f001 fe9e 	bl	800cb78 <_Bfree>
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f001 fe9a 	bl	800cb78 <_Bfree>
 800ae44:	9907      	ldr	r1, [sp, #28]
 800ae46:	4620      	mov	r0, r4
 800ae48:	f001 fe96 	bl	800cb78 <_Bfree>
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f001 fe92 	bl	800cb78 <_Bfree>
 800ae54:	e5dc      	b.n	800aa10 <_strtod_l+0x88>
 800ae56:	4b36      	ldr	r3, [pc, #216]	; (800af30 <_strtod_l+0x5a8>)
 800ae58:	9304      	str	r3, [sp, #16]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ae60:	4650      	mov	r0, sl
 800ae62:	4659      	mov	r1, fp
 800ae64:	4699      	mov	r9, r3
 800ae66:	f1b8 0f01 	cmp.w	r8, #1
 800ae6a:	dc21      	bgt.n	800aeb0 <_strtod_l+0x528>
 800ae6c:	b10b      	cbz	r3, 800ae72 <_strtod_l+0x4ea>
 800ae6e:	4682      	mov	sl, r0
 800ae70:	468b      	mov	fp, r1
 800ae72:	4b2f      	ldr	r3, [pc, #188]	; (800af30 <_strtod_l+0x5a8>)
 800ae74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ae78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ae7c:	4652      	mov	r2, sl
 800ae7e:	465b      	mov	r3, fp
 800ae80:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ae84:	f7f5 fbc8 	bl	8000618 <__aeabi_dmul>
 800ae88:	4b2a      	ldr	r3, [pc, #168]	; (800af34 <_strtod_l+0x5ac>)
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	400b      	ands	r3, r1
 800ae8e:	492a      	ldr	r1, [pc, #168]	; (800af38 <_strtod_l+0x5b0>)
 800ae90:	428b      	cmp	r3, r1
 800ae92:	4682      	mov	sl, r0
 800ae94:	d8bc      	bhi.n	800ae10 <_strtod_l+0x488>
 800ae96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ae9a:	428b      	cmp	r3, r1
 800ae9c:	bf86      	itte	hi
 800ae9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800af3c <_strtod_l+0x5b4>
 800aea2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800aea6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aeaa:	2300      	movs	r3, #0
 800aeac:	9304      	str	r3, [sp, #16]
 800aeae:	e084      	b.n	800afba <_strtod_l+0x632>
 800aeb0:	f018 0f01 	tst.w	r8, #1
 800aeb4:	d005      	beq.n	800aec2 <_strtod_l+0x53a>
 800aeb6:	9b04      	ldr	r3, [sp, #16]
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f7f5 fbac 	bl	8000618 <__aeabi_dmul>
 800aec0:	2301      	movs	r3, #1
 800aec2:	9a04      	ldr	r2, [sp, #16]
 800aec4:	3208      	adds	r2, #8
 800aec6:	f109 0901 	add.w	r9, r9, #1
 800aeca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aece:	9204      	str	r2, [sp, #16]
 800aed0:	e7c9      	b.n	800ae66 <_strtod_l+0x4de>
 800aed2:	d0ea      	beq.n	800aeaa <_strtod_l+0x522>
 800aed4:	f1c8 0800 	rsb	r8, r8, #0
 800aed8:	f018 020f 	ands.w	r2, r8, #15
 800aedc:	d00a      	beq.n	800aef4 <_strtod_l+0x56c>
 800aede:	4b13      	ldr	r3, [pc, #76]	; (800af2c <_strtod_l+0x5a4>)
 800aee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aee4:	4650      	mov	r0, sl
 800aee6:	4659      	mov	r1, fp
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f7f5 fcbe 	bl	800086c <__aeabi_ddiv>
 800aef0:	4682      	mov	sl, r0
 800aef2:	468b      	mov	fp, r1
 800aef4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aef8:	d0d7      	beq.n	800aeaa <_strtod_l+0x522>
 800aefa:	f1b8 0f1f 	cmp.w	r8, #31
 800aefe:	dd1f      	ble.n	800af40 <_strtod_l+0x5b8>
 800af00:	2500      	movs	r5, #0
 800af02:	462e      	mov	r6, r5
 800af04:	9507      	str	r5, [sp, #28]
 800af06:	9505      	str	r5, [sp, #20]
 800af08:	2322      	movs	r3, #34	; 0x22
 800af0a:	f04f 0a00 	mov.w	sl, #0
 800af0e:	f04f 0b00 	mov.w	fp, #0
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	e786      	b.n	800ae24 <_strtod_l+0x49c>
 800af16:	bf00      	nop
 800af18:	0800e5d1 	.word	0x0800e5d1
 800af1c:	0800e614 	.word	0x0800e614
 800af20:	0800e5c9 	.word	0x0800e5c9
 800af24:	0800e754 	.word	0x0800e754
 800af28:	0800ea00 	.word	0x0800ea00
 800af2c:	0800e8e0 	.word	0x0800e8e0
 800af30:	0800e8b8 	.word	0x0800e8b8
 800af34:	7ff00000 	.word	0x7ff00000
 800af38:	7ca00000 	.word	0x7ca00000
 800af3c:	7fefffff 	.word	0x7fefffff
 800af40:	f018 0310 	ands.w	r3, r8, #16
 800af44:	bf18      	it	ne
 800af46:	236a      	movne	r3, #106	; 0x6a
 800af48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b2f8 <_strtod_l+0x970>
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	4650      	mov	r0, sl
 800af50:	4659      	mov	r1, fp
 800af52:	2300      	movs	r3, #0
 800af54:	f018 0f01 	tst.w	r8, #1
 800af58:	d004      	beq.n	800af64 <_strtod_l+0x5dc>
 800af5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800af5e:	f7f5 fb5b 	bl	8000618 <__aeabi_dmul>
 800af62:	2301      	movs	r3, #1
 800af64:	ea5f 0868 	movs.w	r8, r8, asr #1
 800af68:	f109 0908 	add.w	r9, r9, #8
 800af6c:	d1f2      	bne.n	800af54 <_strtod_l+0x5cc>
 800af6e:	b10b      	cbz	r3, 800af74 <_strtod_l+0x5ec>
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	9b04      	ldr	r3, [sp, #16]
 800af76:	b1c3      	cbz	r3, 800afaa <_strtod_l+0x622>
 800af78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800af80:	2b00      	cmp	r3, #0
 800af82:	4659      	mov	r1, fp
 800af84:	dd11      	ble.n	800afaa <_strtod_l+0x622>
 800af86:	2b1f      	cmp	r3, #31
 800af88:	f340 8124 	ble.w	800b1d4 <_strtod_l+0x84c>
 800af8c:	2b34      	cmp	r3, #52	; 0x34
 800af8e:	bfde      	ittt	le
 800af90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800af94:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800af98:	fa03 f202 	lslle.w	r2, r3, r2
 800af9c:	f04f 0a00 	mov.w	sl, #0
 800afa0:	bfcc      	ite	gt
 800afa2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800afa6:	ea02 0b01 	andle.w	fp, r2, r1
 800afaa:	2200      	movs	r2, #0
 800afac:	2300      	movs	r3, #0
 800afae:	4650      	mov	r0, sl
 800afb0:	4659      	mov	r1, fp
 800afb2:	f7f5 fd99 	bl	8000ae8 <__aeabi_dcmpeq>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d1a2      	bne.n	800af00 <_strtod_l+0x578>
 800afba:	9b07      	ldr	r3, [sp, #28]
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	9908      	ldr	r1, [sp, #32]
 800afc0:	462b      	mov	r3, r5
 800afc2:	463a      	mov	r2, r7
 800afc4:	4620      	mov	r0, r4
 800afc6:	f001 fe3f 	bl	800cc48 <__s2b>
 800afca:	9007      	str	r0, [sp, #28]
 800afcc:	2800      	cmp	r0, #0
 800afce:	f43f af1f 	beq.w	800ae10 <_strtod_l+0x488>
 800afd2:	9b05      	ldr	r3, [sp, #20]
 800afd4:	1b9e      	subs	r6, r3, r6
 800afd6:	9b06      	ldr	r3, [sp, #24]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	bfb4      	ite	lt
 800afdc:	4633      	movlt	r3, r6
 800afde:	2300      	movge	r3, #0
 800afe0:	930c      	str	r3, [sp, #48]	; 0x30
 800afe2:	9b06      	ldr	r3, [sp, #24]
 800afe4:	2500      	movs	r5, #0
 800afe6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800afea:	9312      	str	r3, [sp, #72]	; 0x48
 800afec:	462e      	mov	r6, r5
 800afee:	9b07      	ldr	r3, [sp, #28]
 800aff0:	4620      	mov	r0, r4
 800aff2:	6859      	ldr	r1, [r3, #4]
 800aff4:	f001 fd80 	bl	800caf8 <_Balloc>
 800aff8:	9005      	str	r0, [sp, #20]
 800affa:	2800      	cmp	r0, #0
 800affc:	f43f af0c 	beq.w	800ae18 <_strtod_l+0x490>
 800b000:	9b07      	ldr	r3, [sp, #28]
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	3202      	adds	r2, #2
 800b006:	f103 010c 	add.w	r1, r3, #12
 800b00a:	0092      	lsls	r2, r2, #2
 800b00c:	300c      	adds	r0, #12
 800b00e:	f7fe fde7 	bl	8009be0 <memcpy>
 800b012:	ec4b ab10 	vmov	d0, sl, fp
 800b016:	aa1a      	add	r2, sp, #104	; 0x68
 800b018:	a919      	add	r1, sp, #100	; 0x64
 800b01a:	4620      	mov	r0, r4
 800b01c:	f002 f95a 	bl	800d2d4 <__d2b>
 800b020:	ec4b ab18 	vmov	d8, sl, fp
 800b024:	9018      	str	r0, [sp, #96]	; 0x60
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f aef6 	beq.w	800ae18 <_strtod_l+0x490>
 800b02c:	2101      	movs	r1, #1
 800b02e:	4620      	mov	r0, r4
 800b030:	f001 fea4 	bl	800cd7c <__i2b>
 800b034:	4606      	mov	r6, r0
 800b036:	2800      	cmp	r0, #0
 800b038:	f43f aeee 	beq.w	800ae18 <_strtod_l+0x490>
 800b03c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b03e:	9904      	ldr	r1, [sp, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	bfab      	itete	ge
 800b044:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b046:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b048:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b04a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b04e:	bfac      	ite	ge
 800b050:	eb03 0902 	addge.w	r9, r3, r2
 800b054:	1ad7      	sublt	r7, r2, r3
 800b056:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b058:	eba3 0801 	sub.w	r8, r3, r1
 800b05c:	4490      	add	r8, r2
 800b05e:	4ba1      	ldr	r3, [pc, #644]	; (800b2e4 <_strtod_l+0x95c>)
 800b060:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b064:	4598      	cmp	r8, r3
 800b066:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b06a:	f280 80c7 	bge.w	800b1fc <_strtod_l+0x874>
 800b06e:	eba3 0308 	sub.w	r3, r3, r8
 800b072:	2b1f      	cmp	r3, #31
 800b074:	eba2 0203 	sub.w	r2, r2, r3
 800b078:	f04f 0101 	mov.w	r1, #1
 800b07c:	f300 80b1 	bgt.w	800b1e2 <_strtod_l+0x85a>
 800b080:	fa01 f303 	lsl.w	r3, r1, r3
 800b084:	930d      	str	r3, [sp, #52]	; 0x34
 800b086:	2300      	movs	r3, #0
 800b088:	9308      	str	r3, [sp, #32]
 800b08a:	eb09 0802 	add.w	r8, r9, r2
 800b08e:	9b04      	ldr	r3, [sp, #16]
 800b090:	45c1      	cmp	r9, r8
 800b092:	4417      	add	r7, r2
 800b094:	441f      	add	r7, r3
 800b096:	464b      	mov	r3, r9
 800b098:	bfa8      	it	ge
 800b09a:	4643      	movge	r3, r8
 800b09c:	42bb      	cmp	r3, r7
 800b09e:	bfa8      	it	ge
 800b0a0:	463b      	movge	r3, r7
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	bfc2      	ittt	gt
 800b0a6:	eba8 0803 	subgt.w	r8, r8, r3
 800b0aa:	1aff      	subgt	r7, r7, r3
 800b0ac:	eba9 0903 	subgt.w	r9, r9, r3
 800b0b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dd17      	ble.n	800b0e6 <_strtod_l+0x75e>
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f001 ff1e 	bl	800cefc <__pow5mult>
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f43f aea8 	beq.w	800ae18 <_strtod_l+0x490>
 800b0c8:	4601      	mov	r1, r0
 800b0ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f001 fe6b 	bl	800cda8 <__multiply>
 800b0d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f43f ae9f 	beq.w	800ae18 <_strtod_l+0x490>
 800b0da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f001 fd4b 	bl	800cb78 <_Bfree>
 800b0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0e4:	9318      	str	r3, [sp, #96]	; 0x60
 800b0e6:	f1b8 0f00 	cmp.w	r8, #0
 800b0ea:	f300 808c 	bgt.w	800b206 <_strtod_l+0x87e>
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dd08      	ble.n	800b106 <_strtod_l+0x77e>
 800b0f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0f6:	9905      	ldr	r1, [sp, #20]
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f001 feff 	bl	800cefc <__pow5mult>
 800b0fe:	9005      	str	r0, [sp, #20]
 800b100:	2800      	cmp	r0, #0
 800b102:	f43f ae89 	beq.w	800ae18 <_strtod_l+0x490>
 800b106:	2f00      	cmp	r7, #0
 800b108:	dd08      	ble.n	800b11c <_strtod_l+0x794>
 800b10a:	9905      	ldr	r1, [sp, #20]
 800b10c:	463a      	mov	r2, r7
 800b10e:	4620      	mov	r0, r4
 800b110:	f001 ff4e 	bl	800cfb0 <__lshift>
 800b114:	9005      	str	r0, [sp, #20]
 800b116:	2800      	cmp	r0, #0
 800b118:	f43f ae7e 	beq.w	800ae18 <_strtod_l+0x490>
 800b11c:	f1b9 0f00 	cmp.w	r9, #0
 800b120:	dd08      	ble.n	800b134 <_strtod_l+0x7ac>
 800b122:	4631      	mov	r1, r6
 800b124:	464a      	mov	r2, r9
 800b126:	4620      	mov	r0, r4
 800b128:	f001 ff42 	bl	800cfb0 <__lshift>
 800b12c:	4606      	mov	r6, r0
 800b12e:	2800      	cmp	r0, #0
 800b130:	f43f ae72 	beq.w	800ae18 <_strtod_l+0x490>
 800b134:	9a05      	ldr	r2, [sp, #20]
 800b136:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b138:	4620      	mov	r0, r4
 800b13a:	f001 ffc5 	bl	800d0c8 <__mdiff>
 800b13e:	4605      	mov	r5, r0
 800b140:	2800      	cmp	r0, #0
 800b142:	f43f ae69 	beq.w	800ae18 <_strtod_l+0x490>
 800b146:	68c3      	ldr	r3, [r0, #12]
 800b148:	930b      	str	r3, [sp, #44]	; 0x2c
 800b14a:	2300      	movs	r3, #0
 800b14c:	60c3      	str	r3, [r0, #12]
 800b14e:	4631      	mov	r1, r6
 800b150:	f001 ff9e 	bl	800d090 <__mcmp>
 800b154:	2800      	cmp	r0, #0
 800b156:	da60      	bge.n	800b21a <_strtod_l+0x892>
 800b158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15a:	ea53 030a 	orrs.w	r3, r3, sl
 800b15e:	f040 8082 	bne.w	800b266 <_strtod_l+0x8de>
 800b162:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b166:	2b00      	cmp	r3, #0
 800b168:	d17d      	bne.n	800b266 <_strtod_l+0x8de>
 800b16a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b16e:	0d1b      	lsrs	r3, r3, #20
 800b170:	051b      	lsls	r3, r3, #20
 800b172:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b176:	d976      	bls.n	800b266 <_strtod_l+0x8de>
 800b178:	696b      	ldr	r3, [r5, #20]
 800b17a:	b913      	cbnz	r3, 800b182 <_strtod_l+0x7fa>
 800b17c:	692b      	ldr	r3, [r5, #16]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	dd71      	ble.n	800b266 <_strtod_l+0x8de>
 800b182:	4629      	mov	r1, r5
 800b184:	2201      	movs	r2, #1
 800b186:	4620      	mov	r0, r4
 800b188:	f001 ff12 	bl	800cfb0 <__lshift>
 800b18c:	4631      	mov	r1, r6
 800b18e:	4605      	mov	r5, r0
 800b190:	f001 ff7e 	bl	800d090 <__mcmp>
 800b194:	2800      	cmp	r0, #0
 800b196:	dd66      	ble.n	800b266 <_strtod_l+0x8de>
 800b198:	9904      	ldr	r1, [sp, #16]
 800b19a:	4a53      	ldr	r2, [pc, #332]	; (800b2e8 <_strtod_l+0x960>)
 800b19c:	465b      	mov	r3, fp
 800b19e:	2900      	cmp	r1, #0
 800b1a0:	f000 8081 	beq.w	800b2a6 <_strtod_l+0x91e>
 800b1a4:	ea02 010b 	and.w	r1, r2, fp
 800b1a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b1ac:	dc7b      	bgt.n	800b2a6 <_strtod_l+0x91e>
 800b1ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b1b2:	f77f aea9 	ble.w	800af08 <_strtod_l+0x580>
 800b1b6:	4b4d      	ldr	r3, [pc, #308]	; (800b2ec <_strtod_l+0x964>)
 800b1b8:	4650      	mov	r0, sl
 800b1ba:	4659      	mov	r1, fp
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f7f5 fa2b 	bl	8000618 <__aeabi_dmul>
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4303      	orrs	r3, r0
 800b1c6:	bf08      	it	eq
 800b1c8:	2322      	moveq	r3, #34	; 0x22
 800b1ca:	4682      	mov	sl, r0
 800b1cc:	468b      	mov	fp, r1
 800b1ce:	bf08      	it	eq
 800b1d0:	6023      	streq	r3, [r4, #0]
 800b1d2:	e62b      	b.n	800ae2c <_strtod_l+0x4a4>
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1dc:	ea03 0a0a 	and.w	sl, r3, sl
 800b1e0:	e6e3      	b.n	800afaa <_strtod_l+0x622>
 800b1e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b1e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b1ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b1ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b1f2:	fa01 f308 	lsl.w	r3, r1, r8
 800b1f6:	9308      	str	r3, [sp, #32]
 800b1f8:	910d      	str	r1, [sp, #52]	; 0x34
 800b1fa:	e746      	b.n	800b08a <_strtod_l+0x702>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	9308      	str	r3, [sp, #32]
 800b200:	2301      	movs	r3, #1
 800b202:	930d      	str	r3, [sp, #52]	; 0x34
 800b204:	e741      	b.n	800b08a <_strtod_l+0x702>
 800b206:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b208:	4642      	mov	r2, r8
 800b20a:	4620      	mov	r0, r4
 800b20c:	f001 fed0 	bl	800cfb0 <__lshift>
 800b210:	9018      	str	r0, [sp, #96]	; 0x60
 800b212:	2800      	cmp	r0, #0
 800b214:	f47f af6b 	bne.w	800b0ee <_strtod_l+0x766>
 800b218:	e5fe      	b.n	800ae18 <_strtod_l+0x490>
 800b21a:	465f      	mov	r7, fp
 800b21c:	d16e      	bne.n	800b2fc <_strtod_l+0x974>
 800b21e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b224:	b342      	cbz	r2, 800b278 <_strtod_l+0x8f0>
 800b226:	4a32      	ldr	r2, [pc, #200]	; (800b2f0 <_strtod_l+0x968>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d128      	bne.n	800b27e <_strtod_l+0x8f6>
 800b22c:	9b04      	ldr	r3, [sp, #16]
 800b22e:	4651      	mov	r1, sl
 800b230:	b1eb      	cbz	r3, 800b26e <_strtod_l+0x8e6>
 800b232:	4b2d      	ldr	r3, [pc, #180]	; (800b2e8 <_strtod_l+0x960>)
 800b234:	403b      	ands	r3, r7
 800b236:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b23a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b23e:	d819      	bhi.n	800b274 <_strtod_l+0x8ec>
 800b240:	0d1b      	lsrs	r3, r3, #20
 800b242:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b246:	fa02 f303 	lsl.w	r3, r2, r3
 800b24a:	4299      	cmp	r1, r3
 800b24c:	d117      	bne.n	800b27e <_strtod_l+0x8f6>
 800b24e:	4b29      	ldr	r3, [pc, #164]	; (800b2f4 <_strtod_l+0x96c>)
 800b250:	429f      	cmp	r7, r3
 800b252:	d102      	bne.n	800b25a <_strtod_l+0x8d2>
 800b254:	3101      	adds	r1, #1
 800b256:	f43f addf 	beq.w	800ae18 <_strtod_l+0x490>
 800b25a:	4b23      	ldr	r3, [pc, #140]	; (800b2e8 <_strtod_l+0x960>)
 800b25c:	403b      	ands	r3, r7
 800b25e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b262:	f04f 0a00 	mov.w	sl, #0
 800b266:	9b04      	ldr	r3, [sp, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1a4      	bne.n	800b1b6 <_strtod_l+0x82e>
 800b26c:	e5de      	b.n	800ae2c <_strtod_l+0x4a4>
 800b26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b272:	e7ea      	b.n	800b24a <_strtod_l+0x8c2>
 800b274:	4613      	mov	r3, r2
 800b276:	e7e8      	b.n	800b24a <_strtod_l+0x8c2>
 800b278:	ea53 030a 	orrs.w	r3, r3, sl
 800b27c:	d08c      	beq.n	800b198 <_strtod_l+0x810>
 800b27e:	9b08      	ldr	r3, [sp, #32]
 800b280:	b1db      	cbz	r3, 800b2ba <_strtod_l+0x932>
 800b282:	423b      	tst	r3, r7
 800b284:	d0ef      	beq.n	800b266 <_strtod_l+0x8de>
 800b286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b288:	9a04      	ldr	r2, [sp, #16]
 800b28a:	4650      	mov	r0, sl
 800b28c:	4659      	mov	r1, fp
 800b28e:	b1c3      	cbz	r3, 800b2c2 <_strtod_l+0x93a>
 800b290:	f7ff fb5c 	bl	800a94c <sulp>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	ec51 0b18 	vmov	r0, r1, d8
 800b29c:	f7f5 f806 	bl	80002ac <__adddf3>
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	468b      	mov	fp, r1
 800b2a4:	e7df      	b.n	800b266 <_strtod_l+0x8de>
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b2ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b2b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b2b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b2b8:	e7d5      	b.n	800b266 <_strtod_l+0x8de>
 800b2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2bc:	ea13 0f0a 	tst.w	r3, sl
 800b2c0:	e7e0      	b.n	800b284 <_strtod_l+0x8fc>
 800b2c2:	f7ff fb43 	bl	800a94c <sulp>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	ec51 0b18 	vmov	r0, r1, d8
 800b2ce:	f7f4 ffeb 	bl	80002a8 <__aeabi_dsub>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4682      	mov	sl, r0
 800b2d8:	468b      	mov	fp, r1
 800b2da:	f7f5 fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d0c1      	beq.n	800b266 <_strtod_l+0x8de>
 800b2e2:	e611      	b.n	800af08 <_strtod_l+0x580>
 800b2e4:	fffffc02 	.word	0xfffffc02
 800b2e8:	7ff00000 	.word	0x7ff00000
 800b2ec:	39500000 	.word	0x39500000
 800b2f0:	000fffff 	.word	0x000fffff
 800b2f4:	7fefffff 	.word	0x7fefffff
 800b2f8:	0800e628 	.word	0x0800e628
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4628      	mov	r0, r5
 800b300:	f002 f844 	bl	800d38c <__ratio>
 800b304:	ec59 8b10 	vmov	r8, r9, d0
 800b308:	ee10 0a10 	vmov	r0, s0
 800b30c:	2200      	movs	r2, #0
 800b30e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b312:	4649      	mov	r1, r9
 800b314:	f7f5 fbfc 	bl	8000b10 <__aeabi_dcmple>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d07a      	beq.n	800b412 <_strtod_l+0xa8a>
 800b31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d04a      	beq.n	800b3b8 <_strtod_l+0xa30>
 800b322:	4b95      	ldr	r3, [pc, #596]	; (800b578 <_strtod_l+0xbf0>)
 800b324:	2200      	movs	r2, #0
 800b326:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b32a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b578 <_strtod_l+0xbf0>
 800b32e:	f04f 0800 	mov.w	r8, #0
 800b332:	4b92      	ldr	r3, [pc, #584]	; (800b57c <_strtod_l+0xbf4>)
 800b334:	403b      	ands	r3, r7
 800b336:	930d      	str	r3, [sp, #52]	; 0x34
 800b338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b33a:	4b91      	ldr	r3, [pc, #580]	; (800b580 <_strtod_l+0xbf8>)
 800b33c:	429a      	cmp	r2, r3
 800b33e:	f040 80b0 	bne.w	800b4a2 <_strtod_l+0xb1a>
 800b342:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b346:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b34a:	ec4b ab10 	vmov	d0, sl, fp
 800b34e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b352:	f001 ff43 	bl	800d1dc <__ulp>
 800b356:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b35a:	ec53 2b10 	vmov	r2, r3, d0
 800b35e:	f7f5 f95b 	bl	8000618 <__aeabi_dmul>
 800b362:	4652      	mov	r2, sl
 800b364:	465b      	mov	r3, fp
 800b366:	f7f4 ffa1 	bl	80002ac <__adddf3>
 800b36a:	460b      	mov	r3, r1
 800b36c:	4983      	ldr	r1, [pc, #524]	; (800b57c <_strtod_l+0xbf4>)
 800b36e:	4a85      	ldr	r2, [pc, #532]	; (800b584 <_strtod_l+0xbfc>)
 800b370:	4019      	ands	r1, r3
 800b372:	4291      	cmp	r1, r2
 800b374:	4682      	mov	sl, r0
 800b376:	d960      	bls.n	800b43a <_strtod_l+0xab2>
 800b378:	ee18 3a90 	vmov	r3, s17
 800b37c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b380:	4293      	cmp	r3, r2
 800b382:	d104      	bne.n	800b38e <_strtod_l+0xa06>
 800b384:	ee18 3a10 	vmov	r3, s16
 800b388:	3301      	adds	r3, #1
 800b38a:	f43f ad45 	beq.w	800ae18 <_strtod_l+0x490>
 800b38e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b590 <_strtod_l+0xc08>
 800b392:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b396:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b398:	4620      	mov	r0, r4
 800b39a:	f001 fbed 	bl	800cb78 <_Bfree>
 800b39e:	9905      	ldr	r1, [sp, #20]
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f001 fbe9 	bl	800cb78 <_Bfree>
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f001 fbe5 	bl	800cb78 <_Bfree>
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f001 fbe1 	bl	800cb78 <_Bfree>
 800b3b6:	e61a      	b.n	800afee <_strtod_l+0x666>
 800b3b8:	f1ba 0f00 	cmp.w	sl, #0
 800b3bc:	d11b      	bne.n	800b3f6 <_strtod_l+0xa6e>
 800b3be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3c2:	b9f3      	cbnz	r3, 800b402 <_strtod_l+0xa7a>
 800b3c4:	4b6c      	ldr	r3, [pc, #432]	; (800b578 <_strtod_l+0xbf0>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	f7f5 fb96 	bl	8000afc <__aeabi_dcmplt>
 800b3d0:	b9d0      	cbnz	r0, 800b408 <_strtod_l+0xa80>
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	4b6c      	ldr	r3, [pc, #432]	; (800b588 <_strtod_l+0xc00>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f7f5 f91d 	bl	8000618 <__aeabi_dmul>
 800b3de:	4680      	mov	r8, r0
 800b3e0:	4689      	mov	r9, r1
 800b3e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b3ea:	9315      	str	r3, [sp, #84]	; 0x54
 800b3ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b3f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3f4:	e79d      	b.n	800b332 <_strtod_l+0x9aa>
 800b3f6:	f1ba 0f01 	cmp.w	sl, #1
 800b3fa:	d102      	bne.n	800b402 <_strtod_l+0xa7a>
 800b3fc:	2f00      	cmp	r7, #0
 800b3fe:	f43f ad83 	beq.w	800af08 <_strtod_l+0x580>
 800b402:	4b62      	ldr	r3, [pc, #392]	; (800b58c <_strtod_l+0xc04>)
 800b404:	2200      	movs	r2, #0
 800b406:	e78e      	b.n	800b326 <_strtod_l+0x99e>
 800b408:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b588 <_strtod_l+0xc00>
 800b40c:	f04f 0800 	mov.w	r8, #0
 800b410:	e7e7      	b.n	800b3e2 <_strtod_l+0xa5a>
 800b412:	4b5d      	ldr	r3, [pc, #372]	; (800b588 <_strtod_l+0xc00>)
 800b414:	4640      	mov	r0, r8
 800b416:	4649      	mov	r1, r9
 800b418:	2200      	movs	r2, #0
 800b41a:	f7f5 f8fd 	bl	8000618 <__aeabi_dmul>
 800b41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b420:	4680      	mov	r8, r0
 800b422:	4689      	mov	r9, r1
 800b424:	b933      	cbnz	r3, 800b434 <_strtod_l+0xaac>
 800b426:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b42a:	900e      	str	r0, [sp, #56]	; 0x38
 800b42c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b42e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b432:	e7dd      	b.n	800b3f0 <_strtod_l+0xa68>
 800b434:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b438:	e7f9      	b.n	800b42e <_strtod_l+0xaa6>
 800b43a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b43e:	9b04      	ldr	r3, [sp, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1a8      	bne.n	800b396 <_strtod_l+0xa0e>
 800b444:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b44a:	0d1b      	lsrs	r3, r3, #20
 800b44c:	051b      	lsls	r3, r3, #20
 800b44e:	429a      	cmp	r2, r3
 800b450:	d1a1      	bne.n	800b396 <_strtod_l+0xa0e>
 800b452:	4640      	mov	r0, r8
 800b454:	4649      	mov	r1, r9
 800b456:	f7f5 fc3f 	bl	8000cd8 <__aeabi_d2lz>
 800b45a:	f7f5 f8af 	bl	80005bc <__aeabi_l2d>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	4640      	mov	r0, r8
 800b464:	4649      	mov	r1, r9
 800b466:	f7f4 ff1f 	bl	80002a8 <__aeabi_dsub>
 800b46a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b46c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b470:	ea43 030a 	orr.w	r3, r3, sl
 800b474:	4313      	orrs	r3, r2
 800b476:	4680      	mov	r8, r0
 800b478:	4689      	mov	r9, r1
 800b47a:	d055      	beq.n	800b528 <_strtod_l+0xba0>
 800b47c:	a336      	add	r3, pc, #216	; (adr r3, 800b558 <_strtod_l+0xbd0>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	f7f5 fb3b 	bl	8000afc <__aeabi_dcmplt>
 800b486:	2800      	cmp	r0, #0
 800b488:	f47f acd0 	bne.w	800ae2c <_strtod_l+0x4a4>
 800b48c:	a334      	add	r3, pc, #208	; (adr r3, 800b560 <_strtod_l+0xbd8>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	4640      	mov	r0, r8
 800b494:	4649      	mov	r1, r9
 800b496:	f7f5 fb4f 	bl	8000b38 <__aeabi_dcmpgt>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	f43f af7b 	beq.w	800b396 <_strtod_l+0xa0e>
 800b4a0:	e4c4      	b.n	800ae2c <_strtod_l+0x4a4>
 800b4a2:	9b04      	ldr	r3, [sp, #16]
 800b4a4:	b333      	cbz	r3, 800b4f4 <_strtod_l+0xb6c>
 800b4a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b4ac:	d822      	bhi.n	800b4f4 <_strtod_l+0xb6c>
 800b4ae:	a32e      	add	r3, pc, #184	; (adr r3, 800b568 <_strtod_l+0xbe0>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	4640      	mov	r0, r8
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	f7f5 fb2a 	bl	8000b10 <__aeabi_dcmple>
 800b4bc:	b1a0      	cbz	r0, 800b4e8 <_strtod_l+0xb60>
 800b4be:	4649      	mov	r1, r9
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	f7f5 fb81 	bl	8000bc8 <__aeabi_d2uiz>
 800b4c6:	2801      	cmp	r0, #1
 800b4c8:	bf38      	it	cc
 800b4ca:	2001      	movcc	r0, #1
 800b4cc:	f7f5 f82a 	bl	8000524 <__aeabi_ui2d>
 800b4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d2:	4680      	mov	r8, r0
 800b4d4:	4689      	mov	r9, r1
 800b4d6:	bb23      	cbnz	r3, 800b522 <_strtod_l+0xb9a>
 800b4d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4dc:	9010      	str	r0, [sp, #64]	; 0x40
 800b4de:	9311      	str	r3, [sp, #68]	; 0x44
 800b4e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4f8:	eeb0 0a48 	vmov.f32	s0, s16
 800b4fc:	eef0 0a68 	vmov.f32	s1, s17
 800b500:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b504:	f001 fe6a 	bl	800d1dc <__ulp>
 800b508:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b50c:	ec53 2b10 	vmov	r2, r3, d0
 800b510:	f7f5 f882 	bl	8000618 <__aeabi_dmul>
 800b514:	ec53 2b18 	vmov	r2, r3, d8
 800b518:	f7f4 fec8 	bl	80002ac <__adddf3>
 800b51c:	4682      	mov	sl, r0
 800b51e:	468b      	mov	fp, r1
 800b520:	e78d      	b.n	800b43e <_strtod_l+0xab6>
 800b522:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b526:	e7db      	b.n	800b4e0 <_strtod_l+0xb58>
 800b528:	a311      	add	r3, pc, #68	; (adr r3, 800b570 <_strtod_l+0xbe8>)
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	f7f5 fae5 	bl	8000afc <__aeabi_dcmplt>
 800b532:	e7b2      	b.n	800b49a <_strtod_l+0xb12>
 800b534:	2300      	movs	r3, #0
 800b536:	930a      	str	r3, [sp, #40]	; 0x28
 800b538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b53a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b53c:	6013      	str	r3, [r2, #0]
 800b53e:	f7ff ba6b 	b.w	800aa18 <_strtod_l+0x90>
 800b542:	2a65      	cmp	r2, #101	; 0x65
 800b544:	f43f ab5f 	beq.w	800ac06 <_strtod_l+0x27e>
 800b548:	2a45      	cmp	r2, #69	; 0x45
 800b54a:	f43f ab5c 	beq.w	800ac06 <_strtod_l+0x27e>
 800b54e:	2301      	movs	r3, #1
 800b550:	f7ff bb94 	b.w	800ac7c <_strtod_l+0x2f4>
 800b554:	f3af 8000 	nop.w
 800b558:	94a03595 	.word	0x94a03595
 800b55c:	3fdfffff 	.word	0x3fdfffff
 800b560:	35afe535 	.word	0x35afe535
 800b564:	3fe00000 	.word	0x3fe00000
 800b568:	ffc00000 	.word	0xffc00000
 800b56c:	41dfffff 	.word	0x41dfffff
 800b570:	94a03595 	.word	0x94a03595
 800b574:	3fcfffff 	.word	0x3fcfffff
 800b578:	3ff00000 	.word	0x3ff00000
 800b57c:	7ff00000 	.word	0x7ff00000
 800b580:	7fe00000 	.word	0x7fe00000
 800b584:	7c9fffff 	.word	0x7c9fffff
 800b588:	3fe00000 	.word	0x3fe00000
 800b58c:	bff00000 	.word	0xbff00000
 800b590:	7fefffff 	.word	0x7fefffff

0800b594 <_strtod_r>:
 800b594:	4b01      	ldr	r3, [pc, #4]	; (800b59c <_strtod_r+0x8>)
 800b596:	f7ff b9f7 	b.w	800a988 <_strtod_l>
 800b59a:	bf00      	nop
 800b59c:	20000120 	.word	0x20000120

0800b5a0 <_strtol_l.constprop.0>:
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a6:	d001      	beq.n	800b5ac <_strtol_l.constprop.0+0xc>
 800b5a8:	2b24      	cmp	r3, #36	; 0x24
 800b5aa:	d906      	bls.n	800b5ba <_strtol_l.constprop.0+0x1a>
 800b5ac:	f7fe faee 	bl	8009b8c <__errno>
 800b5b0:	2316      	movs	r3, #22
 800b5b2:	6003      	str	r3, [r0, #0]
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b6a0 <_strtol_l.constprop.0+0x100>
 800b5be:	460d      	mov	r5, r1
 800b5c0:	462e      	mov	r6, r5
 800b5c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b5ca:	f017 0708 	ands.w	r7, r7, #8
 800b5ce:	d1f7      	bne.n	800b5c0 <_strtol_l.constprop.0+0x20>
 800b5d0:	2c2d      	cmp	r4, #45	; 0x2d
 800b5d2:	d132      	bne.n	800b63a <_strtol_l.constprop.0+0x9a>
 800b5d4:	782c      	ldrb	r4, [r5, #0]
 800b5d6:	2701      	movs	r7, #1
 800b5d8:	1cb5      	adds	r5, r6, #2
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d05b      	beq.n	800b696 <_strtol_l.constprop.0+0xf6>
 800b5de:	2b10      	cmp	r3, #16
 800b5e0:	d109      	bne.n	800b5f6 <_strtol_l.constprop.0+0x56>
 800b5e2:	2c30      	cmp	r4, #48	; 0x30
 800b5e4:	d107      	bne.n	800b5f6 <_strtol_l.constprop.0+0x56>
 800b5e6:	782c      	ldrb	r4, [r5, #0]
 800b5e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b5ec:	2c58      	cmp	r4, #88	; 0x58
 800b5ee:	d14d      	bne.n	800b68c <_strtol_l.constprop.0+0xec>
 800b5f0:	786c      	ldrb	r4, [r5, #1]
 800b5f2:	2310      	movs	r3, #16
 800b5f4:	3502      	adds	r5, #2
 800b5f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b5fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b5fe:	f04f 0c00 	mov.w	ip, #0
 800b602:	fbb8 f9f3 	udiv	r9, r8, r3
 800b606:	4666      	mov	r6, ip
 800b608:	fb03 8a19 	mls	sl, r3, r9, r8
 800b60c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b610:	f1be 0f09 	cmp.w	lr, #9
 800b614:	d816      	bhi.n	800b644 <_strtol_l.constprop.0+0xa4>
 800b616:	4674      	mov	r4, lr
 800b618:	42a3      	cmp	r3, r4
 800b61a:	dd24      	ble.n	800b666 <_strtol_l.constprop.0+0xc6>
 800b61c:	f1bc 0f00 	cmp.w	ip, #0
 800b620:	db1e      	blt.n	800b660 <_strtol_l.constprop.0+0xc0>
 800b622:	45b1      	cmp	r9, r6
 800b624:	d31c      	bcc.n	800b660 <_strtol_l.constprop.0+0xc0>
 800b626:	d101      	bne.n	800b62c <_strtol_l.constprop.0+0x8c>
 800b628:	45a2      	cmp	sl, r4
 800b62a:	db19      	blt.n	800b660 <_strtol_l.constprop.0+0xc0>
 800b62c:	fb06 4603 	mla	r6, r6, r3, r4
 800b630:	f04f 0c01 	mov.w	ip, #1
 800b634:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b638:	e7e8      	b.n	800b60c <_strtol_l.constprop.0+0x6c>
 800b63a:	2c2b      	cmp	r4, #43	; 0x2b
 800b63c:	bf04      	itt	eq
 800b63e:	782c      	ldrbeq	r4, [r5, #0]
 800b640:	1cb5      	addeq	r5, r6, #2
 800b642:	e7ca      	b.n	800b5da <_strtol_l.constprop.0+0x3a>
 800b644:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b648:	f1be 0f19 	cmp.w	lr, #25
 800b64c:	d801      	bhi.n	800b652 <_strtol_l.constprop.0+0xb2>
 800b64e:	3c37      	subs	r4, #55	; 0x37
 800b650:	e7e2      	b.n	800b618 <_strtol_l.constprop.0+0x78>
 800b652:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b656:	f1be 0f19 	cmp.w	lr, #25
 800b65a:	d804      	bhi.n	800b666 <_strtol_l.constprop.0+0xc6>
 800b65c:	3c57      	subs	r4, #87	; 0x57
 800b65e:	e7db      	b.n	800b618 <_strtol_l.constprop.0+0x78>
 800b660:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b664:	e7e6      	b.n	800b634 <_strtol_l.constprop.0+0x94>
 800b666:	f1bc 0f00 	cmp.w	ip, #0
 800b66a:	da05      	bge.n	800b678 <_strtol_l.constprop.0+0xd8>
 800b66c:	2322      	movs	r3, #34	; 0x22
 800b66e:	6003      	str	r3, [r0, #0]
 800b670:	4646      	mov	r6, r8
 800b672:	b942      	cbnz	r2, 800b686 <_strtol_l.constprop.0+0xe6>
 800b674:	4630      	mov	r0, r6
 800b676:	e79e      	b.n	800b5b6 <_strtol_l.constprop.0+0x16>
 800b678:	b107      	cbz	r7, 800b67c <_strtol_l.constprop.0+0xdc>
 800b67a:	4276      	negs	r6, r6
 800b67c:	2a00      	cmp	r2, #0
 800b67e:	d0f9      	beq.n	800b674 <_strtol_l.constprop.0+0xd4>
 800b680:	f1bc 0f00 	cmp.w	ip, #0
 800b684:	d000      	beq.n	800b688 <_strtol_l.constprop.0+0xe8>
 800b686:	1e69      	subs	r1, r5, #1
 800b688:	6011      	str	r1, [r2, #0]
 800b68a:	e7f3      	b.n	800b674 <_strtol_l.constprop.0+0xd4>
 800b68c:	2430      	movs	r4, #48	; 0x30
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1b1      	bne.n	800b5f6 <_strtol_l.constprop.0+0x56>
 800b692:	2308      	movs	r3, #8
 800b694:	e7af      	b.n	800b5f6 <_strtol_l.constprop.0+0x56>
 800b696:	2c30      	cmp	r4, #48	; 0x30
 800b698:	d0a5      	beq.n	800b5e6 <_strtol_l.constprop.0+0x46>
 800b69a:	230a      	movs	r3, #10
 800b69c:	e7ab      	b.n	800b5f6 <_strtol_l.constprop.0+0x56>
 800b69e:	bf00      	nop
 800b6a0:	0800e651 	.word	0x0800e651

0800b6a4 <_strtol_r>:
 800b6a4:	f7ff bf7c 	b.w	800b5a0 <_strtol_l.constprop.0>

0800b6a8 <_vsiprintf_r>:
 800b6a8:	b500      	push	{lr}
 800b6aa:	b09b      	sub	sp, #108	; 0x6c
 800b6ac:	9100      	str	r1, [sp, #0]
 800b6ae:	9104      	str	r1, [sp, #16]
 800b6b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6b4:	9105      	str	r1, [sp, #20]
 800b6b6:	9102      	str	r1, [sp, #8]
 800b6b8:	4905      	ldr	r1, [pc, #20]	; (800b6d0 <_vsiprintf_r+0x28>)
 800b6ba:	9103      	str	r1, [sp, #12]
 800b6bc:	4669      	mov	r1, sp
 800b6be:	f002 f82f 	bl	800d720 <_svfiprintf_r>
 800b6c2:	9b00      	ldr	r3, [sp, #0]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	b01b      	add	sp, #108	; 0x6c
 800b6ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6ce:	bf00      	nop
 800b6d0:	ffff0208 	.word	0xffff0208

0800b6d4 <vsiprintf>:
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	460a      	mov	r2, r1
 800b6d8:	4601      	mov	r1, r0
 800b6da:	4802      	ldr	r0, [pc, #8]	; (800b6e4 <vsiprintf+0x10>)
 800b6dc:	6800      	ldr	r0, [r0, #0]
 800b6de:	f7ff bfe3 	b.w	800b6a8 <_vsiprintf_r>
 800b6e2:	bf00      	nop
 800b6e4:	200000b8 	.word	0x200000b8

0800b6e8 <quorem>:
 800b6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	6903      	ldr	r3, [r0, #16]
 800b6ee:	690c      	ldr	r4, [r1, #16]
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	f2c0 8081 	blt.w	800b7fa <quorem+0x112>
 800b6f8:	3c01      	subs	r4, #1
 800b6fa:	f101 0814 	add.w	r8, r1, #20
 800b6fe:	f100 0514 	add.w	r5, r0, #20
 800b702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b70c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b710:	3301      	adds	r3, #1
 800b712:	429a      	cmp	r2, r3
 800b714:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b71c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b720:	d331      	bcc.n	800b786 <quorem+0x9e>
 800b722:	f04f 0e00 	mov.w	lr, #0
 800b726:	4640      	mov	r0, r8
 800b728:	46ac      	mov	ip, r5
 800b72a:	46f2      	mov	sl, lr
 800b72c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b730:	b293      	uxth	r3, r2
 800b732:	fb06 e303 	mla	r3, r6, r3, lr
 800b736:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	ebaa 0303 	sub.w	r3, sl, r3
 800b740:	f8dc a000 	ldr.w	sl, [ip]
 800b744:	0c12      	lsrs	r2, r2, #16
 800b746:	fa13 f38a 	uxtah	r3, r3, sl
 800b74a:	fb06 e202 	mla	r2, r6, r2, lr
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	9b00      	ldr	r3, [sp, #0]
 800b752:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b756:	b292      	uxth	r2, r2
 800b758:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b75c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b760:	f8bd 3000 	ldrh.w	r3, [sp]
 800b764:	4581      	cmp	r9, r0
 800b766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b76a:	f84c 3b04 	str.w	r3, [ip], #4
 800b76e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b772:	d2db      	bcs.n	800b72c <quorem+0x44>
 800b774:	f855 300b 	ldr.w	r3, [r5, fp]
 800b778:	b92b      	cbnz	r3, 800b786 <quorem+0x9e>
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	3b04      	subs	r3, #4
 800b77e:	429d      	cmp	r5, r3
 800b780:	461a      	mov	r2, r3
 800b782:	d32e      	bcc.n	800b7e2 <quorem+0xfa>
 800b784:	613c      	str	r4, [r7, #16]
 800b786:	4638      	mov	r0, r7
 800b788:	f001 fc82 	bl	800d090 <__mcmp>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	db24      	blt.n	800b7da <quorem+0xf2>
 800b790:	3601      	adds	r6, #1
 800b792:	4628      	mov	r0, r5
 800b794:	f04f 0c00 	mov.w	ip, #0
 800b798:	f858 2b04 	ldr.w	r2, [r8], #4
 800b79c:	f8d0 e000 	ldr.w	lr, [r0]
 800b7a0:	b293      	uxth	r3, r2
 800b7a2:	ebac 0303 	sub.w	r3, ip, r3
 800b7a6:	0c12      	lsrs	r2, r2, #16
 800b7a8:	fa13 f38e 	uxtah	r3, r3, lr
 800b7ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ba:	45c1      	cmp	r9, r8
 800b7bc:	f840 3b04 	str.w	r3, [r0], #4
 800b7c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7c4:	d2e8      	bcs.n	800b798 <quorem+0xb0>
 800b7c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ce:	b922      	cbnz	r2, 800b7da <quorem+0xf2>
 800b7d0:	3b04      	subs	r3, #4
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	d30a      	bcc.n	800b7ee <quorem+0x106>
 800b7d8:	613c      	str	r4, [r7, #16]
 800b7da:	4630      	mov	r0, r6
 800b7dc:	b003      	add	sp, #12
 800b7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e2:	6812      	ldr	r2, [r2, #0]
 800b7e4:	3b04      	subs	r3, #4
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	d1cc      	bne.n	800b784 <quorem+0x9c>
 800b7ea:	3c01      	subs	r4, #1
 800b7ec:	e7c7      	b.n	800b77e <quorem+0x96>
 800b7ee:	6812      	ldr	r2, [r2, #0]
 800b7f0:	3b04      	subs	r3, #4
 800b7f2:	2a00      	cmp	r2, #0
 800b7f4:	d1f0      	bne.n	800b7d8 <quorem+0xf0>
 800b7f6:	3c01      	subs	r4, #1
 800b7f8:	e7eb      	b.n	800b7d2 <quorem+0xea>
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e7ee      	b.n	800b7dc <quorem+0xf4>
	...

0800b800 <_dtoa_r>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	ed2d 8b04 	vpush	{d8-d9}
 800b808:	ec57 6b10 	vmov	r6, r7, d0
 800b80c:	b093      	sub	sp, #76	; 0x4c
 800b80e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b814:	9106      	str	r1, [sp, #24]
 800b816:	ee10 aa10 	vmov	sl, s0
 800b81a:	4604      	mov	r4, r0
 800b81c:	9209      	str	r2, [sp, #36]	; 0x24
 800b81e:	930c      	str	r3, [sp, #48]	; 0x30
 800b820:	46bb      	mov	fp, r7
 800b822:	b975      	cbnz	r5, 800b842 <_dtoa_r+0x42>
 800b824:	2010      	movs	r0, #16
 800b826:	f001 f94d 	bl	800cac4 <malloc>
 800b82a:	4602      	mov	r2, r0
 800b82c:	6260      	str	r0, [r4, #36]	; 0x24
 800b82e:	b920      	cbnz	r0, 800b83a <_dtoa_r+0x3a>
 800b830:	4ba7      	ldr	r3, [pc, #668]	; (800bad0 <_dtoa_r+0x2d0>)
 800b832:	21ea      	movs	r1, #234	; 0xea
 800b834:	48a7      	ldr	r0, [pc, #668]	; (800bad4 <_dtoa_r+0x2d4>)
 800b836:	f002 f8ad 	bl	800d994 <__assert_func>
 800b83a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b83e:	6005      	str	r5, [r0, #0]
 800b840:	60c5      	str	r5, [r0, #12]
 800b842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b844:	6819      	ldr	r1, [r3, #0]
 800b846:	b151      	cbz	r1, 800b85e <_dtoa_r+0x5e>
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	604a      	str	r2, [r1, #4]
 800b84c:	2301      	movs	r3, #1
 800b84e:	4093      	lsls	r3, r2
 800b850:	608b      	str	r3, [r1, #8]
 800b852:	4620      	mov	r0, r4
 800b854:	f001 f990 	bl	800cb78 <_Bfree>
 800b858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	1e3b      	subs	r3, r7, #0
 800b860:	bfaa      	itet	ge
 800b862:	2300      	movge	r3, #0
 800b864:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b868:	f8c8 3000 	strge.w	r3, [r8]
 800b86c:	4b9a      	ldr	r3, [pc, #616]	; (800bad8 <_dtoa_r+0x2d8>)
 800b86e:	bfbc      	itt	lt
 800b870:	2201      	movlt	r2, #1
 800b872:	f8c8 2000 	strlt.w	r2, [r8]
 800b876:	ea33 030b 	bics.w	r3, r3, fp
 800b87a:	d11b      	bne.n	800b8b4 <_dtoa_r+0xb4>
 800b87c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b87e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b888:	4333      	orrs	r3, r6
 800b88a:	f000 8592 	beq.w	800c3b2 <_dtoa_r+0xbb2>
 800b88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b890:	b963      	cbnz	r3, 800b8ac <_dtoa_r+0xac>
 800b892:	4b92      	ldr	r3, [pc, #584]	; (800badc <_dtoa_r+0x2dc>)
 800b894:	e022      	b.n	800b8dc <_dtoa_r+0xdc>
 800b896:	4b92      	ldr	r3, [pc, #584]	; (800bae0 <_dtoa_r+0x2e0>)
 800b898:	9301      	str	r3, [sp, #4]
 800b89a:	3308      	adds	r3, #8
 800b89c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	9801      	ldr	r0, [sp, #4]
 800b8a2:	b013      	add	sp, #76	; 0x4c
 800b8a4:	ecbd 8b04 	vpop	{d8-d9}
 800b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ac:	4b8b      	ldr	r3, [pc, #556]	; (800badc <_dtoa_r+0x2dc>)
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	3303      	adds	r3, #3
 800b8b2:	e7f3      	b.n	800b89c <_dtoa_r+0x9c>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	f7f5 f914 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8c0:	ec4b ab19 	vmov	d9, sl, fp
 800b8c4:	4680      	mov	r8, r0
 800b8c6:	b158      	cbz	r0, 800b8e0 <_dtoa_r+0xe0>
 800b8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	6013      	str	r3, [r2, #0]
 800b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 856b 	beq.w	800c3ac <_dtoa_r+0xbac>
 800b8d6:	4883      	ldr	r0, [pc, #524]	; (800bae4 <_dtoa_r+0x2e4>)
 800b8d8:	6018      	str	r0, [r3, #0]
 800b8da:	1e43      	subs	r3, r0, #1
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	e7df      	b.n	800b8a0 <_dtoa_r+0xa0>
 800b8e0:	ec4b ab10 	vmov	d0, sl, fp
 800b8e4:	aa10      	add	r2, sp, #64	; 0x40
 800b8e6:	a911      	add	r1, sp, #68	; 0x44
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f001 fcf3 	bl	800d2d4 <__d2b>
 800b8ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8f2:	ee08 0a10 	vmov	s16, r0
 800b8f6:	2d00      	cmp	r5, #0
 800b8f8:	f000 8084 	beq.w	800ba04 <_dtoa_r+0x204>
 800b8fc:	ee19 3a90 	vmov	r3, s19
 800b900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b904:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b908:	4656      	mov	r6, sl
 800b90a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b90e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b912:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b916:	4b74      	ldr	r3, [pc, #464]	; (800bae8 <_dtoa_r+0x2e8>)
 800b918:	2200      	movs	r2, #0
 800b91a:	4630      	mov	r0, r6
 800b91c:	4639      	mov	r1, r7
 800b91e:	f7f4 fcc3 	bl	80002a8 <__aeabi_dsub>
 800b922:	a365      	add	r3, pc, #404	; (adr r3, 800bab8 <_dtoa_r+0x2b8>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fe76 	bl	8000618 <__aeabi_dmul>
 800b92c:	a364      	add	r3, pc, #400	; (adr r3, 800bac0 <_dtoa_r+0x2c0>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	f7f4 fcbb 	bl	80002ac <__adddf3>
 800b936:	4606      	mov	r6, r0
 800b938:	4628      	mov	r0, r5
 800b93a:	460f      	mov	r7, r1
 800b93c:	f7f4 fe02 	bl	8000544 <__aeabi_i2d>
 800b940:	a361      	add	r3, pc, #388	; (adr r3, 800bac8 <_dtoa_r+0x2c8>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f7f4 fe67 	bl	8000618 <__aeabi_dmul>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	4630      	mov	r0, r6
 800b950:	4639      	mov	r1, r7
 800b952:	f7f4 fcab 	bl	80002ac <__adddf3>
 800b956:	4606      	mov	r6, r0
 800b958:	460f      	mov	r7, r1
 800b95a:	f7f5 f90d 	bl	8000b78 <__aeabi_d2iz>
 800b95e:	2200      	movs	r2, #0
 800b960:	9000      	str	r0, [sp, #0]
 800b962:	2300      	movs	r3, #0
 800b964:	4630      	mov	r0, r6
 800b966:	4639      	mov	r1, r7
 800b968:	f7f5 f8c8 	bl	8000afc <__aeabi_dcmplt>
 800b96c:	b150      	cbz	r0, 800b984 <_dtoa_r+0x184>
 800b96e:	9800      	ldr	r0, [sp, #0]
 800b970:	f7f4 fde8 	bl	8000544 <__aeabi_i2d>
 800b974:	4632      	mov	r2, r6
 800b976:	463b      	mov	r3, r7
 800b978:	f7f5 f8b6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b97c:	b910      	cbnz	r0, 800b984 <_dtoa_r+0x184>
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	3b01      	subs	r3, #1
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	9b00      	ldr	r3, [sp, #0]
 800b986:	2b16      	cmp	r3, #22
 800b988:	d85a      	bhi.n	800ba40 <_dtoa_r+0x240>
 800b98a:	9a00      	ldr	r2, [sp, #0]
 800b98c:	4b57      	ldr	r3, [pc, #348]	; (800baec <_dtoa_r+0x2ec>)
 800b98e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	ec51 0b19 	vmov	r0, r1, d9
 800b99a:	f7f5 f8af 	bl	8000afc <__aeabi_dcmplt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d050      	beq.n	800ba44 <_dtoa_r+0x244>
 800b9a2:	9b00      	ldr	r3, [sp, #0]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ae:	1b5d      	subs	r5, r3, r5
 800b9b0:	1e6b      	subs	r3, r5, #1
 800b9b2:	9305      	str	r3, [sp, #20]
 800b9b4:	bf45      	ittet	mi
 800b9b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9ba:	9304      	strmi	r3, [sp, #16]
 800b9bc:	2300      	movpl	r3, #0
 800b9be:	2300      	movmi	r3, #0
 800b9c0:	bf4c      	ite	mi
 800b9c2:	9305      	strmi	r3, [sp, #20]
 800b9c4:	9304      	strpl	r3, [sp, #16]
 800b9c6:	9b00      	ldr	r3, [sp, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	db3d      	blt.n	800ba48 <_dtoa_r+0x248>
 800b9cc:	9b05      	ldr	r3, [sp, #20]
 800b9ce:	9a00      	ldr	r2, [sp, #0]
 800b9d0:	920a      	str	r2, [sp, #40]	; 0x28
 800b9d2:	4413      	add	r3, r2
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9307      	str	r3, [sp, #28]
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	2b09      	cmp	r3, #9
 800b9de:	f200 8089 	bhi.w	800baf4 <_dtoa_r+0x2f4>
 800b9e2:	2b05      	cmp	r3, #5
 800b9e4:	bfc4      	itt	gt
 800b9e6:	3b04      	subgt	r3, #4
 800b9e8:	9306      	strgt	r3, [sp, #24]
 800b9ea:	9b06      	ldr	r3, [sp, #24]
 800b9ec:	f1a3 0302 	sub.w	r3, r3, #2
 800b9f0:	bfcc      	ite	gt
 800b9f2:	2500      	movgt	r5, #0
 800b9f4:	2501      	movle	r5, #1
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	f200 8087 	bhi.w	800bb0a <_dtoa_r+0x30a>
 800b9fc:	e8df f003 	tbb	[pc, r3]
 800ba00:	59383a2d 	.word	0x59383a2d
 800ba04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba08:	441d      	add	r5, r3
 800ba0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	bfc1      	itttt	gt
 800ba12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba1a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba22:	bfda      	itte	le
 800ba24:	f1c3 0320 	rsble	r3, r3, #32
 800ba28:	fa06 f003 	lslle.w	r0, r6, r3
 800ba2c:	4318      	orrgt	r0, r3
 800ba2e:	f7f4 fd79 	bl	8000524 <__aeabi_ui2d>
 800ba32:	2301      	movs	r3, #1
 800ba34:	4606      	mov	r6, r0
 800ba36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba3a:	3d01      	subs	r5, #1
 800ba3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba3e:	e76a      	b.n	800b916 <_dtoa_r+0x116>
 800ba40:	2301      	movs	r3, #1
 800ba42:	e7b2      	b.n	800b9aa <_dtoa_r+0x1aa>
 800ba44:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba46:	e7b1      	b.n	800b9ac <_dtoa_r+0x1ac>
 800ba48:	9b04      	ldr	r3, [sp, #16]
 800ba4a:	9a00      	ldr	r2, [sp, #0]
 800ba4c:	1a9b      	subs	r3, r3, r2
 800ba4e:	9304      	str	r3, [sp, #16]
 800ba50:	4253      	negs	r3, r2
 800ba52:	9307      	str	r3, [sp, #28]
 800ba54:	2300      	movs	r3, #0
 800ba56:	930a      	str	r3, [sp, #40]	; 0x28
 800ba58:	e7bf      	b.n	800b9da <_dtoa_r+0x1da>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	9308      	str	r3, [sp, #32]
 800ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	dc55      	bgt.n	800bb10 <_dtoa_r+0x310>
 800ba64:	2301      	movs	r3, #1
 800ba66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba6e:	e00c      	b.n	800ba8a <_dtoa_r+0x28a>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e7f3      	b.n	800ba5c <_dtoa_r+0x25c>
 800ba74:	2300      	movs	r3, #0
 800ba76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba78:	9308      	str	r3, [sp, #32]
 800ba7a:	9b00      	ldr	r3, [sp, #0]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	9302      	str	r3, [sp, #8]
 800ba80:	3301      	adds	r3, #1
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	bfb8      	it	lt
 800ba88:	2301      	movlt	r3, #1
 800ba8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	6042      	str	r2, [r0, #4]
 800ba90:	2204      	movs	r2, #4
 800ba92:	f102 0614 	add.w	r6, r2, #20
 800ba96:	429e      	cmp	r6, r3
 800ba98:	6841      	ldr	r1, [r0, #4]
 800ba9a:	d93d      	bls.n	800bb18 <_dtoa_r+0x318>
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f001 f82b 	bl	800caf8 <_Balloc>
 800baa2:	9001      	str	r0, [sp, #4]
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d13b      	bne.n	800bb20 <_dtoa_r+0x320>
 800baa8:	4b11      	ldr	r3, [pc, #68]	; (800baf0 <_dtoa_r+0x2f0>)
 800baaa:	4602      	mov	r2, r0
 800baac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bab0:	e6c0      	b.n	800b834 <_dtoa_r+0x34>
 800bab2:	2301      	movs	r3, #1
 800bab4:	e7df      	b.n	800ba76 <_dtoa_r+0x276>
 800bab6:	bf00      	nop
 800bab8:	636f4361 	.word	0x636f4361
 800babc:	3fd287a7 	.word	0x3fd287a7
 800bac0:	8b60c8b3 	.word	0x8b60c8b3
 800bac4:	3fc68a28 	.word	0x3fc68a28
 800bac8:	509f79fb 	.word	0x509f79fb
 800bacc:	3fd34413 	.word	0x3fd34413
 800bad0:	0800e75e 	.word	0x0800e75e
 800bad4:	0800e775 	.word	0x0800e775
 800bad8:	7ff00000 	.word	0x7ff00000
 800badc:	0800e75a 	.word	0x0800e75a
 800bae0:	0800e751 	.word	0x0800e751
 800bae4:	0800e5d5 	.word	0x0800e5d5
 800bae8:	3ff80000 	.word	0x3ff80000
 800baec:	0800e8e0 	.word	0x0800e8e0
 800baf0:	0800e7d0 	.word	0x0800e7d0
 800baf4:	2501      	movs	r5, #1
 800baf6:	2300      	movs	r3, #0
 800baf8:	9306      	str	r3, [sp, #24]
 800bafa:	9508      	str	r5, [sp, #32]
 800bafc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb04:	2200      	movs	r2, #0
 800bb06:	2312      	movs	r3, #18
 800bb08:	e7b0      	b.n	800ba6c <_dtoa_r+0x26c>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	9308      	str	r3, [sp, #32]
 800bb0e:	e7f5      	b.n	800bafc <_dtoa_r+0x2fc>
 800bb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb16:	e7b8      	b.n	800ba8a <_dtoa_r+0x28a>
 800bb18:	3101      	adds	r1, #1
 800bb1a:	6041      	str	r1, [r0, #4]
 800bb1c:	0052      	lsls	r2, r2, #1
 800bb1e:	e7b8      	b.n	800ba92 <_dtoa_r+0x292>
 800bb20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb22:	9a01      	ldr	r2, [sp, #4]
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	2b0e      	cmp	r3, #14
 800bb2a:	f200 809d 	bhi.w	800bc68 <_dtoa_r+0x468>
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	f000 809a 	beq.w	800bc68 <_dtoa_r+0x468>
 800bb34:	9b00      	ldr	r3, [sp, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dd32      	ble.n	800bba0 <_dtoa_r+0x3a0>
 800bb3a:	4ab7      	ldr	r2, [pc, #732]	; (800be18 <_dtoa_r+0x618>)
 800bb3c:	f003 030f 	and.w	r3, r3, #15
 800bb40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb48:	9b00      	ldr	r3, [sp, #0]
 800bb4a:	05d8      	lsls	r0, r3, #23
 800bb4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb50:	d516      	bpl.n	800bb80 <_dtoa_r+0x380>
 800bb52:	4bb2      	ldr	r3, [pc, #712]	; (800be1c <_dtoa_r+0x61c>)
 800bb54:	ec51 0b19 	vmov	r0, r1, d9
 800bb58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb5c:	f7f4 fe86 	bl	800086c <__aeabi_ddiv>
 800bb60:	f007 070f 	and.w	r7, r7, #15
 800bb64:	4682      	mov	sl, r0
 800bb66:	468b      	mov	fp, r1
 800bb68:	2503      	movs	r5, #3
 800bb6a:	4eac      	ldr	r6, [pc, #688]	; (800be1c <_dtoa_r+0x61c>)
 800bb6c:	b957      	cbnz	r7, 800bb84 <_dtoa_r+0x384>
 800bb6e:	4642      	mov	r2, r8
 800bb70:	464b      	mov	r3, r9
 800bb72:	4650      	mov	r0, sl
 800bb74:	4659      	mov	r1, fp
 800bb76:	f7f4 fe79 	bl	800086c <__aeabi_ddiv>
 800bb7a:	4682      	mov	sl, r0
 800bb7c:	468b      	mov	fp, r1
 800bb7e:	e028      	b.n	800bbd2 <_dtoa_r+0x3d2>
 800bb80:	2502      	movs	r5, #2
 800bb82:	e7f2      	b.n	800bb6a <_dtoa_r+0x36a>
 800bb84:	07f9      	lsls	r1, r7, #31
 800bb86:	d508      	bpl.n	800bb9a <_dtoa_r+0x39a>
 800bb88:	4640      	mov	r0, r8
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb90:	f7f4 fd42 	bl	8000618 <__aeabi_dmul>
 800bb94:	3501      	adds	r5, #1
 800bb96:	4680      	mov	r8, r0
 800bb98:	4689      	mov	r9, r1
 800bb9a:	107f      	asrs	r7, r7, #1
 800bb9c:	3608      	adds	r6, #8
 800bb9e:	e7e5      	b.n	800bb6c <_dtoa_r+0x36c>
 800bba0:	f000 809b 	beq.w	800bcda <_dtoa_r+0x4da>
 800bba4:	9b00      	ldr	r3, [sp, #0]
 800bba6:	4f9d      	ldr	r7, [pc, #628]	; (800be1c <_dtoa_r+0x61c>)
 800bba8:	425e      	negs	r6, r3
 800bbaa:	4b9b      	ldr	r3, [pc, #620]	; (800be18 <_dtoa_r+0x618>)
 800bbac:	f006 020f 	and.w	r2, r6, #15
 800bbb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	ec51 0b19 	vmov	r0, r1, d9
 800bbbc:	f7f4 fd2c 	bl	8000618 <__aeabi_dmul>
 800bbc0:	1136      	asrs	r6, r6, #4
 800bbc2:	4682      	mov	sl, r0
 800bbc4:	468b      	mov	fp, r1
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	2502      	movs	r5, #2
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	d17a      	bne.n	800bcc4 <_dtoa_r+0x4c4>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1d3      	bne.n	800bb7a <_dtoa_r+0x37a>
 800bbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8082 	beq.w	800bcde <_dtoa_r+0x4de>
 800bbda:	4b91      	ldr	r3, [pc, #580]	; (800be20 <_dtoa_r+0x620>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4650      	mov	r0, sl
 800bbe0:	4659      	mov	r1, fp
 800bbe2:	f7f4 ff8b 	bl	8000afc <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d079      	beq.n	800bcde <_dtoa_r+0x4de>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d076      	beq.n	800bcde <_dtoa_r+0x4de>
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	dd36      	ble.n	800bc64 <_dtoa_r+0x464>
 800bbf6:	9b00      	ldr	r3, [sp, #0]
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	4659      	mov	r1, fp
 800bbfc:	1e5f      	subs	r7, r3, #1
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4b88      	ldr	r3, [pc, #544]	; (800be24 <_dtoa_r+0x624>)
 800bc02:	f7f4 fd09 	bl	8000618 <__aeabi_dmul>
 800bc06:	9e02      	ldr	r6, [sp, #8]
 800bc08:	4682      	mov	sl, r0
 800bc0a:	468b      	mov	fp, r1
 800bc0c:	3501      	adds	r5, #1
 800bc0e:	4628      	mov	r0, r5
 800bc10:	f7f4 fc98 	bl	8000544 <__aeabi_i2d>
 800bc14:	4652      	mov	r2, sl
 800bc16:	465b      	mov	r3, fp
 800bc18:	f7f4 fcfe 	bl	8000618 <__aeabi_dmul>
 800bc1c:	4b82      	ldr	r3, [pc, #520]	; (800be28 <_dtoa_r+0x628>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f7f4 fb44 	bl	80002ac <__adddf3>
 800bc24:	46d0      	mov	r8, sl
 800bc26:	46d9      	mov	r9, fp
 800bc28:	4682      	mov	sl, r0
 800bc2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc2e:	2e00      	cmp	r6, #0
 800bc30:	d158      	bne.n	800bce4 <_dtoa_r+0x4e4>
 800bc32:	4b7e      	ldr	r3, [pc, #504]	; (800be2c <_dtoa_r+0x62c>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	4640      	mov	r0, r8
 800bc38:	4649      	mov	r1, r9
 800bc3a:	f7f4 fb35 	bl	80002a8 <__aeabi_dsub>
 800bc3e:	4652      	mov	r2, sl
 800bc40:	465b      	mov	r3, fp
 800bc42:	4680      	mov	r8, r0
 800bc44:	4689      	mov	r9, r1
 800bc46:	f7f4 ff77 	bl	8000b38 <__aeabi_dcmpgt>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	f040 8295 	bne.w	800c17a <_dtoa_r+0x97a>
 800bc50:	4652      	mov	r2, sl
 800bc52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc56:	4640      	mov	r0, r8
 800bc58:	4649      	mov	r1, r9
 800bc5a:	f7f4 ff4f 	bl	8000afc <__aeabi_dcmplt>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f040 8289 	bne.w	800c176 <_dtoa_r+0x976>
 800bc64:	ec5b ab19 	vmov	sl, fp, d9
 800bc68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f2c0 8148 	blt.w	800bf00 <_dtoa_r+0x700>
 800bc70:	9a00      	ldr	r2, [sp, #0]
 800bc72:	2a0e      	cmp	r2, #14
 800bc74:	f300 8144 	bgt.w	800bf00 <_dtoa_r+0x700>
 800bc78:	4b67      	ldr	r3, [pc, #412]	; (800be18 <_dtoa_r+0x618>)
 800bc7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f280 80d5 	bge.w	800be34 <_dtoa_r+0x634>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f300 80d1 	bgt.w	800be34 <_dtoa_r+0x634>
 800bc92:	f040 826f 	bne.w	800c174 <_dtoa_r+0x974>
 800bc96:	4b65      	ldr	r3, [pc, #404]	; (800be2c <_dtoa_r+0x62c>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 fcbb 	bl	8000618 <__aeabi_dmul>
 800bca2:	4652      	mov	r2, sl
 800bca4:	465b      	mov	r3, fp
 800bca6:	f7f4 ff3d 	bl	8000b24 <__aeabi_dcmpge>
 800bcaa:	9e03      	ldr	r6, [sp, #12]
 800bcac:	4637      	mov	r7, r6
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f040 8245 	bne.w	800c13e <_dtoa_r+0x93e>
 800bcb4:	9d01      	ldr	r5, [sp, #4]
 800bcb6:	2331      	movs	r3, #49	; 0x31
 800bcb8:	f805 3b01 	strb.w	r3, [r5], #1
 800bcbc:	9b00      	ldr	r3, [sp, #0]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	e240      	b.n	800c146 <_dtoa_r+0x946>
 800bcc4:	07f2      	lsls	r2, r6, #31
 800bcc6:	d505      	bpl.n	800bcd4 <_dtoa_r+0x4d4>
 800bcc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bccc:	f7f4 fca4 	bl	8000618 <__aeabi_dmul>
 800bcd0:	3501      	adds	r5, #1
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	1076      	asrs	r6, r6, #1
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	e777      	b.n	800bbca <_dtoa_r+0x3ca>
 800bcda:	2502      	movs	r5, #2
 800bcdc:	e779      	b.n	800bbd2 <_dtoa_r+0x3d2>
 800bcde:	9f00      	ldr	r7, [sp, #0]
 800bce0:	9e03      	ldr	r6, [sp, #12]
 800bce2:	e794      	b.n	800bc0e <_dtoa_r+0x40e>
 800bce4:	9901      	ldr	r1, [sp, #4]
 800bce6:	4b4c      	ldr	r3, [pc, #304]	; (800be18 <_dtoa_r+0x618>)
 800bce8:	4431      	add	r1, r6
 800bcea:	910d      	str	r1, [sp, #52]	; 0x34
 800bcec:	9908      	ldr	r1, [sp, #32]
 800bcee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcf6:	2900      	cmp	r1, #0
 800bcf8:	d043      	beq.n	800bd82 <_dtoa_r+0x582>
 800bcfa:	494d      	ldr	r1, [pc, #308]	; (800be30 <_dtoa_r+0x630>)
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f7f4 fdb5 	bl	800086c <__aeabi_ddiv>
 800bd02:	4652      	mov	r2, sl
 800bd04:	465b      	mov	r3, fp
 800bd06:	f7f4 facf 	bl	80002a8 <__aeabi_dsub>
 800bd0a:	9d01      	ldr	r5, [sp, #4]
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	468b      	mov	fp, r1
 800bd10:	4649      	mov	r1, r9
 800bd12:	4640      	mov	r0, r8
 800bd14:	f7f4 ff30 	bl	8000b78 <__aeabi_d2iz>
 800bd18:	4606      	mov	r6, r0
 800bd1a:	f7f4 fc13 	bl	8000544 <__aeabi_i2d>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 fabf 	bl	80002a8 <__aeabi_dsub>
 800bd2a:	3630      	adds	r6, #48	; 0x30
 800bd2c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd30:	4652      	mov	r2, sl
 800bd32:	465b      	mov	r3, fp
 800bd34:	4680      	mov	r8, r0
 800bd36:	4689      	mov	r9, r1
 800bd38:	f7f4 fee0 	bl	8000afc <__aeabi_dcmplt>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d163      	bne.n	800be08 <_dtoa_r+0x608>
 800bd40:	4642      	mov	r2, r8
 800bd42:	464b      	mov	r3, r9
 800bd44:	4936      	ldr	r1, [pc, #216]	; (800be20 <_dtoa_r+0x620>)
 800bd46:	2000      	movs	r0, #0
 800bd48:	f7f4 faae 	bl	80002a8 <__aeabi_dsub>
 800bd4c:	4652      	mov	r2, sl
 800bd4e:	465b      	mov	r3, fp
 800bd50:	f7f4 fed4 	bl	8000afc <__aeabi_dcmplt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f040 80b5 	bne.w	800bec4 <_dtoa_r+0x6c4>
 800bd5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd5c:	429d      	cmp	r5, r3
 800bd5e:	d081      	beq.n	800bc64 <_dtoa_r+0x464>
 800bd60:	4b30      	ldr	r3, [pc, #192]	; (800be24 <_dtoa_r+0x624>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	4650      	mov	r0, sl
 800bd66:	4659      	mov	r1, fp
 800bd68:	f7f4 fc56 	bl	8000618 <__aeabi_dmul>
 800bd6c:	4b2d      	ldr	r3, [pc, #180]	; (800be24 <_dtoa_r+0x624>)
 800bd6e:	4682      	mov	sl, r0
 800bd70:	468b      	mov	fp, r1
 800bd72:	4640      	mov	r0, r8
 800bd74:	4649      	mov	r1, r9
 800bd76:	2200      	movs	r2, #0
 800bd78:	f7f4 fc4e 	bl	8000618 <__aeabi_dmul>
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4689      	mov	r9, r1
 800bd80:	e7c6      	b.n	800bd10 <_dtoa_r+0x510>
 800bd82:	4650      	mov	r0, sl
 800bd84:	4659      	mov	r1, fp
 800bd86:	f7f4 fc47 	bl	8000618 <__aeabi_dmul>
 800bd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd8c:	9d01      	ldr	r5, [sp, #4]
 800bd8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd90:	4682      	mov	sl, r0
 800bd92:	468b      	mov	fp, r1
 800bd94:	4649      	mov	r1, r9
 800bd96:	4640      	mov	r0, r8
 800bd98:	f7f4 feee 	bl	8000b78 <__aeabi_d2iz>
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	f7f4 fbd1 	bl	8000544 <__aeabi_i2d>
 800bda2:	3630      	adds	r6, #48	; 0x30
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	4640      	mov	r0, r8
 800bdaa:	4649      	mov	r1, r9
 800bdac:	f7f4 fa7c 	bl	80002a8 <__aeabi_dsub>
 800bdb0:	f805 6b01 	strb.w	r6, [r5], #1
 800bdb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdb6:	429d      	cmp	r5, r3
 800bdb8:	4680      	mov	r8, r0
 800bdba:	4689      	mov	r9, r1
 800bdbc:	f04f 0200 	mov.w	r2, #0
 800bdc0:	d124      	bne.n	800be0c <_dtoa_r+0x60c>
 800bdc2:	4b1b      	ldr	r3, [pc, #108]	; (800be30 <_dtoa_r+0x630>)
 800bdc4:	4650      	mov	r0, sl
 800bdc6:	4659      	mov	r1, fp
 800bdc8:	f7f4 fa70 	bl	80002ac <__adddf3>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4640      	mov	r0, r8
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	f7f4 feb0 	bl	8000b38 <__aeabi_dcmpgt>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d173      	bne.n	800bec4 <_dtoa_r+0x6c4>
 800bddc:	4652      	mov	r2, sl
 800bdde:	465b      	mov	r3, fp
 800bde0:	4913      	ldr	r1, [pc, #76]	; (800be30 <_dtoa_r+0x630>)
 800bde2:	2000      	movs	r0, #0
 800bde4:	f7f4 fa60 	bl	80002a8 <__aeabi_dsub>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4640      	mov	r0, r8
 800bdee:	4649      	mov	r1, r9
 800bdf0:	f7f4 fe84 	bl	8000afc <__aeabi_dcmplt>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	f43f af35 	beq.w	800bc64 <_dtoa_r+0x464>
 800bdfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdfc:	1e6b      	subs	r3, r5, #1
 800bdfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800be00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be04:	2b30      	cmp	r3, #48	; 0x30
 800be06:	d0f8      	beq.n	800bdfa <_dtoa_r+0x5fa>
 800be08:	9700      	str	r7, [sp, #0]
 800be0a:	e049      	b.n	800bea0 <_dtoa_r+0x6a0>
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <_dtoa_r+0x624>)
 800be0e:	f7f4 fc03 	bl	8000618 <__aeabi_dmul>
 800be12:	4680      	mov	r8, r0
 800be14:	4689      	mov	r9, r1
 800be16:	e7bd      	b.n	800bd94 <_dtoa_r+0x594>
 800be18:	0800e8e0 	.word	0x0800e8e0
 800be1c:	0800e8b8 	.word	0x0800e8b8
 800be20:	3ff00000 	.word	0x3ff00000
 800be24:	40240000 	.word	0x40240000
 800be28:	401c0000 	.word	0x401c0000
 800be2c:	40140000 	.word	0x40140000
 800be30:	3fe00000 	.word	0x3fe00000
 800be34:	9d01      	ldr	r5, [sp, #4]
 800be36:	4656      	mov	r6, sl
 800be38:	465f      	mov	r7, fp
 800be3a:	4642      	mov	r2, r8
 800be3c:	464b      	mov	r3, r9
 800be3e:	4630      	mov	r0, r6
 800be40:	4639      	mov	r1, r7
 800be42:	f7f4 fd13 	bl	800086c <__aeabi_ddiv>
 800be46:	f7f4 fe97 	bl	8000b78 <__aeabi_d2iz>
 800be4a:	4682      	mov	sl, r0
 800be4c:	f7f4 fb7a 	bl	8000544 <__aeabi_i2d>
 800be50:	4642      	mov	r2, r8
 800be52:	464b      	mov	r3, r9
 800be54:	f7f4 fbe0 	bl	8000618 <__aeabi_dmul>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4630      	mov	r0, r6
 800be5e:	4639      	mov	r1, r7
 800be60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be64:	f7f4 fa20 	bl	80002a8 <__aeabi_dsub>
 800be68:	f805 6b01 	strb.w	r6, [r5], #1
 800be6c:	9e01      	ldr	r6, [sp, #4]
 800be6e:	9f03      	ldr	r7, [sp, #12]
 800be70:	1bae      	subs	r6, r5, r6
 800be72:	42b7      	cmp	r7, r6
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	d135      	bne.n	800bee6 <_dtoa_r+0x6e6>
 800be7a:	f7f4 fa17 	bl	80002ac <__adddf3>
 800be7e:	4642      	mov	r2, r8
 800be80:	464b      	mov	r3, r9
 800be82:	4606      	mov	r6, r0
 800be84:	460f      	mov	r7, r1
 800be86:	f7f4 fe57 	bl	8000b38 <__aeabi_dcmpgt>
 800be8a:	b9d0      	cbnz	r0, 800bec2 <_dtoa_r+0x6c2>
 800be8c:	4642      	mov	r2, r8
 800be8e:	464b      	mov	r3, r9
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 fe28 	bl	8000ae8 <__aeabi_dcmpeq>
 800be98:	b110      	cbz	r0, 800bea0 <_dtoa_r+0x6a0>
 800be9a:	f01a 0f01 	tst.w	sl, #1
 800be9e:	d110      	bne.n	800bec2 <_dtoa_r+0x6c2>
 800bea0:	4620      	mov	r0, r4
 800bea2:	ee18 1a10 	vmov	r1, s16
 800bea6:	f000 fe67 	bl	800cb78 <_Bfree>
 800beaa:	2300      	movs	r3, #0
 800beac:	9800      	ldr	r0, [sp, #0]
 800beae:	702b      	strb	r3, [r5, #0]
 800beb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beb2:	3001      	adds	r0, #1
 800beb4:	6018      	str	r0, [r3, #0]
 800beb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f43f acf1 	beq.w	800b8a0 <_dtoa_r+0xa0>
 800bebe:	601d      	str	r5, [r3, #0]
 800bec0:	e4ee      	b.n	800b8a0 <_dtoa_r+0xa0>
 800bec2:	9f00      	ldr	r7, [sp, #0]
 800bec4:	462b      	mov	r3, r5
 800bec6:	461d      	mov	r5, r3
 800bec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800becc:	2a39      	cmp	r2, #57	; 0x39
 800bece:	d106      	bne.n	800bede <_dtoa_r+0x6de>
 800bed0:	9a01      	ldr	r2, [sp, #4]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d1f7      	bne.n	800bec6 <_dtoa_r+0x6c6>
 800bed6:	9901      	ldr	r1, [sp, #4]
 800bed8:	2230      	movs	r2, #48	; 0x30
 800beda:	3701      	adds	r7, #1
 800bedc:	700a      	strb	r2, [r1, #0]
 800bede:	781a      	ldrb	r2, [r3, #0]
 800bee0:	3201      	adds	r2, #1
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	e790      	b.n	800be08 <_dtoa_r+0x608>
 800bee6:	4ba6      	ldr	r3, [pc, #664]	; (800c180 <_dtoa_r+0x980>)
 800bee8:	2200      	movs	r2, #0
 800beea:	f7f4 fb95 	bl	8000618 <__aeabi_dmul>
 800beee:	2200      	movs	r2, #0
 800bef0:	2300      	movs	r3, #0
 800bef2:	4606      	mov	r6, r0
 800bef4:	460f      	mov	r7, r1
 800bef6:	f7f4 fdf7 	bl	8000ae8 <__aeabi_dcmpeq>
 800befa:	2800      	cmp	r0, #0
 800befc:	d09d      	beq.n	800be3a <_dtoa_r+0x63a>
 800befe:	e7cf      	b.n	800bea0 <_dtoa_r+0x6a0>
 800bf00:	9a08      	ldr	r2, [sp, #32]
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	f000 80d7 	beq.w	800c0b6 <_dtoa_r+0x8b6>
 800bf08:	9a06      	ldr	r2, [sp, #24]
 800bf0a:	2a01      	cmp	r2, #1
 800bf0c:	f300 80ba 	bgt.w	800c084 <_dtoa_r+0x884>
 800bf10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	f000 80b2 	beq.w	800c07c <_dtoa_r+0x87c>
 800bf18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf1c:	9e07      	ldr	r6, [sp, #28]
 800bf1e:	9d04      	ldr	r5, [sp, #16]
 800bf20:	9a04      	ldr	r2, [sp, #16]
 800bf22:	441a      	add	r2, r3
 800bf24:	9204      	str	r2, [sp, #16]
 800bf26:	9a05      	ldr	r2, [sp, #20]
 800bf28:	2101      	movs	r1, #1
 800bf2a:	441a      	add	r2, r3
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	9205      	str	r2, [sp, #20]
 800bf30:	f000 ff24 	bl	800cd7c <__i2b>
 800bf34:	4607      	mov	r7, r0
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	dd0c      	ble.n	800bf54 <_dtoa_r+0x754>
 800bf3a:	9b05      	ldr	r3, [sp, #20]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd09      	ble.n	800bf54 <_dtoa_r+0x754>
 800bf40:	42ab      	cmp	r3, r5
 800bf42:	9a04      	ldr	r2, [sp, #16]
 800bf44:	bfa8      	it	ge
 800bf46:	462b      	movge	r3, r5
 800bf48:	1ad2      	subs	r2, r2, r3
 800bf4a:	9204      	str	r2, [sp, #16]
 800bf4c:	9a05      	ldr	r2, [sp, #20]
 800bf4e:	1aed      	subs	r5, r5, r3
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	9305      	str	r3, [sp, #20]
 800bf54:	9b07      	ldr	r3, [sp, #28]
 800bf56:	b31b      	cbz	r3, 800bfa0 <_dtoa_r+0x7a0>
 800bf58:	9b08      	ldr	r3, [sp, #32]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 80af 	beq.w	800c0be <_dtoa_r+0x8be>
 800bf60:	2e00      	cmp	r6, #0
 800bf62:	dd13      	ble.n	800bf8c <_dtoa_r+0x78c>
 800bf64:	4639      	mov	r1, r7
 800bf66:	4632      	mov	r2, r6
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 ffc7 	bl	800cefc <__pow5mult>
 800bf6e:	ee18 2a10 	vmov	r2, s16
 800bf72:	4601      	mov	r1, r0
 800bf74:	4607      	mov	r7, r0
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 ff16 	bl	800cda8 <__multiply>
 800bf7c:	ee18 1a10 	vmov	r1, s16
 800bf80:	4680      	mov	r8, r0
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 fdf8 	bl	800cb78 <_Bfree>
 800bf88:	ee08 8a10 	vmov	s16, r8
 800bf8c:	9b07      	ldr	r3, [sp, #28]
 800bf8e:	1b9a      	subs	r2, r3, r6
 800bf90:	d006      	beq.n	800bfa0 <_dtoa_r+0x7a0>
 800bf92:	ee18 1a10 	vmov	r1, s16
 800bf96:	4620      	mov	r0, r4
 800bf98:	f000 ffb0 	bl	800cefc <__pow5mult>
 800bf9c:	ee08 0a10 	vmov	s16, r0
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 feea 	bl	800cd7c <__i2b>
 800bfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	4606      	mov	r6, r0
 800bfae:	f340 8088 	ble.w	800c0c2 <_dtoa_r+0x8c2>
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	4601      	mov	r1, r0
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 ffa0 	bl	800cefc <__pow5mult>
 800bfbc:	9b06      	ldr	r3, [sp, #24]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	f340 8081 	ble.w	800c0c8 <_dtoa_r+0x8c8>
 800bfc6:	f04f 0800 	mov.w	r8, #0
 800bfca:	6933      	ldr	r3, [r6, #16]
 800bfcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfd0:	6918      	ldr	r0, [r3, #16]
 800bfd2:	f000 fe83 	bl	800ccdc <__hi0bits>
 800bfd6:	f1c0 0020 	rsb	r0, r0, #32
 800bfda:	9b05      	ldr	r3, [sp, #20]
 800bfdc:	4418      	add	r0, r3
 800bfde:	f010 001f 	ands.w	r0, r0, #31
 800bfe2:	f000 8092 	beq.w	800c10a <_dtoa_r+0x90a>
 800bfe6:	f1c0 0320 	rsb	r3, r0, #32
 800bfea:	2b04      	cmp	r3, #4
 800bfec:	f340 808a 	ble.w	800c104 <_dtoa_r+0x904>
 800bff0:	f1c0 001c 	rsb	r0, r0, #28
 800bff4:	9b04      	ldr	r3, [sp, #16]
 800bff6:	4403      	add	r3, r0
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	9b05      	ldr	r3, [sp, #20]
 800bffc:	4403      	add	r3, r0
 800bffe:	4405      	add	r5, r0
 800c000:	9305      	str	r3, [sp, #20]
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	dd07      	ble.n	800c018 <_dtoa_r+0x818>
 800c008:	ee18 1a10 	vmov	r1, s16
 800c00c:	461a      	mov	r2, r3
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 ffce 	bl	800cfb0 <__lshift>
 800c014:	ee08 0a10 	vmov	s16, r0
 800c018:	9b05      	ldr	r3, [sp, #20]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	dd05      	ble.n	800c02a <_dtoa_r+0x82a>
 800c01e:	4631      	mov	r1, r6
 800c020:	461a      	mov	r2, r3
 800c022:	4620      	mov	r0, r4
 800c024:	f000 ffc4 	bl	800cfb0 <__lshift>
 800c028:	4606      	mov	r6, r0
 800c02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d06e      	beq.n	800c10e <_dtoa_r+0x90e>
 800c030:	ee18 0a10 	vmov	r0, s16
 800c034:	4631      	mov	r1, r6
 800c036:	f001 f82b 	bl	800d090 <__mcmp>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	da67      	bge.n	800c10e <_dtoa_r+0x90e>
 800c03e:	9b00      	ldr	r3, [sp, #0]
 800c040:	3b01      	subs	r3, #1
 800c042:	ee18 1a10 	vmov	r1, s16
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	220a      	movs	r2, #10
 800c04a:	2300      	movs	r3, #0
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fdb5 	bl	800cbbc <__multadd>
 800c052:	9b08      	ldr	r3, [sp, #32]
 800c054:	ee08 0a10 	vmov	s16, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 81b1 	beq.w	800c3c0 <_dtoa_r+0xbc0>
 800c05e:	2300      	movs	r3, #0
 800c060:	4639      	mov	r1, r7
 800c062:	220a      	movs	r2, #10
 800c064:	4620      	mov	r0, r4
 800c066:	f000 fda9 	bl	800cbbc <__multadd>
 800c06a:	9b02      	ldr	r3, [sp, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	4607      	mov	r7, r0
 800c070:	f300 808e 	bgt.w	800c190 <_dtoa_r+0x990>
 800c074:	9b06      	ldr	r3, [sp, #24]
 800c076:	2b02      	cmp	r3, #2
 800c078:	dc51      	bgt.n	800c11e <_dtoa_r+0x91e>
 800c07a:	e089      	b.n	800c190 <_dtoa_r+0x990>
 800c07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c07e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c082:	e74b      	b.n	800bf1c <_dtoa_r+0x71c>
 800c084:	9b03      	ldr	r3, [sp, #12]
 800c086:	1e5e      	subs	r6, r3, #1
 800c088:	9b07      	ldr	r3, [sp, #28]
 800c08a:	42b3      	cmp	r3, r6
 800c08c:	bfbf      	itttt	lt
 800c08e:	9b07      	ldrlt	r3, [sp, #28]
 800c090:	9607      	strlt	r6, [sp, #28]
 800c092:	1af2      	sublt	r2, r6, r3
 800c094:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c096:	bfb6      	itet	lt
 800c098:	189b      	addlt	r3, r3, r2
 800c09a:	1b9e      	subge	r6, r3, r6
 800c09c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c09e:	9b03      	ldr	r3, [sp, #12]
 800c0a0:	bfb8      	it	lt
 800c0a2:	2600      	movlt	r6, #0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	bfb7      	itett	lt
 800c0a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0b0:	1a9d      	sublt	r5, r3, r2
 800c0b2:	2300      	movlt	r3, #0
 800c0b4:	e734      	b.n	800bf20 <_dtoa_r+0x720>
 800c0b6:	9e07      	ldr	r6, [sp, #28]
 800c0b8:	9d04      	ldr	r5, [sp, #16]
 800c0ba:	9f08      	ldr	r7, [sp, #32]
 800c0bc:	e73b      	b.n	800bf36 <_dtoa_r+0x736>
 800c0be:	9a07      	ldr	r2, [sp, #28]
 800c0c0:	e767      	b.n	800bf92 <_dtoa_r+0x792>
 800c0c2:	9b06      	ldr	r3, [sp, #24]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	dc18      	bgt.n	800c0fa <_dtoa_r+0x8fa>
 800c0c8:	f1ba 0f00 	cmp.w	sl, #0
 800c0cc:	d115      	bne.n	800c0fa <_dtoa_r+0x8fa>
 800c0ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0d2:	b993      	cbnz	r3, 800c0fa <_dtoa_r+0x8fa>
 800c0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0d8:	0d1b      	lsrs	r3, r3, #20
 800c0da:	051b      	lsls	r3, r3, #20
 800c0dc:	b183      	cbz	r3, 800c100 <_dtoa_r+0x900>
 800c0de:	9b04      	ldr	r3, [sp, #16]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	9304      	str	r3, [sp, #16]
 800c0e4:	9b05      	ldr	r3, [sp, #20]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	f04f 0801 	mov.w	r8, #1
 800c0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f47f af6a 	bne.w	800bfca <_dtoa_r+0x7ca>
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	e76f      	b.n	800bfda <_dtoa_r+0x7da>
 800c0fa:	f04f 0800 	mov.w	r8, #0
 800c0fe:	e7f6      	b.n	800c0ee <_dtoa_r+0x8ee>
 800c100:	4698      	mov	r8, r3
 800c102:	e7f4      	b.n	800c0ee <_dtoa_r+0x8ee>
 800c104:	f43f af7d 	beq.w	800c002 <_dtoa_r+0x802>
 800c108:	4618      	mov	r0, r3
 800c10a:	301c      	adds	r0, #28
 800c10c:	e772      	b.n	800bff4 <_dtoa_r+0x7f4>
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	dc37      	bgt.n	800c184 <_dtoa_r+0x984>
 800c114:	9b06      	ldr	r3, [sp, #24]
 800c116:	2b02      	cmp	r3, #2
 800c118:	dd34      	ble.n	800c184 <_dtoa_r+0x984>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	9302      	str	r3, [sp, #8]
 800c11e:	9b02      	ldr	r3, [sp, #8]
 800c120:	b96b      	cbnz	r3, 800c13e <_dtoa_r+0x93e>
 800c122:	4631      	mov	r1, r6
 800c124:	2205      	movs	r2, #5
 800c126:	4620      	mov	r0, r4
 800c128:	f000 fd48 	bl	800cbbc <__multadd>
 800c12c:	4601      	mov	r1, r0
 800c12e:	4606      	mov	r6, r0
 800c130:	ee18 0a10 	vmov	r0, s16
 800c134:	f000 ffac 	bl	800d090 <__mcmp>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f73f adbb 	bgt.w	800bcb4 <_dtoa_r+0x4b4>
 800c13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c140:	9d01      	ldr	r5, [sp, #4]
 800c142:	43db      	mvns	r3, r3
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	f04f 0800 	mov.w	r8, #0
 800c14a:	4631      	mov	r1, r6
 800c14c:	4620      	mov	r0, r4
 800c14e:	f000 fd13 	bl	800cb78 <_Bfree>
 800c152:	2f00      	cmp	r7, #0
 800c154:	f43f aea4 	beq.w	800bea0 <_dtoa_r+0x6a0>
 800c158:	f1b8 0f00 	cmp.w	r8, #0
 800c15c:	d005      	beq.n	800c16a <_dtoa_r+0x96a>
 800c15e:	45b8      	cmp	r8, r7
 800c160:	d003      	beq.n	800c16a <_dtoa_r+0x96a>
 800c162:	4641      	mov	r1, r8
 800c164:	4620      	mov	r0, r4
 800c166:	f000 fd07 	bl	800cb78 <_Bfree>
 800c16a:	4639      	mov	r1, r7
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 fd03 	bl	800cb78 <_Bfree>
 800c172:	e695      	b.n	800bea0 <_dtoa_r+0x6a0>
 800c174:	2600      	movs	r6, #0
 800c176:	4637      	mov	r7, r6
 800c178:	e7e1      	b.n	800c13e <_dtoa_r+0x93e>
 800c17a:	9700      	str	r7, [sp, #0]
 800c17c:	4637      	mov	r7, r6
 800c17e:	e599      	b.n	800bcb4 <_dtoa_r+0x4b4>
 800c180:	40240000 	.word	0x40240000
 800c184:	9b08      	ldr	r3, [sp, #32]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 80ca 	beq.w	800c320 <_dtoa_r+0xb20>
 800c18c:	9b03      	ldr	r3, [sp, #12]
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	2d00      	cmp	r5, #0
 800c192:	dd05      	ble.n	800c1a0 <_dtoa_r+0x9a0>
 800c194:	4639      	mov	r1, r7
 800c196:	462a      	mov	r2, r5
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 ff09 	bl	800cfb0 <__lshift>
 800c19e:	4607      	mov	r7, r0
 800c1a0:	f1b8 0f00 	cmp.w	r8, #0
 800c1a4:	d05b      	beq.n	800c25e <_dtoa_r+0xa5e>
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 fca5 	bl	800caf8 <_Balloc>
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	b928      	cbnz	r0, 800c1be <_dtoa_r+0x9be>
 800c1b2:	4b87      	ldr	r3, [pc, #540]	; (800c3d0 <_dtoa_r+0xbd0>)
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1ba:	f7ff bb3b 	b.w	800b834 <_dtoa_r+0x34>
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	3202      	adds	r2, #2
 800c1c2:	0092      	lsls	r2, r2, #2
 800c1c4:	f107 010c 	add.w	r1, r7, #12
 800c1c8:	300c      	adds	r0, #12
 800c1ca:	f7fd fd09 	bl	8009be0 <memcpy>
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f000 feec 	bl	800cfb0 <__lshift>
 800c1d8:	9b01      	ldr	r3, [sp, #4]
 800c1da:	f103 0901 	add.w	r9, r3, #1
 800c1de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	9305      	str	r3, [sp, #20]
 800c1e6:	f00a 0301 	and.w	r3, sl, #1
 800c1ea:	46b8      	mov	r8, r7
 800c1ec:	9304      	str	r3, [sp, #16]
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	ee18 0a10 	vmov	r0, s16
 800c1f6:	f7ff fa77 	bl	800b6e8 <quorem>
 800c1fa:	4641      	mov	r1, r8
 800c1fc:	9002      	str	r0, [sp, #8]
 800c1fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c202:	ee18 0a10 	vmov	r0, s16
 800c206:	f000 ff43 	bl	800d090 <__mcmp>
 800c20a:	463a      	mov	r2, r7
 800c20c:	9003      	str	r0, [sp, #12]
 800c20e:	4631      	mov	r1, r6
 800c210:	4620      	mov	r0, r4
 800c212:	f000 ff59 	bl	800d0c8 <__mdiff>
 800c216:	68c2      	ldr	r2, [r0, #12]
 800c218:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c21c:	4605      	mov	r5, r0
 800c21e:	bb02      	cbnz	r2, 800c262 <_dtoa_r+0xa62>
 800c220:	4601      	mov	r1, r0
 800c222:	ee18 0a10 	vmov	r0, s16
 800c226:	f000 ff33 	bl	800d090 <__mcmp>
 800c22a:	4602      	mov	r2, r0
 800c22c:	4629      	mov	r1, r5
 800c22e:	4620      	mov	r0, r4
 800c230:	9207      	str	r2, [sp, #28]
 800c232:	f000 fca1 	bl	800cb78 <_Bfree>
 800c236:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c23a:	ea43 0102 	orr.w	r1, r3, r2
 800c23e:	9b04      	ldr	r3, [sp, #16]
 800c240:	430b      	orrs	r3, r1
 800c242:	464d      	mov	r5, r9
 800c244:	d10f      	bne.n	800c266 <_dtoa_r+0xa66>
 800c246:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c24a:	d02a      	beq.n	800c2a2 <_dtoa_r+0xaa2>
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	dd02      	ble.n	800c258 <_dtoa_r+0xa58>
 800c252:	9b02      	ldr	r3, [sp, #8]
 800c254:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c258:	f88b a000 	strb.w	sl, [fp]
 800c25c:	e775      	b.n	800c14a <_dtoa_r+0x94a>
 800c25e:	4638      	mov	r0, r7
 800c260:	e7ba      	b.n	800c1d8 <_dtoa_r+0x9d8>
 800c262:	2201      	movs	r2, #1
 800c264:	e7e2      	b.n	800c22c <_dtoa_r+0xa2c>
 800c266:	9b03      	ldr	r3, [sp, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	db04      	blt.n	800c276 <_dtoa_r+0xa76>
 800c26c:	9906      	ldr	r1, [sp, #24]
 800c26e:	430b      	orrs	r3, r1
 800c270:	9904      	ldr	r1, [sp, #16]
 800c272:	430b      	orrs	r3, r1
 800c274:	d122      	bne.n	800c2bc <_dtoa_r+0xabc>
 800c276:	2a00      	cmp	r2, #0
 800c278:	ddee      	ble.n	800c258 <_dtoa_r+0xa58>
 800c27a:	ee18 1a10 	vmov	r1, s16
 800c27e:	2201      	movs	r2, #1
 800c280:	4620      	mov	r0, r4
 800c282:	f000 fe95 	bl	800cfb0 <__lshift>
 800c286:	4631      	mov	r1, r6
 800c288:	ee08 0a10 	vmov	s16, r0
 800c28c:	f000 ff00 	bl	800d090 <__mcmp>
 800c290:	2800      	cmp	r0, #0
 800c292:	dc03      	bgt.n	800c29c <_dtoa_r+0xa9c>
 800c294:	d1e0      	bne.n	800c258 <_dtoa_r+0xa58>
 800c296:	f01a 0f01 	tst.w	sl, #1
 800c29a:	d0dd      	beq.n	800c258 <_dtoa_r+0xa58>
 800c29c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2a0:	d1d7      	bne.n	800c252 <_dtoa_r+0xa52>
 800c2a2:	2339      	movs	r3, #57	; 0x39
 800c2a4:	f88b 3000 	strb.w	r3, [fp]
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	461d      	mov	r5, r3
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2b2:	2a39      	cmp	r2, #57	; 0x39
 800c2b4:	d071      	beq.n	800c39a <_dtoa_r+0xb9a>
 800c2b6:	3201      	adds	r2, #1
 800c2b8:	701a      	strb	r2, [r3, #0]
 800c2ba:	e746      	b.n	800c14a <_dtoa_r+0x94a>
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	dd07      	ble.n	800c2d0 <_dtoa_r+0xad0>
 800c2c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2c4:	d0ed      	beq.n	800c2a2 <_dtoa_r+0xaa2>
 800c2c6:	f10a 0301 	add.w	r3, sl, #1
 800c2ca:	f88b 3000 	strb.w	r3, [fp]
 800c2ce:	e73c      	b.n	800c14a <_dtoa_r+0x94a>
 800c2d0:	9b05      	ldr	r3, [sp, #20]
 800c2d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2d6:	4599      	cmp	r9, r3
 800c2d8:	d047      	beq.n	800c36a <_dtoa_r+0xb6a>
 800c2da:	ee18 1a10 	vmov	r1, s16
 800c2de:	2300      	movs	r3, #0
 800c2e0:	220a      	movs	r2, #10
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f000 fc6a 	bl	800cbbc <__multadd>
 800c2e8:	45b8      	cmp	r8, r7
 800c2ea:	ee08 0a10 	vmov	s16, r0
 800c2ee:	f04f 0300 	mov.w	r3, #0
 800c2f2:	f04f 020a 	mov.w	r2, #10
 800c2f6:	4641      	mov	r1, r8
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	d106      	bne.n	800c30a <_dtoa_r+0xb0a>
 800c2fc:	f000 fc5e 	bl	800cbbc <__multadd>
 800c300:	4680      	mov	r8, r0
 800c302:	4607      	mov	r7, r0
 800c304:	f109 0901 	add.w	r9, r9, #1
 800c308:	e772      	b.n	800c1f0 <_dtoa_r+0x9f0>
 800c30a:	f000 fc57 	bl	800cbbc <__multadd>
 800c30e:	4639      	mov	r1, r7
 800c310:	4680      	mov	r8, r0
 800c312:	2300      	movs	r3, #0
 800c314:	220a      	movs	r2, #10
 800c316:	4620      	mov	r0, r4
 800c318:	f000 fc50 	bl	800cbbc <__multadd>
 800c31c:	4607      	mov	r7, r0
 800c31e:	e7f1      	b.n	800c304 <_dtoa_r+0xb04>
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	9302      	str	r3, [sp, #8]
 800c324:	9d01      	ldr	r5, [sp, #4]
 800c326:	ee18 0a10 	vmov	r0, s16
 800c32a:	4631      	mov	r1, r6
 800c32c:	f7ff f9dc 	bl	800b6e8 <quorem>
 800c330:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	f805 ab01 	strb.w	sl, [r5], #1
 800c33a:	1aea      	subs	r2, r5, r3
 800c33c:	9b02      	ldr	r3, [sp, #8]
 800c33e:	4293      	cmp	r3, r2
 800c340:	dd09      	ble.n	800c356 <_dtoa_r+0xb56>
 800c342:	ee18 1a10 	vmov	r1, s16
 800c346:	2300      	movs	r3, #0
 800c348:	220a      	movs	r2, #10
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 fc36 	bl	800cbbc <__multadd>
 800c350:	ee08 0a10 	vmov	s16, r0
 800c354:	e7e7      	b.n	800c326 <_dtoa_r+0xb26>
 800c356:	9b02      	ldr	r3, [sp, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	bfc8      	it	gt
 800c35c:	461d      	movgt	r5, r3
 800c35e:	9b01      	ldr	r3, [sp, #4]
 800c360:	bfd8      	it	le
 800c362:	2501      	movle	r5, #1
 800c364:	441d      	add	r5, r3
 800c366:	f04f 0800 	mov.w	r8, #0
 800c36a:	ee18 1a10 	vmov	r1, s16
 800c36e:	2201      	movs	r2, #1
 800c370:	4620      	mov	r0, r4
 800c372:	f000 fe1d 	bl	800cfb0 <__lshift>
 800c376:	4631      	mov	r1, r6
 800c378:	ee08 0a10 	vmov	s16, r0
 800c37c:	f000 fe88 	bl	800d090 <__mcmp>
 800c380:	2800      	cmp	r0, #0
 800c382:	dc91      	bgt.n	800c2a8 <_dtoa_r+0xaa8>
 800c384:	d102      	bne.n	800c38c <_dtoa_r+0xb8c>
 800c386:	f01a 0f01 	tst.w	sl, #1
 800c38a:	d18d      	bne.n	800c2a8 <_dtoa_r+0xaa8>
 800c38c:	462b      	mov	r3, r5
 800c38e:	461d      	mov	r5, r3
 800c390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c394:	2a30      	cmp	r2, #48	; 0x30
 800c396:	d0fa      	beq.n	800c38e <_dtoa_r+0xb8e>
 800c398:	e6d7      	b.n	800c14a <_dtoa_r+0x94a>
 800c39a:	9a01      	ldr	r2, [sp, #4]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d184      	bne.n	800c2aa <_dtoa_r+0xaaa>
 800c3a0:	9b00      	ldr	r3, [sp, #0]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	2331      	movs	r3, #49	; 0x31
 800c3a8:	7013      	strb	r3, [r2, #0]
 800c3aa:	e6ce      	b.n	800c14a <_dtoa_r+0x94a>
 800c3ac:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <_dtoa_r+0xbd4>)
 800c3ae:	f7ff ba95 	b.w	800b8dc <_dtoa_r+0xdc>
 800c3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f47f aa6e 	bne.w	800b896 <_dtoa_r+0x96>
 800c3ba:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <_dtoa_r+0xbd8>)
 800c3bc:	f7ff ba8e 	b.w	800b8dc <_dtoa_r+0xdc>
 800c3c0:	9b02      	ldr	r3, [sp, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	dcae      	bgt.n	800c324 <_dtoa_r+0xb24>
 800c3c6:	9b06      	ldr	r3, [sp, #24]
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	f73f aea8 	bgt.w	800c11e <_dtoa_r+0x91e>
 800c3ce:	e7a9      	b.n	800c324 <_dtoa_r+0xb24>
 800c3d0:	0800e7d0 	.word	0x0800e7d0
 800c3d4:	0800e5d4 	.word	0x0800e5d4
 800c3d8:	0800e751 	.word	0x0800e751

0800c3dc <rshift>:
 800c3dc:	6903      	ldr	r3, [r0, #16]
 800c3de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3ea:	f100 0414 	add.w	r4, r0, #20
 800c3ee:	dd45      	ble.n	800c47c <rshift+0xa0>
 800c3f0:	f011 011f 	ands.w	r1, r1, #31
 800c3f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c3f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3fc:	d10c      	bne.n	800c418 <rshift+0x3c>
 800c3fe:	f100 0710 	add.w	r7, r0, #16
 800c402:	4629      	mov	r1, r5
 800c404:	42b1      	cmp	r1, r6
 800c406:	d334      	bcc.n	800c472 <rshift+0x96>
 800c408:	1a9b      	subs	r3, r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	1eea      	subs	r2, r5, #3
 800c40e:	4296      	cmp	r6, r2
 800c410:	bf38      	it	cc
 800c412:	2300      	movcc	r3, #0
 800c414:	4423      	add	r3, r4
 800c416:	e015      	b.n	800c444 <rshift+0x68>
 800c418:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c41c:	f1c1 0820 	rsb	r8, r1, #32
 800c420:	40cf      	lsrs	r7, r1
 800c422:	f105 0e04 	add.w	lr, r5, #4
 800c426:	46a1      	mov	r9, r4
 800c428:	4576      	cmp	r6, lr
 800c42a:	46f4      	mov	ip, lr
 800c42c:	d815      	bhi.n	800c45a <rshift+0x7e>
 800c42e:	1a9a      	subs	r2, r3, r2
 800c430:	0092      	lsls	r2, r2, #2
 800c432:	3a04      	subs	r2, #4
 800c434:	3501      	adds	r5, #1
 800c436:	42ae      	cmp	r6, r5
 800c438:	bf38      	it	cc
 800c43a:	2200      	movcc	r2, #0
 800c43c:	18a3      	adds	r3, r4, r2
 800c43e:	50a7      	str	r7, [r4, r2]
 800c440:	b107      	cbz	r7, 800c444 <rshift+0x68>
 800c442:	3304      	adds	r3, #4
 800c444:	1b1a      	subs	r2, r3, r4
 800c446:	42a3      	cmp	r3, r4
 800c448:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c44c:	bf08      	it	eq
 800c44e:	2300      	moveq	r3, #0
 800c450:	6102      	str	r2, [r0, #16]
 800c452:	bf08      	it	eq
 800c454:	6143      	streq	r3, [r0, #20]
 800c456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c45a:	f8dc c000 	ldr.w	ip, [ip]
 800c45e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c462:	ea4c 0707 	orr.w	r7, ip, r7
 800c466:	f849 7b04 	str.w	r7, [r9], #4
 800c46a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c46e:	40cf      	lsrs	r7, r1
 800c470:	e7da      	b.n	800c428 <rshift+0x4c>
 800c472:	f851 cb04 	ldr.w	ip, [r1], #4
 800c476:	f847 cf04 	str.w	ip, [r7, #4]!
 800c47a:	e7c3      	b.n	800c404 <rshift+0x28>
 800c47c:	4623      	mov	r3, r4
 800c47e:	e7e1      	b.n	800c444 <rshift+0x68>

0800c480 <__hexdig_fun>:
 800c480:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c484:	2b09      	cmp	r3, #9
 800c486:	d802      	bhi.n	800c48e <__hexdig_fun+0xe>
 800c488:	3820      	subs	r0, #32
 800c48a:	b2c0      	uxtb	r0, r0
 800c48c:	4770      	bx	lr
 800c48e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c492:	2b05      	cmp	r3, #5
 800c494:	d801      	bhi.n	800c49a <__hexdig_fun+0x1a>
 800c496:	3847      	subs	r0, #71	; 0x47
 800c498:	e7f7      	b.n	800c48a <__hexdig_fun+0xa>
 800c49a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c49e:	2b05      	cmp	r3, #5
 800c4a0:	d801      	bhi.n	800c4a6 <__hexdig_fun+0x26>
 800c4a2:	3827      	subs	r0, #39	; 0x27
 800c4a4:	e7f1      	b.n	800c48a <__hexdig_fun+0xa>
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	4770      	bx	lr
	...

0800c4ac <__gethex>:
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	ed2d 8b02 	vpush	{d8}
 800c4b4:	b089      	sub	sp, #36	; 0x24
 800c4b6:	ee08 0a10 	vmov	s16, r0
 800c4ba:	9304      	str	r3, [sp, #16]
 800c4bc:	4bb4      	ldr	r3, [pc, #720]	; (800c790 <__gethex+0x2e4>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	9301      	str	r3, [sp, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	468b      	mov	fp, r1
 800c4c6:	4690      	mov	r8, r2
 800c4c8:	f7f3 fe92 	bl	80001f0 <strlen>
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	f8db 2000 	ldr.w	r2, [fp]
 800c4d2:	4403      	add	r3, r0
 800c4d4:	4682      	mov	sl, r0
 800c4d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c4da:	9305      	str	r3, [sp, #20]
 800c4dc:	1c93      	adds	r3, r2, #2
 800c4de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c4e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c4e6:	32fe      	adds	r2, #254	; 0xfe
 800c4e8:	18d1      	adds	r1, r2, r3
 800c4ea:	461f      	mov	r7, r3
 800c4ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c4f0:	9100      	str	r1, [sp, #0]
 800c4f2:	2830      	cmp	r0, #48	; 0x30
 800c4f4:	d0f8      	beq.n	800c4e8 <__gethex+0x3c>
 800c4f6:	f7ff ffc3 	bl	800c480 <__hexdig_fun>
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d13a      	bne.n	800c576 <__gethex+0xca>
 800c500:	9901      	ldr	r1, [sp, #4]
 800c502:	4652      	mov	r2, sl
 800c504:	4638      	mov	r0, r7
 800c506:	f001 fa23 	bl	800d950 <strncmp>
 800c50a:	4605      	mov	r5, r0
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d168      	bne.n	800c5e2 <__gethex+0x136>
 800c510:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c514:	eb07 060a 	add.w	r6, r7, sl
 800c518:	f7ff ffb2 	bl	800c480 <__hexdig_fun>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d062      	beq.n	800c5e6 <__gethex+0x13a>
 800c520:	4633      	mov	r3, r6
 800c522:	7818      	ldrb	r0, [r3, #0]
 800c524:	2830      	cmp	r0, #48	; 0x30
 800c526:	461f      	mov	r7, r3
 800c528:	f103 0301 	add.w	r3, r3, #1
 800c52c:	d0f9      	beq.n	800c522 <__gethex+0x76>
 800c52e:	f7ff ffa7 	bl	800c480 <__hexdig_fun>
 800c532:	2301      	movs	r3, #1
 800c534:	fab0 f480 	clz	r4, r0
 800c538:	0964      	lsrs	r4, r4, #5
 800c53a:	4635      	mov	r5, r6
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	463a      	mov	r2, r7
 800c540:	4616      	mov	r6, r2
 800c542:	3201      	adds	r2, #1
 800c544:	7830      	ldrb	r0, [r6, #0]
 800c546:	f7ff ff9b 	bl	800c480 <__hexdig_fun>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d1f8      	bne.n	800c540 <__gethex+0x94>
 800c54e:	9901      	ldr	r1, [sp, #4]
 800c550:	4652      	mov	r2, sl
 800c552:	4630      	mov	r0, r6
 800c554:	f001 f9fc 	bl	800d950 <strncmp>
 800c558:	b980      	cbnz	r0, 800c57c <__gethex+0xd0>
 800c55a:	b94d      	cbnz	r5, 800c570 <__gethex+0xc4>
 800c55c:	eb06 050a 	add.w	r5, r6, sl
 800c560:	462a      	mov	r2, r5
 800c562:	4616      	mov	r6, r2
 800c564:	3201      	adds	r2, #1
 800c566:	7830      	ldrb	r0, [r6, #0]
 800c568:	f7ff ff8a 	bl	800c480 <__hexdig_fun>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d1f8      	bne.n	800c562 <__gethex+0xb6>
 800c570:	1bad      	subs	r5, r5, r6
 800c572:	00ad      	lsls	r5, r5, #2
 800c574:	e004      	b.n	800c580 <__gethex+0xd4>
 800c576:	2400      	movs	r4, #0
 800c578:	4625      	mov	r5, r4
 800c57a:	e7e0      	b.n	800c53e <__gethex+0x92>
 800c57c:	2d00      	cmp	r5, #0
 800c57e:	d1f7      	bne.n	800c570 <__gethex+0xc4>
 800c580:	7833      	ldrb	r3, [r6, #0]
 800c582:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c586:	2b50      	cmp	r3, #80	; 0x50
 800c588:	d13b      	bne.n	800c602 <__gethex+0x156>
 800c58a:	7873      	ldrb	r3, [r6, #1]
 800c58c:	2b2b      	cmp	r3, #43	; 0x2b
 800c58e:	d02c      	beq.n	800c5ea <__gethex+0x13e>
 800c590:	2b2d      	cmp	r3, #45	; 0x2d
 800c592:	d02e      	beq.n	800c5f2 <__gethex+0x146>
 800c594:	1c71      	adds	r1, r6, #1
 800c596:	f04f 0900 	mov.w	r9, #0
 800c59a:	7808      	ldrb	r0, [r1, #0]
 800c59c:	f7ff ff70 	bl	800c480 <__hexdig_fun>
 800c5a0:	1e43      	subs	r3, r0, #1
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b18      	cmp	r3, #24
 800c5a6:	d82c      	bhi.n	800c602 <__gethex+0x156>
 800c5a8:	f1a0 0210 	sub.w	r2, r0, #16
 800c5ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5b0:	f7ff ff66 	bl	800c480 <__hexdig_fun>
 800c5b4:	1e43      	subs	r3, r0, #1
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b18      	cmp	r3, #24
 800c5ba:	d91d      	bls.n	800c5f8 <__gethex+0x14c>
 800c5bc:	f1b9 0f00 	cmp.w	r9, #0
 800c5c0:	d000      	beq.n	800c5c4 <__gethex+0x118>
 800c5c2:	4252      	negs	r2, r2
 800c5c4:	4415      	add	r5, r2
 800c5c6:	f8cb 1000 	str.w	r1, [fp]
 800c5ca:	b1e4      	cbz	r4, 800c606 <__gethex+0x15a>
 800c5cc:	9b00      	ldr	r3, [sp, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	bf14      	ite	ne
 800c5d2:	2700      	movne	r7, #0
 800c5d4:	2706      	moveq	r7, #6
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	b009      	add	sp, #36	; 0x24
 800c5da:	ecbd 8b02 	vpop	{d8}
 800c5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e2:	463e      	mov	r6, r7
 800c5e4:	4625      	mov	r5, r4
 800c5e6:	2401      	movs	r4, #1
 800c5e8:	e7ca      	b.n	800c580 <__gethex+0xd4>
 800c5ea:	f04f 0900 	mov.w	r9, #0
 800c5ee:	1cb1      	adds	r1, r6, #2
 800c5f0:	e7d3      	b.n	800c59a <__gethex+0xee>
 800c5f2:	f04f 0901 	mov.w	r9, #1
 800c5f6:	e7fa      	b.n	800c5ee <__gethex+0x142>
 800c5f8:	230a      	movs	r3, #10
 800c5fa:	fb03 0202 	mla	r2, r3, r2, r0
 800c5fe:	3a10      	subs	r2, #16
 800c600:	e7d4      	b.n	800c5ac <__gethex+0x100>
 800c602:	4631      	mov	r1, r6
 800c604:	e7df      	b.n	800c5c6 <__gethex+0x11a>
 800c606:	1bf3      	subs	r3, r6, r7
 800c608:	3b01      	subs	r3, #1
 800c60a:	4621      	mov	r1, r4
 800c60c:	2b07      	cmp	r3, #7
 800c60e:	dc0b      	bgt.n	800c628 <__gethex+0x17c>
 800c610:	ee18 0a10 	vmov	r0, s16
 800c614:	f000 fa70 	bl	800caf8 <_Balloc>
 800c618:	4604      	mov	r4, r0
 800c61a:	b940      	cbnz	r0, 800c62e <__gethex+0x182>
 800c61c:	4b5d      	ldr	r3, [pc, #372]	; (800c794 <__gethex+0x2e8>)
 800c61e:	4602      	mov	r2, r0
 800c620:	21de      	movs	r1, #222	; 0xde
 800c622:	485d      	ldr	r0, [pc, #372]	; (800c798 <__gethex+0x2ec>)
 800c624:	f001 f9b6 	bl	800d994 <__assert_func>
 800c628:	3101      	adds	r1, #1
 800c62a:	105b      	asrs	r3, r3, #1
 800c62c:	e7ee      	b.n	800c60c <__gethex+0x160>
 800c62e:	f100 0914 	add.w	r9, r0, #20
 800c632:	f04f 0b00 	mov.w	fp, #0
 800c636:	f1ca 0301 	rsb	r3, sl, #1
 800c63a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c63e:	f8cd b000 	str.w	fp, [sp]
 800c642:	9306      	str	r3, [sp, #24]
 800c644:	42b7      	cmp	r7, r6
 800c646:	d340      	bcc.n	800c6ca <__gethex+0x21e>
 800c648:	9802      	ldr	r0, [sp, #8]
 800c64a:	9b00      	ldr	r3, [sp, #0]
 800c64c:	f840 3b04 	str.w	r3, [r0], #4
 800c650:	eba0 0009 	sub.w	r0, r0, r9
 800c654:	1080      	asrs	r0, r0, #2
 800c656:	0146      	lsls	r6, r0, #5
 800c658:	6120      	str	r0, [r4, #16]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fb3e 	bl	800ccdc <__hi0bits>
 800c660:	1a30      	subs	r0, r6, r0
 800c662:	f8d8 6000 	ldr.w	r6, [r8]
 800c666:	42b0      	cmp	r0, r6
 800c668:	dd63      	ble.n	800c732 <__gethex+0x286>
 800c66a:	1b87      	subs	r7, r0, r6
 800c66c:	4639      	mov	r1, r7
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 fee2 	bl	800d438 <__any_on>
 800c674:	4682      	mov	sl, r0
 800c676:	b1a8      	cbz	r0, 800c6a4 <__gethex+0x1f8>
 800c678:	1e7b      	subs	r3, r7, #1
 800c67a:	1159      	asrs	r1, r3, #5
 800c67c:	f003 021f 	and.w	r2, r3, #31
 800c680:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c684:	f04f 0a01 	mov.w	sl, #1
 800c688:	fa0a f202 	lsl.w	r2, sl, r2
 800c68c:	420a      	tst	r2, r1
 800c68e:	d009      	beq.n	800c6a4 <__gethex+0x1f8>
 800c690:	4553      	cmp	r3, sl
 800c692:	dd05      	ble.n	800c6a0 <__gethex+0x1f4>
 800c694:	1eb9      	subs	r1, r7, #2
 800c696:	4620      	mov	r0, r4
 800c698:	f000 fece 	bl	800d438 <__any_on>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d145      	bne.n	800c72c <__gethex+0x280>
 800c6a0:	f04f 0a02 	mov.w	sl, #2
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f7ff fe98 	bl	800c3dc <rshift>
 800c6ac:	443d      	add	r5, r7
 800c6ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6b2:	42ab      	cmp	r3, r5
 800c6b4:	da4c      	bge.n	800c750 <__gethex+0x2a4>
 800c6b6:	ee18 0a10 	vmov	r0, s16
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	f000 fa5c 	bl	800cb78 <_Bfree>
 800c6c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	27a3      	movs	r7, #163	; 0xa3
 800c6c8:	e785      	b.n	800c5d6 <__gethex+0x12a>
 800c6ca:	1e73      	subs	r3, r6, #1
 800c6cc:	9a05      	ldr	r2, [sp, #20]
 800c6ce:	9303      	str	r3, [sp, #12]
 800c6d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d019      	beq.n	800c70c <__gethex+0x260>
 800c6d8:	f1bb 0f20 	cmp.w	fp, #32
 800c6dc:	d107      	bne.n	800c6ee <__gethex+0x242>
 800c6de:	9b02      	ldr	r3, [sp, #8]
 800c6e0:	9a00      	ldr	r2, [sp, #0]
 800c6e2:	f843 2b04 	str.w	r2, [r3], #4
 800c6e6:	9302      	str	r3, [sp, #8]
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	469b      	mov	fp, r3
 800c6ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c6f2:	f7ff fec5 	bl	800c480 <__hexdig_fun>
 800c6f6:	9b00      	ldr	r3, [sp, #0]
 800c6f8:	f000 000f 	and.w	r0, r0, #15
 800c6fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c700:	4303      	orrs	r3, r0
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	f10b 0b04 	add.w	fp, fp, #4
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	e00d      	b.n	800c728 <__gethex+0x27c>
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	9a06      	ldr	r2, [sp, #24]
 800c710:	4413      	add	r3, r2
 800c712:	42bb      	cmp	r3, r7
 800c714:	d3e0      	bcc.n	800c6d8 <__gethex+0x22c>
 800c716:	4618      	mov	r0, r3
 800c718:	9901      	ldr	r1, [sp, #4]
 800c71a:	9307      	str	r3, [sp, #28]
 800c71c:	4652      	mov	r2, sl
 800c71e:	f001 f917 	bl	800d950 <strncmp>
 800c722:	9b07      	ldr	r3, [sp, #28]
 800c724:	2800      	cmp	r0, #0
 800c726:	d1d7      	bne.n	800c6d8 <__gethex+0x22c>
 800c728:	461e      	mov	r6, r3
 800c72a:	e78b      	b.n	800c644 <__gethex+0x198>
 800c72c:	f04f 0a03 	mov.w	sl, #3
 800c730:	e7b8      	b.n	800c6a4 <__gethex+0x1f8>
 800c732:	da0a      	bge.n	800c74a <__gethex+0x29e>
 800c734:	1a37      	subs	r7, r6, r0
 800c736:	4621      	mov	r1, r4
 800c738:	ee18 0a10 	vmov	r0, s16
 800c73c:	463a      	mov	r2, r7
 800c73e:	f000 fc37 	bl	800cfb0 <__lshift>
 800c742:	1bed      	subs	r5, r5, r7
 800c744:	4604      	mov	r4, r0
 800c746:	f100 0914 	add.w	r9, r0, #20
 800c74a:	f04f 0a00 	mov.w	sl, #0
 800c74e:	e7ae      	b.n	800c6ae <__gethex+0x202>
 800c750:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c754:	42a8      	cmp	r0, r5
 800c756:	dd72      	ble.n	800c83e <__gethex+0x392>
 800c758:	1b45      	subs	r5, r0, r5
 800c75a:	42ae      	cmp	r6, r5
 800c75c:	dc36      	bgt.n	800c7cc <__gethex+0x320>
 800c75e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c762:	2b02      	cmp	r3, #2
 800c764:	d02a      	beq.n	800c7bc <__gethex+0x310>
 800c766:	2b03      	cmp	r3, #3
 800c768:	d02c      	beq.n	800c7c4 <__gethex+0x318>
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d11c      	bne.n	800c7a8 <__gethex+0x2fc>
 800c76e:	42ae      	cmp	r6, r5
 800c770:	d11a      	bne.n	800c7a8 <__gethex+0x2fc>
 800c772:	2e01      	cmp	r6, #1
 800c774:	d112      	bne.n	800c79c <__gethex+0x2f0>
 800c776:	9a04      	ldr	r2, [sp, #16]
 800c778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c77c:	6013      	str	r3, [r2, #0]
 800c77e:	2301      	movs	r3, #1
 800c780:	6123      	str	r3, [r4, #16]
 800c782:	f8c9 3000 	str.w	r3, [r9]
 800c786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c788:	2762      	movs	r7, #98	; 0x62
 800c78a:	601c      	str	r4, [r3, #0]
 800c78c:	e723      	b.n	800c5d6 <__gethex+0x12a>
 800c78e:	bf00      	nop
 800c790:	0800e848 	.word	0x0800e848
 800c794:	0800e7d0 	.word	0x0800e7d0
 800c798:	0800e7e1 	.word	0x0800e7e1
 800c79c:	1e71      	subs	r1, r6, #1
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 fe4a 	bl	800d438 <__any_on>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d1e6      	bne.n	800c776 <__gethex+0x2ca>
 800c7a8:	ee18 0a10 	vmov	r0, s16
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	f000 f9e3 	bl	800cb78 <_Bfree>
 800c7b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	2750      	movs	r7, #80	; 0x50
 800c7ba:	e70c      	b.n	800c5d6 <__gethex+0x12a>
 800c7bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1f2      	bne.n	800c7a8 <__gethex+0x2fc>
 800c7c2:	e7d8      	b.n	800c776 <__gethex+0x2ca>
 800c7c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1d5      	bne.n	800c776 <__gethex+0x2ca>
 800c7ca:	e7ed      	b.n	800c7a8 <__gethex+0x2fc>
 800c7cc:	1e6f      	subs	r7, r5, #1
 800c7ce:	f1ba 0f00 	cmp.w	sl, #0
 800c7d2:	d131      	bne.n	800c838 <__gethex+0x38c>
 800c7d4:	b127      	cbz	r7, 800c7e0 <__gethex+0x334>
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 fe2d 	bl	800d438 <__any_on>
 800c7de:	4682      	mov	sl, r0
 800c7e0:	117b      	asrs	r3, r7, #5
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c7e8:	f007 071f 	and.w	r7, r7, #31
 800c7ec:	fa01 f707 	lsl.w	r7, r1, r7
 800c7f0:	421f      	tst	r7, r3
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	bf18      	it	ne
 800c7f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c7fc:	1b76      	subs	r6, r6, r5
 800c7fe:	f7ff fded 	bl	800c3dc <rshift>
 800c802:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c806:	2702      	movs	r7, #2
 800c808:	f1ba 0f00 	cmp.w	sl, #0
 800c80c:	d048      	beq.n	800c8a0 <__gethex+0x3f4>
 800c80e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c812:	2b02      	cmp	r3, #2
 800c814:	d015      	beq.n	800c842 <__gethex+0x396>
 800c816:	2b03      	cmp	r3, #3
 800c818:	d017      	beq.n	800c84a <__gethex+0x39e>
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d109      	bne.n	800c832 <__gethex+0x386>
 800c81e:	f01a 0f02 	tst.w	sl, #2
 800c822:	d006      	beq.n	800c832 <__gethex+0x386>
 800c824:	f8d9 0000 	ldr.w	r0, [r9]
 800c828:	ea4a 0a00 	orr.w	sl, sl, r0
 800c82c:	f01a 0f01 	tst.w	sl, #1
 800c830:	d10e      	bne.n	800c850 <__gethex+0x3a4>
 800c832:	f047 0710 	orr.w	r7, r7, #16
 800c836:	e033      	b.n	800c8a0 <__gethex+0x3f4>
 800c838:	f04f 0a01 	mov.w	sl, #1
 800c83c:	e7d0      	b.n	800c7e0 <__gethex+0x334>
 800c83e:	2701      	movs	r7, #1
 800c840:	e7e2      	b.n	800c808 <__gethex+0x35c>
 800c842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c844:	f1c3 0301 	rsb	r3, r3, #1
 800c848:	9315      	str	r3, [sp, #84]	; 0x54
 800c84a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d0f0      	beq.n	800c832 <__gethex+0x386>
 800c850:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c854:	f104 0314 	add.w	r3, r4, #20
 800c858:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c85c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c860:	f04f 0c00 	mov.w	ip, #0
 800c864:	4618      	mov	r0, r3
 800c866:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c86e:	d01c      	beq.n	800c8aa <__gethex+0x3fe>
 800c870:	3201      	adds	r2, #1
 800c872:	6002      	str	r2, [r0, #0]
 800c874:	2f02      	cmp	r7, #2
 800c876:	f104 0314 	add.w	r3, r4, #20
 800c87a:	d13f      	bne.n	800c8fc <__gethex+0x450>
 800c87c:	f8d8 2000 	ldr.w	r2, [r8]
 800c880:	3a01      	subs	r2, #1
 800c882:	42b2      	cmp	r2, r6
 800c884:	d10a      	bne.n	800c89c <__gethex+0x3f0>
 800c886:	1171      	asrs	r1, r6, #5
 800c888:	2201      	movs	r2, #1
 800c88a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c88e:	f006 061f 	and.w	r6, r6, #31
 800c892:	fa02 f606 	lsl.w	r6, r2, r6
 800c896:	421e      	tst	r6, r3
 800c898:	bf18      	it	ne
 800c89a:	4617      	movne	r7, r2
 800c89c:	f047 0720 	orr.w	r7, r7, #32
 800c8a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8a2:	601c      	str	r4, [r3, #0]
 800c8a4:	9b04      	ldr	r3, [sp, #16]
 800c8a6:	601d      	str	r5, [r3, #0]
 800c8a8:	e695      	b.n	800c5d6 <__gethex+0x12a>
 800c8aa:	4299      	cmp	r1, r3
 800c8ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8b0:	d8d8      	bhi.n	800c864 <__gethex+0x3b8>
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	459b      	cmp	fp, r3
 800c8b6:	db19      	blt.n	800c8ec <__gethex+0x440>
 800c8b8:	6861      	ldr	r1, [r4, #4]
 800c8ba:	ee18 0a10 	vmov	r0, s16
 800c8be:	3101      	adds	r1, #1
 800c8c0:	f000 f91a 	bl	800caf8 <_Balloc>
 800c8c4:	4681      	mov	r9, r0
 800c8c6:	b918      	cbnz	r0, 800c8d0 <__gethex+0x424>
 800c8c8:	4b1a      	ldr	r3, [pc, #104]	; (800c934 <__gethex+0x488>)
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	2184      	movs	r1, #132	; 0x84
 800c8ce:	e6a8      	b.n	800c622 <__gethex+0x176>
 800c8d0:	6922      	ldr	r2, [r4, #16]
 800c8d2:	3202      	adds	r2, #2
 800c8d4:	f104 010c 	add.w	r1, r4, #12
 800c8d8:	0092      	lsls	r2, r2, #2
 800c8da:	300c      	adds	r0, #12
 800c8dc:	f7fd f980 	bl	8009be0 <memcpy>
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	ee18 0a10 	vmov	r0, s16
 800c8e6:	f000 f947 	bl	800cb78 <_Bfree>
 800c8ea:	464c      	mov	r4, r9
 800c8ec:	6923      	ldr	r3, [r4, #16]
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8f4:	6122      	str	r2, [r4, #16]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	615a      	str	r2, [r3, #20]
 800c8fa:	e7bb      	b.n	800c874 <__gethex+0x3c8>
 800c8fc:	6922      	ldr	r2, [r4, #16]
 800c8fe:	455a      	cmp	r2, fp
 800c900:	dd0b      	ble.n	800c91a <__gethex+0x46e>
 800c902:	2101      	movs	r1, #1
 800c904:	4620      	mov	r0, r4
 800c906:	f7ff fd69 	bl	800c3dc <rshift>
 800c90a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c90e:	3501      	adds	r5, #1
 800c910:	42ab      	cmp	r3, r5
 800c912:	f6ff aed0 	blt.w	800c6b6 <__gethex+0x20a>
 800c916:	2701      	movs	r7, #1
 800c918:	e7c0      	b.n	800c89c <__gethex+0x3f0>
 800c91a:	f016 061f 	ands.w	r6, r6, #31
 800c91e:	d0fa      	beq.n	800c916 <__gethex+0x46a>
 800c920:	4453      	add	r3, sl
 800c922:	f1c6 0620 	rsb	r6, r6, #32
 800c926:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c92a:	f000 f9d7 	bl	800ccdc <__hi0bits>
 800c92e:	42b0      	cmp	r0, r6
 800c930:	dbe7      	blt.n	800c902 <__gethex+0x456>
 800c932:	e7f0      	b.n	800c916 <__gethex+0x46a>
 800c934:	0800e7d0 	.word	0x0800e7d0

0800c938 <L_shift>:
 800c938:	f1c2 0208 	rsb	r2, r2, #8
 800c93c:	0092      	lsls	r2, r2, #2
 800c93e:	b570      	push	{r4, r5, r6, lr}
 800c940:	f1c2 0620 	rsb	r6, r2, #32
 800c944:	6843      	ldr	r3, [r0, #4]
 800c946:	6804      	ldr	r4, [r0, #0]
 800c948:	fa03 f506 	lsl.w	r5, r3, r6
 800c94c:	432c      	orrs	r4, r5
 800c94e:	40d3      	lsrs	r3, r2
 800c950:	6004      	str	r4, [r0, #0]
 800c952:	f840 3f04 	str.w	r3, [r0, #4]!
 800c956:	4288      	cmp	r0, r1
 800c958:	d3f4      	bcc.n	800c944 <L_shift+0xc>
 800c95a:	bd70      	pop	{r4, r5, r6, pc}

0800c95c <__match>:
 800c95c:	b530      	push	{r4, r5, lr}
 800c95e:	6803      	ldr	r3, [r0, #0]
 800c960:	3301      	adds	r3, #1
 800c962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c966:	b914      	cbnz	r4, 800c96e <__match+0x12>
 800c968:	6003      	str	r3, [r0, #0]
 800c96a:	2001      	movs	r0, #1
 800c96c:	bd30      	pop	{r4, r5, pc}
 800c96e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c972:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c976:	2d19      	cmp	r5, #25
 800c978:	bf98      	it	ls
 800c97a:	3220      	addls	r2, #32
 800c97c:	42a2      	cmp	r2, r4
 800c97e:	d0f0      	beq.n	800c962 <__match+0x6>
 800c980:	2000      	movs	r0, #0
 800c982:	e7f3      	b.n	800c96c <__match+0x10>

0800c984 <__hexnan>:
 800c984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c988:	680b      	ldr	r3, [r1, #0]
 800c98a:	115e      	asrs	r6, r3, #5
 800c98c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c990:	f013 031f 	ands.w	r3, r3, #31
 800c994:	b087      	sub	sp, #28
 800c996:	bf18      	it	ne
 800c998:	3604      	addne	r6, #4
 800c99a:	2500      	movs	r5, #0
 800c99c:	1f37      	subs	r7, r6, #4
 800c99e:	4690      	mov	r8, r2
 800c9a0:	6802      	ldr	r2, [r0, #0]
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	4682      	mov	sl, r0
 800c9a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9aa:	46b9      	mov	r9, r7
 800c9ac:	463c      	mov	r4, r7
 800c9ae:	9502      	str	r5, [sp, #8]
 800c9b0:	46ab      	mov	fp, r5
 800c9b2:	7851      	ldrb	r1, [r2, #1]
 800c9b4:	1c53      	adds	r3, r2, #1
 800c9b6:	9303      	str	r3, [sp, #12]
 800c9b8:	b341      	cbz	r1, 800ca0c <__hexnan+0x88>
 800c9ba:	4608      	mov	r0, r1
 800c9bc:	9205      	str	r2, [sp, #20]
 800c9be:	9104      	str	r1, [sp, #16]
 800c9c0:	f7ff fd5e 	bl	800c480 <__hexdig_fun>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d14f      	bne.n	800ca68 <__hexnan+0xe4>
 800c9c8:	9904      	ldr	r1, [sp, #16]
 800c9ca:	9a05      	ldr	r2, [sp, #20]
 800c9cc:	2920      	cmp	r1, #32
 800c9ce:	d818      	bhi.n	800ca02 <__hexnan+0x7e>
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	459b      	cmp	fp, r3
 800c9d4:	dd13      	ble.n	800c9fe <__hexnan+0x7a>
 800c9d6:	454c      	cmp	r4, r9
 800c9d8:	d206      	bcs.n	800c9e8 <__hexnan+0x64>
 800c9da:	2d07      	cmp	r5, #7
 800c9dc:	dc04      	bgt.n	800c9e8 <__hexnan+0x64>
 800c9de:	462a      	mov	r2, r5
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f7ff ffa8 	bl	800c938 <L_shift>
 800c9e8:	4544      	cmp	r4, r8
 800c9ea:	d950      	bls.n	800ca8e <__hexnan+0x10a>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f1a4 0904 	sub.w	r9, r4, #4
 800c9f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9f6:	f8cd b008 	str.w	fp, [sp, #8]
 800c9fa:	464c      	mov	r4, r9
 800c9fc:	461d      	mov	r5, r3
 800c9fe:	9a03      	ldr	r2, [sp, #12]
 800ca00:	e7d7      	b.n	800c9b2 <__hexnan+0x2e>
 800ca02:	2929      	cmp	r1, #41	; 0x29
 800ca04:	d156      	bne.n	800cab4 <__hexnan+0x130>
 800ca06:	3202      	adds	r2, #2
 800ca08:	f8ca 2000 	str.w	r2, [sl]
 800ca0c:	f1bb 0f00 	cmp.w	fp, #0
 800ca10:	d050      	beq.n	800cab4 <__hexnan+0x130>
 800ca12:	454c      	cmp	r4, r9
 800ca14:	d206      	bcs.n	800ca24 <__hexnan+0xa0>
 800ca16:	2d07      	cmp	r5, #7
 800ca18:	dc04      	bgt.n	800ca24 <__hexnan+0xa0>
 800ca1a:	462a      	mov	r2, r5
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f7ff ff8a 	bl	800c938 <L_shift>
 800ca24:	4544      	cmp	r4, r8
 800ca26:	d934      	bls.n	800ca92 <__hexnan+0x10e>
 800ca28:	f1a8 0204 	sub.w	r2, r8, #4
 800ca2c:	4623      	mov	r3, r4
 800ca2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca32:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca36:	429f      	cmp	r7, r3
 800ca38:	d2f9      	bcs.n	800ca2e <__hexnan+0xaa>
 800ca3a:	1b3b      	subs	r3, r7, r4
 800ca3c:	f023 0303 	bic.w	r3, r3, #3
 800ca40:	3304      	adds	r3, #4
 800ca42:	3401      	adds	r4, #1
 800ca44:	3e03      	subs	r6, #3
 800ca46:	42b4      	cmp	r4, r6
 800ca48:	bf88      	it	hi
 800ca4a:	2304      	movhi	r3, #4
 800ca4c:	4443      	add	r3, r8
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f843 2b04 	str.w	r2, [r3], #4
 800ca54:	429f      	cmp	r7, r3
 800ca56:	d2fb      	bcs.n	800ca50 <__hexnan+0xcc>
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	b91b      	cbnz	r3, 800ca64 <__hexnan+0xe0>
 800ca5c:	4547      	cmp	r7, r8
 800ca5e:	d127      	bne.n	800cab0 <__hexnan+0x12c>
 800ca60:	2301      	movs	r3, #1
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	2005      	movs	r0, #5
 800ca66:	e026      	b.n	800cab6 <__hexnan+0x132>
 800ca68:	3501      	adds	r5, #1
 800ca6a:	2d08      	cmp	r5, #8
 800ca6c:	f10b 0b01 	add.w	fp, fp, #1
 800ca70:	dd06      	ble.n	800ca80 <__hexnan+0xfc>
 800ca72:	4544      	cmp	r4, r8
 800ca74:	d9c3      	bls.n	800c9fe <__hexnan+0x7a>
 800ca76:	2300      	movs	r3, #0
 800ca78:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca7c:	2501      	movs	r5, #1
 800ca7e:	3c04      	subs	r4, #4
 800ca80:	6822      	ldr	r2, [r4, #0]
 800ca82:	f000 000f 	and.w	r0, r0, #15
 800ca86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ca8a:	6022      	str	r2, [r4, #0]
 800ca8c:	e7b7      	b.n	800c9fe <__hexnan+0x7a>
 800ca8e:	2508      	movs	r5, #8
 800ca90:	e7b5      	b.n	800c9fe <__hexnan+0x7a>
 800ca92:	9b01      	ldr	r3, [sp, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d0df      	beq.n	800ca58 <__hexnan+0xd4>
 800ca98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca9c:	f1c3 0320 	rsb	r3, r3, #32
 800caa0:	fa22 f303 	lsr.w	r3, r2, r3
 800caa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800caa8:	401a      	ands	r2, r3
 800caaa:	f846 2c04 	str.w	r2, [r6, #-4]
 800caae:	e7d3      	b.n	800ca58 <__hexnan+0xd4>
 800cab0:	3f04      	subs	r7, #4
 800cab2:	e7d1      	b.n	800ca58 <__hexnan+0xd4>
 800cab4:	2004      	movs	r0, #4
 800cab6:	b007      	add	sp, #28
 800cab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cabc <_localeconv_r>:
 800cabc:	4800      	ldr	r0, [pc, #0]	; (800cac0 <_localeconv_r+0x4>)
 800cabe:	4770      	bx	lr
 800cac0:	20000210 	.word	0x20000210

0800cac4 <malloc>:
 800cac4:	4b02      	ldr	r3, [pc, #8]	; (800cad0 <malloc+0xc>)
 800cac6:	4601      	mov	r1, r0
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	f000 bd59 	b.w	800d580 <_malloc_r>
 800cace:	bf00      	nop
 800cad0:	200000b8 	.word	0x200000b8

0800cad4 <__ascii_mbtowc>:
 800cad4:	b082      	sub	sp, #8
 800cad6:	b901      	cbnz	r1, 800cada <__ascii_mbtowc+0x6>
 800cad8:	a901      	add	r1, sp, #4
 800cada:	b142      	cbz	r2, 800caee <__ascii_mbtowc+0x1a>
 800cadc:	b14b      	cbz	r3, 800caf2 <__ascii_mbtowc+0x1e>
 800cade:	7813      	ldrb	r3, [r2, #0]
 800cae0:	600b      	str	r3, [r1, #0]
 800cae2:	7812      	ldrb	r2, [r2, #0]
 800cae4:	1e10      	subs	r0, r2, #0
 800cae6:	bf18      	it	ne
 800cae8:	2001      	movne	r0, #1
 800caea:	b002      	add	sp, #8
 800caec:	4770      	bx	lr
 800caee:	4610      	mov	r0, r2
 800caf0:	e7fb      	b.n	800caea <__ascii_mbtowc+0x16>
 800caf2:	f06f 0001 	mvn.w	r0, #1
 800caf6:	e7f8      	b.n	800caea <__ascii_mbtowc+0x16>

0800caf8 <_Balloc>:
 800caf8:	b570      	push	{r4, r5, r6, lr}
 800cafa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cafc:	4604      	mov	r4, r0
 800cafe:	460d      	mov	r5, r1
 800cb00:	b976      	cbnz	r6, 800cb20 <_Balloc+0x28>
 800cb02:	2010      	movs	r0, #16
 800cb04:	f7ff ffde 	bl	800cac4 <malloc>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	6260      	str	r0, [r4, #36]	; 0x24
 800cb0c:	b920      	cbnz	r0, 800cb18 <_Balloc+0x20>
 800cb0e:	4b18      	ldr	r3, [pc, #96]	; (800cb70 <_Balloc+0x78>)
 800cb10:	4818      	ldr	r0, [pc, #96]	; (800cb74 <_Balloc+0x7c>)
 800cb12:	2166      	movs	r1, #102	; 0x66
 800cb14:	f000 ff3e 	bl	800d994 <__assert_func>
 800cb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb1c:	6006      	str	r6, [r0, #0]
 800cb1e:	60c6      	str	r6, [r0, #12]
 800cb20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb22:	68f3      	ldr	r3, [r6, #12]
 800cb24:	b183      	cbz	r3, 800cb48 <_Balloc+0x50>
 800cb26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb2e:	b9b8      	cbnz	r0, 800cb60 <_Balloc+0x68>
 800cb30:	2101      	movs	r1, #1
 800cb32:	fa01 f605 	lsl.w	r6, r1, r5
 800cb36:	1d72      	adds	r2, r6, #5
 800cb38:	0092      	lsls	r2, r2, #2
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f000 fc9d 	bl	800d47a <_calloc_r>
 800cb40:	b160      	cbz	r0, 800cb5c <_Balloc+0x64>
 800cb42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb46:	e00e      	b.n	800cb66 <_Balloc+0x6e>
 800cb48:	2221      	movs	r2, #33	; 0x21
 800cb4a:	2104      	movs	r1, #4
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f000 fc94 	bl	800d47a <_calloc_r>
 800cb52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb54:	60f0      	str	r0, [r6, #12]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1e4      	bne.n	800cb26 <_Balloc+0x2e>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	bd70      	pop	{r4, r5, r6, pc}
 800cb60:	6802      	ldr	r2, [r0, #0]
 800cb62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb66:	2300      	movs	r3, #0
 800cb68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb6c:	e7f7      	b.n	800cb5e <_Balloc+0x66>
 800cb6e:	bf00      	nop
 800cb70:	0800e75e 	.word	0x0800e75e
 800cb74:	0800e85c 	.word	0x0800e85c

0800cb78 <_Bfree>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	460c      	mov	r4, r1
 800cb80:	b976      	cbnz	r6, 800cba0 <_Bfree+0x28>
 800cb82:	2010      	movs	r0, #16
 800cb84:	f7ff ff9e 	bl	800cac4 <malloc>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6268      	str	r0, [r5, #36]	; 0x24
 800cb8c:	b920      	cbnz	r0, 800cb98 <_Bfree+0x20>
 800cb8e:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <_Bfree+0x3c>)
 800cb90:	4809      	ldr	r0, [pc, #36]	; (800cbb8 <_Bfree+0x40>)
 800cb92:	218a      	movs	r1, #138	; 0x8a
 800cb94:	f000 fefe 	bl	800d994 <__assert_func>
 800cb98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb9c:	6006      	str	r6, [r0, #0]
 800cb9e:	60c6      	str	r6, [r0, #12]
 800cba0:	b13c      	cbz	r4, 800cbb2 <_Bfree+0x3a>
 800cba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cba4:	6862      	ldr	r2, [r4, #4]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbac:	6021      	str	r1, [r4, #0]
 800cbae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
 800cbb4:	0800e75e 	.word	0x0800e75e
 800cbb8:	0800e85c 	.word	0x0800e85c

0800cbbc <__multadd>:
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc0:	690d      	ldr	r5, [r1, #16]
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	461e      	mov	r6, r3
 800cbc8:	f101 0c14 	add.w	ip, r1, #20
 800cbcc:	2000      	movs	r0, #0
 800cbce:	f8dc 3000 	ldr.w	r3, [ip]
 800cbd2:	b299      	uxth	r1, r3
 800cbd4:	fb02 6101 	mla	r1, r2, r1, r6
 800cbd8:	0c1e      	lsrs	r6, r3, #16
 800cbda:	0c0b      	lsrs	r3, r1, #16
 800cbdc:	fb02 3306 	mla	r3, r2, r6, r3
 800cbe0:	b289      	uxth	r1, r1
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbe8:	4285      	cmp	r5, r0
 800cbea:	f84c 1b04 	str.w	r1, [ip], #4
 800cbee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbf2:	dcec      	bgt.n	800cbce <__multadd+0x12>
 800cbf4:	b30e      	cbz	r6, 800cc3a <__multadd+0x7e>
 800cbf6:	68a3      	ldr	r3, [r4, #8]
 800cbf8:	42ab      	cmp	r3, r5
 800cbfa:	dc19      	bgt.n	800cc30 <__multadd+0x74>
 800cbfc:	6861      	ldr	r1, [r4, #4]
 800cbfe:	4638      	mov	r0, r7
 800cc00:	3101      	adds	r1, #1
 800cc02:	f7ff ff79 	bl	800caf8 <_Balloc>
 800cc06:	4680      	mov	r8, r0
 800cc08:	b928      	cbnz	r0, 800cc16 <__multadd+0x5a>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	4b0c      	ldr	r3, [pc, #48]	; (800cc40 <__multadd+0x84>)
 800cc0e:	480d      	ldr	r0, [pc, #52]	; (800cc44 <__multadd+0x88>)
 800cc10:	21b5      	movs	r1, #181	; 0xb5
 800cc12:	f000 febf 	bl	800d994 <__assert_func>
 800cc16:	6922      	ldr	r2, [r4, #16]
 800cc18:	3202      	adds	r2, #2
 800cc1a:	f104 010c 	add.w	r1, r4, #12
 800cc1e:	0092      	lsls	r2, r2, #2
 800cc20:	300c      	adds	r0, #12
 800cc22:	f7fc ffdd 	bl	8009be0 <memcpy>
 800cc26:	4621      	mov	r1, r4
 800cc28:	4638      	mov	r0, r7
 800cc2a:	f7ff ffa5 	bl	800cb78 <_Bfree>
 800cc2e:	4644      	mov	r4, r8
 800cc30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc34:	3501      	adds	r5, #1
 800cc36:	615e      	str	r6, [r3, #20]
 800cc38:	6125      	str	r5, [r4, #16]
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc40:	0800e7d0 	.word	0x0800e7d0
 800cc44:	0800e85c 	.word	0x0800e85c

0800cc48 <__s2b>:
 800cc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc4c:	460c      	mov	r4, r1
 800cc4e:	4615      	mov	r5, r2
 800cc50:	461f      	mov	r7, r3
 800cc52:	2209      	movs	r2, #9
 800cc54:	3308      	adds	r3, #8
 800cc56:	4606      	mov	r6, r0
 800cc58:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	2201      	movs	r2, #1
 800cc60:	429a      	cmp	r2, r3
 800cc62:	db09      	blt.n	800cc78 <__s2b+0x30>
 800cc64:	4630      	mov	r0, r6
 800cc66:	f7ff ff47 	bl	800caf8 <_Balloc>
 800cc6a:	b940      	cbnz	r0, 800cc7e <__s2b+0x36>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	4b19      	ldr	r3, [pc, #100]	; (800ccd4 <__s2b+0x8c>)
 800cc70:	4819      	ldr	r0, [pc, #100]	; (800ccd8 <__s2b+0x90>)
 800cc72:	21ce      	movs	r1, #206	; 0xce
 800cc74:	f000 fe8e 	bl	800d994 <__assert_func>
 800cc78:	0052      	lsls	r2, r2, #1
 800cc7a:	3101      	adds	r1, #1
 800cc7c:	e7f0      	b.n	800cc60 <__s2b+0x18>
 800cc7e:	9b08      	ldr	r3, [sp, #32]
 800cc80:	6143      	str	r3, [r0, #20]
 800cc82:	2d09      	cmp	r5, #9
 800cc84:	f04f 0301 	mov.w	r3, #1
 800cc88:	6103      	str	r3, [r0, #16]
 800cc8a:	dd16      	ble.n	800ccba <__s2b+0x72>
 800cc8c:	f104 0909 	add.w	r9, r4, #9
 800cc90:	46c8      	mov	r8, r9
 800cc92:	442c      	add	r4, r5
 800cc94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc98:	4601      	mov	r1, r0
 800cc9a:	3b30      	subs	r3, #48	; 0x30
 800cc9c:	220a      	movs	r2, #10
 800cc9e:	4630      	mov	r0, r6
 800cca0:	f7ff ff8c 	bl	800cbbc <__multadd>
 800cca4:	45a0      	cmp	r8, r4
 800cca6:	d1f5      	bne.n	800cc94 <__s2b+0x4c>
 800cca8:	f1a5 0408 	sub.w	r4, r5, #8
 800ccac:	444c      	add	r4, r9
 800ccae:	1b2d      	subs	r5, r5, r4
 800ccb0:	1963      	adds	r3, r4, r5
 800ccb2:	42bb      	cmp	r3, r7
 800ccb4:	db04      	blt.n	800ccc0 <__s2b+0x78>
 800ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccba:	340a      	adds	r4, #10
 800ccbc:	2509      	movs	r5, #9
 800ccbe:	e7f6      	b.n	800ccae <__s2b+0x66>
 800ccc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccc4:	4601      	mov	r1, r0
 800ccc6:	3b30      	subs	r3, #48	; 0x30
 800ccc8:	220a      	movs	r2, #10
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7ff ff76 	bl	800cbbc <__multadd>
 800ccd0:	e7ee      	b.n	800ccb0 <__s2b+0x68>
 800ccd2:	bf00      	nop
 800ccd4:	0800e7d0 	.word	0x0800e7d0
 800ccd8:	0800e85c 	.word	0x0800e85c

0800ccdc <__hi0bits>:
 800ccdc:	0c03      	lsrs	r3, r0, #16
 800ccde:	041b      	lsls	r3, r3, #16
 800cce0:	b9d3      	cbnz	r3, 800cd18 <__hi0bits+0x3c>
 800cce2:	0400      	lsls	r0, r0, #16
 800cce4:	2310      	movs	r3, #16
 800cce6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ccea:	bf04      	itt	eq
 800ccec:	0200      	lsleq	r0, r0, #8
 800ccee:	3308      	addeq	r3, #8
 800ccf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ccf4:	bf04      	itt	eq
 800ccf6:	0100      	lsleq	r0, r0, #4
 800ccf8:	3304      	addeq	r3, #4
 800ccfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ccfe:	bf04      	itt	eq
 800cd00:	0080      	lsleq	r0, r0, #2
 800cd02:	3302      	addeq	r3, #2
 800cd04:	2800      	cmp	r0, #0
 800cd06:	db05      	blt.n	800cd14 <__hi0bits+0x38>
 800cd08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cd0c:	f103 0301 	add.w	r3, r3, #1
 800cd10:	bf08      	it	eq
 800cd12:	2320      	moveq	r3, #32
 800cd14:	4618      	mov	r0, r3
 800cd16:	4770      	bx	lr
 800cd18:	2300      	movs	r3, #0
 800cd1a:	e7e4      	b.n	800cce6 <__hi0bits+0xa>

0800cd1c <__lo0bits>:
 800cd1c:	6803      	ldr	r3, [r0, #0]
 800cd1e:	f013 0207 	ands.w	r2, r3, #7
 800cd22:	4601      	mov	r1, r0
 800cd24:	d00b      	beq.n	800cd3e <__lo0bits+0x22>
 800cd26:	07da      	lsls	r2, r3, #31
 800cd28:	d423      	bmi.n	800cd72 <__lo0bits+0x56>
 800cd2a:	0798      	lsls	r0, r3, #30
 800cd2c:	bf49      	itett	mi
 800cd2e:	085b      	lsrmi	r3, r3, #1
 800cd30:	089b      	lsrpl	r3, r3, #2
 800cd32:	2001      	movmi	r0, #1
 800cd34:	600b      	strmi	r3, [r1, #0]
 800cd36:	bf5c      	itt	pl
 800cd38:	600b      	strpl	r3, [r1, #0]
 800cd3a:	2002      	movpl	r0, #2
 800cd3c:	4770      	bx	lr
 800cd3e:	b298      	uxth	r0, r3
 800cd40:	b9a8      	cbnz	r0, 800cd6e <__lo0bits+0x52>
 800cd42:	0c1b      	lsrs	r3, r3, #16
 800cd44:	2010      	movs	r0, #16
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	b90a      	cbnz	r2, 800cd4e <__lo0bits+0x32>
 800cd4a:	3008      	adds	r0, #8
 800cd4c:	0a1b      	lsrs	r3, r3, #8
 800cd4e:	071a      	lsls	r2, r3, #28
 800cd50:	bf04      	itt	eq
 800cd52:	091b      	lsreq	r3, r3, #4
 800cd54:	3004      	addeq	r0, #4
 800cd56:	079a      	lsls	r2, r3, #30
 800cd58:	bf04      	itt	eq
 800cd5a:	089b      	lsreq	r3, r3, #2
 800cd5c:	3002      	addeq	r0, #2
 800cd5e:	07da      	lsls	r2, r3, #31
 800cd60:	d403      	bmi.n	800cd6a <__lo0bits+0x4e>
 800cd62:	085b      	lsrs	r3, r3, #1
 800cd64:	f100 0001 	add.w	r0, r0, #1
 800cd68:	d005      	beq.n	800cd76 <__lo0bits+0x5a>
 800cd6a:	600b      	str	r3, [r1, #0]
 800cd6c:	4770      	bx	lr
 800cd6e:	4610      	mov	r0, r2
 800cd70:	e7e9      	b.n	800cd46 <__lo0bits+0x2a>
 800cd72:	2000      	movs	r0, #0
 800cd74:	4770      	bx	lr
 800cd76:	2020      	movs	r0, #32
 800cd78:	4770      	bx	lr
	...

0800cd7c <__i2b>:
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	460c      	mov	r4, r1
 800cd80:	2101      	movs	r1, #1
 800cd82:	f7ff feb9 	bl	800caf8 <_Balloc>
 800cd86:	4602      	mov	r2, r0
 800cd88:	b928      	cbnz	r0, 800cd96 <__i2b+0x1a>
 800cd8a:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <__i2b+0x24>)
 800cd8c:	4805      	ldr	r0, [pc, #20]	; (800cda4 <__i2b+0x28>)
 800cd8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd92:	f000 fdff 	bl	800d994 <__assert_func>
 800cd96:	2301      	movs	r3, #1
 800cd98:	6144      	str	r4, [r0, #20]
 800cd9a:	6103      	str	r3, [r0, #16]
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	bf00      	nop
 800cda0:	0800e7d0 	.word	0x0800e7d0
 800cda4:	0800e85c 	.word	0x0800e85c

0800cda8 <__multiply>:
 800cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	4691      	mov	r9, r2
 800cdae:	690a      	ldr	r2, [r1, #16]
 800cdb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	bfb8      	it	lt
 800cdb8:	460b      	movlt	r3, r1
 800cdba:	460c      	mov	r4, r1
 800cdbc:	bfbc      	itt	lt
 800cdbe:	464c      	movlt	r4, r9
 800cdc0:	4699      	movlt	r9, r3
 800cdc2:	6927      	ldr	r7, [r4, #16]
 800cdc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdc8:	68a3      	ldr	r3, [r4, #8]
 800cdca:	6861      	ldr	r1, [r4, #4]
 800cdcc:	eb07 060a 	add.w	r6, r7, sl
 800cdd0:	42b3      	cmp	r3, r6
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	bfb8      	it	lt
 800cdd6:	3101      	addlt	r1, #1
 800cdd8:	f7ff fe8e 	bl	800caf8 <_Balloc>
 800cddc:	b930      	cbnz	r0, 800cdec <__multiply+0x44>
 800cdde:	4602      	mov	r2, r0
 800cde0:	4b44      	ldr	r3, [pc, #272]	; (800cef4 <__multiply+0x14c>)
 800cde2:	4845      	ldr	r0, [pc, #276]	; (800cef8 <__multiply+0x150>)
 800cde4:	f240 115d 	movw	r1, #349	; 0x15d
 800cde8:	f000 fdd4 	bl	800d994 <__assert_func>
 800cdec:	f100 0514 	add.w	r5, r0, #20
 800cdf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cdf4:	462b      	mov	r3, r5
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	4543      	cmp	r3, r8
 800cdfa:	d321      	bcc.n	800ce40 <__multiply+0x98>
 800cdfc:	f104 0314 	add.w	r3, r4, #20
 800ce00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce04:	f109 0314 	add.w	r3, r9, #20
 800ce08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce0c:	9202      	str	r2, [sp, #8]
 800ce0e:	1b3a      	subs	r2, r7, r4
 800ce10:	3a15      	subs	r2, #21
 800ce12:	f022 0203 	bic.w	r2, r2, #3
 800ce16:	3204      	adds	r2, #4
 800ce18:	f104 0115 	add.w	r1, r4, #21
 800ce1c:	428f      	cmp	r7, r1
 800ce1e:	bf38      	it	cc
 800ce20:	2204      	movcc	r2, #4
 800ce22:	9201      	str	r2, [sp, #4]
 800ce24:	9a02      	ldr	r2, [sp, #8]
 800ce26:	9303      	str	r3, [sp, #12]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d80c      	bhi.n	800ce46 <__multiply+0x9e>
 800ce2c:	2e00      	cmp	r6, #0
 800ce2e:	dd03      	ble.n	800ce38 <__multiply+0x90>
 800ce30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d05a      	beq.n	800ceee <__multiply+0x146>
 800ce38:	6106      	str	r6, [r0, #16]
 800ce3a:	b005      	add	sp, #20
 800ce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce40:	f843 2b04 	str.w	r2, [r3], #4
 800ce44:	e7d8      	b.n	800cdf8 <__multiply+0x50>
 800ce46:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce4a:	f1ba 0f00 	cmp.w	sl, #0
 800ce4e:	d024      	beq.n	800ce9a <__multiply+0xf2>
 800ce50:	f104 0e14 	add.w	lr, r4, #20
 800ce54:	46a9      	mov	r9, r5
 800ce56:	f04f 0c00 	mov.w	ip, #0
 800ce5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce5e:	f8d9 1000 	ldr.w	r1, [r9]
 800ce62:	fa1f fb82 	uxth.w	fp, r2
 800ce66:	b289      	uxth	r1, r1
 800ce68:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ce70:	f8d9 2000 	ldr.w	r2, [r9]
 800ce74:	4461      	add	r1, ip
 800ce76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce82:	b289      	uxth	r1, r1
 800ce84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce88:	4577      	cmp	r7, lr
 800ce8a:	f849 1b04 	str.w	r1, [r9], #4
 800ce8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce92:	d8e2      	bhi.n	800ce5a <__multiply+0xb2>
 800ce94:	9a01      	ldr	r2, [sp, #4]
 800ce96:	f845 c002 	str.w	ip, [r5, r2]
 800ce9a:	9a03      	ldr	r2, [sp, #12]
 800ce9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cea0:	3304      	adds	r3, #4
 800cea2:	f1b9 0f00 	cmp.w	r9, #0
 800cea6:	d020      	beq.n	800ceea <__multiply+0x142>
 800cea8:	6829      	ldr	r1, [r5, #0]
 800ceaa:	f104 0c14 	add.w	ip, r4, #20
 800ceae:	46ae      	mov	lr, r5
 800ceb0:	f04f 0a00 	mov.w	sl, #0
 800ceb4:	f8bc b000 	ldrh.w	fp, [ip]
 800ceb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cebc:	fb09 220b 	mla	r2, r9, fp, r2
 800cec0:	4492      	add	sl, r2
 800cec2:	b289      	uxth	r1, r1
 800cec4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cec8:	f84e 1b04 	str.w	r1, [lr], #4
 800cecc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ced0:	f8be 1000 	ldrh.w	r1, [lr]
 800ced4:	0c12      	lsrs	r2, r2, #16
 800ced6:	fb09 1102 	mla	r1, r9, r2, r1
 800ceda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cede:	4567      	cmp	r7, ip
 800cee0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cee4:	d8e6      	bhi.n	800ceb4 <__multiply+0x10c>
 800cee6:	9a01      	ldr	r2, [sp, #4]
 800cee8:	50a9      	str	r1, [r5, r2]
 800ceea:	3504      	adds	r5, #4
 800ceec:	e79a      	b.n	800ce24 <__multiply+0x7c>
 800ceee:	3e01      	subs	r6, #1
 800cef0:	e79c      	b.n	800ce2c <__multiply+0x84>
 800cef2:	bf00      	nop
 800cef4:	0800e7d0 	.word	0x0800e7d0
 800cef8:	0800e85c 	.word	0x0800e85c

0800cefc <__pow5mult>:
 800cefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf00:	4615      	mov	r5, r2
 800cf02:	f012 0203 	ands.w	r2, r2, #3
 800cf06:	4606      	mov	r6, r0
 800cf08:	460f      	mov	r7, r1
 800cf0a:	d007      	beq.n	800cf1c <__pow5mult+0x20>
 800cf0c:	4c25      	ldr	r4, [pc, #148]	; (800cfa4 <__pow5mult+0xa8>)
 800cf0e:	3a01      	subs	r2, #1
 800cf10:	2300      	movs	r3, #0
 800cf12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf16:	f7ff fe51 	bl	800cbbc <__multadd>
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	10ad      	asrs	r5, r5, #2
 800cf1e:	d03d      	beq.n	800cf9c <__pow5mult+0xa0>
 800cf20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf22:	b97c      	cbnz	r4, 800cf44 <__pow5mult+0x48>
 800cf24:	2010      	movs	r0, #16
 800cf26:	f7ff fdcd 	bl	800cac4 <malloc>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	6270      	str	r0, [r6, #36]	; 0x24
 800cf2e:	b928      	cbnz	r0, 800cf3c <__pow5mult+0x40>
 800cf30:	4b1d      	ldr	r3, [pc, #116]	; (800cfa8 <__pow5mult+0xac>)
 800cf32:	481e      	ldr	r0, [pc, #120]	; (800cfac <__pow5mult+0xb0>)
 800cf34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf38:	f000 fd2c 	bl	800d994 <__assert_func>
 800cf3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf40:	6004      	str	r4, [r0, #0]
 800cf42:	60c4      	str	r4, [r0, #12]
 800cf44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf4c:	b94c      	cbnz	r4, 800cf62 <__pow5mult+0x66>
 800cf4e:	f240 2171 	movw	r1, #625	; 0x271
 800cf52:	4630      	mov	r0, r6
 800cf54:	f7ff ff12 	bl	800cd7c <__i2b>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf5e:	4604      	mov	r4, r0
 800cf60:	6003      	str	r3, [r0, #0]
 800cf62:	f04f 0900 	mov.w	r9, #0
 800cf66:	07eb      	lsls	r3, r5, #31
 800cf68:	d50a      	bpl.n	800cf80 <__pow5mult+0x84>
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	4622      	mov	r2, r4
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7ff ff1a 	bl	800cda8 <__multiply>
 800cf74:	4639      	mov	r1, r7
 800cf76:	4680      	mov	r8, r0
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff fdfd 	bl	800cb78 <_Bfree>
 800cf7e:	4647      	mov	r7, r8
 800cf80:	106d      	asrs	r5, r5, #1
 800cf82:	d00b      	beq.n	800cf9c <__pow5mult+0xa0>
 800cf84:	6820      	ldr	r0, [r4, #0]
 800cf86:	b938      	cbnz	r0, 800cf98 <__pow5mult+0x9c>
 800cf88:	4622      	mov	r2, r4
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f7ff ff0b 	bl	800cda8 <__multiply>
 800cf92:	6020      	str	r0, [r4, #0]
 800cf94:	f8c0 9000 	str.w	r9, [r0]
 800cf98:	4604      	mov	r4, r0
 800cf9a:	e7e4      	b.n	800cf66 <__pow5mult+0x6a>
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa2:	bf00      	nop
 800cfa4:	0800e9a8 	.word	0x0800e9a8
 800cfa8:	0800e75e 	.word	0x0800e75e
 800cfac:	0800e85c 	.word	0x0800e85c

0800cfb0 <__lshift>:
 800cfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	6849      	ldr	r1, [r1, #4]
 800cfb8:	6923      	ldr	r3, [r4, #16]
 800cfba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfbe:	68a3      	ldr	r3, [r4, #8]
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	4691      	mov	r9, r2
 800cfc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfc8:	f108 0601 	add.w	r6, r8, #1
 800cfcc:	42b3      	cmp	r3, r6
 800cfce:	db0b      	blt.n	800cfe8 <__lshift+0x38>
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	f7ff fd91 	bl	800caf8 <_Balloc>
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	b948      	cbnz	r0, 800cfee <__lshift+0x3e>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	4b2a      	ldr	r3, [pc, #168]	; (800d088 <__lshift+0xd8>)
 800cfde:	482b      	ldr	r0, [pc, #172]	; (800d08c <__lshift+0xdc>)
 800cfe0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cfe4:	f000 fcd6 	bl	800d994 <__assert_func>
 800cfe8:	3101      	adds	r1, #1
 800cfea:	005b      	lsls	r3, r3, #1
 800cfec:	e7ee      	b.n	800cfcc <__lshift+0x1c>
 800cfee:	2300      	movs	r3, #0
 800cff0:	f100 0114 	add.w	r1, r0, #20
 800cff4:	f100 0210 	add.w	r2, r0, #16
 800cff8:	4618      	mov	r0, r3
 800cffa:	4553      	cmp	r3, sl
 800cffc:	db37      	blt.n	800d06e <__lshift+0xbe>
 800cffe:	6920      	ldr	r0, [r4, #16]
 800d000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d004:	f104 0314 	add.w	r3, r4, #20
 800d008:	f019 091f 	ands.w	r9, r9, #31
 800d00c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d010:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d014:	d02f      	beq.n	800d076 <__lshift+0xc6>
 800d016:	f1c9 0e20 	rsb	lr, r9, #32
 800d01a:	468a      	mov	sl, r1
 800d01c:	f04f 0c00 	mov.w	ip, #0
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	fa02 f209 	lsl.w	r2, r2, r9
 800d026:	ea42 020c 	orr.w	r2, r2, ip
 800d02a:	f84a 2b04 	str.w	r2, [sl], #4
 800d02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d032:	4298      	cmp	r0, r3
 800d034:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d038:	d8f2      	bhi.n	800d020 <__lshift+0x70>
 800d03a:	1b03      	subs	r3, r0, r4
 800d03c:	3b15      	subs	r3, #21
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	3304      	adds	r3, #4
 800d044:	f104 0215 	add.w	r2, r4, #21
 800d048:	4290      	cmp	r0, r2
 800d04a:	bf38      	it	cc
 800d04c:	2304      	movcc	r3, #4
 800d04e:	f841 c003 	str.w	ip, [r1, r3]
 800d052:	f1bc 0f00 	cmp.w	ip, #0
 800d056:	d001      	beq.n	800d05c <__lshift+0xac>
 800d058:	f108 0602 	add.w	r6, r8, #2
 800d05c:	3e01      	subs	r6, #1
 800d05e:	4638      	mov	r0, r7
 800d060:	612e      	str	r6, [r5, #16]
 800d062:	4621      	mov	r1, r4
 800d064:	f7ff fd88 	bl	800cb78 <_Bfree>
 800d068:	4628      	mov	r0, r5
 800d06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d072:	3301      	adds	r3, #1
 800d074:	e7c1      	b.n	800cffa <__lshift+0x4a>
 800d076:	3904      	subs	r1, #4
 800d078:	f853 2b04 	ldr.w	r2, [r3], #4
 800d07c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d080:	4298      	cmp	r0, r3
 800d082:	d8f9      	bhi.n	800d078 <__lshift+0xc8>
 800d084:	e7ea      	b.n	800d05c <__lshift+0xac>
 800d086:	bf00      	nop
 800d088:	0800e7d0 	.word	0x0800e7d0
 800d08c:	0800e85c 	.word	0x0800e85c

0800d090 <__mcmp>:
 800d090:	b530      	push	{r4, r5, lr}
 800d092:	6902      	ldr	r2, [r0, #16]
 800d094:	690c      	ldr	r4, [r1, #16]
 800d096:	1b12      	subs	r2, r2, r4
 800d098:	d10e      	bne.n	800d0b8 <__mcmp+0x28>
 800d09a:	f100 0314 	add.w	r3, r0, #20
 800d09e:	3114      	adds	r1, #20
 800d0a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d0a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d0a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d0ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d0b0:	42a5      	cmp	r5, r4
 800d0b2:	d003      	beq.n	800d0bc <__mcmp+0x2c>
 800d0b4:	d305      	bcc.n	800d0c2 <__mcmp+0x32>
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	bd30      	pop	{r4, r5, pc}
 800d0bc:	4283      	cmp	r3, r0
 800d0be:	d3f3      	bcc.n	800d0a8 <__mcmp+0x18>
 800d0c0:	e7fa      	b.n	800d0b8 <__mcmp+0x28>
 800d0c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0c6:	e7f7      	b.n	800d0b8 <__mcmp+0x28>

0800d0c8 <__mdiff>:
 800d0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	4690      	mov	r8, r2
 800d0d6:	f7ff ffdb 	bl	800d090 <__mcmp>
 800d0da:	1e05      	subs	r5, r0, #0
 800d0dc:	d110      	bne.n	800d100 <__mdiff+0x38>
 800d0de:	4629      	mov	r1, r5
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff fd09 	bl	800caf8 <_Balloc>
 800d0e6:	b930      	cbnz	r0, 800d0f6 <__mdiff+0x2e>
 800d0e8:	4b3a      	ldr	r3, [pc, #232]	; (800d1d4 <__mdiff+0x10c>)
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	f240 2132 	movw	r1, #562	; 0x232
 800d0f0:	4839      	ldr	r0, [pc, #228]	; (800d1d8 <__mdiff+0x110>)
 800d0f2:	f000 fc4f 	bl	800d994 <__assert_func>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d100:	bfa4      	itt	ge
 800d102:	4643      	movge	r3, r8
 800d104:	46a0      	movge	r8, r4
 800d106:	4630      	mov	r0, r6
 800d108:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d10c:	bfa6      	itte	ge
 800d10e:	461c      	movge	r4, r3
 800d110:	2500      	movge	r5, #0
 800d112:	2501      	movlt	r5, #1
 800d114:	f7ff fcf0 	bl	800caf8 <_Balloc>
 800d118:	b920      	cbnz	r0, 800d124 <__mdiff+0x5c>
 800d11a:	4b2e      	ldr	r3, [pc, #184]	; (800d1d4 <__mdiff+0x10c>)
 800d11c:	4602      	mov	r2, r0
 800d11e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d122:	e7e5      	b.n	800d0f0 <__mdiff+0x28>
 800d124:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d128:	6926      	ldr	r6, [r4, #16]
 800d12a:	60c5      	str	r5, [r0, #12]
 800d12c:	f104 0914 	add.w	r9, r4, #20
 800d130:	f108 0514 	add.w	r5, r8, #20
 800d134:	f100 0e14 	add.w	lr, r0, #20
 800d138:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d13c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d140:	f108 0210 	add.w	r2, r8, #16
 800d144:	46f2      	mov	sl, lr
 800d146:	2100      	movs	r1, #0
 800d148:	f859 3b04 	ldr.w	r3, [r9], #4
 800d14c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d150:	fa1f f883 	uxth.w	r8, r3
 800d154:	fa11 f18b 	uxtah	r1, r1, fp
 800d158:	0c1b      	lsrs	r3, r3, #16
 800d15a:	eba1 0808 	sub.w	r8, r1, r8
 800d15e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d162:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d166:	fa1f f888 	uxth.w	r8, r8
 800d16a:	1419      	asrs	r1, r3, #16
 800d16c:	454e      	cmp	r6, r9
 800d16e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d172:	f84a 3b04 	str.w	r3, [sl], #4
 800d176:	d8e7      	bhi.n	800d148 <__mdiff+0x80>
 800d178:	1b33      	subs	r3, r6, r4
 800d17a:	3b15      	subs	r3, #21
 800d17c:	f023 0303 	bic.w	r3, r3, #3
 800d180:	3304      	adds	r3, #4
 800d182:	3415      	adds	r4, #21
 800d184:	42a6      	cmp	r6, r4
 800d186:	bf38      	it	cc
 800d188:	2304      	movcc	r3, #4
 800d18a:	441d      	add	r5, r3
 800d18c:	4473      	add	r3, lr
 800d18e:	469e      	mov	lr, r3
 800d190:	462e      	mov	r6, r5
 800d192:	4566      	cmp	r6, ip
 800d194:	d30e      	bcc.n	800d1b4 <__mdiff+0xec>
 800d196:	f10c 0203 	add.w	r2, ip, #3
 800d19a:	1b52      	subs	r2, r2, r5
 800d19c:	f022 0203 	bic.w	r2, r2, #3
 800d1a0:	3d03      	subs	r5, #3
 800d1a2:	45ac      	cmp	ip, r5
 800d1a4:	bf38      	it	cc
 800d1a6:	2200      	movcc	r2, #0
 800d1a8:	441a      	add	r2, r3
 800d1aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d1ae:	b17b      	cbz	r3, 800d1d0 <__mdiff+0x108>
 800d1b0:	6107      	str	r7, [r0, #16]
 800d1b2:	e7a3      	b.n	800d0fc <__mdiff+0x34>
 800d1b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d1b8:	fa11 f288 	uxtah	r2, r1, r8
 800d1bc:	1414      	asrs	r4, r2, #16
 800d1be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d1c2:	b292      	uxth	r2, r2
 800d1c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d1c8:	f84e 2b04 	str.w	r2, [lr], #4
 800d1cc:	1421      	asrs	r1, r4, #16
 800d1ce:	e7e0      	b.n	800d192 <__mdiff+0xca>
 800d1d0:	3f01      	subs	r7, #1
 800d1d2:	e7ea      	b.n	800d1aa <__mdiff+0xe2>
 800d1d4:	0800e7d0 	.word	0x0800e7d0
 800d1d8:	0800e85c 	.word	0x0800e85c

0800d1dc <__ulp>:
 800d1dc:	b082      	sub	sp, #8
 800d1de:	ed8d 0b00 	vstr	d0, [sp]
 800d1e2:	9b01      	ldr	r3, [sp, #4]
 800d1e4:	4912      	ldr	r1, [pc, #72]	; (800d230 <__ulp+0x54>)
 800d1e6:	4019      	ands	r1, r3
 800d1e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d1ec:	2900      	cmp	r1, #0
 800d1ee:	dd05      	ble.n	800d1fc <__ulp+0x20>
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	ec43 2b10 	vmov	d0, r2, r3
 800d1f8:	b002      	add	sp, #8
 800d1fa:	4770      	bx	lr
 800d1fc:	4249      	negs	r1, r1
 800d1fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d202:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d206:	f04f 0200 	mov.w	r2, #0
 800d20a:	f04f 0300 	mov.w	r3, #0
 800d20e:	da04      	bge.n	800d21a <__ulp+0x3e>
 800d210:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d214:	fa41 f300 	asr.w	r3, r1, r0
 800d218:	e7ec      	b.n	800d1f4 <__ulp+0x18>
 800d21a:	f1a0 0114 	sub.w	r1, r0, #20
 800d21e:	291e      	cmp	r1, #30
 800d220:	bfda      	itte	le
 800d222:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d226:	fa20 f101 	lsrle.w	r1, r0, r1
 800d22a:	2101      	movgt	r1, #1
 800d22c:	460a      	mov	r2, r1
 800d22e:	e7e1      	b.n	800d1f4 <__ulp+0x18>
 800d230:	7ff00000 	.word	0x7ff00000

0800d234 <__b2d>:
 800d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d236:	6905      	ldr	r5, [r0, #16]
 800d238:	f100 0714 	add.w	r7, r0, #20
 800d23c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d240:	1f2e      	subs	r6, r5, #4
 800d242:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d246:	4620      	mov	r0, r4
 800d248:	f7ff fd48 	bl	800ccdc <__hi0bits>
 800d24c:	f1c0 0320 	rsb	r3, r0, #32
 800d250:	280a      	cmp	r0, #10
 800d252:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d2d0 <__b2d+0x9c>
 800d256:	600b      	str	r3, [r1, #0]
 800d258:	dc14      	bgt.n	800d284 <__b2d+0x50>
 800d25a:	f1c0 0e0b 	rsb	lr, r0, #11
 800d25e:	fa24 f10e 	lsr.w	r1, r4, lr
 800d262:	42b7      	cmp	r7, r6
 800d264:	ea41 030c 	orr.w	r3, r1, ip
 800d268:	bf34      	ite	cc
 800d26a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d26e:	2100      	movcs	r1, #0
 800d270:	3015      	adds	r0, #21
 800d272:	fa04 f000 	lsl.w	r0, r4, r0
 800d276:	fa21 f10e 	lsr.w	r1, r1, lr
 800d27a:	ea40 0201 	orr.w	r2, r0, r1
 800d27e:	ec43 2b10 	vmov	d0, r2, r3
 800d282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d284:	42b7      	cmp	r7, r6
 800d286:	bf3a      	itte	cc
 800d288:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d28c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d290:	2100      	movcs	r1, #0
 800d292:	380b      	subs	r0, #11
 800d294:	d017      	beq.n	800d2c6 <__b2d+0x92>
 800d296:	f1c0 0c20 	rsb	ip, r0, #32
 800d29a:	fa04 f500 	lsl.w	r5, r4, r0
 800d29e:	42be      	cmp	r6, r7
 800d2a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800d2a4:	ea45 0504 	orr.w	r5, r5, r4
 800d2a8:	bf8c      	ite	hi
 800d2aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d2ae:	2400      	movls	r4, #0
 800d2b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d2b4:	fa01 f000 	lsl.w	r0, r1, r0
 800d2b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800d2bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d2c0:	ea40 0204 	orr.w	r2, r0, r4
 800d2c4:	e7db      	b.n	800d27e <__b2d+0x4a>
 800d2c6:	ea44 030c 	orr.w	r3, r4, ip
 800d2ca:	460a      	mov	r2, r1
 800d2cc:	e7d7      	b.n	800d27e <__b2d+0x4a>
 800d2ce:	bf00      	nop
 800d2d0:	3ff00000 	.word	0x3ff00000

0800d2d4 <__d2b>:
 800d2d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2d8:	4689      	mov	r9, r1
 800d2da:	2101      	movs	r1, #1
 800d2dc:	ec57 6b10 	vmov	r6, r7, d0
 800d2e0:	4690      	mov	r8, r2
 800d2e2:	f7ff fc09 	bl	800caf8 <_Balloc>
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	b930      	cbnz	r0, 800d2f8 <__d2b+0x24>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	4b25      	ldr	r3, [pc, #148]	; (800d384 <__d2b+0xb0>)
 800d2ee:	4826      	ldr	r0, [pc, #152]	; (800d388 <__d2b+0xb4>)
 800d2f0:	f240 310a 	movw	r1, #778	; 0x30a
 800d2f4:	f000 fb4e 	bl	800d994 <__assert_func>
 800d2f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d2fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d300:	bb35      	cbnz	r5, 800d350 <__d2b+0x7c>
 800d302:	2e00      	cmp	r6, #0
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	d028      	beq.n	800d35a <__d2b+0x86>
 800d308:	4668      	mov	r0, sp
 800d30a:	9600      	str	r6, [sp, #0]
 800d30c:	f7ff fd06 	bl	800cd1c <__lo0bits>
 800d310:	9900      	ldr	r1, [sp, #0]
 800d312:	b300      	cbz	r0, 800d356 <__d2b+0x82>
 800d314:	9a01      	ldr	r2, [sp, #4]
 800d316:	f1c0 0320 	rsb	r3, r0, #32
 800d31a:	fa02 f303 	lsl.w	r3, r2, r3
 800d31e:	430b      	orrs	r3, r1
 800d320:	40c2      	lsrs	r2, r0
 800d322:	6163      	str	r3, [r4, #20]
 800d324:	9201      	str	r2, [sp, #4]
 800d326:	9b01      	ldr	r3, [sp, #4]
 800d328:	61a3      	str	r3, [r4, #24]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	bf14      	ite	ne
 800d32e:	2202      	movne	r2, #2
 800d330:	2201      	moveq	r2, #1
 800d332:	6122      	str	r2, [r4, #16]
 800d334:	b1d5      	cbz	r5, 800d36c <__d2b+0x98>
 800d336:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d33a:	4405      	add	r5, r0
 800d33c:	f8c9 5000 	str.w	r5, [r9]
 800d340:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d344:	f8c8 0000 	str.w	r0, [r8]
 800d348:	4620      	mov	r0, r4
 800d34a:	b003      	add	sp, #12
 800d34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d354:	e7d5      	b.n	800d302 <__d2b+0x2e>
 800d356:	6161      	str	r1, [r4, #20]
 800d358:	e7e5      	b.n	800d326 <__d2b+0x52>
 800d35a:	a801      	add	r0, sp, #4
 800d35c:	f7ff fcde 	bl	800cd1c <__lo0bits>
 800d360:	9b01      	ldr	r3, [sp, #4]
 800d362:	6163      	str	r3, [r4, #20]
 800d364:	2201      	movs	r2, #1
 800d366:	6122      	str	r2, [r4, #16]
 800d368:	3020      	adds	r0, #32
 800d36a:	e7e3      	b.n	800d334 <__d2b+0x60>
 800d36c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d370:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d374:	f8c9 0000 	str.w	r0, [r9]
 800d378:	6918      	ldr	r0, [r3, #16]
 800d37a:	f7ff fcaf 	bl	800ccdc <__hi0bits>
 800d37e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d382:	e7df      	b.n	800d344 <__d2b+0x70>
 800d384:	0800e7d0 	.word	0x0800e7d0
 800d388:	0800e85c 	.word	0x0800e85c

0800d38c <__ratio>:
 800d38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	4688      	mov	r8, r1
 800d392:	4669      	mov	r1, sp
 800d394:	4681      	mov	r9, r0
 800d396:	f7ff ff4d 	bl	800d234 <__b2d>
 800d39a:	a901      	add	r1, sp, #4
 800d39c:	4640      	mov	r0, r8
 800d39e:	ec55 4b10 	vmov	r4, r5, d0
 800d3a2:	f7ff ff47 	bl	800d234 <__b2d>
 800d3a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d3ae:	eba3 0c02 	sub.w	ip, r3, r2
 800d3b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d3b6:	1a9b      	subs	r3, r3, r2
 800d3b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3bc:	ec51 0b10 	vmov	r0, r1, d0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bfd6      	itet	le
 800d3c4:	460a      	movle	r2, r1
 800d3c6:	462a      	movgt	r2, r5
 800d3c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3cc:	468b      	mov	fp, r1
 800d3ce:	462f      	mov	r7, r5
 800d3d0:	bfd4      	ite	le
 800d3d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d3d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3da:	4620      	mov	r0, r4
 800d3dc:	ee10 2a10 	vmov	r2, s0
 800d3e0:	465b      	mov	r3, fp
 800d3e2:	4639      	mov	r1, r7
 800d3e4:	f7f3 fa42 	bl	800086c <__aeabi_ddiv>
 800d3e8:	ec41 0b10 	vmov	d0, r0, r1
 800d3ec:	b003      	add	sp, #12
 800d3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3f2 <__copybits>:
 800d3f2:	3901      	subs	r1, #1
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	1149      	asrs	r1, r1, #5
 800d3f8:	6914      	ldr	r4, [r2, #16]
 800d3fa:	3101      	adds	r1, #1
 800d3fc:	f102 0314 	add.w	r3, r2, #20
 800d400:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d404:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d408:	1f05      	subs	r5, r0, #4
 800d40a:	42a3      	cmp	r3, r4
 800d40c:	d30c      	bcc.n	800d428 <__copybits+0x36>
 800d40e:	1aa3      	subs	r3, r4, r2
 800d410:	3b11      	subs	r3, #17
 800d412:	f023 0303 	bic.w	r3, r3, #3
 800d416:	3211      	adds	r2, #17
 800d418:	42a2      	cmp	r2, r4
 800d41a:	bf88      	it	hi
 800d41c:	2300      	movhi	r3, #0
 800d41e:	4418      	add	r0, r3
 800d420:	2300      	movs	r3, #0
 800d422:	4288      	cmp	r0, r1
 800d424:	d305      	bcc.n	800d432 <__copybits+0x40>
 800d426:	bd70      	pop	{r4, r5, r6, pc}
 800d428:	f853 6b04 	ldr.w	r6, [r3], #4
 800d42c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d430:	e7eb      	b.n	800d40a <__copybits+0x18>
 800d432:	f840 3b04 	str.w	r3, [r0], #4
 800d436:	e7f4      	b.n	800d422 <__copybits+0x30>

0800d438 <__any_on>:
 800d438:	f100 0214 	add.w	r2, r0, #20
 800d43c:	6900      	ldr	r0, [r0, #16]
 800d43e:	114b      	asrs	r3, r1, #5
 800d440:	4298      	cmp	r0, r3
 800d442:	b510      	push	{r4, lr}
 800d444:	db11      	blt.n	800d46a <__any_on+0x32>
 800d446:	dd0a      	ble.n	800d45e <__any_on+0x26>
 800d448:	f011 011f 	ands.w	r1, r1, #31
 800d44c:	d007      	beq.n	800d45e <__any_on+0x26>
 800d44e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d452:	fa24 f001 	lsr.w	r0, r4, r1
 800d456:	fa00 f101 	lsl.w	r1, r0, r1
 800d45a:	428c      	cmp	r4, r1
 800d45c:	d10b      	bne.n	800d476 <__any_on+0x3e>
 800d45e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d462:	4293      	cmp	r3, r2
 800d464:	d803      	bhi.n	800d46e <__any_on+0x36>
 800d466:	2000      	movs	r0, #0
 800d468:	bd10      	pop	{r4, pc}
 800d46a:	4603      	mov	r3, r0
 800d46c:	e7f7      	b.n	800d45e <__any_on+0x26>
 800d46e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d472:	2900      	cmp	r1, #0
 800d474:	d0f5      	beq.n	800d462 <__any_on+0x2a>
 800d476:	2001      	movs	r0, #1
 800d478:	e7f6      	b.n	800d468 <__any_on+0x30>

0800d47a <_calloc_r>:
 800d47a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d47c:	fba1 2402 	umull	r2, r4, r1, r2
 800d480:	b94c      	cbnz	r4, 800d496 <_calloc_r+0x1c>
 800d482:	4611      	mov	r1, r2
 800d484:	9201      	str	r2, [sp, #4]
 800d486:	f000 f87b 	bl	800d580 <_malloc_r>
 800d48a:	9a01      	ldr	r2, [sp, #4]
 800d48c:	4605      	mov	r5, r0
 800d48e:	b930      	cbnz	r0, 800d49e <_calloc_r+0x24>
 800d490:	4628      	mov	r0, r5
 800d492:	b003      	add	sp, #12
 800d494:	bd30      	pop	{r4, r5, pc}
 800d496:	220c      	movs	r2, #12
 800d498:	6002      	str	r2, [r0, #0]
 800d49a:	2500      	movs	r5, #0
 800d49c:	e7f8      	b.n	800d490 <_calloc_r+0x16>
 800d49e:	4621      	mov	r1, r4
 800d4a0:	f7fc fbac 	bl	8009bfc <memset>
 800d4a4:	e7f4      	b.n	800d490 <_calloc_r+0x16>
	...

0800d4a8 <_free_r>:
 800d4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4aa:	2900      	cmp	r1, #0
 800d4ac:	d044      	beq.n	800d538 <_free_r+0x90>
 800d4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4b2:	9001      	str	r0, [sp, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d4ba:	bfb8      	it	lt
 800d4bc:	18e4      	addlt	r4, r4, r3
 800d4be:	f000 fab3 	bl	800da28 <__malloc_lock>
 800d4c2:	4a1e      	ldr	r2, [pc, #120]	; (800d53c <_free_r+0x94>)
 800d4c4:	9801      	ldr	r0, [sp, #4]
 800d4c6:	6813      	ldr	r3, [r2, #0]
 800d4c8:	b933      	cbnz	r3, 800d4d8 <_free_r+0x30>
 800d4ca:	6063      	str	r3, [r4, #4]
 800d4cc:	6014      	str	r4, [r2, #0]
 800d4ce:	b003      	add	sp, #12
 800d4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4d4:	f000 baae 	b.w	800da34 <__malloc_unlock>
 800d4d8:	42a3      	cmp	r3, r4
 800d4da:	d908      	bls.n	800d4ee <_free_r+0x46>
 800d4dc:	6825      	ldr	r5, [r4, #0]
 800d4de:	1961      	adds	r1, r4, r5
 800d4e0:	428b      	cmp	r3, r1
 800d4e2:	bf01      	itttt	eq
 800d4e4:	6819      	ldreq	r1, [r3, #0]
 800d4e6:	685b      	ldreq	r3, [r3, #4]
 800d4e8:	1949      	addeq	r1, r1, r5
 800d4ea:	6021      	streq	r1, [r4, #0]
 800d4ec:	e7ed      	b.n	800d4ca <_free_r+0x22>
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	b10b      	cbz	r3, 800d4f8 <_free_r+0x50>
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	d9fa      	bls.n	800d4ee <_free_r+0x46>
 800d4f8:	6811      	ldr	r1, [r2, #0]
 800d4fa:	1855      	adds	r5, r2, r1
 800d4fc:	42a5      	cmp	r5, r4
 800d4fe:	d10b      	bne.n	800d518 <_free_r+0x70>
 800d500:	6824      	ldr	r4, [r4, #0]
 800d502:	4421      	add	r1, r4
 800d504:	1854      	adds	r4, r2, r1
 800d506:	42a3      	cmp	r3, r4
 800d508:	6011      	str	r1, [r2, #0]
 800d50a:	d1e0      	bne.n	800d4ce <_free_r+0x26>
 800d50c:	681c      	ldr	r4, [r3, #0]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	6053      	str	r3, [r2, #4]
 800d512:	4421      	add	r1, r4
 800d514:	6011      	str	r1, [r2, #0]
 800d516:	e7da      	b.n	800d4ce <_free_r+0x26>
 800d518:	d902      	bls.n	800d520 <_free_r+0x78>
 800d51a:	230c      	movs	r3, #12
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	e7d6      	b.n	800d4ce <_free_r+0x26>
 800d520:	6825      	ldr	r5, [r4, #0]
 800d522:	1961      	adds	r1, r4, r5
 800d524:	428b      	cmp	r3, r1
 800d526:	bf04      	itt	eq
 800d528:	6819      	ldreq	r1, [r3, #0]
 800d52a:	685b      	ldreq	r3, [r3, #4]
 800d52c:	6063      	str	r3, [r4, #4]
 800d52e:	bf04      	itt	eq
 800d530:	1949      	addeq	r1, r1, r5
 800d532:	6021      	streq	r1, [r4, #0]
 800d534:	6054      	str	r4, [r2, #4]
 800d536:	e7ca      	b.n	800d4ce <_free_r+0x26>
 800d538:	b003      	add	sp, #12
 800d53a:	bd30      	pop	{r4, r5, pc}
 800d53c:	200046ec 	.word	0x200046ec

0800d540 <sbrk_aligned>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	4e0e      	ldr	r6, [pc, #56]	; (800d57c <sbrk_aligned+0x3c>)
 800d544:	460c      	mov	r4, r1
 800d546:	6831      	ldr	r1, [r6, #0]
 800d548:	4605      	mov	r5, r0
 800d54a:	b911      	cbnz	r1, 800d552 <sbrk_aligned+0x12>
 800d54c:	f000 f9f0 	bl	800d930 <_sbrk_r>
 800d550:	6030      	str	r0, [r6, #0]
 800d552:	4621      	mov	r1, r4
 800d554:	4628      	mov	r0, r5
 800d556:	f000 f9eb 	bl	800d930 <_sbrk_r>
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	d00a      	beq.n	800d574 <sbrk_aligned+0x34>
 800d55e:	1cc4      	adds	r4, r0, #3
 800d560:	f024 0403 	bic.w	r4, r4, #3
 800d564:	42a0      	cmp	r0, r4
 800d566:	d007      	beq.n	800d578 <sbrk_aligned+0x38>
 800d568:	1a21      	subs	r1, r4, r0
 800d56a:	4628      	mov	r0, r5
 800d56c:	f000 f9e0 	bl	800d930 <_sbrk_r>
 800d570:	3001      	adds	r0, #1
 800d572:	d101      	bne.n	800d578 <sbrk_aligned+0x38>
 800d574:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d578:	4620      	mov	r0, r4
 800d57a:	bd70      	pop	{r4, r5, r6, pc}
 800d57c:	200046f0 	.word	0x200046f0

0800d580 <_malloc_r>:
 800d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d584:	1ccd      	adds	r5, r1, #3
 800d586:	f025 0503 	bic.w	r5, r5, #3
 800d58a:	3508      	adds	r5, #8
 800d58c:	2d0c      	cmp	r5, #12
 800d58e:	bf38      	it	cc
 800d590:	250c      	movcc	r5, #12
 800d592:	2d00      	cmp	r5, #0
 800d594:	4607      	mov	r7, r0
 800d596:	db01      	blt.n	800d59c <_malloc_r+0x1c>
 800d598:	42a9      	cmp	r1, r5
 800d59a:	d905      	bls.n	800d5a8 <_malloc_r+0x28>
 800d59c:	230c      	movs	r3, #12
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	2600      	movs	r6, #0
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a8:	4e2e      	ldr	r6, [pc, #184]	; (800d664 <_malloc_r+0xe4>)
 800d5aa:	f000 fa3d 	bl	800da28 <__malloc_lock>
 800d5ae:	6833      	ldr	r3, [r6, #0]
 800d5b0:	461c      	mov	r4, r3
 800d5b2:	bb34      	cbnz	r4, 800d602 <_malloc_r+0x82>
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	f7ff ffc2 	bl	800d540 <sbrk_aligned>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	4604      	mov	r4, r0
 800d5c0:	d14d      	bne.n	800d65e <_malloc_r+0xde>
 800d5c2:	6834      	ldr	r4, [r6, #0]
 800d5c4:	4626      	mov	r6, r4
 800d5c6:	2e00      	cmp	r6, #0
 800d5c8:	d140      	bne.n	800d64c <_malloc_r+0xcc>
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	eb04 0803 	add.w	r8, r4, r3
 800d5d4:	f000 f9ac 	bl	800d930 <_sbrk_r>
 800d5d8:	4580      	cmp	r8, r0
 800d5da:	d13a      	bne.n	800d652 <_malloc_r+0xd2>
 800d5dc:	6821      	ldr	r1, [r4, #0]
 800d5de:	3503      	adds	r5, #3
 800d5e0:	1a6d      	subs	r5, r5, r1
 800d5e2:	f025 0503 	bic.w	r5, r5, #3
 800d5e6:	3508      	adds	r5, #8
 800d5e8:	2d0c      	cmp	r5, #12
 800d5ea:	bf38      	it	cc
 800d5ec:	250c      	movcc	r5, #12
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f7ff ffa5 	bl	800d540 <sbrk_aligned>
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	d02b      	beq.n	800d652 <_malloc_r+0xd2>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	442b      	add	r3, r5
 800d5fe:	6023      	str	r3, [r4, #0]
 800d600:	e00e      	b.n	800d620 <_malloc_r+0xa0>
 800d602:	6822      	ldr	r2, [r4, #0]
 800d604:	1b52      	subs	r2, r2, r5
 800d606:	d41e      	bmi.n	800d646 <_malloc_r+0xc6>
 800d608:	2a0b      	cmp	r2, #11
 800d60a:	d916      	bls.n	800d63a <_malloc_r+0xba>
 800d60c:	1961      	adds	r1, r4, r5
 800d60e:	42a3      	cmp	r3, r4
 800d610:	6025      	str	r5, [r4, #0]
 800d612:	bf18      	it	ne
 800d614:	6059      	strne	r1, [r3, #4]
 800d616:	6863      	ldr	r3, [r4, #4]
 800d618:	bf08      	it	eq
 800d61a:	6031      	streq	r1, [r6, #0]
 800d61c:	5162      	str	r2, [r4, r5]
 800d61e:	604b      	str	r3, [r1, #4]
 800d620:	4638      	mov	r0, r7
 800d622:	f104 060b 	add.w	r6, r4, #11
 800d626:	f000 fa05 	bl	800da34 <__malloc_unlock>
 800d62a:	f026 0607 	bic.w	r6, r6, #7
 800d62e:	1d23      	adds	r3, r4, #4
 800d630:	1af2      	subs	r2, r6, r3
 800d632:	d0b6      	beq.n	800d5a2 <_malloc_r+0x22>
 800d634:	1b9b      	subs	r3, r3, r6
 800d636:	50a3      	str	r3, [r4, r2]
 800d638:	e7b3      	b.n	800d5a2 <_malloc_r+0x22>
 800d63a:	6862      	ldr	r2, [r4, #4]
 800d63c:	42a3      	cmp	r3, r4
 800d63e:	bf0c      	ite	eq
 800d640:	6032      	streq	r2, [r6, #0]
 800d642:	605a      	strne	r2, [r3, #4]
 800d644:	e7ec      	b.n	800d620 <_malloc_r+0xa0>
 800d646:	4623      	mov	r3, r4
 800d648:	6864      	ldr	r4, [r4, #4]
 800d64a:	e7b2      	b.n	800d5b2 <_malloc_r+0x32>
 800d64c:	4634      	mov	r4, r6
 800d64e:	6876      	ldr	r6, [r6, #4]
 800d650:	e7b9      	b.n	800d5c6 <_malloc_r+0x46>
 800d652:	230c      	movs	r3, #12
 800d654:	603b      	str	r3, [r7, #0]
 800d656:	4638      	mov	r0, r7
 800d658:	f000 f9ec 	bl	800da34 <__malloc_unlock>
 800d65c:	e7a1      	b.n	800d5a2 <_malloc_r+0x22>
 800d65e:	6025      	str	r5, [r4, #0]
 800d660:	e7de      	b.n	800d620 <_malloc_r+0xa0>
 800d662:	bf00      	nop
 800d664:	200046ec 	.word	0x200046ec

0800d668 <__ssputs_r>:
 800d668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d66c:	688e      	ldr	r6, [r1, #8]
 800d66e:	429e      	cmp	r6, r3
 800d670:	4682      	mov	sl, r0
 800d672:	460c      	mov	r4, r1
 800d674:	4690      	mov	r8, r2
 800d676:	461f      	mov	r7, r3
 800d678:	d838      	bhi.n	800d6ec <__ssputs_r+0x84>
 800d67a:	898a      	ldrh	r2, [r1, #12]
 800d67c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d680:	d032      	beq.n	800d6e8 <__ssputs_r+0x80>
 800d682:	6825      	ldr	r5, [r4, #0]
 800d684:	6909      	ldr	r1, [r1, #16]
 800d686:	eba5 0901 	sub.w	r9, r5, r1
 800d68a:	6965      	ldr	r5, [r4, #20]
 800d68c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d694:	3301      	adds	r3, #1
 800d696:	444b      	add	r3, r9
 800d698:	106d      	asrs	r5, r5, #1
 800d69a:	429d      	cmp	r5, r3
 800d69c:	bf38      	it	cc
 800d69e:	461d      	movcc	r5, r3
 800d6a0:	0553      	lsls	r3, r2, #21
 800d6a2:	d531      	bpl.n	800d708 <__ssputs_r+0xa0>
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	f7ff ff6b 	bl	800d580 <_malloc_r>
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	b950      	cbnz	r0, 800d6c4 <__ssputs_r+0x5c>
 800d6ae:	230c      	movs	r3, #12
 800d6b0:	f8ca 3000 	str.w	r3, [sl]
 800d6b4:	89a3      	ldrh	r3, [r4, #12]
 800d6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ba:	81a3      	strh	r3, [r4, #12]
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c4:	6921      	ldr	r1, [r4, #16]
 800d6c6:	464a      	mov	r2, r9
 800d6c8:	f7fc fa8a 	bl	8009be0 <memcpy>
 800d6cc:	89a3      	ldrh	r3, [r4, #12]
 800d6ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6d6:	81a3      	strh	r3, [r4, #12]
 800d6d8:	6126      	str	r6, [r4, #16]
 800d6da:	6165      	str	r5, [r4, #20]
 800d6dc:	444e      	add	r6, r9
 800d6de:	eba5 0509 	sub.w	r5, r5, r9
 800d6e2:	6026      	str	r6, [r4, #0]
 800d6e4:	60a5      	str	r5, [r4, #8]
 800d6e6:	463e      	mov	r6, r7
 800d6e8:	42be      	cmp	r6, r7
 800d6ea:	d900      	bls.n	800d6ee <__ssputs_r+0x86>
 800d6ec:	463e      	mov	r6, r7
 800d6ee:	6820      	ldr	r0, [r4, #0]
 800d6f0:	4632      	mov	r2, r6
 800d6f2:	4641      	mov	r1, r8
 800d6f4:	f000 f97e 	bl	800d9f4 <memmove>
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	1b9b      	subs	r3, r3, r6
 800d6fc:	60a3      	str	r3, [r4, #8]
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	4433      	add	r3, r6
 800d702:	6023      	str	r3, [r4, #0]
 800d704:	2000      	movs	r0, #0
 800d706:	e7db      	b.n	800d6c0 <__ssputs_r+0x58>
 800d708:	462a      	mov	r2, r5
 800d70a:	f000 f999 	bl	800da40 <_realloc_r>
 800d70e:	4606      	mov	r6, r0
 800d710:	2800      	cmp	r0, #0
 800d712:	d1e1      	bne.n	800d6d8 <__ssputs_r+0x70>
 800d714:	6921      	ldr	r1, [r4, #16]
 800d716:	4650      	mov	r0, sl
 800d718:	f7ff fec6 	bl	800d4a8 <_free_r>
 800d71c:	e7c7      	b.n	800d6ae <__ssputs_r+0x46>
	...

0800d720 <_svfiprintf_r>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	4698      	mov	r8, r3
 800d726:	898b      	ldrh	r3, [r1, #12]
 800d728:	061b      	lsls	r3, r3, #24
 800d72a:	b09d      	sub	sp, #116	; 0x74
 800d72c:	4607      	mov	r7, r0
 800d72e:	460d      	mov	r5, r1
 800d730:	4614      	mov	r4, r2
 800d732:	d50e      	bpl.n	800d752 <_svfiprintf_r+0x32>
 800d734:	690b      	ldr	r3, [r1, #16]
 800d736:	b963      	cbnz	r3, 800d752 <_svfiprintf_r+0x32>
 800d738:	2140      	movs	r1, #64	; 0x40
 800d73a:	f7ff ff21 	bl	800d580 <_malloc_r>
 800d73e:	6028      	str	r0, [r5, #0]
 800d740:	6128      	str	r0, [r5, #16]
 800d742:	b920      	cbnz	r0, 800d74e <_svfiprintf_r+0x2e>
 800d744:	230c      	movs	r3, #12
 800d746:	603b      	str	r3, [r7, #0]
 800d748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d74c:	e0d1      	b.n	800d8f2 <_svfiprintf_r+0x1d2>
 800d74e:	2340      	movs	r3, #64	; 0x40
 800d750:	616b      	str	r3, [r5, #20]
 800d752:	2300      	movs	r3, #0
 800d754:	9309      	str	r3, [sp, #36]	; 0x24
 800d756:	2320      	movs	r3, #32
 800d758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d760:	2330      	movs	r3, #48	; 0x30
 800d762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d90c <_svfiprintf_r+0x1ec>
 800d766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d76a:	f04f 0901 	mov.w	r9, #1
 800d76e:	4623      	mov	r3, r4
 800d770:	469a      	mov	sl, r3
 800d772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d776:	b10a      	cbz	r2, 800d77c <_svfiprintf_r+0x5c>
 800d778:	2a25      	cmp	r2, #37	; 0x25
 800d77a:	d1f9      	bne.n	800d770 <_svfiprintf_r+0x50>
 800d77c:	ebba 0b04 	subs.w	fp, sl, r4
 800d780:	d00b      	beq.n	800d79a <_svfiprintf_r+0x7a>
 800d782:	465b      	mov	r3, fp
 800d784:	4622      	mov	r2, r4
 800d786:	4629      	mov	r1, r5
 800d788:	4638      	mov	r0, r7
 800d78a:	f7ff ff6d 	bl	800d668 <__ssputs_r>
 800d78e:	3001      	adds	r0, #1
 800d790:	f000 80aa 	beq.w	800d8e8 <_svfiprintf_r+0x1c8>
 800d794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d796:	445a      	add	r2, fp
 800d798:	9209      	str	r2, [sp, #36]	; 0x24
 800d79a:	f89a 3000 	ldrb.w	r3, [sl]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 80a2 	beq.w	800d8e8 <_svfiprintf_r+0x1c8>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ae:	f10a 0a01 	add.w	sl, sl, #1
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	9307      	str	r3, [sp, #28]
 800d7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800d7bc:	4654      	mov	r4, sl
 800d7be:	2205      	movs	r2, #5
 800d7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c4:	4851      	ldr	r0, [pc, #324]	; (800d90c <_svfiprintf_r+0x1ec>)
 800d7c6:	f7f2 fd1b 	bl	8000200 <memchr>
 800d7ca:	9a04      	ldr	r2, [sp, #16]
 800d7cc:	b9d8      	cbnz	r0, 800d806 <_svfiprintf_r+0xe6>
 800d7ce:	06d0      	lsls	r0, r2, #27
 800d7d0:	bf44      	itt	mi
 800d7d2:	2320      	movmi	r3, #32
 800d7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7d8:	0711      	lsls	r1, r2, #28
 800d7da:	bf44      	itt	mi
 800d7dc:	232b      	movmi	r3, #43	; 0x2b
 800d7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e8:	d015      	beq.n	800d816 <_svfiprintf_r+0xf6>
 800d7ea:	9a07      	ldr	r2, [sp, #28]
 800d7ec:	4654      	mov	r4, sl
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	f04f 0c0a 	mov.w	ip, #10
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7fa:	3b30      	subs	r3, #48	; 0x30
 800d7fc:	2b09      	cmp	r3, #9
 800d7fe:	d94e      	bls.n	800d89e <_svfiprintf_r+0x17e>
 800d800:	b1b0      	cbz	r0, 800d830 <_svfiprintf_r+0x110>
 800d802:	9207      	str	r2, [sp, #28]
 800d804:	e014      	b.n	800d830 <_svfiprintf_r+0x110>
 800d806:	eba0 0308 	sub.w	r3, r0, r8
 800d80a:	fa09 f303 	lsl.w	r3, r9, r3
 800d80e:	4313      	orrs	r3, r2
 800d810:	9304      	str	r3, [sp, #16]
 800d812:	46a2      	mov	sl, r4
 800d814:	e7d2      	b.n	800d7bc <_svfiprintf_r+0x9c>
 800d816:	9b03      	ldr	r3, [sp, #12]
 800d818:	1d19      	adds	r1, r3, #4
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	9103      	str	r1, [sp, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bfbb      	ittet	lt
 800d822:	425b      	neglt	r3, r3
 800d824:	f042 0202 	orrlt.w	r2, r2, #2
 800d828:	9307      	strge	r3, [sp, #28]
 800d82a:	9307      	strlt	r3, [sp, #28]
 800d82c:	bfb8      	it	lt
 800d82e:	9204      	strlt	r2, [sp, #16]
 800d830:	7823      	ldrb	r3, [r4, #0]
 800d832:	2b2e      	cmp	r3, #46	; 0x2e
 800d834:	d10c      	bne.n	800d850 <_svfiprintf_r+0x130>
 800d836:	7863      	ldrb	r3, [r4, #1]
 800d838:	2b2a      	cmp	r3, #42	; 0x2a
 800d83a:	d135      	bne.n	800d8a8 <_svfiprintf_r+0x188>
 800d83c:	9b03      	ldr	r3, [sp, #12]
 800d83e:	1d1a      	adds	r2, r3, #4
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	9203      	str	r2, [sp, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	bfb8      	it	lt
 800d848:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d84c:	3402      	adds	r4, #2
 800d84e:	9305      	str	r3, [sp, #20]
 800d850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d91c <_svfiprintf_r+0x1fc>
 800d854:	7821      	ldrb	r1, [r4, #0]
 800d856:	2203      	movs	r2, #3
 800d858:	4650      	mov	r0, sl
 800d85a:	f7f2 fcd1 	bl	8000200 <memchr>
 800d85e:	b140      	cbz	r0, 800d872 <_svfiprintf_r+0x152>
 800d860:	2340      	movs	r3, #64	; 0x40
 800d862:	eba0 000a 	sub.w	r0, r0, sl
 800d866:	fa03 f000 	lsl.w	r0, r3, r0
 800d86a:	9b04      	ldr	r3, [sp, #16]
 800d86c:	4303      	orrs	r3, r0
 800d86e:	3401      	adds	r4, #1
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d876:	4826      	ldr	r0, [pc, #152]	; (800d910 <_svfiprintf_r+0x1f0>)
 800d878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d87c:	2206      	movs	r2, #6
 800d87e:	f7f2 fcbf 	bl	8000200 <memchr>
 800d882:	2800      	cmp	r0, #0
 800d884:	d038      	beq.n	800d8f8 <_svfiprintf_r+0x1d8>
 800d886:	4b23      	ldr	r3, [pc, #140]	; (800d914 <_svfiprintf_r+0x1f4>)
 800d888:	bb1b      	cbnz	r3, 800d8d2 <_svfiprintf_r+0x1b2>
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	3307      	adds	r3, #7
 800d88e:	f023 0307 	bic.w	r3, r3, #7
 800d892:	3308      	adds	r3, #8
 800d894:	9303      	str	r3, [sp, #12]
 800d896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d898:	4433      	add	r3, r6
 800d89a:	9309      	str	r3, [sp, #36]	; 0x24
 800d89c:	e767      	b.n	800d76e <_svfiprintf_r+0x4e>
 800d89e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	2001      	movs	r0, #1
 800d8a6:	e7a5      	b.n	800d7f4 <_svfiprintf_r+0xd4>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	9305      	str	r3, [sp, #20]
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	f04f 0c0a 	mov.w	ip, #10
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ba:	3a30      	subs	r2, #48	; 0x30
 800d8bc:	2a09      	cmp	r2, #9
 800d8be:	d903      	bls.n	800d8c8 <_svfiprintf_r+0x1a8>
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0c5      	beq.n	800d850 <_svfiprintf_r+0x130>
 800d8c4:	9105      	str	r1, [sp, #20]
 800d8c6:	e7c3      	b.n	800d850 <_svfiprintf_r+0x130>
 800d8c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e7f0      	b.n	800d8b4 <_svfiprintf_r+0x194>
 800d8d2:	ab03      	add	r3, sp, #12
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	462a      	mov	r2, r5
 800d8d8:	4b0f      	ldr	r3, [pc, #60]	; (800d918 <_svfiprintf_r+0x1f8>)
 800d8da:	a904      	add	r1, sp, #16
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f7fc fa35 	bl	8009d4c <_printf_float>
 800d8e2:	1c42      	adds	r2, r0, #1
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	d1d6      	bne.n	800d896 <_svfiprintf_r+0x176>
 800d8e8:	89ab      	ldrh	r3, [r5, #12]
 800d8ea:	065b      	lsls	r3, r3, #25
 800d8ec:	f53f af2c 	bmi.w	800d748 <_svfiprintf_r+0x28>
 800d8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8f2:	b01d      	add	sp, #116	; 0x74
 800d8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f8:	ab03      	add	r3, sp, #12
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	462a      	mov	r2, r5
 800d8fe:	4b06      	ldr	r3, [pc, #24]	; (800d918 <_svfiprintf_r+0x1f8>)
 800d900:	a904      	add	r1, sp, #16
 800d902:	4638      	mov	r0, r7
 800d904:	f7fc fcc6 	bl	800a294 <_printf_i>
 800d908:	e7eb      	b.n	800d8e2 <_svfiprintf_r+0x1c2>
 800d90a:	bf00      	nop
 800d90c:	0800e9b4 	.word	0x0800e9b4
 800d910:	0800e9be 	.word	0x0800e9be
 800d914:	08009d4d 	.word	0x08009d4d
 800d918:	0800d669 	.word	0x0800d669
 800d91c:	0800e9ba 	.word	0x0800e9ba

0800d920 <nan>:
 800d920:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d928 <nan+0x8>
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	00000000 	.word	0x00000000
 800d92c:	7ff80000 	.word	0x7ff80000

0800d930 <_sbrk_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4d06      	ldr	r5, [pc, #24]	; (800d94c <_sbrk_r+0x1c>)
 800d934:	2300      	movs	r3, #0
 800d936:	4604      	mov	r4, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	602b      	str	r3, [r5, #0]
 800d93c:	f7f5 fc44 	bl	80031c8 <_sbrk>
 800d940:	1c43      	adds	r3, r0, #1
 800d942:	d102      	bne.n	800d94a <_sbrk_r+0x1a>
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	b103      	cbz	r3, 800d94a <_sbrk_r+0x1a>
 800d948:	6023      	str	r3, [r4, #0]
 800d94a:	bd38      	pop	{r3, r4, r5, pc}
 800d94c:	200046f4 	.word	0x200046f4

0800d950 <strncmp>:
 800d950:	b510      	push	{r4, lr}
 800d952:	b17a      	cbz	r2, 800d974 <strncmp+0x24>
 800d954:	4603      	mov	r3, r0
 800d956:	3901      	subs	r1, #1
 800d958:	1884      	adds	r4, r0, r2
 800d95a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d95e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d962:	4290      	cmp	r0, r2
 800d964:	d101      	bne.n	800d96a <strncmp+0x1a>
 800d966:	42a3      	cmp	r3, r4
 800d968:	d101      	bne.n	800d96e <strncmp+0x1e>
 800d96a:	1a80      	subs	r0, r0, r2
 800d96c:	bd10      	pop	{r4, pc}
 800d96e:	2800      	cmp	r0, #0
 800d970:	d1f3      	bne.n	800d95a <strncmp+0xa>
 800d972:	e7fa      	b.n	800d96a <strncmp+0x1a>
 800d974:	4610      	mov	r0, r2
 800d976:	e7f9      	b.n	800d96c <strncmp+0x1c>

0800d978 <__ascii_wctomb>:
 800d978:	b149      	cbz	r1, 800d98e <__ascii_wctomb+0x16>
 800d97a:	2aff      	cmp	r2, #255	; 0xff
 800d97c:	bf85      	ittet	hi
 800d97e:	238a      	movhi	r3, #138	; 0x8a
 800d980:	6003      	strhi	r3, [r0, #0]
 800d982:	700a      	strbls	r2, [r1, #0]
 800d984:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d988:	bf98      	it	ls
 800d98a:	2001      	movls	r0, #1
 800d98c:	4770      	bx	lr
 800d98e:	4608      	mov	r0, r1
 800d990:	4770      	bx	lr
	...

0800d994 <__assert_func>:
 800d994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d996:	4614      	mov	r4, r2
 800d998:	461a      	mov	r2, r3
 800d99a:	4b09      	ldr	r3, [pc, #36]	; (800d9c0 <__assert_func+0x2c>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4605      	mov	r5, r0
 800d9a0:	68d8      	ldr	r0, [r3, #12]
 800d9a2:	b14c      	cbz	r4, 800d9b8 <__assert_func+0x24>
 800d9a4:	4b07      	ldr	r3, [pc, #28]	; (800d9c4 <__assert_func+0x30>)
 800d9a6:	9100      	str	r1, [sp, #0]
 800d9a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9ac:	4906      	ldr	r1, [pc, #24]	; (800d9c8 <__assert_func+0x34>)
 800d9ae:	462b      	mov	r3, r5
 800d9b0:	f000 f80e 	bl	800d9d0 <fiprintf>
 800d9b4:	f000 fa8c 	bl	800ded0 <abort>
 800d9b8:	4b04      	ldr	r3, [pc, #16]	; (800d9cc <__assert_func+0x38>)
 800d9ba:	461c      	mov	r4, r3
 800d9bc:	e7f3      	b.n	800d9a6 <__assert_func+0x12>
 800d9be:	bf00      	nop
 800d9c0:	200000b8 	.word	0x200000b8
 800d9c4:	0800e9c5 	.word	0x0800e9c5
 800d9c8:	0800e9d2 	.word	0x0800e9d2
 800d9cc:	0800ea00 	.word	0x0800ea00

0800d9d0 <fiprintf>:
 800d9d0:	b40e      	push	{r1, r2, r3}
 800d9d2:	b503      	push	{r0, r1, lr}
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	ab03      	add	r3, sp, #12
 800d9d8:	4805      	ldr	r0, [pc, #20]	; (800d9f0 <fiprintf+0x20>)
 800d9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9de:	6800      	ldr	r0, [r0, #0]
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	f000 f885 	bl	800daf0 <_vfiprintf_r>
 800d9e6:	b002      	add	sp, #8
 800d9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9ec:	b003      	add	sp, #12
 800d9ee:	4770      	bx	lr
 800d9f0:	200000b8 	.word	0x200000b8

0800d9f4 <memmove>:
 800d9f4:	4288      	cmp	r0, r1
 800d9f6:	b510      	push	{r4, lr}
 800d9f8:	eb01 0402 	add.w	r4, r1, r2
 800d9fc:	d902      	bls.n	800da04 <memmove+0x10>
 800d9fe:	4284      	cmp	r4, r0
 800da00:	4623      	mov	r3, r4
 800da02:	d807      	bhi.n	800da14 <memmove+0x20>
 800da04:	1e43      	subs	r3, r0, #1
 800da06:	42a1      	cmp	r1, r4
 800da08:	d008      	beq.n	800da1c <memmove+0x28>
 800da0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da12:	e7f8      	b.n	800da06 <memmove+0x12>
 800da14:	4402      	add	r2, r0
 800da16:	4601      	mov	r1, r0
 800da18:	428a      	cmp	r2, r1
 800da1a:	d100      	bne.n	800da1e <memmove+0x2a>
 800da1c:	bd10      	pop	{r4, pc}
 800da1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da26:	e7f7      	b.n	800da18 <memmove+0x24>

0800da28 <__malloc_lock>:
 800da28:	4801      	ldr	r0, [pc, #4]	; (800da30 <__malloc_lock+0x8>)
 800da2a:	f000 bc11 	b.w	800e250 <__retarget_lock_acquire_recursive>
 800da2e:	bf00      	nop
 800da30:	200046f8 	.word	0x200046f8

0800da34 <__malloc_unlock>:
 800da34:	4801      	ldr	r0, [pc, #4]	; (800da3c <__malloc_unlock+0x8>)
 800da36:	f000 bc0c 	b.w	800e252 <__retarget_lock_release_recursive>
 800da3a:	bf00      	nop
 800da3c:	200046f8 	.word	0x200046f8

0800da40 <_realloc_r>:
 800da40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da44:	4680      	mov	r8, r0
 800da46:	4614      	mov	r4, r2
 800da48:	460e      	mov	r6, r1
 800da4a:	b921      	cbnz	r1, 800da56 <_realloc_r+0x16>
 800da4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da50:	4611      	mov	r1, r2
 800da52:	f7ff bd95 	b.w	800d580 <_malloc_r>
 800da56:	b92a      	cbnz	r2, 800da64 <_realloc_r+0x24>
 800da58:	f7ff fd26 	bl	800d4a8 <_free_r>
 800da5c:	4625      	mov	r5, r4
 800da5e:	4628      	mov	r0, r5
 800da60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da64:	f000 fc5c 	bl	800e320 <_malloc_usable_size_r>
 800da68:	4284      	cmp	r4, r0
 800da6a:	4607      	mov	r7, r0
 800da6c:	d802      	bhi.n	800da74 <_realloc_r+0x34>
 800da6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da72:	d812      	bhi.n	800da9a <_realloc_r+0x5a>
 800da74:	4621      	mov	r1, r4
 800da76:	4640      	mov	r0, r8
 800da78:	f7ff fd82 	bl	800d580 <_malloc_r>
 800da7c:	4605      	mov	r5, r0
 800da7e:	2800      	cmp	r0, #0
 800da80:	d0ed      	beq.n	800da5e <_realloc_r+0x1e>
 800da82:	42bc      	cmp	r4, r7
 800da84:	4622      	mov	r2, r4
 800da86:	4631      	mov	r1, r6
 800da88:	bf28      	it	cs
 800da8a:	463a      	movcs	r2, r7
 800da8c:	f7fc f8a8 	bl	8009be0 <memcpy>
 800da90:	4631      	mov	r1, r6
 800da92:	4640      	mov	r0, r8
 800da94:	f7ff fd08 	bl	800d4a8 <_free_r>
 800da98:	e7e1      	b.n	800da5e <_realloc_r+0x1e>
 800da9a:	4635      	mov	r5, r6
 800da9c:	e7df      	b.n	800da5e <_realloc_r+0x1e>

0800da9e <__sfputc_r>:
 800da9e:	6893      	ldr	r3, [r2, #8]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	b410      	push	{r4}
 800daa6:	6093      	str	r3, [r2, #8]
 800daa8:	da08      	bge.n	800dabc <__sfputc_r+0x1e>
 800daaa:	6994      	ldr	r4, [r2, #24]
 800daac:	42a3      	cmp	r3, r4
 800daae:	db01      	blt.n	800dab4 <__sfputc_r+0x16>
 800dab0:	290a      	cmp	r1, #10
 800dab2:	d103      	bne.n	800dabc <__sfputc_r+0x1e>
 800dab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab8:	f000 b94a 	b.w	800dd50 <__swbuf_r>
 800dabc:	6813      	ldr	r3, [r2, #0]
 800dabe:	1c58      	adds	r0, r3, #1
 800dac0:	6010      	str	r0, [r2, #0]
 800dac2:	7019      	strb	r1, [r3, #0]
 800dac4:	4608      	mov	r0, r1
 800dac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <__sfputs_r>:
 800dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dace:	4606      	mov	r6, r0
 800dad0:	460f      	mov	r7, r1
 800dad2:	4614      	mov	r4, r2
 800dad4:	18d5      	adds	r5, r2, r3
 800dad6:	42ac      	cmp	r4, r5
 800dad8:	d101      	bne.n	800dade <__sfputs_r+0x12>
 800dada:	2000      	movs	r0, #0
 800dadc:	e007      	b.n	800daee <__sfputs_r+0x22>
 800dade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae2:	463a      	mov	r2, r7
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7ff ffda 	bl	800da9e <__sfputc_r>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d1f3      	bne.n	800dad6 <__sfputs_r+0xa>
 800daee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800daf0 <_vfiprintf_r>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	460d      	mov	r5, r1
 800daf6:	b09d      	sub	sp, #116	; 0x74
 800daf8:	4614      	mov	r4, r2
 800dafa:	4698      	mov	r8, r3
 800dafc:	4606      	mov	r6, r0
 800dafe:	b118      	cbz	r0, 800db08 <_vfiprintf_r+0x18>
 800db00:	6983      	ldr	r3, [r0, #24]
 800db02:	b90b      	cbnz	r3, 800db08 <_vfiprintf_r+0x18>
 800db04:	f000 fb06 	bl	800e114 <__sinit>
 800db08:	4b89      	ldr	r3, [pc, #548]	; (800dd30 <_vfiprintf_r+0x240>)
 800db0a:	429d      	cmp	r5, r3
 800db0c:	d11b      	bne.n	800db46 <_vfiprintf_r+0x56>
 800db0e:	6875      	ldr	r5, [r6, #4]
 800db10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db12:	07d9      	lsls	r1, r3, #31
 800db14:	d405      	bmi.n	800db22 <_vfiprintf_r+0x32>
 800db16:	89ab      	ldrh	r3, [r5, #12]
 800db18:	059a      	lsls	r2, r3, #22
 800db1a:	d402      	bmi.n	800db22 <_vfiprintf_r+0x32>
 800db1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db1e:	f000 fb97 	bl	800e250 <__retarget_lock_acquire_recursive>
 800db22:	89ab      	ldrh	r3, [r5, #12]
 800db24:	071b      	lsls	r3, r3, #28
 800db26:	d501      	bpl.n	800db2c <_vfiprintf_r+0x3c>
 800db28:	692b      	ldr	r3, [r5, #16]
 800db2a:	b9eb      	cbnz	r3, 800db68 <_vfiprintf_r+0x78>
 800db2c:	4629      	mov	r1, r5
 800db2e:	4630      	mov	r0, r6
 800db30:	f000 f960 	bl	800ddf4 <__swsetup_r>
 800db34:	b1c0      	cbz	r0, 800db68 <_vfiprintf_r+0x78>
 800db36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db38:	07dc      	lsls	r4, r3, #31
 800db3a:	d50e      	bpl.n	800db5a <_vfiprintf_r+0x6a>
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db40:	b01d      	add	sp, #116	; 0x74
 800db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db46:	4b7b      	ldr	r3, [pc, #492]	; (800dd34 <_vfiprintf_r+0x244>)
 800db48:	429d      	cmp	r5, r3
 800db4a:	d101      	bne.n	800db50 <_vfiprintf_r+0x60>
 800db4c:	68b5      	ldr	r5, [r6, #8]
 800db4e:	e7df      	b.n	800db10 <_vfiprintf_r+0x20>
 800db50:	4b79      	ldr	r3, [pc, #484]	; (800dd38 <_vfiprintf_r+0x248>)
 800db52:	429d      	cmp	r5, r3
 800db54:	bf08      	it	eq
 800db56:	68f5      	ldreq	r5, [r6, #12]
 800db58:	e7da      	b.n	800db10 <_vfiprintf_r+0x20>
 800db5a:	89ab      	ldrh	r3, [r5, #12]
 800db5c:	0598      	lsls	r0, r3, #22
 800db5e:	d4ed      	bmi.n	800db3c <_vfiprintf_r+0x4c>
 800db60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db62:	f000 fb76 	bl	800e252 <__retarget_lock_release_recursive>
 800db66:	e7e9      	b.n	800db3c <_vfiprintf_r+0x4c>
 800db68:	2300      	movs	r3, #0
 800db6a:	9309      	str	r3, [sp, #36]	; 0x24
 800db6c:	2320      	movs	r3, #32
 800db6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db72:	f8cd 800c 	str.w	r8, [sp, #12]
 800db76:	2330      	movs	r3, #48	; 0x30
 800db78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dd3c <_vfiprintf_r+0x24c>
 800db7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db80:	f04f 0901 	mov.w	r9, #1
 800db84:	4623      	mov	r3, r4
 800db86:	469a      	mov	sl, r3
 800db88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db8c:	b10a      	cbz	r2, 800db92 <_vfiprintf_r+0xa2>
 800db8e:	2a25      	cmp	r2, #37	; 0x25
 800db90:	d1f9      	bne.n	800db86 <_vfiprintf_r+0x96>
 800db92:	ebba 0b04 	subs.w	fp, sl, r4
 800db96:	d00b      	beq.n	800dbb0 <_vfiprintf_r+0xc0>
 800db98:	465b      	mov	r3, fp
 800db9a:	4622      	mov	r2, r4
 800db9c:	4629      	mov	r1, r5
 800db9e:	4630      	mov	r0, r6
 800dba0:	f7ff ff94 	bl	800dacc <__sfputs_r>
 800dba4:	3001      	adds	r0, #1
 800dba6:	f000 80aa 	beq.w	800dcfe <_vfiprintf_r+0x20e>
 800dbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbac:	445a      	add	r2, fp
 800dbae:	9209      	str	r2, [sp, #36]	; 0x24
 800dbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f000 80a2 	beq.w	800dcfe <_vfiprintf_r+0x20e>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbc4:	f10a 0a01 	add.w	sl, sl, #1
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	9307      	str	r3, [sp, #28]
 800dbcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbd0:	931a      	str	r3, [sp, #104]	; 0x68
 800dbd2:	4654      	mov	r4, sl
 800dbd4:	2205      	movs	r2, #5
 800dbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbda:	4858      	ldr	r0, [pc, #352]	; (800dd3c <_vfiprintf_r+0x24c>)
 800dbdc:	f7f2 fb10 	bl	8000200 <memchr>
 800dbe0:	9a04      	ldr	r2, [sp, #16]
 800dbe2:	b9d8      	cbnz	r0, 800dc1c <_vfiprintf_r+0x12c>
 800dbe4:	06d1      	lsls	r1, r2, #27
 800dbe6:	bf44      	itt	mi
 800dbe8:	2320      	movmi	r3, #32
 800dbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbee:	0713      	lsls	r3, r2, #28
 800dbf0:	bf44      	itt	mi
 800dbf2:	232b      	movmi	r3, #43	; 0x2b
 800dbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800dbfe:	d015      	beq.n	800dc2c <_vfiprintf_r+0x13c>
 800dc00:	9a07      	ldr	r2, [sp, #28]
 800dc02:	4654      	mov	r4, sl
 800dc04:	2000      	movs	r0, #0
 800dc06:	f04f 0c0a 	mov.w	ip, #10
 800dc0a:	4621      	mov	r1, r4
 800dc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc10:	3b30      	subs	r3, #48	; 0x30
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d94e      	bls.n	800dcb4 <_vfiprintf_r+0x1c4>
 800dc16:	b1b0      	cbz	r0, 800dc46 <_vfiprintf_r+0x156>
 800dc18:	9207      	str	r2, [sp, #28]
 800dc1a:	e014      	b.n	800dc46 <_vfiprintf_r+0x156>
 800dc1c:	eba0 0308 	sub.w	r3, r0, r8
 800dc20:	fa09 f303 	lsl.w	r3, r9, r3
 800dc24:	4313      	orrs	r3, r2
 800dc26:	9304      	str	r3, [sp, #16]
 800dc28:	46a2      	mov	sl, r4
 800dc2a:	e7d2      	b.n	800dbd2 <_vfiprintf_r+0xe2>
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	1d19      	adds	r1, r3, #4
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	9103      	str	r1, [sp, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	bfbb      	ittet	lt
 800dc38:	425b      	neglt	r3, r3
 800dc3a:	f042 0202 	orrlt.w	r2, r2, #2
 800dc3e:	9307      	strge	r3, [sp, #28]
 800dc40:	9307      	strlt	r3, [sp, #28]
 800dc42:	bfb8      	it	lt
 800dc44:	9204      	strlt	r2, [sp, #16]
 800dc46:	7823      	ldrb	r3, [r4, #0]
 800dc48:	2b2e      	cmp	r3, #46	; 0x2e
 800dc4a:	d10c      	bne.n	800dc66 <_vfiprintf_r+0x176>
 800dc4c:	7863      	ldrb	r3, [r4, #1]
 800dc4e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc50:	d135      	bne.n	800dcbe <_vfiprintf_r+0x1ce>
 800dc52:	9b03      	ldr	r3, [sp, #12]
 800dc54:	1d1a      	adds	r2, r3, #4
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	9203      	str	r2, [sp, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	bfb8      	it	lt
 800dc5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc62:	3402      	adds	r4, #2
 800dc64:	9305      	str	r3, [sp, #20]
 800dc66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd4c <_vfiprintf_r+0x25c>
 800dc6a:	7821      	ldrb	r1, [r4, #0]
 800dc6c:	2203      	movs	r2, #3
 800dc6e:	4650      	mov	r0, sl
 800dc70:	f7f2 fac6 	bl	8000200 <memchr>
 800dc74:	b140      	cbz	r0, 800dc88 <_vfiprintf_r+0x198>
 800dc76:	2340      	movs	r3, #64	; 0x40
 800dc78:	eba0 000a 	sub.w	r0, r0, sl
 800dc7c:	fa03 f000 	lsl.w	r0, r3, r0
 800dc80:	9b04      	ldr	r3, [sp, #16]
 800dc82:	4303      	orrs	r3, r0
 800dc84:	3401      	adds	r4, #1
 800dc86:	9304      	str	r3, [sp, #16]
 800dc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8c:	482c      	ldr	r0, [pc, #176]	; (800dd40 <_vfiprintf_r+0x250>)
 800dc8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc92:	2206      	movs	r2, #6
 800dc94:	f7f2 fab4 	bl	8000200 <memchr>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d03f      	beq.n	800dd1c <_vfiprintf_r+0x22c>
 800dc9c:	4b29      	ldr	r3, [pc, #164]	; (800dd44 <_vfiprintf_r+0x254>)
 800dc9e:	bb1b      	cbnz	r3, 800dce8 <_vfiprintf_r+0x1f8>
 800dca0:	9b03      	ldr	r3, [sp, #12]
 800dca2:	3307      	adds	r3, #7
 800dca4:	f023 0307 	bic.w	r3, r3, #7
 800dca8:	3308      	adds	r3, #8
 800dcaa:	9303      	str	r3, [sp, #12]
 800dcac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcae:	443b      	add	r3, r7
 800dcb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb2:	e767      	b.n	800db84 <_vfiprintf_r+0x94>
 800dcb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcb8:	460c      	mov	r4, r1
 800dcba:	2001      	movs	r0, #1
 800dcbc:	e7a5      	b.n	800dc0a <_vfiprintf_r+0x11a>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	3401      	adds	r4, #1
 800dcc2:	9305      	str	r3, [sp, #20]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	f04f 0c0a 	mov.w	ip, #10
 800dcca:	4620      	mov	r0, r4
 800dccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcd0:	3a30      	subs	r2, #48	; 0x30
 800dcd2:	2a09      	cmp	r2, #9
 800dcd4:	d903      	bls.n	800dcde <_vfiprintf_r+0x1ee>
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d0c5      	beq.n	800dc66 <_vfiprintf_r+0x176>
 800dcda:	9105      	str	r1, [sp, #20]
 800dcdc:	e7c3      	b.n	800dc66 <_vfiprintf_r+0x176>
 800dcde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dce2:	4604      	mov	r4, r0
 800dce4:	2301      	movs	r3, #1
 800dce6:	e7f0      	b.n	800dcca <_vfiprintf_r+0x1da>
 800dce8:	ab03      	add	r3, sp, #12
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	462a      	mov	r2, r5
 800dcee:	4b16      	ldr	r3, [pc, #88]	; (800dd48 <_vfiprintf_r+0x258>)
 800dcf0:	a904      	add	r1, sp, #16
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f7fc f82a 	bl	8009d4c <_printf_float>
 800dcf8:	4607      	mov	r7, r0
 800dcfa:	1c78      	adds	r0, r7, #1
 800dcfc:	d1d6      	bne.n	800dcac <_vfiprintf_r+0x1bc>
 800dcfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd00:	07d9      	lsls	r1, r3, #31
 800dd02:	d405      	bmi.n	800dd10 <_vfiprintf_r+0x220>
 800dd04:	89ab      	ldrh	r3, [r5, #12]
 800dd06:	059a      	lsls	r2, r3, #22
 800dd08:	d402      	bmi.n	800dd10 <_vfiprintf_r+0x220>
 800dd0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd0c:	f000 faa1 	bl	800e252 <__retarget_lock_release_recursive>
 800dd10:	89ab      	ldrh	r3, [r5, #12]
 800dd12:	065b      	lsls	r3, r3, #25
 800dd14:	f53f af12 	bmi.w	800db3c <_vfiprintf_r+0x4c>
 800dd18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd1a:	e711      	b.n	800db40 <_vfiprintf_r+0x50>
 800dd1c:	ab03      	add	r3, sp, #12
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	462a      	mov	r2, r5
 800dd22:	4b09      	ldr	r3, [pc, #36]	; (800dd48 <_vfiprintf_r+0x258>)
 800dd24:	a904      	add	r1, sp, #16
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7fc fab4 	bl	800a294 <_printf_i>
 800dd2c:	e7e4      	b.n	800dcf8 <_vfiprintf_r+0x208>
 800dd2e:	bf00      	nop
 800dd30:	0800ea24 	.word	0x0800ea24
 800dd34:	0800ea44 	.word	0x0800ea44
 800dd38:	0800ea04 	.word	0x0800ea04
 800dd3c:	0800e9b4 	.word	0x0800e9b4
 800dd40:	0800e9be 	.word	0x0800e9be
 800dd44:	08009d4d 	.word	0x08009d4d
 800dd48:	0800dacd 	.word	0x0800dacd
 800dd4c:	0800e9ba 	.word	0x0800e9ba

0800dd50 <__swbuf_r>:
 800dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd52:	460e      	mov	r6, r1
 800dd54:	4614      	mov	r4, r2
 800dd56:	4605      	mov	r5, r0
 800dd58:	b118      	cbz	r0, 800dd62 <__swbuf_r+0x12>
 800dd5a:	6983      	ldr	r3, [r0, #24]
 800dd5c:	b90b      	cbnz	r3, 800dd62 <__swbuf_r+0x12>
 800dd5e:	f000 f9d9 	bl	800e114 <__sinit>
 800dd62:	4b21      	ldr	r3, [pc, #132]	; (800dde8 <__swbuf_r+0x98>)
 800dd64:	429c      	cmp	r4, r3
 800dd66:	d12b      	bne.n	800ddc0 <__swbuf_r+0x70>
 800dd68:	686c      	ldr	r4, [r5, #4]
 800dd6a:	69a3      	ldr	r3, [r4, #24]
 800dd6c:	60a3      	str	r3, [r4, #8]
 800dd6e:	89a3      	ldrh	r3, [r4, #12]
 800dd70:	071a      	lsls	r2, r3, #28
 800dd72:	d52f      	bpl.n	800ddd4 <__swbuf_r+0x84>
 800dd74:	6923      	ldr	r3, [r4, #16]
 800dd76:	b36b      	cbz	r3, 800ddd4 <__swbuf_r+0x84>
 800dd78:	6923      	ldr	r3, [r4, #16]
 800dd7a:	6820      	ldr	r0, [r4, #0]
 800dd7c:	1ac0      	subs	r0, r0, r3
 800dd7e:	6963      	ldr	r3, [r4, #20]
 800dd80:	b2f6      	uxtb	r6, r6
 800dd82:	4283      	cmp	r3, r0
 800dd84:	4637      	mov	r7, r6
 800dd86:	dc04      	bgt.n	800dd92 <__swbuf_r+0x42>
 800dd88:	4621      	mov	r1, r4
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f000 f92e 	bl	800dfec <_fflush_r>
 800dd90:	bb30      	cbnz	r0, 800dde0 <__swbuf_r+0x90>
 800dd92:	68a3      	ldr	r3, [r4, #8]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	60a3      	str	r3, [r4, #8]
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	1c5a      	adds	r2, r3, #1
 800dd9c:	6022      	str	r2, [r4, #0]
 800dd9e:	701e      	strb	r6, [r3, #0]
 800dda0:	6963      	ldr	r3, [r4, #20]
 800dda2:	3001      	adds	r0, #1
 800dda4:	4283      	cmp	r3, r0
 800dda6:	d004      	beq.n	800ddb2 <__swbuf_r+0x62>
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	07db      	lsls	r3, r3, #31
 800ddac:	d506      	bpl.n	800ddbc <__swbuf_r+0x6c>
 800ddae:	2e0a      	cmp	r6, #10
 800ddb0:	d104      	bne.n	800ddbc <__swbuf_r+0x6c>
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	f000 f919 	bl	800dfec <_fflush_r>
 800ddba:	b988      	cbnz	r0, 800dde0 <__swbuf_r+0x90>
 800ddbc:	4638      	mov	r0, r7
 800ddbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <__swbuf_r+0x9c>)
 800ddc2:	429c      	cmp	r4, r3
 800ddc4:	d101      	bne.n	800ddca <__swbuf_r+0x7a>
 800ddc6:	68ac      	ldr	r4, [r5, #8]
 800ddc8:	e7cf      	b.n	800dd6a <__swbuf_r+0x1a>
 800ddca:	4b09      	ldr	r3, [pc, #36]	; (800ddf0 <__swbuf_r+0xa0>)
 800ddcc:	429c      	cmp	r4, r3
 800ddce:	bf08      	it	eq
 800ddd0:	68ec      	ldreq	r4, [r5, #12]
 800ddd2:	e7ca      	b.n	800dd6a <__swbuf_r+0x1a>
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	f000 f80c 	bl	800ddf4 <__swsetup_r>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d0cb      	beq.n	800dd78 <__swbuf_r+0x28>
 800dde0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dde4:	e7ea      	b.n	800ddbc <__swbuf_r+0x6c>
 800dde6:	bf00      	nop
 800dde8:	0800ea24 	.word	0x0800ea24
 800ddec:	0800ea44 	.word	0x0800ea44
 800ddf0:	0800ea04 	.word	0x0800ea04

0800ddf4 <__swsetup_r>:
 800ddf4:	4b32      	ldr	r3, [pc, #200]	; (800dec0 <__swsetup_r+0xcc>)
 800ddf6:	b570      	push	{r4, r5, r6, lr}
 800ddf8:	681d      	ldr	r5, [r3, #0]
 800ddfa:	4606      	mov	r6, r0
 800ddfc:	460c      	mov	r4, r1
 800ddfe:	b125      	cbz	r5, 800de0a <__swsetup_r+0x16>
 800de00:	69ab      	ldr	r3, [r5, #24]
 800de02:	b913      	cbnz	r3, 800de0a <__swsetup_r+0x16>
 800de04:	4628      	mov	r0, r5
 800de06:	f000 f985 	bl	800e114 <__sinit>
 800de0a:	4b2e      	ldr	r3, [pc, #184]	; (800dec4 <__swsetup_r+0xd0>)
 800de0c:	429c      	cmp	r4, r3
 800de0e:	d10f      	bne.n	800de30 <__swsetup_r+0x3c>
 800de10:	686c      	ldr	r4, [r5, #4]
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de18:	0719      	lsls	r1, r3, #28
 800de1a:	d42c      	bmi.n	800de76 <__swsetup_r+0x82>
 800de1c:	06dd      	lsls	r5, r3, #27
 800de1e:	d411      	bmi.n	800de44 <__swsetup_r+0x50>
 800de20:	2309      	movs	r3, #9
 800de22:	6033      	str	r3, [r6, #0]
 800de24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de2e:	e03e      	b.n	800deae <__swsetup_r+0xba>
 800de30:	4b25      	ldr	r3, [pc, #148]	; (800dec8 <__swsetup_r+0xd4>)
 800de32:	429c      	cmp	r4, r3
 800de34:	d101      	bne.n	800de3a <__swsetup_r+0x46>
 800de36:	68ac      	ldr	r4, [r5, #8]
 800de38:	e7eb      	b.n	800de12 <__swsetup_r+0x1e>
 800de3a:	4b24      	ldr	r3, [pc, #144]	; (800decc <__swsetup_r+0xd8>)
 800de3c:	429c      	cmp	r4, r3
 800de3e:	bf08      	it	eq
 800de40:	68ec      	ldreq	r4, [r5, #12]
 800de42:	e7e6      	b.n	800de12 <__swsetup_r+0x1e>
 800de44:	0758      	lsls	r0, r3, #29
 800de46:	d512      	bpl.n	800de6e <__swsetup_r+0x7a>
 800de48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de4a:	b141      	cbz	r1, 800de5e <__swsetup_r+0x6a>
 800de4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de50:	4299      	cmp	r1, r3
 800de52:	d002      	beq.n	800de5a <__swsetup_r+0x66>
 800de54:	4630      	mov	r0, r6
 800de56:	f7ff fb27 	bl	800d4a8 <_free_r>
 800de5a:	2300      	movs	r3, #0
 800de5c:	6363      	str	r3, [r4, #52]	; 0x34
 800de5e:	89a3      	ldrh	r3, [r4, #12]
 800de60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de64:	81a3      	strh	r3, [r4, #12]
 800de66:	2300      	movs	r3, #0
 800de68:	6063      	str	r3, [r4, #4]
 800de6a:	6923      	ldr	r3, [r4, #16]
 800de6c:	6023      	str	r3, [r4, #0]
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	f043 0308 	orr.w	r3, r3, #8
 800de74:	81a3      	strh	r3, [r4, #12]
 800de76:	6923      	ldr	r3, [r4, #16]
 800de78:	b94b      	cbnz	r3, 800de8e <__swsetup_r+0x9a>
 800de7a:	89a3      	ldrh	r3, [r4, #12]
 800de7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de84:	d003      	beq.n	800de8e <__swsetup_r+0x9a>
 800de86:	4621      	mov	r1, r4
 800de88:	4630      	mov	r0, r6
 800de8a:	f000 fa09 	bl	800e2a0 <__smakebuf_r>
 800de8e:	89a0      	ldrh	r0, [r4, #12]
 800de90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de94:	f010 0301 	ands.w	r3, r0, #1
 800de98:	d00a      	beq.n	800deb0 <__swsetup_r+0xbc>
 800de9a:	2300      	movs	r3, #0
 800de9c:	60a3      	str	r3, [r4, #8]
 800de9e:	6963      	ldr	r3, [r4, #20]
 800dea0:	425b      	negs	r3, r3
 800dea2:	61a3      	str	r3, [r4, #24]
 800dea4:	6923      	ldr	r3, [r4, #16]
 800dea6:	b943      	cbnz	r3, 800deba <__swsetup_r+0xc6>
 800dea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800deac:	d1ba      	bne.n	800de24 <__swsetup_r+0x30>
 800deae:	bd70      	pop	{r4, r5, r6, pc}
 800deb0:	0781      	lsls	r1, r0, #30
 800deb2:	bf58      	it	pl
 800deb4:	6963      	ldrpl	r3, [r4, #20]
 800deb6:	60a3      	str	r3, [r4, #8]
 800deb8:	e7f4      	b.n	800dea4 <__swsetup_r+0xb0>
 800deba:	2000      	movs	r0, #0
 800debc:	e7f7      	b.n	800deae <__swsetup_r+0xba>
 800debe:	bf00      	nop
 800dec0:	200000b8 	.word	0x200000b8
 800dec4:	0800ea24 	.word	0x0800ea24
 800dec8:	0800ea44 	.word	0x0800ea44
 800decc:	0800ea04 	.word	0x0800ea04

0800ded0 <abort>:
 800ded0:	b508      	push	{r3, lr}
 800ded2:	2006      	movs	r0, #6
 800ded4:	f000 fa54 	bl	800e380 <raise>
 800ded8:	2001      	movs	r0, #1
 800deda:	f7f5 f8fd 	bl	80030d8 <_exit>
	...

0800dee0 <__sflush_r>:
 800dee0:	898a      	ldrh	r2, [r1, #12]
 800dee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee6:	4605      	mov	r5, r0
 800dee8:	0710      	lsls	r0, r2, #28
 800deea:	460c      	mov	r4, r1
 800deec:	d458      	bmi.n	800dfa0 <__sflush_r+0xc0>
 800deee:	684b      	ldr	r3, [r1, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	dc05      	bgt.n	800df00 <__sflush_r+0x20>
 800def4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800def6:	2b00      	cmp	r3, #0
 800def8:	dc02      	bgt.n	800df00 <__sflush_r+0x20>
 800defa:	2000      	movs	r0, #0
 800defc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df02:	2e00      	cmp	r6, #0
 800df04:	d0f9      	beq.n	800defa <__sflush_r+0x1a>
 800df06:	2300      	movs	r3, #0
 800df08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df0c:	682f      	ldr	r7, [r5, #0]
 800df0e:	602b      	str	r3, [r5, #0]
 800df10:	d032      	beq.n	800df78 <__sflush_r+0x98>
 800df12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df14:	89a3      	ldrh	r3, [r4, #12]
 800df16:	075a      	lsls	r2, r3, #29
 800df18:	d505      	bpl.n	800df26 <__sflush_r+0x46>
 800df1a:	6863      	ldr	r3, [r4, #4]
 800df1c:	1ac0      	subs	r0, r0, r3
 800df1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df20:	b10b      	cbz	r3, 800df26 <__sflush_r+0x46>
 800df22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df24:	1ac0      	subs	r0, r0, r3
 800df26:	2300      	movs	r3, #0
 800df28:	4602      	mov	r2, r0
 800df2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df2c:	6a21      	ldr	r1, [r4, #32]
 800df2e:	4628      	mov	r0, r5
 800df30:	47b0      	blx	r6
 800df32:	1c43      	adds	r3, r0, #1
 800df34:	89a3      	ldrh	r3, [r4, #12]
 800df36:	d106      	bne.n	800df46 <__sflush_r+0x66>
 800df38:	6829      	ldr	r1, [r5, #0]
 800df3a:	291d      	cmp	r1, #29
 800df3c:	d82c      	bhi.n	800df98 <__sflush_r+0xb8>
 800df3e:	4a2a      	ldr	r2, [pc, #168]	; (800dfe8 <__sflush_r+0x108>)
 800df40:	40ca      	lsrs	r2, r1
 800df42:	07d6      	lsls	r6, r2, #31
 800df44:	d528      	bpl.n	800df98 <__sflush_r+0xb8>
 800df46:	2200      	movs	r2, #0
 800df48:	6062      	str	r2, [r4, #4]
 800df4a:	04d9      	lsls	r1, r3, #19
 800df4c:	6922      	ldr	r2, [r4, #16]
 800df4e:	6022      	str	r2, [r4, #0]
 800df50:	d504      	bpl.n	800df5c <__sflush_r+0x7c>
 800df52:	1c42      	adds	r2, r0, #1
 800df54:	d101      	bne.n	800df5a <__sflush_r+0x7a>
 800df56:	682b      	ldr	r3, [r5, #0]
 800df58:	b903      	cbnz	r3, 800df5c <__sflush_r+0x7c>
 800df5a:	6560      	str	r0, [r4, #84]	; 0x54
 800df5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df5e:	602f      	str	r7, [r5, #0]
 800df60:	2900      	cmp	r1, #0
 800df62:	d0ca      	beq.n	800defa <__sflush_r+0x1a>
 800df64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df68:	4299      	cmp	r1, r3
 800df6a:	d002      	beq.n	800df72 <__sflush_r+0x92>
 800df6c:	4628      	mov	r0, r5
 800df6e:	f7ff fa9b 	bl	800d4a8 <_free_r>
 800df72:	2000      	movs	r0, #0
 800df74:	6360      	str	r0, [r4, #52]	; 0x34
 800df76:	e7c1      	b.n	800defc <__sflush_r+0x1c>
 800df78:	6a21      	ldr	r1, [r4, #32]
 800df7a:	2301      	movs	r3, #1
 800df7c:	4628      	mov	r0, r5
 800df7e:	47b0      	blx	r6
 800df80:	1c41      	adds	r1, r0, #1
 800df82:	d1c7      	bne.n	800df14 <__sflush_r+0x34>
 800df84:	682b      	ldr	r3, [r5, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d0c4      	beq.n	800df14 <__sflush_r+0x34>
 800df8a:	2b1d      	cmp	r3, #29
 800df8c:	d001      	beq.n	800df92 <__sflush_r+0xb2>
 800df8e:	2b16      	cmp	r3, #22
 800df90:	d101      	bne.n	800df96 <__sflush_r+0xb6>
 800df92:	602f      	str	r7, [r5, #0]
 800df94:	e7b1      	b.n	800defa <__sflush_r+0x1a>
 800df96:	89a3      	ldrh	r3, [r4, #12]
 800df98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df9c:	81a3      	strh	r3, [r4, #12]
 800df9e:	e7ad      	b.n	800defc <__sflush_r+0x1c>
 800dfa0:	690f      	ldr	r7, [r1, #16]
 800dfa2:	2f00      	cmp	r7, #0
 800dfa4:	d0a9      	beq.n	800defa <__sflush_r+0x1a>
 800dfa6:	0793      	lsls	r3, r2, #30
 800dfa8:	680e      	ldr	r6, [r1, #0]
 800dfaa:	bf08      	it	eq
 800dfac:	694b      	ldreq	r3, [r1, #20]
 800dfae:	600f      	str	r7, [r1, #0]
 800dfb0:	bf18      	it	ne
 800dfb2:	2300      	movne	r3, #0
 800dfb4:	eba6 0807 	sub.w	r8, r6, r7
 800dfb8:	608b      	str	r3, [r1, #8]
 800dfba:	f1b8 0f00 	cmp.w	r8, #0
 800dfbe:	dd9c      	ble.n	800defa <__sflush_r+0x1a>
 800dfc0:	6a21      	ldr	r1, [r4, #32]
 800dfc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dfc4:	4643      	mov	r3, r8
 800dfc6:	463a      	mov	r2, r7
 800dfc8:	4628      	mov	r0, r5
 800dfca:	47b0      	blx	r6
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	dc06      	bgt.n	800dfde <__sflush_r+0xfe>
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfd6:	81a3      	strh	r3, [r4, #12]
 800dfd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfdc:	e78e      	b.n	800defc <__sflush_r+0x1c>
 800dfde:	4407      	add	r7, r0
 800dfe0:	eba8 0800 	sub.w	r8, r8, r0
 800dfe4:	e7e9      	b.n	800dfba <__sflush_r+0xda>
 800dfe6:	bf00      	nop
 800dfe8:	20400001 	.word	0x20400001

0800dfec <_fflush_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	690b      	ldr	r3, [r1, #16]
 800dff0:	4605      	mov	r5, r0
 800dff2:	460c      	mov	r4, r1
 800dff4:	b913      	cbnz	r3, 800dffc <_fflush_r+0x10>
 800dff6:	2500      	movs	r5, #0
 800dff8:	4628      	mov	r0, r5
 800dffa:	bd38      	pop	{r3, r4, r5, pc}
 800dffc:	b118      	cbz	r0, 800e006 <_fflush_r+0x1a>
 800dffe:	6983      	ldr	r3, [r0, #24]
 800e000:	b90b      	cbnz	r3, 800e006 <_fflush_r+0x1a>
 800e002:	f000 f887 	bl	800e114 <__sinit>
 800e006:	4b14      	ldr	r3, [pc, #80]	; (800e058 <_fflush_r+0x6c>)
 800e008:	429c      	cmp	r4, r3
 800e00a:	d11b      	bne.n	800e044 <_fflush_r+0x58>
 800e00c:	686c      	ldr	r4, [r5, #4]
 800e00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d0ef      	beq.n	800dff6 <_fflush_r+0xa>
 800e016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e018:	07d0      	lsls	r0, r2, #31
 800e01a:	d404      	bmi.n	800e026 <_fflush_r+0x3a>
 800e01c:	0599      	lsls	r1, r3, #22
 800e01e:	d402      	bmi.n	800e026 <_fflush_r+0x3a>
 800e020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e022:	f000 f915 	bl	800e250 <__retarget_lock_acquire_recursive>
 800e026:	4628      	mov	r0, r5
 800e028:	4621      	mov	r1, r4
 800e02a:	f7ff ff59 	bl	800dee0 <__sflush_r>
 800e02e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e030:	07da      	lsls	r2, r3, #31
 800e032:	4605      	mov	r5, r0
 800e034:	d4e0      	bmi.n	800dff8 <_fflush_r+0xc>
 800e036:	89a3      	ldrh	r3, [r4, #12]
 800e038:	059b      	lsls	r3, r3, #22
 800e03a:	d4dd      	bmi.n	800dff8 <_fflush_r+0xc>
 800e03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e03e:	f000 f908 	bl	800e252 <__retarget_lock_release_recursive>
 800e042:	e7d9      	b.n	800dff8 <_fflush_r+0xc>
 800e044:	4b05      	ldr	r3, [pc, #20]	; (800e05c <_fflush_r+0x70>)
 800e046:	429c      	cmp	r4, r3
 800e048:	d101      	bne.n	800e04e <_fflush_r+0x62>
 800e04a:	68ac      	ldr	r4, [r5, #8]
 800e04c:	e7df      	b.n	800e00e <_fflush_r+0x22>
 800e04e:	4b04      	ldr	r3, [pc, #16]	; (800e060 <_fflush_r+0x74>)
 800e050:	429c      	cmp	r4, r3
 800e052:	bf08      	it	eq
 800e054:	68ec      	ldreq	r4, [r5, #12]
 800e056:	e7da      	b.n	800e00e <_fflush_r+0x22>
 800e058:	0800ea24 	.word	0x0800ea24
 800e05c:	0800ea44 	.word	0x0800ea44
 800e060:	0800ea04 	.word	0x0800ea04

0800e064 <std>:
 800e064:	2300      	movs	r3, #0
 800e066:	b510      	push	{r4, lr}
 800e068:	4604      	mov	r4, r0
 800e06a:	e9c0 3300 	strd	r3, r3, [r0]
 800e06e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e072:	6083      	str	r3, [r0, #8]
 800e074:	8181      	strh	r1, [r0, #12]
 800e076:	6643      	str	r3, [r0, #100]	; 0x64
 800e078:	81c2      	strh	r2, [r0, #14]
 800e07a:	6183      	str	r3, [r0, #24]
 800e07c:	4619      	mov	r1, r3
 800e07e:	2208      	movs	r2, #8
 800e080:	305c      	adds	r0, #92	; 0x5c
 800e082:	f7fb fdbb 	bl	8009bfc <memset>
 800e086:	4b05      	ldr	r3, [pc, #20]	; (800e09c <std+0x38>)
 800e088:	6263      	str	r3, [r4, #36]	; 0x24
 800e08a:	4b05      	ldr	r3, [pc, #20]	; (800e0a0 <std+0x3c>)
 800e08c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e08e:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <std+0x40>)
 800e090:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e092:	4b05      	ldr	r3, [pc, #20]	; (800e0a8 <std+0x44>)
 800e094:	6224      	str	r4, [r4, #32]
 800e096:	6323      	str	r3, [r4, #48]	; 0x30
 800e098:	bd10      	pop	{r4, pc}
 800e09a:	bf00      	nop
 800e09c:	0800e3b9 	.word	0x0800e3b9
 800e0a0:	0800e3db 	.word	0x0800e3db
 800e0a4:	0800e413 	.word	0x0800e413
 800e0a8:	0800e437 	.word	0x0800e437

0800e0ac <_cleanup_r>:
 800e0ac:	4901      	ldr	r1, [pc, #4]	; (800e0b4 <_cleanup_r+0x8>)
 800e0ae:	f000 b8af 	b.w	800e210 <_fwalk_reent>
 800e0b2:	bf00      	nop
 800e0b4:	0800dfed 	.word	0x0800dfed

0800e0b8 <__sfmoreglue>:
 800e0b8:	b570      	push	{r4, r5, r6, lr}
 800e0ba:	2268      	movs	r2, #104	; 0x68
 800e0bc:	1e4d      	subs	r5, r1, #1
 800e0be:	4355      	muls	r5, r2
 800e0c0:	460e      	mov	r6, r1
 800e0c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e0c6:	f7ff fa5b 	bl	800d580 <_malloc_r>
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	b140      	cbz	r0, 800e0e0 <__sfmoreglue+0x28>
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	e9c0 1600 	strd	r1, r6, [r0]
 800e0d4:	300c      	adds	r0, #12
 800e0d6:	60a0      	str	r0, [r4, #8]
 800e0d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e0dc:	f7fb fd8e 	bl	8009bfc <memset>
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}

0800e0e4 <__sfp_lock_acquire>:
 800e0e4:	4801      	ldr	r0, [pc, #4]	; (800e0ec <__sfp_lock_acquire+0x8>)
 800e0e6:	f000 b8b3 	b.w	800e250 <__retarget_lock_acquire_recursive>
 800e0ea:	bf00      	nop
 800e0ec:	200046f9 	.word	0x200046f9

0800e0f0 <__sfp_lock_release>:
 800e0f0:	4801      	ldr	r0, [pc, #4]	; (800e0f8 <__sfp_lock_release+0x8>)
 800e0f2:	f000 b8ae 	b.w	800e252 <__retarget_lock_release_recursive>
 800e0f6:	bf00      	nop
 800e0f8:	200046f9 	.word	0x200046f9

0800e0fc <__sinit_lock_acquire>:
 800e0fc:	4801      	ldr	r0, [pc, #4]	; (800e104 <__sinit_lock_acquire+0x8>)
 800e0fe:	f000 b8a7 	b.w	800e250 <__retarget_lock_acquire_recursive>
 800e102:	bf00      	nop
 800e104:	200046fa 	.word	0x200046fa

0800e108 <__sinit_lock_release>:
 800e108:	4801      	ldr	r0, [pc, #4]	; (800e110 <__sinit_lock_release+0x8>)
 800e10a:	f000 b8a2 	b.w	800e252 <__retarget_lock_release_recursive>
 800e10e:	bf00      	nop
 800e110:	200046fa 	.word	0x200046fa

0800e114 <__sinit>:
 800e114:	b510      	push	{r4, lr}
 800e116:	4604      	mov	r4, r0
 800e118:	f7ff fff0 	bl	800e0fc <__sinit_lock_acquire>
 800e11c:	69a3      	ldr	r3, [r4, #24]
 800e11e:	b11b      	cbz	r3, 800e128 <__sinit+0x14>
 800e120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e124:	f7ff bff0 	b.w	800e108 <__sinit_lock_release>
 800e128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e12c:	6523      	str	r3, [r4, #80]	; 0x50
 800e12e:	4b13      	ldr	r3, [pc, #76]	; (800e17c <__sinit+0x68>)
 800e130:	4a13      	ldr	r2, [pc, #76]	; (800e180 <__sinit+0x6c>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	62a2      	str	r2, [r4, #40]	; 0x28
 800e136:	42a3      	cmp	r3, r4
 800e138:	bf04      	itt	eq
 800e13a:	2301      	moveq	r3, #1
 800e13c:	61a3      	streq	r3, [r4, #24]
 800e13e:	4620      	mov	r0, r4
 800e140:	f000 f820 	bl	800e184 <__sfp>
 800e144:	6060      	str	r0, [r4, #4]
 800e146:	4620      	mov	r0, r4
 800e148:	f000 f81c 	bl	800e184 <__sfp>
 800e14c:	60a0      	str	r0, [r4, #8]
 800e14e:	4620      	mov	r0, r4
 800e150:	f000 f818 	bl	800e184 <__sfp>
 800e154:	2200      	movs	r2, #0
 800e156:	60e0      	str	r0, [r4, #12]
 800e158:	2104      	movs	r1, #4
 800e15a:	6860      	ldr	r0, [r4, #4]
 800e15c:	f7ff ff82 	bl	800e064 <std>
 800e160:	68a0      	ldr	r0, [r4, #8]
 800e162:	2201      	movs	r2, #1
 800e164:	2109      	movs	r1, #9
 800e166:	f7ff ff7d 	bl	800e064 <std>
 800e16a:	68e0      	ldr	r0, [r4, #12]
 800e16c:	2202      	movs	r2, #2
 800e16e:	2112      	movs	r1, #18
 800e170:	f7ff ff78 	bl	800e064 <std>
 800e174:	2301      	movs	r3, #1
 800e176:	61a3      	str	r3, [r4, #24]
 800e178:	e7d2      	b.n	800e120 <__sinit+0xc>
 800e17a:	bf00      	nop
 800e17c:	0800e5c0 	.word	0x0800e5c0
 800e180:	0800e0ad 	.word	0x0800e0ad

0800e184 <__sfp>:
 800e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e186:	4607      	mov	r7, r0
 800e188:	f7ff ffac 	bl	800e0e4 <__sfp_lock_acquire>
 800e18c:	4b1e      	ldr	r3, [pc, #120]	; (800e208 <__sfp+0x84>)
 800e18e:	681e      	ldr	r6, [r3, #0]
 800e190:	69b3      	ldr	r3, [r6, #24]
 800e192:	b913      	cbnz	r3, 800e19a <__sfp+0x16>
 800e194:	4630      	mov	r0, r6
 800e196:	f7ff ffbd 	bl	800e114 <__sinit>
 800e19a:	3648      	adds	r6, #72	; 0x48
 800e19c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	d503      	bpl.n	800e1ac <__sfp+0x28>
 800e1a4:	6833      	ldr	r3, [r6, #0]
 800e1a6:	b30b      	cbz	r3, 800e1ec <__sfp+0x68>
 800e1a8:	6836      	ldr	r6, [r6, #0]
 800e1aa:	e7f7      	b.n	800e19c <__sfp+0x18>
 800e1ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e1b0:	b9d5      	cbnz	r5, 800e1e8 <__sfp+0x64>
 800e1b2:	4b16      	ldr	r3, [pc, #88]	; (800e20c <__sfp+0x88>)
 800e1b4:	60e3      	str	r3, [r4, #12]
 800e1b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e1ba:	6665      	str	r5, [r4, #100]	; 0x64
 800e1bc:	f000 f847 	bl	800e24e <__retarget_lock_init_recursive>
 800e1c0:	f7ff ff96 	bl	800e0f0 <__sfp_lock_release>
 800e1c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e1c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e1cc:	6025      	str	r5, [r4, #0]
 800e1ce:	61a5      	str	r5, [r4, #24]
 800e1d0:	2208      	movs	r2, #8
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e1d8:	f7fb fd10 	bl	8009bfc <memset>
 800e1dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e1e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1e8:	3468      	adds	r4, #104	; 0x68
 800e1ea:	e7d9      	b.n	800e1a0 <__sfp+0x1c>
 800e1ec:	2104      	movs	r1, #4
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	f7ff ff62 	bl	800e0b8 <__sfmoreglue>
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	6030      	str	r0, [r6, #0]
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d1d5      	bne.n	800e1a8 <__sfp+0x24>
 800e1fc:	f7ff ff78 	bl	800e0f0 <__sfp_lock_release>
 800e200:	230c      	movs	r3, #12
 800e202:	603b      	str	r3, [r7, #0]
 800e204:	e7ee      	b.n	800e1e4 <__sfp+0x60>
 800e206:	bf00      	nop
 800e208:	0800e5c0 	.word	0x0800e5c0
 800e20c:	ffff0001 	.word	0xffff0001

0800e210 <_fwalk_reent>:
 800e210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e214:	4606      	mov	r6, r0
 800e216:	4688      	mov	r8, r1
 800e218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e21c:	2700      	movs	r7, #0
 800e21e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e222:	f1b9 0901 	subs.w	r9, r9, #1
 800e226:	d505      	bpl.n	800e234 <_fwalk_reent+0x24>
 800e228:	6824      	ldr	r4, [r4, #0]
 800e22a:	2c00      	cmp	r4, #0
 800e22c:	d1f7      	bne.n	800e21e <_fwalk_reent+0xe>
 800e22e:	4638      	mov	r0, r7
 800e230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e234:	89ab      	ldrh	r3, [r5, #12]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d907      	bls.n	800e24a <_fwalk_reent+0x3a>
 800e23a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e23e:	3301      	adds	r3, #1
 800e240:	d003      	beq.n	800e24a <_fwalk_reent+0x3a>
 800e242:	4629      	mov	r1, r5
 800e244:	4630      	mov	r0, r6
 800e246:	47c0      	blx	r8
 800e248:	4307      	orrs	r7, r0
 800e24a:	3568      	adds	r5, #104	; 0x68
 800e24c:	e7e9      	b.n	800e222 <_fwalk_reent+0x12>

0800e24e <__retarget_lock_init_recursive>:
 800e24e:	4770      	bx	lr

0800e250 <__retarget_lock_acquire_recursive>:
 800e250:	4770      	bx	lr

0800e252 <__retarget_lock_release_recursive>:
 800e252:	4770      	bx	lr

0800e254 <__swhatbuf_r>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	460e      	mov	r6, r1
 800e258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e25c:	2900      	cmp	r1, #0
 800e25e:	b096      	sub	sp, #88	; 0x58
 800e260:	4614      	mov	r4, r2
 800e262:	461d      	mov	r5, r3
 800e264:	da08      	bge.n	800e278 <__swhatbuf_r+0x24>
 800e266:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e26a:	2200      	movs	r2, #0
 800e26c:	602a      	str	r2, [r5, #0]
 800e26e:	061a      	lsls	r2, r3, #24
 800e270:	d410      	bmi.n	800e294 <__swhatbuf_r+0x40>
 800e272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e276:	e00e      	b.n	800e296 <__swhatbuf_r+0x42>
 800e278:	466a      	mov	r2, sp
 800e27a:	f000 f903 	bl	800e484 <_fstat_r>
 800e27e:	2800      	cmp	r0, #0
 800e280:	dbf1      	blt.n	800e266 <__swhatbuf_r+0x12>
 800e282:	9a01      	ldr	r2, [sp, #4]
 800e284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e28c:	425a      	negs	r2, r3
 800e28e:	415a      	adcs	r2, r3
 800e290:	602a      	str	r2, [r5, #0]
 800e292:	e7ee      	b.n	800e272 <__swhatbuf_r+0x1e>
 800e294:	2340      	movs	r3, #64	; 0x40
 800e296:	2000      	movs	r0, #0
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	b016      	add	sp, #88	; 0x58
 800e29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2a0 <__smakebuf_r>:
 800e2a0:	898b      	ldrh	r3, [r1, #12]
 800e2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2a4:	079d      	lsls	r5, r3, #30
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	460c      	mov	r4, r1
 800e2aa:	d507      	bpl.n	800e2bc <__smakebuf_r+0x1c>
 800e2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	6163      	str	r3, [r4, #20]
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	ab01      	add	r3, sp, #4
 800e2be:	466a      	mov	r2, sp
 800e2c0:	f7ff ffc8 	bl	800e254 <__swhatbuf_r>
 800e2c4:	9900      	ldr	r1, [sp, #0]
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7ff f959 	bl	800d580 <_malloc_r>
 800e2ce:	b948      	cbnz	r0, 800e2e4 <__smakebuf_r+0x44>
 800e2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d4:	059a      	lsls	r2, r3, #22
 800e2d6:	d4ef      	bmi.n	800e2b8 <__smakebuf_r+0x18>
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	f043 0302 	orr.w	r3, r3, #2
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	e7e3      	b.n	800e2ac <__smakebuf_r+0xc>
 800e2e4:	4b0d      	ldr	r3, [pc, #52]	; (800e31c <__smakebuf_r+0x7c>)
 800e2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	6020      	str	r0, [r4, #0]
 800e2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f0:	81a3      	strh	r3, [r4, #12]
 800e2f2:	9b00      	ldr	r3, [sp, #0]
 800e2f4:	6163      	str	r3, [r4, #20]
 800e2f6:	9b01      	ldr	r3, [sp, #4]
 800e2f8:	6120      	str	r0, [r4, #16]
 800e2fa:	b15b      	cbz	r3, 800e314 <__smakebuf_r+0x74>
 800e2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e300:	4630      	mov	r0, r6
 800e302:	f000 f8d1 	bl	800e4a8 <_isatty_r>
 800e306:	b128      	cbz	r0, 800e314 <__smakebuf_r+0x74>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	f023 0303 	bic.w	r3, r3, #3
 800e30e:	f043 0301 	orr.w	r3, r3, #1
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	89a0      	ldrh	r0, [r4, #12]
 800e316:	4305      	orrs	r5, r0
 800e318:	81a5      	strh	r5, [r4, #12]
 800e31a:	e7cd      	b.n	800e2b8 <__smakebuf_r+0x18>
 800e31c:	0800e0ad 	.word	0x0800e0ad

0800e320 <_malloc_usable_size_r>:
 800e320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e324:	1f18      	subs	r0, r3, #4
 800e326:	2b00      	cmp	r3, #0
 800e328:	bfbc      	itt	lt
 800e32a:	580b      	ldrlt	r3, [r1, r0]
 800e32c:	18c0      	addlt	r0, r0, r3
 800e32e:	4770      	bx	lr

0800e330 <_raise_r>:
 800e330:	291f      	cmp	r1, #31
 800e332:	b538      	push	{r3, r4, r5, lr}
 800e334:	4604      	mov	r4, r0
 800e336:	460d      	mov	r5, r1
 800e338:	d904      	bls.n	800e344 <_raise_r+0x14>
 800e33a:	2316      	movs	r3, #22
 800e33c:	6003      	str	r3, [r0, #0]
 800e33e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e342:	bd38      	pop	{r3, r4, r5, pc}
 800e344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e346:	b112      	cbz	r2, 800e34e <_raise_r+0x1e>
 800e348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e34c:	b94b      	cbnz	r3, 800e362 <_raise_r+0x32>
 800e34e:	4620      	mov	r0, r4
 800e350:	f000 f830 	bl	800e3b4 <_getpid_r>
 800e354:	462a      	mov	r2, r5
 800e356:	4601      	mov	r1, r0
 800e358:	4620      	mov	r0, r4
 800e35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e35e:	f000 b817 	b.w	800e390 <_kill_r>
 800e362:	2b01      	cmp	r3, #1
 800e364:	d00a      	beq.n	800e37c <_raise_r+0x4c>
 800e366:	1c59      	adds	r1, r3, #1
 800e368:	d103      	bne.n	800e372 <_raise_r+0x42>
 800e36a:	2316      	movs	r3, #22
 800e36c:	6003      	str	r3, [r0, #0]
 800e36e:	2001      	movs	r0, #1
 800e370:	e7e7      	b.n	800e342 <_raise_r+0x12>
 800e372:	2400      	movs	r4, #0
 800e374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e378:	4628      	mov	r0, r5
 800e37a:	4798      	blx	r3
 800e37c:	2000      	movs	r0, #0
 800e37e:	e7e0      	b.n	800e342 <_raise_r+0x12>

0800e380 <raise>:
 800e380:	4b02      	ldr	r3, [pc, #8]	; (800e38c <raise+0xc>)
 800e382:	4601      	mov	r1, r0
 800e384:	6818      	ldr	r0, [r3, #0]
 800e386:	f7ff bfd3 	b.w	800e330 <_raise_r>
 800e38a:	bf00      	nop
 800e38c:	200000b8 	.word	0x200000b8

0800e390 <_kill_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d07      	ldr	r5, [pc, #28]	; (800e3b0 <_kill_r+0x20>)
 800e394:	2300      	movs	r3, #0
 800e396:	4604      	mov	r4, r0
 800e398:	4608      	mov	r0, r1
 800e39a:	4611      	mov	r1, r2
 800e39c:	602b      	str	r3, [r5, #0]
 800e39e:	f7f4 fe8b 	bl	80030b8 <_kill>
 800e3a2:	1c43      	adds	r3, r0, #1
 800e3a4:	d102      	bne.n	800e3ac <_kill_r+0x1c>
 800e3a6:	682b      	ldr	r3, [r5, #0]
 800e3a8:	b103      	cbz	r3, 800e3ac <_kill_r+0x1c>
 800e3aa:	6023      	str	r3, [r4, #0]
 800e3ac:	bd38      	pop	{r3, r4, r5, pc}
 800e3ae:	bf00      	nop
 800e3b0:	200046f4 	.word	0x200046f4

0800e3b4 <_getpid_r>:
 800e3b4:	f7f4 be78 	b.w	80030a8 <_getpid>

0800e3b8 <__sread>:
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c0:	f000 f894 	bl	800e4ec <_read_r>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	bfab      	itete	ge
 800e3c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e3cc:	181b      	addge	r3, r3, r0
 800e3ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3d2:	bfac      	ite	ge
 800e3d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3d6:	81a3      	strhlt	r3, [r4, #12]
 800e3d8:	bd10      	pop	{r4, pc}

0800e3da <__swrite>:
 800e3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3de:	461f      	mov	r7, r3
 800e3e0:	898b      	ldrh	r3, [r1, #12]
 800e3e2:	05db      	lsls	r3, r3, #23
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	4616      	mov	r6, r2
 800e3ea:	d505      	bpl.n	800e3f8 <__swrite+0x1e>
 800e3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f000 f868 	bl	800e4c8 <_lseek_r>
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e402:	81a3      	strh	r3, [r4, #12]
 800e404:	4632      	mov	r2, r6
 800e406:	463b      	mov	r3, r7
 800e408:	4628      	mov	r0, r5
 800e40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e40e:	f000 b817 	b.w	800e440 <_write_r>

0800e412 <__sseek>:
 800e412:	b510      	push	{r4, lr}
 800e414:	460c      	mov	r4, r1
 800e416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e41a:	f000 f855 	bl	800e4c8 <_lseek_r>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	89a3      	ldrh	r3, [r4, #12]
 800e422:	bf15      	itete	ne
 800e424:	6560      	strne	r0, [r4, #84]	; 0x54
 800e426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e42a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e42e:	81a3      	strheq	r3, [r4, #12]
 800e430:	bf18      	it	ne
 800e432:	81a3      	strhne	r3, [r4, #12]
 800e434:	bd10      	pop	{r4, pc}

0800e436 <__sclose>:
 800e436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e43a:	f000 b813 	b.w	800e464 <_close_r>
	...

0800e440 <_write_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d07      	ldr	r5, [pc, #28]	; (800e460 <_write_r+0x20>)
 800e444:	4604      	mov	r4, r0
 800e446:	4608      	mov	r0, r1
 800e448:	4611      	mov	r1, r2
 800e44a:	2200      	movs	r2, #0
 800e44c:	602a      	str	r2, [r5, #0]
 800e44e:	461a      	mov	r2, r3
 800e450:	f7f4 fe69 	bl	8003126 <_write>
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	d102      	bne.n	800e45e <_write_r+0x1e>
 800e458:	682b      	ldr	r3, [r5, #0]
 800e45a:	b103      	cbz	r3, 800e45e <_write_r+0x1e>
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	bd38      	pop	{r3, r4, r5, pc}
 800e460:	200046f4 	.word	0x200046f4

0800e464 <_close_r>:
 800e464:	b538      	push	{r3, r4, r5, lr}
 800e466:	4d06      	ldr	r5, [pc, #24]	; (800e480 <_close_r+0x1c>)
 800e468:	2300      	movs	r3, #0
 800e46a:	4604      	mov	r4, r0
 800e46c:	4608      	mov	r0, r1
 800e46e:	602b      	str	r3, [r5, #0]
 800e470:	f7f4 fe75 	bl	800315e <_close>
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	d102      	bne.n	800e47e <_close_r+0x1a>
 800e478:	682b      	ldr	r3, [r5, #0]
 800e47a:	b103      	cbz	r3, 800e47e <_close_r+0x1a>
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	200046f4 	.word	0x200046f4

0800e484 <_fstat_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4d07      	ldr	r5, [pc, #28]	; (800e4a4 <_fstat_r+0x20>)
 800e488:	2300      	movs	r3, #0
 800e48a:	4604      	mov	r4, r0
 800e48c:	4608      	mov	r0, r1
 800e48e:	4611      	mov	r1, r2
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	f7f4 fe70 	bl	8003176 <_fstat>
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	d102      	bne.n	800e4a0 <_fstat_r+0x1c>
 800e49a:	682b      	ldr	r3, [r5, #0]
 800e49c:	b103      	cbz	r3, 800e4a0 <_fstat_r+0x1c>
 800e49e:	6023      	str	r3, [r4, #0]
 800e4a0:	bd38      	pop	{r3, r4, r5, pc}
 800e4a2:	bf00      	nop
 800e4a4:	200046f4 	.word	0x200046f4

0800e4a8 <_isatty_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	4d06      	ldr	r5, [pc, #24]	; (800e4c4 <_isatty_r+0x1c>)
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	602b      	str	r3, [r5, #0]
 800e4b4:	f7f4 fe6f 	bl	8003196 <_isatty>
 800e4b8:	1c43      	adds	r3, r0, #1
 800e4ba:	d102      	bne.n	800e4c2 <_isatty_r+0x1a>
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	b103      	cbz	r3, 800e4c2 <_isatty_r+0x1a>
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
 800e4c4:	200046f4 	.word	0x200046f4

0800e4c8 <_lseek_r>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	4d07      	ldr	r5, [pc, #28]	; (800e4e8 <_lseek_r+0x20>)
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	4608      	mov	r0, r1
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	602a      	str	r2, [r5, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f7f4 fe68 	bl	80031ac <_lseek>
 800e4dc:	1c43      	adds	r3, r0, #1
 800e4de:	d102      	bne.n	800e4e6 <_lseek_r+0x1e>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	b103      	cbz	r3, 800e4e6 <_lseek_r+0x1e>
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	bd38      	pop	{r3, r4, r5, pc}
 800e4e8:	200046f4 	.word	0x200046f4

0800e4ec <_read_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4d07      	ldr	r5, [pc, #28]	; (800e50c <_read_r+0x20>)
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	4608      	mov	r0, r1
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	602a      	str	r2, [r5, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f7f4 fdf6 	bl	80030ec <_read>
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d102      	bne.n	800e50a <_read_r+0x1e>
 800e504:	682b      	ldr	r3, [r5, #0]
 800e506:	b103      	cbz	r3, 800e50a <_read_r+0x1e>
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	200046f4 	.word	0x200046f4

0800e510 <_init>:
 800e510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e512:	bf00      	nop
 800e514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e516:	bc08      	pop	{r3}
 800e518:	469e      	mov	lr, r3
 800e51a:	4770      	bx	lr

0800e51c <_fini>:
 800e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51e:	bf00      	nop
 800e520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e522:	bc08      	pop	{r3}
 800e524:	469e      	mov	lr, r3
 800e526:	4770      	bx	lr
