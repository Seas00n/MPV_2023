
Pros_Ctrl_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e478  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800e628  0800e628  0001e628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb64  0800eb64  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb64  0800eb64  0001eb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb6c  0800eb6c  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb6c  0800eb6c  0001eb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb70  0800eb70  0001eb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0800eb74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002028c  2**0
                  CONTENTS
 10 .bss          00004490  2000028c  2000028c  0002028c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000471c  2000471c  0002028c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a600  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e0  00000000  00000000  0003a8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  000401e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cf8  00000000  00000000  00041648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b873  00000000  00000000  00068340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5422  00000000  00000000  00083bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168fd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007070  00000000  00000000  00169028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e610 	.word	0x0800e610

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000290 	.word	0x20000290
 80001ec:	0800e610 	.word	0x0800e610

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <debugPrint>:
static char tempBuf[40];
extern UART_HandleTypeDef huart8;
static int inHandlerMode(void){
	return __get_IPSR();
}
void debugPrint(char *fmt,...){
 8001018:	b40f      	push	{r0, r1, r2, r3}
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
	//可变长度参数
	va_list argp;
	uint32_t n = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
	// 以fmt为起始地址，获取第一个参数的首地址
	va_start(argp, fmt);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	603b      	str	r3, [r7, #0]
	n = vsprintf((char *) tempBuf, fmt, argp);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	6939      	ldr	r1, [r7, #16]
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <debugPrint+0x48>)
 8001030:	f00a fbd0 	bl	800b7d4 <vsiprintf>
 8001034:	4603      	mov	r3, r0
 8001036:	607b      	str	r3, [r7, #4]
	// argp置0
	va_end(argp);
	if (HAL_UART_Transmit(&huart8, (uint8_t *) tempBuf, n, 1000) != HAL_OK) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b29a      	uxth	r2, r3
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <debugPrint+0x48>)
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <debugPrint+0x4c>)
 8001044:	f005 f985 	bl	8006352 <HAL_UART_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <debugPrint+0x3a>
		/* Transfer error in transmission process */
		Error_Handler();
 800104e:	f001 ff8f 	bl	8002f70 <Error_Handler>
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800105c:	b004      	add	sp, #16
 800105e:	4770      	bx	lr
 8001060:	200002a8 	.word	0x200002a8
 8001064:	20000708 	.word	0x20000708

08001068 <CAN_FilterConfig>:
volatile float Angle_desired_rtmotor = 0;
volatile float Angle_desired_rtpc = 0;
volatile float current_actual_rtmotor = 0;
volatile float current_actual_rtpc = 0;

void CAN_FilterConfig(){
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001092:	230e      	movs	r3, #14
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig)!=HAL_OK){
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <CAN_FilterConfig+0x6c>)
 800109c:	f002 fd8e 	bl	8003bbc <HAL_CAN_ConfigFilter>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <CAN_FilterConfig+0x42>
		Error_Handler();
 80010a6:	f001 ff63 	bl	8002f70 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan1)!=HAL_OK){
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <CAN_FilterConfig+0x6c>)
 80010ac:	f002 fe66 	bl	8003d7c <HAL_CAN_Start>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <CAN_FilterConfig+0x52>
		Error_Handler();
 80010b6:	f001 ff5b 	bl	8002f70 <Error_Handler>
	}
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)){
 80010ba:	2102      	movs	r1, #2
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <CAN_FilterConfig+0x6c>)
 80010be:	f003 f8c3 	bl	8004248 <HAL_CAN_ActivateNotification>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <CAN_FilterConfig+0x64>
		Error_Handler();
 80010c8:	f001 ff52 	bl	8002f70 <Error_Handler>
	}
}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200003e4 	.word	0x200003e4

080010d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1){
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d107      	bne.n	80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxDataBuffer);
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80010f0:	f002 ff98 	bl	8004024 <HAL_CAN_GetRxMessage>
		motor_receive();
 80010f4:	f000 f884 	bl	8001200 <motor_receive>
	}
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200003e4 	.word	0x200003e4
 8001104:	200002dc 	.word	0x200002dc
 8001108:	20000300 	.word	0x20000300

0800110c <CAN_SendMessage>:


void CAN_SendMessage(uint16_t id,uint8_t len){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	80fb      	strh	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	717b      	strb	r3, [r7, #5]
	txHeader.StdId = 0;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <CAN_SendMessage+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_EXT;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <CAN_SendMessage+0x58>)
 8001124:	2204      	movs	r2, #4
 8001126:	609a      	str	r2, [r3, #8]
	txHeader.ExtId = id;
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <CAN_SendMessage+0x58>)
 800112c:	6053      	str	r3, [r2, #4]
	txHeader.RTR = CAN_RTR_DATA;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <CAN_SendMessage+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
	if(len>8){
 8001134:	797b      	ldrb	r3, [r7, #5]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d901      	bls.n	800113e <CAN_SendMessage+0x32>
		len = 8;
 800113a:	2308      	movs	r3, #8
 800113c:	717b      	strb	r3, [r7, #5]
	}
	txHeader.DLC = len;
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <CAN_SendMessage+0x58>)
 8001142:	6113      	str	r3, [r2, #16]
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0){
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <CAN_SendMessage+0x5c>)
 8001146:	f002 ff38 	bl	8003fba <HAL_CAN_GetTxMailboxesFreeLevel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <CAN_SendMessage+0x50>
		HAL_CAN_AddTxMessage(&hcan1, &txHeader, txDataBuffer, &txMailBox);
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <CAN_SendMessage+0x60>)
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <CAN_SendMessage+0x64>)
 8001154:	4903      	ldr	r1, [pc, #12]	; (8001164 <CAN_SendMessage+0x58>)
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <CAN_SendMessage+0x5c>)
 8001158:	f002 fe54 	bl	8003e04 <HAL_CAN_AddTxMessage>
	}
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200002e8 	.word	0x200002e8
 8001168:	200003e4 	.word	0x200003e4
 800116c:	2000031c 	.word	0x2000031c
 8001170:	200002d0 	.word	0x200002d0

08001174 <motor_init>:

void motor_init(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	motor_knee.device_id = 0x01;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <motor_init+0x7c>)
 800117a:	2201      	movs	r2, #1
 800117c:	801a      	strh	r2, [r3, #0]
	motor_ankle.device_id = 0x02;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <motor_init+0x80>)
 8001180:	2202      	movs	r2, #2
 8001182:	801a      	strh	r2, [r3, #0]
	motor_knee.state = 0x01;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <motor_init+0x7c>)
 8001186:	2201      	movs	r2, #1
 8001188:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	motor_ankle.state = 0x01;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <motor_init+0x80>)
 800118e:	2201      	movs	r2, #1
 8001190:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	can_set_pos_spd(motor_knee.device_id, 0,0,10000);
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <motor_init+0x7c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80011f8 <motor_init+0x84>
 80011a0:	eddf 0a16 	vldr	s1, [pc, #88]	; 80011fc <motor_init+0x88>
 80011a4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80011fc <motor_init+0x88>
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fa41 	bl	8001630 <can_set_pos_spd>
	can_set_pos_spd(motor_ankle.device_id,0,0,10000);
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <motor_init+0x80>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80011f8 <motor_init+0x84>
 80011ba:	eddf 0a10 	vldr	s1, [pc, #64]	; 80011fc <motor_init+0x88>
 80011be:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80011fc <motor_init+0x88>
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fa34 	bl	8001630 <can_set_pos_spd>
	HAL_Delay(2000);
 80011c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011cc:	f002 fbd6 	bl	800397c <HAL_Delay>
	can_set_origin(motor_knee.device_id);
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <motor_init+0x7c>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fb63 	bl	80018a4 <can_set_origin>
	can_set_origin(motor_ankle.device_id);
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <motor_init+0x80>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fb5c 	bl	80018a4 <can_set_origin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000030 	.word	0x20000030
 80011f8:	461c4000 	.word	0x461c4000
 80011fc:	00000000 	.word	0x00000000

08001200 <motor_receive>:

void motor_receive(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	if(rxDataBuffer[7]!=0){
 8001204:	4b95      	ldr	r3, [pc, #596]	; (800145c <motor_receive+0x25c>)
 8001206:	79db      	ldrb	r3, [r3, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <motor_receive+0x24>
		motor_knee.state = 0x00;
 800120c:	4b94      	ldr	r3, [pc, #592]	; (8001460 <motor_receive+0x260>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		motor_ankle.state = 0x00;
 8001214:	4b93      	ldr	r3, [pc, #588]	; (8001464 <motor_receive+0x264>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		debugPrint("ERROR");
 800121c:	4892      	ldr	r0, [pc, #584]	; (8001468 <motor_receive+0x268>)
 800121e:	f7ff fefb 	bl	8001018 <debugPrint>
			motor_ankle.is_free = 1;
			}
			else{}
		}
	}
}
 8001222:	e119      	b.n	8001458 <motor_receive+0x258>
		pos_int = (rxDataBuffer[0]<<8)|rxDataBuffer[1];
 8001224:	4b8d      	ldr	r3, [pc, #564]	; (800145c <motor_receive+0x25c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b8b      	ldr	r3, [pc, #556]	; (800145c <motor_receive+0x25c>)
 800122e:	785b      	ldrb	r3, [r3, #1]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b8d      	ldr	r3, [pc, #564]	; (800146c <motor_receive+0x26c>)
 8001238:	801a      	strh	r2, [r3, #0]
		vel_int = (rxDataBuffer[2]<<8)|rxDataBuffer[3];
 800123a:	4b88      	ldr	r3, [pc, #544]	; (800145c <motor_receive+0x25c>)
 800123c:	789b      	ldrb	r3, [r3, #2]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b86      	ldr	r3, [pc, #536]	; (800145c <motor_receive+0x25c>)
 8001244:	78db      	ldrb	r3, [r3, #3]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b88      	ldr	r3, [pc, #544]	; (8001470 <motor_receive+0x270>)
 800124e:	801a      	strh	r2, [r3, #0]
		cur_int = (rxDataBuffer[4]<<8)|rxDataBuffer[5];
 8001250:	4b82      	ldr	r3, [pc, #520]	; (800145c <motor_receive+0x25c>)
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b80      	ldr	r3, [pc, #512]	; (800145c <motor_receive+0x25c>)
 800125a:	795b      	ldrb	r3, [r3, #5]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b84      	ldr	r3, [pc, #528]	; (8001474 <motor_receive+0x274>)
 8001264:	801a      	strh	r2, [r3, #0]
		temp_int = rxDataBuffer[6];
 8001266:	4b7d      	ldr	r3, [pc, #500]	; (800145c <motor_receive+0x25c>)
 8001268:	799b      	ldrb	r3, [r3, #6]
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b82      	ldr	r3, [pc, #520]	; (8001478 <motor_receive+0x278>)
 800126e:	801a      	strh	r2, [r3, #0]
		if(rxHeader.ExtId==motor_knee.device_id+0x2900){
 8001270:	4b82      	ldr	r3, [pc, #520]	; (800147c <motor_receive+0x27c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a7a      	ldr	r2, [pc, #488]	; (8001460 <motor_receive+0x260>)
 8001276:	8812      	ldrh	r2, [r2, #0]
 8001278:	b292      	uxth	r2, r2
 800127a:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 800127e:	4293      	cmp	r3, r2
 8001280:	d171      	bne.n	8001366 <motor_receive+0x166>
			if(motor_knee.is_free==1){
 8001282:	4b77      	ldr	r3, [pc, #476]	; (8001460 <motor_receive+0x260>)
 8001284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b01      	cmp	r3, #1
 800128c:	f040 80e4 	bne.w	8001458 <motor_receive+0x258>
			motor_knee.is_free = 0;
 8001290:	4b73      	ldr	r3, [pc, #460]	; (8001460 <motor_receive+0x260>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			motor_knee.pos_actual = (float)(pos_int*0.1f);
 8001298:	4b74      	ldr	r3, [pc, #464]	; (800146c <motor_receive+0x26c>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001480 <motor_receive+0x280>
 80012aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ae:	4b6c      	ldr	r3, [pc, #432]	; (8001460 <motor_receive+0x260>)
 80012b0:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_knee.vel_actual = (float)(vel_int*10.0f);
 80012b4:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <motor_receive+0x270>)
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	4b65      	ldr	r3, [pc, #404]	; (8001460 <motor_receive+0x260>)
 80012cc:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_knee.vel_actual = ERPM_TO_DEGREE(motor_knee.vel_actual);
 80012d0:	4b63      	ldr	r3, [pc, #396]	; (8001460 <motor_receive+0x260>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f947 	bl	8000568 <__aeabi_f2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <motor_receive+0x284>)
 80012e0:	f7ff fac4 	bl	800086c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <motor_receive+0x288>)
 80012f2:	f7ff fabb 	bl	800086c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b62      	ldr	r3, [pc, #392]	; (800148c <motor_receive+0x28c>)
 8001304:	f7ff f988 	bl	8000618 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b5e      	ldr	r3, [pc, #376]	; (8001490 <motor_receive+0x290>)
 8001316:	f7ff faa9 	bl	800086c <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc71 	bl	8000c08 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <motor_receive+0x260>)
 800132a:	6093      	str	r3, [r2, #8]
			motor_knee.cur_actual = (float)(cur_int*0.01f);
 800132c:	4b51      	ldr	r3, [pc, #324]	; (8001474 <motor_receive+0x274>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001494 <motor_receive+0x294>
 800133e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001342:	4b47      	ldr	r3, [pc, #284]	; (8001460 <motor_receive+0x260>)
 8001344:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_knee.temperature = (float)temp_int;
 8001348:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <motor_receive+0x278>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <motor_receive+0x260>)
 8001358:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			motor_knee.is_free = 1;
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <motor_receive+0x260>)
 800135e:	2201      	movs	r2, #1
 8001360:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8001364:	e078      	b.n	8001458 <motor_receive+0x258>
		}else if (rxHeader.ExtId==motor_ankle.device_id+0x2900){
 8001366:	4b45      	ldr	r3, [pc, #276]	; (800147c <motor_receive+0x27c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a3e      	ldr	r2, [pc, #248]	; (8001464 <motor_receive+0x264>)
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	b292      	uxth	r2, r2
 8001370:	f502 5224 	add.w	r2, r2, #10496	; 0x2900
 8001374:	4293      	cmp	r3, r2
 8001376:	d16f      	bne.n	8001458 <motor_receive+0x258>
			if(motor_ankle.is_free==1){
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <motor_receive+0x264>)
 800137a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d169      	bne.n	8001458 <motor_receive+0x258>
			motor_ankle.is_free = 0;
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <motor_receive+0x264>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			motor_ankle.pos_actual = (float)(pos_int*0.1f);
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <motor_receive+0x26c>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001480 <motor_receive+0x280>
 800139e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <motor_receive+0x264>)
 80013a4:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_ankle.vel_actual = (float)(vel_int*10.0f);
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <motor_receive+0x270>)
 80013aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <motor_receive+0x264>)
 80013c0:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_ankle.vel_actual = ERPM_TO_DEGREE(motor_ankle.vel_actual);
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <motor_receive+0x264>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8cd 	bl	8000568 <__aeabi_f2d>
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <motor_receive+0x284>)
 80013d4:	f7ff fa4a 	bl	800086c <__aeabi_ddiv>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <motor_receive+0x288>)
 80013e6:	f7ff fa41 	bl	800086c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <motor_receive+0x28c>)
 80013f8:	f7ff f90e 	bl	8000618 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <motor_receive+0x290>)
 800140a:	f7ff fa2f 	bl	800086c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbf7 	bl	8000c08 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <motor_receive+0x264>)
 800141e:	6093      	str	r3, [r2, #8]
			motor_ankle.cur_actual = (float)(cur_int*0.01f);
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <motor_receive+0x274>)
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001494 <motor_receive+0x294>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <motor_receive+0x264>)
 8001438:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_ankle.temperature = (float)temp_int;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <motor_receive+0x278>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <motor_receive+0x264>)
 800144c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			motor_ankle.is_free = 1;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <motor_receive+0x264>)
 8001452:	2201      	movs	r2, #1
 8001454:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200002dc 	.word	0x200002dc
 8001460:	20000000 	.word	0x20000000
 8001464:	20000030 	.word	0x20000030
 8001468:	0800e628 	.word	0x0800e628
 800146c:	20000324 	.word	0x20000324
 8001470:	20000326 	.word	0x20000326
 8001474:	20000328 	.word	0x20000328
 8001478:	2000032a 	.word	0x2000032a
 800147c:	20000300 	.word	0x20000300
 8001480:	3dcccccd 	.word	0x3dcccccd
 8001484:	40350000 	.word	0x40350000
 8001488:	40500000 	.word	0x40500000
 800148c:	40668000 	.word	0x40668000
 8001490:	403e0000 	.word	0x403e0000
 8001494:	3c23d70a 	.word	0x3c23d70a

08001498 <buffer_append_int32>:


void buffer_append_int32(uint8_t* buffer, int32_t number, uint8_t *index) {
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1619      	asrs	r1, r3, #24
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	b2d0      	uxtb	r0, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7010      	strb	r0, [r2, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1419      	asrs	r1, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	b2d0      	uxtb	r0, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	7010      	strb	r0, [r2, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	b2ca      	uxtb	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1219      	asrs	r1, r3, #8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	b2d0      	uxtb	r0, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	7010      	strb	r0, [r2, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	b2d1      	uxtb	r1, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	7011      	strb	r1, [r2, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <buffer_append_int16>:
void buffer_append_int16(uint8_t* buffer, int16_t number, uint8_t *index) {
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	460b      	mov	r3, r1
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	817b      	strh	r3, [r7, #10]
	buffer[(*index)++] = number >> 8;
 8001524:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001528:	121b      	asrs	r3, r3, #8
 800152a:	b219      	sxth	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	b2d0      	uxtb	r0, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	7010      	strb	r0, [r2, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4413      	add	r3, r2
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	b2d1      	uxtb	r1, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	7011      	strb	r1, [r2, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	897a      	ldrh	r2, [r7, #10]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <can_set_current>:

void can_set_current(uint8_t controller_id, float current) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	ed87 0a00 	vstr	s0, [r7]
 8001574:	71fb      	strb	r3, [r7, #7]
	send_idx = 0;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <can_set_current+0xb0>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
	current = MAX(MIN(current,current_max),-current_max);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <can_set_current+0xb4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	ed97 7a05 	vldr	s14, [r7, #20]
 800158a:	edd7 7a04 	vldr	s15, [r7, #16]
 800158e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d501      	bpl.n	800159c <can_set_current+0x34>
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	e000      	b.n	800159e <can_set_current+0x36>
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <can_set_current+0xb4>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eef1 7a67 	vneg.f32	s15, s15
 80015aa:	edc7 7a02 	vstr	s15, [r7, #8]
 80015ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80015b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	dd01      	ble.n	80015c4 <can_set_current+0x5c>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	e000      	b.n	80015c6 <can_set_current+0x5e>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	603b      	str	r3, [r7, #0]
	buffer_append_int32(txDataBuffer, (int32_t)(current * 1000.0), &send_idx);
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f7fe ffcd 	bl	8000568 <__aeabi_f2d>
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <can_set_current+0xb8>)
 80015d4:	f7ff f820 	bl	8000618 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff faca 	bl	8000b78 <__aeabi_d2iz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <can_set_current+0xb0>)
 80015e8:	4619      	mov	r1, r3
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <can_set_current+0xbc>)
 80015ec:	f7ff ff54 	bl	8001498 <buffer_append_int32>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_CURRENT<<8);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <can_set_current+0xc0>)
 80015fc:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <can_set_current+0xc0>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <can_set_current+0xb0>)
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd7f 	bl	800110c <CAN_SendMessage>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000320 	.word	0x20000320
 800161c:	20000068 	.word	0x20000068
 8001620:	408f4000 	.word	0x408f4000
 8001624:	200002d0 	.word	0x200002d0
 8001628:	20000322 	.word	0x20000322
 800162c:	00000000 	.word	0x00000000

08001630 <can_set_pos_spd>:

void can_set_pos_spd(uint8_t controller_id, float pos,float vel,float accel ){
 8001630:	b580      	push	{r7, lr}
 8001632:	b090      	sub	sp, #64	; 0x40
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	ed87 0a02 	vstr	s0, [r7, #8]
 800163c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001640:	ed87 1a00 	vstr	s2, [r7]
 8001644:	73fb      	strb	r3, [r7, #15]
	send_idx = 0;
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <can_set_pos_spd+0x248>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
	pos = MAX(MIN(pos, pos_max),-pos_max);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001650:	4b8a      	ldr	r3, [pc, #552]	; (800187c <can_set_pos_spd+0x24c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
 8001656:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800165a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800165e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	d501      	bpl.n	800166c <can_set_pos_spd+0x3c>
 8001668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800166a:	e000      	b.n	800166e <can_set_pos_spd+0x3e>
 800166c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
 8001670:	4b82      	ldr	r3, [pc, #520]	; (800187c <can_set_pos_spd+0x24c>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	eef1 7a67 	vneg.f32	s15, s15
 800167a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800167e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001682:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	dd01      	ble.n	8001694 <can_set_pos_spd+0x64>
 8001690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001692:	e000      	b.n	8001696 <can_set_pos_spd+0x66>
 8001694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001696:	60bb      	str	r3, [r7, #8]
	buffer_append_int32(txDataBuffer, (int32_t)(pos * 10000.0), &send_idx);
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	f7fe ff65 	bl	8000568 <__aeabi_f2d>
 800169e:	a372      	add	r3, pc, #456	; (adr r3, 8001868 <can_set_pos_spd+0x238>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe ffb8 	bl	8000618 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fa62 	bl	8000b78 <__aeabi_d2iz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a70      	ldr	r2, [pc, #448]	; (8001878 <can_set_pos_spd+0x248>)
 80016b8:	4619      	mov	r1, r3
 80016ba:	4871      	ldr	r0, [pc, #452]	; (8001880 <can_set_pos_spd+0x250>)
 80016bc:	f7ff feec 	bl	8001498 <buffer_append_int32>
	vel = DEGREE_TO_RAD(vel);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe ff51 	bl	8000568 <__aeabi_f2d>
 80016c6:	a36a      	add	r3, pc, #424	; (adr r3, 8001870 <can_set_pos_spd+0x240>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe ffa4 	bl	8000618 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	4b69      	ldr	r3, [pc, #420]	; (8001884 <can_set_pos_spd+0x254>)
 80016de:	f7ff f8c5 	bl	800086c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa8d 	bl	8000c08 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	607b      	str	r3, [r7, #4]
	vel = MAX(MIN(vel,vel_max),-vel_max);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f6:	4b64      	ldr	r3, [pc, #400]	; (8001888 <can_set_pos_spd+0x258>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80016fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001700:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	d501      	bpl.n	8001712 <can_set_pos_spd+0xe2>
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	e000      	b.n	8001714 <can_set_pos_spd+0xe4>
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <can_set_pos_spd+0x258>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	eef1 7a67 	vneg.f32	s15, s15
 8001720:	edc7 7a08 	vstr	s15, [r7, #32]
 8001724:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001728:	edd7 7a08 	vldr	s15, [r7, #32]
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	dd01      	ble.n	800173a <can_set_pos_spd+0x10a>
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	e000      	b.n	800173c <can_set_pos_spd+0x10c>
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	607b      	str	r3, [r7, #4]
	vel = RADs_TO_ERPM(vel);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe ff12 	bl	8000568 <__aeabi_f2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <can_set_pos_spd+0x25c>)
 800174a:	f7fe ff65 	bl	8000618 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	a346      	add	r3, pc, #280	; (adr r3, 8001870 <can_set_pos_spd+0x240>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7ff f886 	bl	800086c <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b48      	ldr	r3, [pc, #288]	; (8001890 <can_set_pos_spd+0x260>)
 800176e:	f7fe ff53 	bl	8000618 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b45      	ldr	r3, [pc, #276]	; (8001894 <can_set_pos_spd+0x264>)
 8001780:	f7fe ff4a 	bl	8000618 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff fa3c 	bl	8000c08 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	607b      	str	r3, [r7, #4]
	buffer_append_int16(txDataBuffer,(int16_t)(vel/10.0), & send_idx);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe fee7 	bl	8000568 <__aeabi_f2d>
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <can_set_pos_spd+0x268>)
 80017a0:	f7ff f864 	bl	800086c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9e4 	bl	8000b78 <__aeabi_d2iz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4a30      	ldr	r2, [pc, #192]	; (8001878 <can_set_pos_spd+0x248>)
 80017b6:	4619      	mov	r1, r3
 80017b8:	4831      	ldr	r0, [pc, #196]	; (8001880 <can_set_pos_spd+0x250>)
 80017ba:	f7ff feac 	bl	8001516 <buffer_append_int16>
	accel = MAX(MIN(accel,accel_max),0);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <can_set_pos_spd+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80017cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d501      	bpl.n	80017de <can_set_pos_spd+0x1ae>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	e000      	b.n	80017e0 <can_set_pos_spd+0x1b0>
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80017f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	dd02      	ble.n	8001804 <can_set_pos_spd+0x1d4>
 80017fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001802:	e004      	b.n	800180e <can_set_pos_spd+0x1de>
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180e:	edc7 7a00 	vstr	s15, [r7]
	buffer_append_int16(txDataBuffer,(int16_t)(accel/10.0), & send_idx);
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f7fe fea8 	bl	8000568 <__aeabi_f2d>
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <can_set_pos_spd+0x268>)
 800181e:	f7ff f825 	bl	800086c <__aeabi_ddiv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f9a5 	bl	8000b78 <__aeabi_d2iz>
 800182e:	4603      	mov	r3, r0
 8001830:	b21b      	sxth	r3, r3
 8001832:	4a11      	ldr	r2, [pc, #68]	; (8001878 <can_set_pos_spd+0x248>)
 8001834:	4619      	mov	r1, r3
 8001836:	4812      	ldr	r0, [pc, #72]	; (8001880 <can_set_pos_spd+0x250>)
 8001838:	f7ff fe6d 	bl	8001516 <buffer_append_int16>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_POS_SPD<<8);
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	b29b      	uxth	r3, r3
 8001840:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <can_set_pos_spd+0x270>)
 8001848:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <can_set_pos_spd+0x270>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <can_set_pos_spd+0x248>)
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fc59 	bl	800110c <CAN_SendMessage>
}
 800185a:	bf00      	nop
 800185c:	3740      	adds	r7, #64	; 0x40
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	00000000 	.word	0x00000000
 800186c:	40c38800 	.word	0x40c38800
 8001870:	54442eea 	.word	0x54442eea
 8001874:	400921fb 	.word	0x400921fb
 8001878:	20000320 	.word	0x20000320
 800187c:	20000060 	.word	0x20000060
 8001880:	200002d0 	.word	0x200002d0
 8001884:	40668000 	.word	0x40668000
 8001888:	20000064 	.word	0x20000064
 800188c:	403e0000 	.word	0x403e0000
 8001890:	40350000 	.word	0x40350000
 8001894:	40500000 	.word	0x40500000
 8001898:	40240000 	.word	0x40240000
 800189c:	2000006c 	.word	0x2000006c
 80018a0:	20000322 	.word	0x20000322

080018a4 <can_set_origin>:

void can_set_origin(uint8_t controller_id) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_ORIGIN_HERE<<8);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <can_set_origin+0x34>)
 80018ba:	801a      	strh	r2, [r3, #0]
	txDataBuffer[0] = 0x01;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <can_set_origin+0x38>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,1);
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <can_set_origin+0x34>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fc1f 	bl	800110c <CAN_SendMessage>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000322 	.word	0x20000322
 80018dc:	200002d0 	.word	0x200002d0

080018e0 <can_set_pos>:

void can_set_pos(uint8_t controller_id, float pos){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	ed87 0a00 	vstr	s0, [r7]
 80018ec:	71fb      	strb	r3, [r7, #7]
	pos = MAX(MIN(pos,pos_max),-pos_max);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <can_set_pos+0xa4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d501      	bpl.n	800190e <can_set_pos+0x2e>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	e000      	b.n	8001910 <can_set_pos+0x30>
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <can_set_pos+0xa4>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	eef1 7a67 	vneg.f32	s15, s15
 800191c:	edc7 7a02 	vstr	s15, [r7, #8]
 8001920:	ed97 7a03 	vldr	s14, [r7, #12]
 8001924:	edd7 7a02 	vldr	s15, [r7, #8]
 8001928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd01      	ble.n	8001936 <can_set_pos+0x56>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	e000      	b.n	8001938 <can_set_pos+0x58>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	603b      	str	r3, [r7, #0]
	send_idx = 0;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <can_set_pos+0xa8>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	buffer_append_int32(txDataBuffer,(int32_t)(10000*pos),&send_idx);
 8001940:	edd7 7a00 	vldr	s15, [r7]
 8001944:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800198c <can_set_pos+0xac>
 8001948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <can_set_pos+0xa8>)
 8001952:	ee17 1a90 	vmov	r1, s15
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <can_set_pos+0xb0>)
 8001958:	f7ff fd9e 	bl	8001498 <buffer_append_int32>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_POS<<8);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <can_set_pos+0xb4>)
 8001968:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <can_set_pos+0xb4>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4a06      	ldr	r2, [pc, #24]	; (8001988 <can_set_pos+0xa8>)
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fbc9 	bl	800110c <CAN_SendMessage>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000060 	.word	0x20000060
 8001988:	20000320 	.word	0x20000320
 800198c:	461c4000 	.word	0x461c4000
 8001990:	200002d0 	.word	0x200002d0
 8001994:	20000322 	.word	0x20000322

08001998 <can_set_vel>:
void can_set_vel(uint8_t controller_id, float vel){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	ed87 0a00 	vstr	s0, [r7]
 80019a4:	71fb      	strb	r3, [r7, #7]
	vel = DEGREE_TO_RAD(vel);
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f7fe fdde 	bl	8000568 <__aeabi_f2d>
 80019ac:	a342      	add	r3, pc, #264	; (adr r3, 8001ab8 <can_set_vel+0x120>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fe31 	bl	8000618 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <can_set_vel+0x128>)
 80019c4:	f7fe ff52 	bl	800086c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f91a 	bl	8000c08 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	603b      	str	r3, [r7, #0]
	vel = MAX(MIN(vel,vel_max),-vel_max);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <can_set_vel+0x12c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d501      	bpl.n	80019f8 <can_set_vel+0x60>
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	e000      	b.n	80019fa <can_set_vel+0x62>
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <can_set_vel+0x12c>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	eef1 7a67 	vneg.f32	s15, s15
 8001a06:	edc7 7a02 	vstr	s15, [r7, #8]
 8001a0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	dd01      	ble.n	8001a20 <can_set_vel+0x88>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	e000      	b.n	8001a22 <can_set_vel+0x8a>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	603b      	str	r3, [r7, #0]
	vel = RADs_TO_ERPM(vel);
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7fe fd9f 	bl	8000568 <__aeabi_f2d>
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <can_set_vel+0x130>)
 8001a30:	f7fe fdf2 	bl	8000618 <__aeabi_dmul>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	a31e      	add	r3, pc, #120	; (adr r3, 8001ab8 <can_set_vel+0x120>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe ff13 	bl	800086c <__aeabi_ddiv>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <can_set_vel+0x134>)
 8001a54:	f7fe fde0 	bl	8000618 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <can_set_vel+0x138>)
 8001a66:	f7fe fdd7 	bl	8000618 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f8c9 	bl	8000c08 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	603b      	str	r3, [r7, #0]
	buffer_append_int32(txDataBuffer,(int32_t)(vel), &send_idx);
 8001a7a:	edd7 7a00 	vldr	s15, [r7]
 8001a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <can_set_vel+0x13c>)
 8001a84:	ee17 1a90 	vmov	r1, s15
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <can_set_vel+0x140>)
 8001a8a:	f7ff fd05 	bl	8001498 <buffer_append_int32>
	msg_ext_id = controller_id|((uint32_t)CAN_PACKET_SET_RPM<<8);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <can_set_vel+0x144>)
 8001a9a:	801a      	strh	r2, [r3, #0]
	CAN_SendMessage(msg_ext_id,send_idx);
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <can_set_vel+0x144>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <can_set_vel+0x13c>)
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fb30 	bl	800110c <CAN_SendMessage>
}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	54442eea 	.word	0x54442eea
 8001abc:	400921fb 	.word	0x400921fb
 8001ac0:	40668000 	.word	0x40668000
 8001ac4:	20000064 	.word	0x20000064
 8001ac8:	403e0000 	.word	0x403e0000
 8001acc:	40350000 	.word	0x40350000
 8001ad0:	40500000 	.word	0x40500000
 8001ad4:	20000320 	.word	0x20000320
 8001ad8:	200002d0 	.word	0x200002d0
 8001adc:	20000322 	.word	0x20000322

08001ae0 <Motor_UpdateMessages>:

void Motor_UpdateMessages(){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
//	m2p_motor.value5  =(uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
//
//	temp2 = (uint16_t)(motor_ankle.temperature*k_float2int12+b_float2int12);
//	m2p_motor.value6 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
//	m2p_motor.head = 0xFC;
	if(motor_knee.is_free==1&&motor_ankle.is_free==1){
 8001ae6:	4b8f      	ldr	r3, [pc, #572]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001ae8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f040 8111 	bne.w	8001d16 <Motor_UpdateMessages+0x236>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <Motor_UpdateMessages+0x248>)
 8001af6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	f040 810a 	bne.w	8001d16 <Motor_UpdateMessages+0x236>
		motor_knee.is_free=0;
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		motor_ankle.is_free=0;
 8001b0a:	4b87      	ldr	r3, [pc, #540]	; (8001d28 <Motor_UpdateMessages+0x248>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		m2p.head = 0x01;
 8001b12:	4b86      	ldr	r3, [pc, #536]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
		uint16_t temp1 = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	80fb      	strh	r3, [r7, #6]
		uint16_t temp2 = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	80bb      	strh	r3, [r7, #4]
		temp1 = (uint16_t)(motor_knee.pos_actual*k_float2int12+b_float2int12);
 8001b20:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001b22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b26:	4b82      	ldr	r3, [pc, #520]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b30:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b3e:	ee17 3a90 	vmov	r3, s15
 8001b42:	80fb      	strh	r3, [r7, #6]
		temp2 = (uint16_t)(motor_knee.vel_actual*k_float2int12+b_float2int12);
 8001b44:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001b46:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b4a:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b54:	4b77      	ldr	r3, [pc, #476]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b62:	ee17 3a90 	vmov	r3, s15
 8001b66:	80bb      	strh	r3, [r7, #4]
		m2p.value1 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001b84:	805a      	strh	r2, [r3, #2]
//						pos_desired_rtmotor-pos_actual_rtmotor,
//						pos_actual_rtmotor-pos_actual_rtpc,
//						pos_desired_rtpc-pos_actual_rtpc,
//						pos_desired_rtpc,
//						pos_actual_rtpc);
		temp1 = (uint16_t)(motor_ankle.pos_actual*k_float2int12+b_float2int12);
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <Motor_UpdateMessages+0x248>)
 8001b88:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba4:	ee17 3a90 	vmov	r3, s15
 8001ba8:	80fb      	strh	r3, [r7, #6]
		m2p.value2 = (uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 8001baa:	88bb      	ldrh	r3, [r7, #4]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001bc4:	809a      	strh	r2, [r3, #4]

		temp2 = (uint16_t)(motor_ankle.vel_actual*k_float2int12+b_float2int12);
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <Motor_UpdateMessages+0x248>)
 8001bc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bcc:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd6:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be4:	ee17 3a90 	vmov	r3, s15
 8001be8:	80bb      	strh	r3, [r7, #4]
		m2p.value3 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	031b      	lsls	r3, r3, #12
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001c02:	80da      	strh	r2, [r3, #6]

		temp1 = (uint16_t)(motor_knee.cur_actual*k_float2int12+b_float2int12);
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001c06:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c14:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c22:	ee17 3a90 	vmov	r3, s15
 8001c26:	80fb      	strh	r3, [r7, #6]
		temp2 = (uint16_t)(motor_ankle.cur_actual*k_float2int12+b_float2int12);
 8001c28:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <Motor_UpdateMessages+0x248>)
 8001c2a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c46:	ee17 3a90 	vmov	r3, s15
 8001c4a:	80bb      	strh	r3, [r7, #4]
		m2p.value4 = (uint16_t)(((temp1&0xfff)<<4)|(temp2>>8&0xf));
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001c68:	811a      	strh	r2, [r3, #8]

		temp1 = (uint16_t)(motor_knee.temperature*k_float2int12+b_float2int12);
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001c6c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	80fb      	strh	r3, [r7, #6]
		m2p.value5  =(uint16_t)(((temp2&0xff)<<8)|(temp1>>4&0xff));
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001ca8:	815a      	strh	r2, [r3, #10]

		temp2 = (uint16_t)(motor_ankle.temperature*k_float2int12+b_float2int12);
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <Motor_UpdateMessages+0x248>)
 8001cac:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <Motor_UpdateMessages+0x250>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <Motor_UpdateMessages+0x254>)
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	80bb      	strh	r3, [r7, #4]
		m2p.value6 = (uint16_t)(((temp1&0xf)<<12)|(temp2&0xfff));
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	031b      	lsls	r3, r3, #12
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001ce6:	819a      	strh	r2, [r3, #12]
		m2p.head = 0xFC;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <Motor_UpdateMessages+0x24c>)
 8001cea:	22fc      	movs	r2, #252	; 0xfc
 8001cec:	701a      	strb	r2, [r3, #0]
		motor_knee.is_free = 1;
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		motor_ankle.is_free = 1;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <Motor_UpdateMessages+0x248>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		pos_actual_rtmotor = motor_knee.pos_actual;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <Motor_UpdateMessages+0x258>)
 8001d04:	6013      	str	r3, [r2, #0]
		vel_actual_rtmotor = motor_knee.vel_actual;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <Motor_UpdateMessages+0x25c>)
 8001d0c:	6013      	str	r3, [r2, #0]
		current_actual_rtmotor = motor_knee.cur_actual;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <Motor_UpdateMessages+0x244>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <Motor_UpdateMessages+0x260>)
 8001d14:	6013      	str	r3, [r2, #0]
	}else{}
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000030 	.word	0x20000030
 8001d2c:	20000090 	.word	0x20000090
 8001d30:	20000078 	.word	0x20000078
 8001d34:	2000007c 	.word	0x2000007c
 8001d38:	20000330 	.word	0x20000330
 8001d3c:	20000340 	.word	0x20000340
 8001d40:	20000358 	.word	0x20000358

08001d44 <Motor_CMDUnpack>:

void Motor_CMDUnpack(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
	uint16_t temp;
	if(p2m.head==0xFC){
 8001d4a:	4bac      	ldr	r3, [pc, #688]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2bfc      	cmp	r3, #252	; 0xfc
 8001d52:	f040 82d7 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
		if(p2m.id==CMD_QUICK_STOP){
 8001d56:	4ba9      	ldr	r3, [pc, #676]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001d58:	789b      	ldrb	r3, [r3, #2]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d11a      	bne.n	8001d96 <Motor_CMDUnpack+0x52>
			motor_knee.state = 0x00;
 8001d60:	4ba7      	ldr	r3, [pc, #668]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			motor_ankle.state = 0x00;
 8001d68:	4ba6      	ldr	r3, [pc, #664]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			can_set_vel(motor_knee.device_id, 0);
 8001d70:	4ba3      	ldr	r3, [pc, #652]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8002008 <Motor_CMDUnpack+0x2c4>
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe0b 	bl	8001998 <can_set_vel>
			can_set_vel(motor_ankle.device_id, 0);
 8001d82:	4ba0      	ldr	r3, [pc, #640]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8002008 <Motor_CMDUnpack+0x2c4>
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe02 	bl	8001998 <can_set_vel>
 8001d94:	e2b6      	b.n	8002304 <Motor_CMDUnpack+0x5c0>
		}else if(p2m.id==CMD_POSITION_CTRL){
 8001d96:	4b99      	ldr	r3, [pc, #612]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001d98:	789b      	ldrb	r3, [r3, #2]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d14e      	bne.n	8001e3e <Motor_CMDUnpack+0xfa>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001da0:	4b97      	ldr	r3, [pc, #604]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001da2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	f040 82ab 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
 8001dae:	4b95      	ldr	r3, [pc, #596]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001db0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	f040 82a4 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
				motor_knee.pos_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001dbc:	4b8f      	ldr	r3, [pc, #572]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001dbe:	889b      	ldrh	r3, [r3, #4]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dca:	4b90      	ldr	r3, [pc, #576]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dd4:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001dd6:	ed93 7a00 	vldr	s14, [r3]
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001de0:	edc3 7a04 	vstr	s15, [r3, #16]
				can_set_pos(motor_knee.device_id, motor_knee.pos_desired);
 8001de4:	4b86      	ldr	r3, [pc, #536]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4a84      	ldr	r2, [pc, #528]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001dee:	edd2 7a04 	vldr	s15, [r2, #16]
 8001df2:	eeb0 0a67 	vmov.f32	s0, s15
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fd72 	bl	80018e0 <can_set_pos>
				motor_ankle.pos_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001dfc:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001dfe:	88db      	ldrh	r3, [r3, #6]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0a:	4b80      	ldr	r3, [pc, #512]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e14:	4b7e      	ldr	r3, [pc, #504]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001e16:	ed93 7a00 	vldr	s14, [r3]
 8001e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1e:	4b79      	ldr	r3, [pc, #484]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001e20:	edc3 7a04 	vstr	s15, [r3, #16]
				can_set_pos(motor_ankle.device_id, motor_ankle.pos_desired);
 8001e24:	4b77      	ldr	r3, [pc, #476]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4a75      	ldr	r2, [pc, #468]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001e2e:	edd2 7a04 	vldr	s15, [r2, #16]
 8001e32:	eeb0 0a67 	vmov.f32	s0, s15
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fd52 	bl	80018e0 <can_set_pos>
 8001e3c:	e262      	b.n	8002304 <Motor_CMDUnpack+0x5c0>
			}else{}
		}else if(p2m.id==CMD_VELOCITY_CTRL){
 8001e3e:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001e40:	789b      	ldrb	r3, [r3, #2]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d14e      	bne.n	8001ee6 <Motor_CMDUnpack+0x1a2>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	f040 8257 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
 8001e56:	4b6b      	ldr	r3, [pc, #428]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001e58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	f040 8250 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
				motor_knee.vel_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001e64:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	4b66      	ldr	r3, [pc, #408]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001e88:	edc3 7a05 	vstr	s15, [r3, #20]
				can_set_vel(motor_knee.device_id, motor_knee.vel_desired);
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4a5a      	ldr	r2, [pc, #360]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001e96:	edd2 7a05 	vldr	s15, [r2, #20]
 8001e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd7a 	bl	8001998 <can_set_vel>
				motor_ankle.vel_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001ea4:	4b55      	ldr	r3, [pc, #340]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001ea6:	88db      	ldrh	r3, [r3, #6]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb2:	4b56      	ldr	r3, [pc, #344]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ebc:	4b54      	ldr	r3, [pc, #336]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001ec8:	edc3 7a05 	vstr	s15, [r3, #20]
				can_set_vel(motor_ankle.device_id, motor_ankle.vel_desired);
 8001ecc:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001ed6:	edd2 7a05 	vldr	s15, [r2, #20]
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fd5a 	bl	8001998 <can_set_vel>
 8001ee4:	e20e      	b.n	8002304 <Motor_CMDUnpack+0x5c0>
			}else{}
		}else if(p2m.id==CMD_POSITION_AND_VELOCITY){
 8001ee6:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	f040 8093 	bne.w	8002018 <Motor_CMDUnpack+0x2d4>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8001ef2:	4b43      	ldr	r3, [pc, #268]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001ef4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f040 8202 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
 8001f00:	4b40      	ldr	r3, [pc, #256]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001f02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f040 81fb 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
				motor_knee.pos_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001f10:	889b      	ldrh	r3, [r3, #4]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f26:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001f32:	edc3 7a04 	vstr	s15, [r3, #16]
				motor_knee.vel_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001f38:	88db      	ldrh	r3, [r3, #6]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f44:	4b31      	ldr	r3, [pc, #196]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001f50:	ed93 7a00 	vldr	s14, [r3]
 8001f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001f5a:	edc3 7a05 	vstr	s15, [r3, #20]
				motor_ankle.pos_desired = (float)((p2m.value3-b_float2int16)/k_float2int16);
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001f60:	891b      	ldrh	r3, [r3, #8]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001f78:	ed93 7a00 	vldr	s14, [r3]
 8001f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001f82:	edc3 7a04 	vstr	s15, [r3, #16]
				motor_ankle.vel_desired = (float)((p2m.value4-b_float2int16)/k_float2int16);
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <Motor_CMDUnpack+0x2b8>)
 8001f88:	895b      	ldrh	r3, [r3, #10]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <Motor_CMDUnpack+0x2c8>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <Motor_CMDUnpack+0x2cc>)
 8001fa0:	ed93 7a00 	vldr	s14, [r3]
 8001fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001faa:	edc3 7a05 	vstr	s15, [r3, #20]
				can_set_pos_spd(motor_knee.device_id, motor_knee.pos_desired, motor_knee.vel_desired, 40000);
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001fb8:	edd2 7a04 	vldr	s15, [r2, #16]
 8001fbc:	4a10      	ldr	r2, [pc, #64]	; (8002000 <Motor_CMDUnpack+0x2bc>)
 8001fbe:	ed92 7a05 	vldr	s14, [r2, #20]
 8001fc2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8002014 <Motor_CMDUnpack+0x2d0>
 8001fc6:	eef0 0a47 	vmov.f32	s1, s14
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fb2e 	bl	8001630 <can_set_pos_spd>
				can_set_pos_spd(motor_ankle.device_id, motor_ankle.pos_desired, motor_ankle.vel_desired, 40000);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4a09      	ldr	r2, [pc, #36]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001fde:	edd2 7a04 	vldr	s15, [r2, #16]
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <Motor_CMDUnpack+0x2c0>)
 8001fe4:	ed92 7a05 	vldr	s14, [r2, #20]
 8001fe8:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8002014 <Motor_CMDUnpack+0x2d0>
 8001fec:	eef0 0a47 	vmov.f32	s1, s14
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fb1b 	bl	8001630 <can_set_pos_spd>
 8001ffa:	e183      	b.n	8002304 <Motor_CMDUnpack+0x5c0>
 8001ffc:	20000080 	.word	0x20000080
 8002000:	20000000 	.word	0x20000000
 8002004:	20000030 	.word	0x20000030
 8002008:	00000000 	.word	0x00000000
 800200c:	20000074 	.word	0x20000074
 8002010:	20000070 	.word	0x20000070
 8002014:	471c4000 	.word	0x471c4000
			}else{}
		}else if(p2m.id==CMD_TORQUE_CTRL){
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <Motor_CMDUnpack+0x37c>)
 800201a:	789b      	ldrb	r3, [r3, #2]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d158      	bne.n	80020d4 <Motor_CMDUnpack+0x390>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <Motor_CMDUnpack+0x380>)
 8002024:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	f040 816a 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <Motor_CMDUnpack+0x384>)
 8002032:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 8163 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
				motor_knee.cur_desired = (float)((p2m.value1-b_float2int16)/k_float2int16);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <Motor_CMDUnpack+0x37c>)
 8002040:	889b      	ldrh	r3, [r3, #4]
 8002042:	b29b      	uxth	r3, r3
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204c:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <Motor_CMDUnpack+0x388>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <Motor_CMDUnpack+0x38c>)
 8002058:	ed93 7a00 	vldr	s14, [r3]
 800205c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <Motor_CMDUnpack+0x380>)
 8002062:	edc3 7a06 	vstr	s15, [r3, #24]
				can_set_current(motor_knee.device_id, motor_knee.cur_desired);
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <Motor_CMDUnpack+0x380>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <Motor_CMDUnpack+0x380>)
 8002070:	edd2 7a06 	vldr	s15, [r2, #24]
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fa75 	bl	8001568 <can_set_current>
				motor_ankle.cur_desired = (float)((p2m.value2-b_float2int16)/k_float2int16);
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <Motor_CMDUnpack+0x37c>)
 8002080:	88db      	ldrh	r3, [r3, #6]
 8002082:	b29b      	uxth	r3, r3
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <Motor_CMDUnpack+0x388>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <Motor_CMDUnpack+0x38c>)
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <Motor_CMDUnpack+0x384>)
 80020a2:	edc3 7a06 	vstr	s15, [r3, #24]
				can_set_current(motor_ankle.device_id, motor_ankle.cur_desired);
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <Motor_CMDUnpack+0x384>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <Motor_CMDUnpack+0x384>)
 80020b0:	edd2 7a06 	vldr	s15, [r2, #24]
 80020b4:	eeb0 0a67 	vmov.f32	s0, s15
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fa55 	bl	8001568 <can_set_current>
 80020be:	e121      	b.n	8002304 <Motor_CMDUnpack+0x5c0>
 80020c0:	20000080 	.word	0x20000080
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000030 	.word	0x20000030
 80020cc:	20000074 	.word	0x20000074
 80020d0:	20000070 	.word	0x20000070
			}else{}
		}else if(p2m.id==CMD_IMPEDANCE){
 80020d4:	4b97      	ldr	r3, [pc, #604]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 80020d6:	789b      	ldrb	r3, [r3, #2]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b04      	cmp	r3, #4
 80020dc:	f040 8112 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
			if(motor_knee.state==0x01&&motor_ankle.state==0x01){
 80020e0:	4b95      	ldr	r3, [pc, #596]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 80020e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f040 810b 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
 80020ee:	4b93      	ldr	r3, [pc, #588]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80020f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	f040 8104 	bne.w	8002304 <Motor_CMDUnpack+0x5c0>
				temp = (uint16_t)(p2m.value1>>4&0xfff);
 80020fc:	4b8d      	ldr	r3, [pc, #564]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	b29b      	uxth	r3, r3
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	b29b      	uxth	r3, r3
 8002106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210a:	80fb      	strh	r3, [r7, #6]
				motor_knee.Kp =(float) (temp-b_float2int12)/k_float2int12;
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002116:	4b8a      	ldr	r3, [pc, #552]	; (8002340 <Motor_CMDUnpack+0x5fc>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002120:	4b88      	ldr	r3, [pc, #544]	; (8002344 <Motor_CMDUnpack+0x600>)
 8002122:	ed93 7a00 	vldr	s14, [r3]
 8002126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212a:	4b83      	ldr	r3, [pc, #524]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 800212c:	edc3 7a07 	vstr	s15, [r3, #28]
				temp = (uint16_t)(((p2m.value1&0xf)<<8)|(p2m.value2>>8&0xff));
 8002130:	4b80      	ldr	r3, [pc, #512]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 8002132:	889b      	ldrh	r3, [r3, #4]
 8002134:	b29b      	uxth	r3, r3
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21b      	sxth	r3, r3
 800213a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800213e:	b21a      	sxth	r2, r3
 8002140:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 8002142:	88db      	ldrh	r3, [r3, #6]
 8002144:	b29b      	uxth	r3, r3
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	b29b      	uxth	r3, r3
 800214a:	b21b      	sxth	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21b      	sxth	r3, r3
 8002154:	80fb      	strh	r3, [r7, #6]
				motor_ankle.Kp = (float) (temp-b_float2int12)/k_float2int12;
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	ee07 3a90 	vmov	s15, r3
 800215c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002160:	4b77      	ldr	r3, [pc, #476]	; (8002340 <Motor_CMDUnpack+0x5fc>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	ee77 6a67 	vsub.f32	s13, s14, s15
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <Motor_CMDUnpack+0x600>)
 800216c:	ed93 7a00 	vldr	s14, [r3]
 8002170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002174:	4b71      	ldr	r3, [pc, #452]	; (800233c <Motor_CMDUnpack+0x5f8>)
 8002176:	edc3 7a07 	vstr	s15, [r3, #28]
				temp = (uint16_t)(((p2m.value2&0xff)<<4)|(p2m.value3>>12&0xf));
 800217a:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 800217c:	88db      	ldrh	r3, [r3, #6]
 800217e:	b29b      	uxth	r3, r3
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	b21b      	sxth	r3, r3
 8002184:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 800218c:	891b      	ldrh	r3, [r3, #8]
 800218e:	b29b      	uxth	r3, r3
 8002190:	0b1b      	lsrs	r3, r3, #12
 8002192:	b29b      	uxth	r3, r3
 8002194:	b21b      	sxth	r3, r3
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	b21b      	sxth	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	80fb      	strh	r3, [r7, #6]
				motor_knee.Kb = (float) (temp-b_float2int12)/k_float2int12;
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ac:	4b64      	ldr	r3, [pc, #400]	; (8002340 <Motor_CMDUnpack+0x5fc>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <Motor_CMDUnpack+0x600>)
 80021b8:	ed93 7a00 	vldr	s14, [r3]
 80021bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c0:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 80021c2:	edc3 7a08 	vstr	s15, [r3, #32]
				temp = (uint16_t)(p2m.value3&0xfff);
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 80021c8:	891b      	ldrh	r3, [r3, #8]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	80fb      	strh	r3, [r7, #6]
				motor_ankle.Kb = (float) (temp-b_float2int12)/k_float2int12;
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021dc:	4b58      	ldr	r3, [pc, #352]	; (8002340 <Motor_CMDUnpack+0x5fc>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <Motor_CMDUnpack+0x600>)
 80021e8:	ed93 7a00 	vldr	s14, [r3]
 80021ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f0:	4b52      	ldr	r3, [pc, #328]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80021f2:	edc3 7a08 	vstr	s15, [r3, #32]
				temp = (uint16_t)(p2m.value4>>4&0xfff);
 80021f6:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 80021f8:	895b      	ldrh	r3, [r3, #10]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	80fb      	strh	r3, [r7, #6]
				motor_knee.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002210:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <Motor_CMDUnpack+0x5fc>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee77 6a67 	vsub.f32	s13, s14, s15
 800221a:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <Motor_CMDUnpack+0x600>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002224:	4b44      	ldr	r3, [pc, #272]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 8002226:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				temp = (uint16_t)(((p2m.value4&0xf)<<8)|(p2m.ext_value));
 800222a:	4b42      	ldr	r3, [pc, #264]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 800222c:	895b      	ldrh	r3, [r3, #10]
 800222e:	b29b      	uxth	r3, r3
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21b      	sxth	r3, r3
 8002234:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002238:	b21a      	sxth	r2, r3
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <Motor_CMDUnpack+0x5f0>)
 800223c:	7b1b      	ldrb	r3, [r3, #12]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b21b      	sxth	r3, r3
 8002246:	80fb      	strh	r3, [r7, #6]
				motor_ankle.Angle_eq = (float) (temp-b_float2int12)/k_float2int12;
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <Motor_CMDUnpack+0x5fc>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee77 6a67 	vsub.f32	s13, s14, s15
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <Motor_CMDUnpack+0x600>)
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <Motor_CMDUnpack+0x5f8>)
 8002268:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				motor_knee.cur_desired = motor_knee.Kp*(motor_knee.pos_actual-motor_knee.Angle_eq)+motor_knee.Kb*motor_knee.vel_actual;
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 800226e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 8002274:	edd3 6a01 	vldr	s13, [r3, #4]
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 800227a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800227e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 8002288:	edd3 6a08 	vldr	s13, [r3, #32]
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 800228e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 800229c:	edc3 7a06 	vstr	s15, [r3, #24]
				motor_ankle.cur_desired = motor_ankle.Kp*(motor_ankle.pos_actual-motor_ankle.Angle_eq)+motor_ankle.Kb*motor_ankle.vel_actual;
 80022a0:	4b26      	ldr	r3, [pc, #152]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022a2:	ed93 7a07 	vldr	s14, [r3, #28]
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022bc:	edd3 6a08 	vldr	s13, [r3, #32]
 80022c0:	4b1e      	ldr	r3, [pc, #120]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022d0:	edc3 7a06 	vstr	s15, [r3, #24]
				can_set_current(motor_knee.device_id, motor_knee.cur_desired);
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 80022de:	edd2 7a06 	vldr	s15, [r2, #24]
 80022e2:	eeb0 0a67 	vmov.f32	s0, s15
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f93e 	bl	8001568 <can_set_current>
				can_set_current(motor_ankle.device_id, motor_ankle.cur_desired);
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <Motor_CMDUnpack+0x5f8>)
 80022f6:	edd2 7a06 	vldr	s15, [r2, #24]
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f932 	bl	8001568 <can_set_current>
			}else{}
		}else{}//end p2m_motor.id
	}else{}//end p2m_motor.head
	pos_desired_rtmotor = motor_knee.pos_desired;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <Motor_CMDUnpack+0x604>)
 800230a:	6013      	str	r3, [r2, #0]
	vel_desired_rtmotor = motor_knee.vel_desired;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <Motor_CMDUnpack+0x608>)
 8002312:	6013      	str	r3, [r2, #0]
	Kp_desired_rtmotor = motor_knee.Kp;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <Motor_CMDUnpack+0x60c>)
 800231a:	6013      	str	r3, [r2, #0]
	Kb_desired_rtmotor = motor_knee.Kb;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <Motor_CMDUnpack+0x610>)
 8002322:	6013      	str	r3, [r2, #0]
	Angle_desired_rtmotor = motor_knee.Angle_eq;
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <Motor_CMDUnpack+0x5f4>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <Motor_CMDUnpack+0x614>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000080 	.word	0x20000080
 8002338:	20000000 	.word	0x20000000
 800233c:	20000030 	.word	0x20000030
 8002340:	2000007c 	.word	0x2000007c
 8002344:	20000078 	.word	0x20000078
 8002348:	2000032c 	.word	0x2000032c
 800234c:	2000033c 	.word	0x2000033c
 8002350:	2000034c 	.word	0x2000034c
 8002354:	20000350 	.word	0x20000350
 8002358:	20000354 	.word	0x20000354

0800235c <m2pmsg_memcpy>:
volatile M2P m2p = {0x01,0xFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000};//

void p2mmsg_memcpy(uint8_t* buffer,volatile P2M p2m_){
	//TODO
}
void m2pmsg_memcpy(uint8_t* buffer,volatile M2P m2p_){
 800235c:	b084      	sub	sp, #16
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	f107 0014 	add.w	r0, r7, #20
 800236a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	buffer[0] = m2p_.head;
 800236e:	7d3b      	ldrb	r3, [r7, #20]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	701a      	strb	r2, [r3, #0]
	buffer[1] = m2p_.value1>>8&0xff;
 8002376:	8afb      	ldrh	r3, [r7, #22]
 8002378:	b29b      	uxth	r3, r3
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3301      	adds	r3, #1
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
	buffer[2] = m2p_.value1&0xff;
 8002386:	8afb      	ldrh	r3, [r7, #22]
 8002388:	b29a      	uxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3302      	adds	r3, #2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
	buffer[3] = m2p_.value2>>8&0xff;
 8002392:	8b3b      	ldrh	r3, [r7, #24]
 8002394:	b29b      	uxth	r3, r3
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3303      	adds	r3, #3
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]
	buffer[4] = m2p_.value2&0xff;
 80023a2:	8b3b      	ldrh	r3, [r7, #24]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]
	buffer[5] = m2p_.value3>>8&0xff;
 80023ae:	8b7b      	ldrh	r3, [r7, #26]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3305      	adds	r3, #5
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
	buffer[6] = m2p_.value3&0xff;
 80023be:	8b7b      	ldrh	r3, [r7, #26]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3306      	adds	r3, #6
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
	buffer[7] = m2p_.value4>>8&0xff;
 80023ca:	8bbb      	ldrh	r3, [r7, #28]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3307      	adds	r3, #7
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]
	buffer[8] = m2p_.value4&0xff;
 80023da:	8bbb      	ldrh	r3, [r7, #28]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3308      	adds	r3, #8
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
	buffer[9] = m2p_.value5>>8&0xff;
 80023e6:	8bfb      	ldrh	r3, [r7, #30]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3309      	adds	r3, #9
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
	buffer[10] = m2p_.value5&0xff;
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	330a      	adds	r3, #10
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]
	buffer[11] = m2p_.value6>>8&0xff;
 8002402:	8c3b      	ldrh	r3, [r7, #32]
 8002404:	b29b      	uxth	r3, r3
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	330b      	adds	r3, #11
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
	buffer[12] = m2p_.value6&0xff;
 8002412:	8c3b      	ldrh	r3, [r7, #32]
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	330c      	adds	r3, #12
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
	buffer[13] = m2p_.end;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	330d      	adds	r3, #13
 8002422:	7d7a      	ldrb	r2, [r7, #21]
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	b004      	add	sp, #16
 8002434:	4770      	bx	lr
	...

08002438 <RingBuf_WriteByteArray>:
			buffer->headPosition = 0;
		}
		write_residual+=1;
	}else{}
}
void RingBuf_WriteByteArray(ringBuffer_t* buffer, uint8_t* pData, uint32_t length){
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	buffer->newest_frame_position = buffer->tailPosition;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	785a      	ldrb	r2, [r3, #1]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	75da      	strb	r2, [r3, #23]
	if(length+buffer->tailPosition>=Buffer_MAX){
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	461a      	mov	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	2b14      	cmp	r3, #20
 8002458:	d928      	bls.n	80024ac <RingBuf_WriteByteArray+0x74>
		i = Buffer_MAX-buffer->tailPosition;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	f1c3 0315 	rsb	r3, r3, #21
 8002462:	461a      	mov	r2, r3
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <RingBuf_WriteByteArray+0xa0>)
 8002466:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)(buffer->ringBuf)+buffer->tailPosition,pData,i);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3302      	adds	r3, #2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	7852      	ldrb	r2, [r2, #1]
 8002470:	4413      	add	r3, r2
 8002472:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <RingBuf_WriteByteArray+0xa0>)
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f007 fc31 	bl	8009ce0 <memcpy>
		buffer->tailPosition = length-i;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <RingBuf_WriteByteArray+0xa0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	b2da      	uxtb	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	705a      	strb	r2, [r3, #1]
		memcpy((uint8_t*)(buffer->ringBuf),(uint8_t*)pData+i,length-i);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1c98      	adds	r0, r3, #2
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <RingBuf_WriteByteArray+0xa0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	18d1      	adds	r1, r2, r3
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <RingBuf_WriteByteArray+0xa0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	f007 fc1b 	bl	8009ce0 <memcpy>
		buffer->tailPosition = buffer->tailPosition+length;
	}
//	for(i=0;i<length;i++){
//		RingBuf_WriteByte(buffer, *(pData+i));
//	}
}
 80024aa:	e011      	b.n	80024d0 <RingBuf_WriteByteArray+0x98>
		memcpy((uint8_t*)(buffer->ringBuf)+buffer->tailPosition,pData,length);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3302      	adds	r3, #2
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	7852      	ldrb	r2, [r2, #1]
 80024b4:	4413      	add	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f007 fc10 	bl	8009ce0 <memcpy>
		buffer->tailPosition = buffer->tailPosition+length;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	785a      	ldrb	r2, [r3, #1]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	705a      	strb	r2, [r3, #1]
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000035c 	.word	0x2000035c

080024dc <RingBuf_ReadByteArray>:
		}
	}
	return 1;
}

int RingBuf_ReadByteArray(ringBuffer_t* buffer, uint8_t* pData, uint32_t length){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	read_ok = 1;
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
//	for(j=0;j<length;j++){
//		read_ok *= RingBuf_ReadByte(buffer, (uint8_t*)(pData+j));
//	}
	if(buffer->headPosition+length>Buffer_MAX){
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	2b15      	cmp	r3, #21
 80024fa:	d947      	bls.n	800258c <RingBuf_ReadByteArray+0xb0>
		i = Buffer_MAX-buffer->headPosition;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f1c3 0315 	rsb	r3, r3, #21
 8002504:	461a      	mov	r2, r3
 8002506:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <RingBuf_ReadByteArray+0x108>)
 8002508:	601a      	str	r2, [r3, #0]
		j = length-i;
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <RingBuf_ReadByteArray+0x108>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	4a35      	ldr	r2, [pc, #212]	; (80025e8 <RingBuf_ReadByteArray+0x10c>)
 8002514:	6013      	str	r3, [r2, #0]
		if(i<=(buffer->tailPosition)||(buffer->tailPosition)<j){
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	461a      	mov	r2, r3
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <RingBuf_ReadByteArray+0x108>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d206      	bcs.n	8002532 <RingBuf_ReadByteArray+0x56>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	785b      	ldrb	r3, [r3, #1]
 8002528:	461a      	mov	r2, r3
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <RingBuf_ReadByteArray+0x10c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d205      	bcs.n	800253e <RingBuf_ReadByteArray+0x62>
			read_ok = 0;
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
			return read_ok;
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e04c      	b.n	80025d8 <RingBuf_ReadByteArray+0xfc>
		}else{
			memcpy((uint8_t*)pData,(uint8_t*)(buffer->ringBuf)+buffer->headPosition,i);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3302      	adds	r3, #2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <RingBuf_ReadByteArray+0x108>)
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	68b8      	ldr	r0, [r7, #8]
 8002550:	f007 fbc6 	bl	8009ce0 <memcpy>
			buffer->headPosition = length-i;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <RingBuf_ReadByteArray+0x108>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	701a      	strb	r2, [r3, #0]
			memcpy((uint8_t*)pData+i,(uint8_t*)(buffer->ringBuf),length-i);
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <RingBuf_ReadByteArray+0x108>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	18d0      	adds	r0, r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1c99      	adds	r1, r3, #2
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <RingBuf_ReadByteArray+0x108>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	461a      	mov	r2, r3
 800257c:	f007 fbb0 	bl	8009ce0 <memcpy>
			read_ok = 1;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]
			return read_ok;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	e025      	b.n	80025d8 <RingBuf_ReadByteArray+0xfc>
		}
	}else{
		if(buffer->headPosition+length>buffer->tailPosition){
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	7852      	ldrb	r2, [r2, #1]
 800259a:	4293      	cmp	r3, r2
 800259c:	d905      	bls.n	80025aa <RingBuf_ReadByteArray+0xce>
			read_ok = 0;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
			return read_ok;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	e016      	b.n	80025d8 <RingBuf_ReadByteArray+0xfc>
		}else{
			memcpy(pData,(uint8_t*)(buffer->ringBuf)+buffer->headPosition,length);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3302      	adds	r3, #2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4619      	mov	r1, r3
 80025b8:	68b8      	ldr	r0, [r7, #8]
 80025ba:	f007 fb91 	bl	8009ce0 <memcpy>
			buffer->headPosition = buffer->headPosition+length;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	701a      	strb	r2, [r3, #0]
			read_ok = 1;
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
			return read_ok;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <RingBuf_ReadByteArray+0x104>)
 80025d6:	681b      	ldr	r3, [r3, #0]
		}
	}
	return read_ok;
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200000a0 	.word	0x200000a0
 80025e4:	2000035c 	.word	0x2000035c
 80025e8:	20000360 	.word	0x20000360

080025ec <RingBuf_ReadByteNewestArray>:
int RingBuf_ReadByteNewestArray(ringBuffer_t* buffer,uint8_t* pData, uint32_t length){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
	buffer->headPosition = buffer->newest_frame_position;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	7dda      	ldrb	r2, [r3, #23]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]
	read_ok = RingBuf_ReadByteArray(buffer,pData,length);
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff ff69 	bl	80024dc <RingBuf_ReadByteArray>
 800260a:	4603      	mov	r3, r0
 800260c:	4a03      	ldr	r2, [pc, #12]	; (800261c <RingBuf_ReadByteNewestArray+0x30>)
 800260e:	6013      	str	r3, [r2, #0]
	return read_ok;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <RingBuf_ReadByteNewestArray+0x30>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200000a0 	.word	0x200000a0

08002620 <Start_PCReceiveIT>:
extern volatile float Angle_desired_rtpc;

uint32_t msg_receive;
uint32_t msg_send;

void Start_PCReceiveIT(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxData));
 8002624:	220b      	movs	r2, #11
 8002626:	4907      	ldr	r1, [pc, #28]	; (8002644 <Start_PCReceiveIT+0x24>)
 8002628:	4807      	ldr	r0, [pc, #28]	; (8002648 <Start_PCReceiveIT+0x28>)
 800262a:	f003 ffa3 	bl	8006574 <HAL_UARTEx_ReceiveToIdle_DMA>
//	HAL_UART_Receive_DMA(&huart6, rxDataBuffer,11);
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <Start_PCReceiveIT+0x2c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <Start_PCReceiveIT+0x2c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000038c 	.word	0x2000038c
 8002648:	20000790 	.word	0x20000790
 800264c:	200008f4 	.word	0x200008f4

08002650 <HAL_UARTEx_RxEventCallback>:
//		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxData));
//		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
//	}
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size){
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
	if(huart==&huart6){
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_UARTEx_RxEventCallback+0x4c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d116      	bne.n	8002692 <HAL_UARTEx_RxEventCallback+0x42>
		RingBuf_WriteByteArray(&buffer, rxDataBuffer, Size);
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	461a      	mov	r2, r3
 8002668:	490d      	ldr	r1, [pc, #52]	; (80026a0 <HAL_UARTEx_RxEventCallback+0x50>)
 800266a:	480e      	ldr	r0, [pc, #56]	; (80026a4 <HAL_UARTEx_RxEventCallback+0x54>)
 800266c:	f7ff fee4 	bl	8002438 <RingBuf_WriteByteArray>
		RingBuf_ReadByteNewestArray(&buffer, rxData, sizeof(rxData));
 8002670:	220b      	movs	r2, #11
 8002672:	490d      	ldr	r1, [pc, #52]	; (80026a8 <HAL_UARTEx_RxEventCallback+0x58>)
 8002674:	480b      	ldr	r0, [pc, #44]	; (80026a4 <HAL_UARTEx_RxEventCallback+0x54>)
 8002676:	f7ff ffb9 	bl	80025ec <RingBuf_ReadByteNewestArray>
		tx_len = size_m2p;
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_UARTEx_RxEventCallback+0x5c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_UARTEx_RxEventCallback+0x60>)
 8002680:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart6, txDataBuffer,tx_len);
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_UARTEx_RxEventCallback+0x60>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	490a      	ldr	r1, [pc, #40]	; (80026b4 <HAL_UARTEx_RxEventCallback+0x64>)
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <HAL_UARTEx_RxEventCallback+0x4c>)
 800268e:	f003 fef3 	bl	8006478 <HAL_UART_Transmit_DMA>
//		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxDataBuffer, sizeof(rxData));
//		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
	}

}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000790 	.word	0x20000790
 80026a0:	2000038c 	.word	0x2000038c
 80026a4:	200003c4 	.word	0x200003c4
 80026a8:	200003b4 	.word	0x200003b4
 80026ac:	200000a4 	.word	0x200000a4
 80026b0:	200003c0 	.word	0x200003c0
 80026b4:	20000364 	.word	0x20000364

080026b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	if(huart==&huart6){
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_UART_RxCpltCallback+0x64>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d124      	bne.n	8002712 <HAL_UART_RxCpltCallback+0x5a>
		msg_send+=1;
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_UART_RxCpltCallback+0x68>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_UART_RxCpltCallback+0x68>)
 80026d0:	6013      	str	r3, [r2, #0]
		if(rxDataBuffer[0]==0xfc&&((rxDataBuffer[10]&0xf)==0xf)){
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_UART_RxCpltCallback+0x6c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2bfc      	cmp	r3, #252	; 0xfc
 80026d8:	d116      	bne.n	8002708 <HAL_UART_RxCpltCallback+0x50>
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_UART_RxCpltCallback+0x6c>)
 80026dc:	7a9b      	ldrb	r3, [r3, #10]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d110      	bne.n	8002708 <HAL_UART_RxCpltCallback+0x50>
			msg_receive +=1;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_UART_RxCpltCallback+0x70>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <HAL_UART_RxCpltCallback+0x70>)
 80026ee:	6013      	str	r3, [r2, #0]
			memcpy(rxData,rxDataBuffer,sizeof(rxData));
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_UART_RxCpltCallback+0x74>)
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_UART_RxCpltCallback+0x6c>)
 80026f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f6:	c303      	stmia	r3!, {r0, r1}
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	3302      	adds	r3, #2
 80026fc:	0c12      	lsrs	r2, r2, #16
 80026fe:	701a      	strb	r2, [r3, #0]
			PC_UnpackMessage();
 8002700:	f000 f822 	bl	8002748 <PC_UnpackMessage>
			PC_PackMessage();
 8002704:	f000 f8b4 	bl	8002870 <PC_PackMessage>
		}
		HAL_UART_Transmit_DMA(&huart6, txDataBuffer, 14);
 8002708:	220e      	movs	r2, #14
 800270a:	4909      	ldr	r1, [pc, #36]	; (8002730 <HAL_UART_RxCpltCallback+0x78>)
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <HAL_UART_RxCpltCallback+0x64>)
 800270e:	f003 feb3 	bl	8006478 <HAL_UART_Transmit_DMA>
//		HAL_UART_Receive_DMA(&huart6, rxDataBuffer,11);
	}
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000790 	.word	0x20000790
 8002720:	200003e0 	.word	0x200003e0
 8002724:	2000038c 	.word	0x2000038c
 8002728:	200003dc 	.word	0x200003dc
 800272c:	200003b4 	.word	0x200003b4
 8002730:	20000364 	.word	0x20000364

08002734 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
//	huart->gState = HAL_UART_STATE_READY;
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <PC_UnpackMessage>:
// [0]0x(id)* ,[9]0x*F
void PC_UnpackMessage(){
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
//				pos_desired_rtpc = (float)((p2m.value1-b_float2int16)/k_float2int16);
//
//			}else{}
//		}else{}
//	}
	if(rxData[0]==0xfc&&rxData[0]==0xfc&&((rxData[10]&0xf)==0xf)){
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <PC_UnpackMessage+0x110>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2bfc      	cmp	r3, #252	; 0xfc
 8002752:	d17b      	bne.n	800284c <PC_UnpackMessage+0x104>
 8002754:	4b40      	ldr	r3, [pc, #256]	; (8002858 <PC_UnpackMessage+0x110>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2bfc      	cmp	r3, #252	; 0xfc
 800275a:	d177      	bne.n	800284c <PC_UnpackMessage+0x104>
 800275c:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <PC_UnpackMessage+0x110>)
 800275e:	7a9b      	ldrb	r3, [r3, #10]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d171      	bne.n	800284c <PC_UnpackMessage+0x104>
		p2m.head = 0x01;
 8002768:	4b3c      	ldr	r3, [pc, #240]	; (800285c <PC_UnpackMessage+0x114>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
		p2m.id = (uint8_t)(rxData[1]>>4&0xf);
 800276e:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <PC_UnpackMessage+0x110>)
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b39      	ldr	r3, [pc, #228]	; (800285c <PC_UnpackMessage+0x114>)
 8002778:	709a      	strb	r2, [r3, #2]
		p2m.value1 = (uint16_t)(rxData[2]<<8|rxData[3]);
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <PC_UnpackMessage+0x110>)
 800277c:	789b      	ldrb	r3, [r3, #2]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	b21a      	sxth	r2, r3
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <PC_UnpackMessage+0x110>)
 8002784:	78db      	ldrb	r3, [r3, #3]
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <PC_UnpackMessage+0x114>)
 8002790:	809a      	strh	r2, [r3, #4]
		p2m.value2 = (uint16_t)(rxData[4]<<8|rxData[5]);
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <PC_UnpackMessage+0x110>)
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	b21a      	sxth	r2, r3
 800279a:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <PC_UnpackMessage+0x110>)
 800279c:	795b      	ldrb	r3, [r3, #5]
 800279e:	b21b      	sxth	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <PC_UnpackMessage+0x114>)
 80027a8:	80da      	strh	r2, [r3, #6]
		p2m.value3 = (uint16_t)(rxData[6]<<8|rxData[7]);
 80027aa:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <PC_UnpackMessage+0x110>)
 80027ac:	799b      	ldrb	r3, [r3, #6]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	4b29      	ldr	r3, [pc, #164]	; (8002858 <PC_UnpackMessage+0x110>)
 80027b4:	79db      	ldrb	r3, [r3, #7]
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b21b      	sxth	r3, r3
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b27      	ldr	r3, [pc, #156]	; (800285c <PC_UnpackMessage+0x114>)
 80027c0:	811a      	strh	r2, [r3, #8]
		p2m.value4 = (uint16_t)(rxData[8]<<8|rxData[9]);
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <PC_UnpackMessage+0x110>)
 80027c4:	7a1b      	ldrb	r3, [r3, #8]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <PC_UnpackMessage+0x110>)
 80027cc:	7a5b      	ldrb	r3, [r3, #9]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <PC_UnpackMessage+0x114>)
 80027d8:	815a      	strh	r2, [r3, #10]
		p2m.ext_value = (uint8_t)(((rxData[1]&0xf)<<4)|(rxData[10]>>4&0xf));
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <PC_UnpackMessage+0x110>)
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	b25a      	sxtb	r2, r3
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <PC_UnpackMessage+0x110>)
 80027e4:	7a9b      	ldrb	r3, [r3, #10]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <PC_UnpackMessage+0x114>)
 80027f4:	731a      	strb	r2, [r3, #12]
		p2m.head = 0xFC;
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <PC_UnpackMessage+0x114>)
 80027f8:	22fc      	movs	r2, #252	; 0xfc
 80027fa:	701a      	strb	r2, [r3, #0]
		pos_desired_rtpc = (float)((p2m.value1-b_float2int16)/k_float2int16);
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <PC_UnpackMessage+0x114>)
 80027fe:	889b      	ldrh	r3, [r3, #4]
 8002800:	b29b      	uxth	r3, r3
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <PC_UnpackMessage+0x118>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <PC_UnpackMessage+0x11c>)
 8002816:	ed93 7a00 	vldr	s14, [r3]
 800281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <PC_UnpackMessage+0x120>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
		vel_desired_rtpc = (float)((p2m.value2-b_float2int16)/k_float2int16);
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <PC_UnpackMessage+0x114>)
 8002826:	88db      	ldrh	r3, [r3, #6]
 8002828:	b29b      	uxth	r3, r3
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <PC_UnpackMessage+0x118>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee77 6a67 	vsub.f32	s13, s14, s15
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <PC_UnpackMessage+0x11c>)
 800283e:	ed93 7a00 	vldr	s14, [r3]
 8002842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <PC_UnpackMessage+0x124>)
 8002848:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200003b4 	.word	0x200003b4
 800285c:	20000080 	.word	0x20000080
 8002860:	20000074 	.word	0x20000074
 8002864:	20000070 	.word	0x20000070
 8002868:	20000334 	.word	0x20000334
 800286c:	20000344 	.word	0x20000344

08002870 <PC_PackMessage>:

void PC_PackMessage(){
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b083      	sub	sp, #12
 8002874:	af02      	add	r7, sp, #8
//				osDelay(1);
//				count+=1;
//			}
//		}
//	}
	if(m2p.head==0xFC && m2p.end==0xFF){
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <PC_PackMessage+0xb4>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2bfc      	cmp	r3, #252	; 0xfc
 800287e:	d14c      	bne.n	800291a <PC_PackMessage+0xaa>
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <PC_PackMessage+0xb4>)
 8002882:	785b      	ldrb	r3, [r3, #1]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2bff      	cmp	r3, #255	; 0xff
 8002888:	d147      	bne.n	800291a <PC_PackMessage+0xaa>
			m2pmsg_memcpy(txDataBuffer, m2p);
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <PC_PackMessage+0xb4>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4611      	mov	r1, r2
 8002890:	6858      	ldr	r0, [r3, #4]
 8002892:	4602      	mov	r2, r0
 8002894:	689c      	ldr	r4, [r3, #8]
 8002896:	4620      	mov	r0, r4
 8002898:	899b      	ldrh	r3, [r3, #12]
 800289a:	f8ad 3000 	strh.w	r3, [sp]
 800289e:	4603      	mov	r3, r0
 80028a0:	4821      	ldr	r0, [pc, #132]	; (8002928 <PC_PackMessage+0xb8>)
 80028a2:	f7ff fd5b 	bl	800235c <m2pmsg_memcpy>
			tx_len = size_m2p;
 80028a6:	4b21      	ldr	r3, [pc, #132]	; (800292c <PC_PackMessage+0xbc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	; (8002930 <PC_PackMessage+0xc0>)
 80028ac:	6013      	str	r3, [r2, #0]
			pos_actual_rtpc = (float)(((m2p.value1>>4)&0xfff)-b_float2int12)/k_float2int12;
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <PC_PackMessage+0xb4>)
 80028b0:	885b      	ldrh	r3, [r3, #2]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <PC_PackMessage+0xc4>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <PC_PackMessage+0xc8>)
 80028d0:	ed93 7a00 	vldr	s14, [r3]
 80028d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <PC_PackMessage+0xcc>)
 80028da:	edc3 7a00 	vstr	s15, [r3]
			vel_actual_rtpc = (float)((((m2p.value1&0xf)<<8)|(m2p.value2>>8&0xff))-b_float2int12)/k_float2int12;
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <PC_PackMessage+0xb4>)
 80028e0:	885b      	ldrh	r3, [r3, #2]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <PC_PackMessage+0xb4>)
 80028ec:	889b      	ldrh	r3, [r3, #4]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <PC_PackMessage+0xc4>)
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ee77 6a67 	vsub.f32	s13, s14, s15
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <PC_PackMessage+0xc8>)
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <PC_PackMessage+0xd0>)
 8002916:	edc3 7a00 	vstr	s15, [r3]
//				}else{
//					count+=1;
//				}
//			}
		}
}
 800291a:	bf00      	nop
 800291c:	3704      	adds	r7, #4
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	20000090 	.word	0x20000090
 8002928:	20000364 	.word	0x20000364
 800292c:	200000a4 	.word	0x200000a4
 8002930:	200003c0 	.word	0x200003c0
 8002934:	2000007c 	.word	0x2000007c
 8002938:	20000078 	.word	0x20000078
 800293c:	20000338 	.word	0x20000338
 8002940:	20000348 	.word	0x20000348

08002944 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_CAN1_Init+0x64>)
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <MX_CAN1_Init+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002950:	2206      	movs	r2, #6
 8002952:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <MX_CAN1_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002962:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002966:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <MX_CAN1_Init+0x64>)
 800296a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800296e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002972:	2200      	movs	r2, #0
 8002974:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <MX_CAN1_Init+0x64>)
 800297e:	2200      	movs	r2, #0
 8002980:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002984:	2201      	movs	r2, #1
 8002986:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <MX_CAN1_Init+0x64>)
 800298a:	2200      	movs	r2, #0
 800298c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002990:	2200      	movs	r2, #0
 8002992:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <MX_CAN1_Init+0x64>)
 8002996:	f001 f815 	bl	80039c4 <HAL_CAN_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80029a0:	f000 fae6 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	200003e4 	.word	0x200003e4
 80029ac:	40006400 	.word	0x40006400

080029b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_CAN_MspInit+0x94>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d133      	bne.n	8002a3a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <HAL_CAN_MspInit+0x98>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_CAN_MspInit+0x98>)
 80029dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_CAN_MspInit+0x98>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_CAN_MspInit+0x98>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <HAL_CAN_MspInit+0x98>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_CAN_MspInit+0x98>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4809      	ldr	r0, [pc, #36]	; (8002a4c <HAL_CAN_MspInit+0x9c>)
 8002a26:	f002 fb49 	bl	80050bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	2014      	movs	r0, #20
 8002a30:	f001 ff18 	bl	8004864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a34:	2014      	movs	r0, #20
 8002a36:	f001 ff31 	bl	800489c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40006400 	.word	0x40006400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020c00 	.word	0x40020c00

08002a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <MX_DMA_Init+0x98>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <MX_DMA_Init+0x98>)
 8002a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <MX_DMA_Init+0x98>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <MX_DMA_Init+0x98>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <MX_DMA_Init+0x98>)
 8002a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <MX_DMA_Init+0x98>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2106      	movs	r1, #6
 8002a92:	200c      	movs	r0, #12
 8002a94:	f001 fee6 	bl	8004864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a98:	200c      	movs	r0, #12
 8002a9a:	f001 feff 	bl	800489c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2106      	movs	r1, #6
 8002aa2:	200e      	movs	r0, #14
 8002aa4:	f001 fede 	bl	8004864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002aa8:	200e      	movs	r0, #14
 8002aaa:	f001 fef7 	bl	800489c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2106      	movs	r1, #6
 8002ab2:	200f      	movs	r0, #15
 8002ab4:	f001 fed6 	bl	8004864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002ab8:	200f      	movs	r0, #15
 8002aba:	f001 feef 	bl	800489c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2105      	movs	r1, #5
 8002ac2:	2039      	movs	r0, #57	; 0x39
 8002ac4:	f001 fece 	bl	8004864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002ac8:	2039      	movs	r0, #57	; 0x39
 8002aca:	f001 fee7 	bl	800489c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	2045      	movs	r0, #69	; 0x45
 8002ad4:	f001 fec6 	bl	8004864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002ad8:	2045      	movs	r0, #69	; 0x45
 8002ada:	f001 fedf 	bl	800489c <HAL_NVIC_EnableIRQ>

}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800

08002aec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8002afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a06      	ldr	r2, [pc, #24]	; (8002b1c <vApplicationGetIdleTaskMemory+0x30>)
 8002b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000424 	.word	0x20000424
 8002b1c:	20000478 	.word	0x20000478

08002b20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002b20:	b5b0      	push	{r4, r5, r7, lr}
 8002b22:	b09a      	sub	sp, #104	; 0x68
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of p2mMutex */
  osMutexDef(p2mMutex);
 8002b26:	2300      	movs	r3, #0
 8002b28:	663b      	str	r3, [r7, #96]	; 0x60
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	667b      	str	r3, [r7, #100]	; 0x64
  p2mMutexHandle = osMutexCreate(osMutex(p2mMutex));
 8002b2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 ff45 	bl	80079c2 <osMutexCreate>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <MX_FREERTOS_Init+0xc4>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* definition and creation of m2pMutex */
  osMutexDef(m2pMutex);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b42:	2300      	movs	r3, #0
 8002b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  m2pMutexHandle = osMutexCreate(osMutex(m2pMutex));
 8002b46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 ff39 	bl	80079c2 <osMutexCreate>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <MX_FREERTOS_Init+0xc8>)
 8002b54:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PC_To_MotorQueue */
  osMessageQDef(PC_To_MotorQueue, 5, P2M);
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <MX_FREERTOS_Init+0xcc>)
 8002b58:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PC_To_MotorQueueHandle = osMessageCreate(osMessageQ(PC_To_MotorQueue), NULL);
 8002b62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 ff42 	bl	80079f2 <osMessageCreate>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <MX_FREERTOS_Init+0xd0>)
 8002b72:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motor_To_PC_Queue */
  osMessageQDef(Motor_To_PC_Queue, 5, M2P);
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <MX_FREERTOS_Init+0xcc>)
 8002b76:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Motor_To_PC_QueueHandle = osMessageCreate(osMessageQ(Motor_To_PC_Queue), NULL);
 8002b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 ff33 	bl	80079f2 <osMessageCreate>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <MX_FREERTOS_Init+0xd4>)
 8002b90:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CommucationTask */
  osThreadDef(CommucationTask, Task_Commucation, osPriorityNormal, 0, 400);
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <MX_FREERTOS_Init+0xd8>)
 8002b94:	f107 041c 	add.w	r4, r7, #28
 8002b98:	461d      	mov	r5, r3
 8002b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommucationTaskHandle = osThreadCreate(osThread(CommucationTask), NULL);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 fea8 	bl	8007902 <osThreadCreate>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <MX_FREERTOS_Init+0xdc>)
 8002bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorCtrlTask */
  osThreadDef(MotorCtrlTask, Task_MotorCtrl, osPriorityNormal, 0, 400);
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_FREERTOS_Init+0xe0>)
 8002bba:	463c      	mov	r4, r7
 8002bbc:	461d      	mov	r5, r3
 8002bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorCtrlTaskHandle = osThreadCreate(osThread(MotorCtrlTask), NULL);
 8002bca:	463b      	mov	r3, r7
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fe97 	bl	8007902 <osThreadCreate>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <MX_FREERTOS_Init+0xe4>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002bda:	bf00      	nop
 8002bdc:	3768      	adds	r7, #104	; 0x68
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdb0      	pop	{r4, r5, r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000041c 	.word	0x2000041c
 8002be8:	20000420 	.word	0x20000420
 8002bec:	0800e650 	.word	0x0800e650
 8002bf0:	20000414 	.word	0x20000414
 8002bf4:	20000418 	.word	0x20000418
 8002bf8:	0800e660 	.word	0x0800e660
 8002bfc:	2000040c 	.word	0x2000040c
 8002c00:	0800e67c 	.word	0x0800e67c
 8002c04:	20000410 	.word	0x20000410

08002c08 <Task_Commucation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Commucation */
void Task_Commucation(void const * argument)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
//	if(xStatus_Receive==pdPASS){
//		if(m2p_pc.head==0xFC&&m2p_pc.end==0xFF){
//			PC_PackMessage();
//		}else{m2p_pc_wrong+=1;}//end m2p_pc.id
//	}else{}//end xStatus_Receive
	if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <Task_Commucation+0x58>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 fa4c 	bl	80080b4 <xQueueSemaphoreTake>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d108      	bne.n	8002c34 <Task_Commucation+0x2c>
		PC_UnpackMessage();
 8002c22:	f7ff fd91 	bl	8002748 <PC_UnpackMessage>
		xSemaphoreGive(p2mMutexHandle);
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <Task_Commucation+0x58>)
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f005 f942 	bl	8007eb8 <xQueueGenericSend>
	}
	if(xSemaphoreTake(m2pMutexHandle, 0)==pdTRUE){
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <Task_Commucation+0x5c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f005 fa3a 	bl	80080b4 <xQueueSemaphoreTake>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <Task_Commucation+0x50>
		PC_PackMessage();
 8002c46:	f7ff fe13 	bl	8002870 <PC_PackMessage>
		xSemaphoreGive(m2pMutexHandle);
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <Task_Commucation+0x5c>)
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	f005 f930 	bl	8007eb8 <xQueueGenericSend>
	}

//	debugPrintMultiThread("Hello:Communication Task \r\n");
    osDelay(10);
 8002c58:	200a      	movs	r0, #10
 8002c5a:	f004 fe9e 	bl	800799a <osDelay>
	if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002c5e:	e7d7      	b.n	8002c10 <Task_Commucation+0x8>
 8002c60:	2000041c 	.word	0x2000041c
 8002c64:	20000420 	.word	0x20000420

08002c68 <Task_MotorCtrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_MotorCtrl */
void Task_MotorCtrl(void const * argument)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
//	if(m2p_motor.head==0xFC&&m2p_motor.end==0xFF){
//		xStatus_Send = xQueueSend(Motor_To_PC_QueueHandle,&m2p_motor,0);
//		if(xStatus_Send==pdPASS){
//		}else{}
//	}
	  if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <Task_MotorCtrl+0x58>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 fa1c 	bl	80080b4 <xQueueSemaphoreTake>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d108      	bne.n	8002c94 <Task_MotorCtrl+0x2c>
//		  Motor_Debug_CMDUnpack();
		  Motor_CMDUnpack();
 8002c82:	f7ff f85f 	bl	8001d44 <Motor_CMDUnpack>
		  xSemaphoreGive(p2mMutexHandle);
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <Task_MotorCtrl+0x58>)
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f005 f912 	bl	8007eb8 <xQueueGenericSend>
	  }
	  if(xSemaphoreTake(m2pMutexHandle, 0)==pdTRUE){
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <Task_MotorCtrl+0x5c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f005 fa0a 	bl	80080b4 <xQueueSemaphoreTake>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d108      	bne.n	8002cb8 <Task_MotorCtrl+0x50>
		  Motor_UpdateMessages();
 8002ca6:	f7fe ff1b 	bl	8001ae0 <Motor_UpdateMessages>
		  xSemaphoreGive(m2pMutexHandle);
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <Task_MotorCtrl+0x5c>)
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f005 f900 	bl	8007eb8 <xQueueGenericSend>
	  }
//	  debugPrintMultiThread("Hello: Task Motor\r\n");
	  osDelay(2);
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f004 fe6e 	bl	800799a <osDelay>
	  if(xSemaphoreTake(p2mMutexHandle, 0)==pdTRUE){
 8002cbe:	e7d7      	b.n	8002c70 <Task_MotorCtrl+0x8>
 8002cc0:	2000041c 	.word	0x2000041c
 8002cc4:	20000420 	.word	0x20000420

08002cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cce:	f107 031c 	add.w	r3, r7, #28
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a50      	ldr	r2, [pc, #320]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002ce8:	f043 0310 	orr.w	r3, r3, #16
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a49      	ldr	r2, [pc, #292]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a42      	ldr	r2, [pc, #264]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <MX_GPIO_Init+0x160>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
 8002da2:	2201      	movs	r2, #1
 8002da4:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002da8:	4820      	ldr	r0, [pc, #128]	; (8002e2c <MX_GPIO_Init+0x164>)
 8002daa:	f002 fb33 	bl	8005414 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002db4:	481e      	ldr	r0, [pc, #120]	; (8002e30 <MX_GPIO_Init+0x168>)
 8002db6:	f002 fb2d 	bl	8005414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dc0:	481c      	ldr	r0, [pc, #112]	; (8002e34 <MX_GPIO_Init+0x16c>)
 8002dc2:	f002 fb27 	bl	8005414 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG8 PG7 PG6 PG5
                           PG4 PG3 PG2 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
 8002dc6:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002dca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dd8:	f107 031c 	add.w	r3, r7, #28
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4813      	ldr	r0, [pc, #76]	; (8002e2c <MX_GPIO_Init+0x164>)
 8002de0:	f002 f96c 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002de4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df6:	f107 031c 	add.w	r3, r7, #28
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <MX_GPIO_Init+0x168>)
 8002dfe:	f002 f95d 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4806      	ldr	r0, [pc, #24]	; (8002e34 <MX_GPIO_Init+0x16c>)
 8002e1c:	f002 f94e 	bl	80050bc <HAL_GPIO_Init>

}
 8002e20:	bf00      	nop
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40021800 	.word	0x40021800
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40021400 	.word	0x40021400

08002e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e3c:	f000 fd5c 	bl	80038f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e40:	f000 f81a 	bl	8002e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e44:	f7ff ff40 	bl	8002cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e48:	f7ff fe02 	bl	8002a50 <MX_DMA_Init>
  MX_CAN1_Init();
 8002e4c:	f7ff fd7a 	bl	8002944 <MX_CAN1_Init>
  MX_UART7_Init();
 8002e50:	f000 fa84 	bl	800335c <MX_UART7_Init>
  MX_UART8_Init();
 8002e54:	f000 faac 	bl	80033b0 <MX_UART8_Init>
  MX_USART6_UART_Init();
 8002e58:	f000 fafe 	bl	8003458 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8002e5c:	f000 fad2 	bl	8003404 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterConfig();
 8002e60:	f7fe f902 	bl	8001068 <CAN_FilterConfig>
  motor_init();
 8002e64:	f7fe f986 	bl	8001174 <motor_init>
  Start_PCReceiveIT();
 8002e68:	f7ff fbda 	bl	8002620 <Start_PCReceiveIT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002e6c:	f7ff fe58 	bl	8002b20 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002e70:	f004 fd40 	bl	80078f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <main+0x3c>
	...

08002e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b094      	sub	sp, #80	; 0x50
 8002e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7e:	f107 0320 	add.w	r3, r7, #32
 8002e82:	2230      	movs	r2, #48	; 0x30
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f006 ff38 	bl	8009cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <SystemClock_Config+0xcc>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <SystemClock_Config+0xcc>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <SystemClock_Config+0xcc>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <SystemClock_Config+0xd0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <SystemClock_Config+0xd0>)
 8002ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <SystemClock_Config+0xd0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ee2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002ee8:	2306      	movs	r3, #6
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002eec:	23a8      	movs	r3, #168	; 0xa8
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef8:	f107 0320 	add.w	r3, r7, #32
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 faa3 	bl	8005448 <HAL_RCC_OscConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f08:	f000 f832 	bl	8002f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f10:	2302      	movs	r3, #2
 8002f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	2105      	movs	r1, #5
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fd04 	bl	8005938 <HAL_RCC_ClockConfig>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f36:	f000 f81b 	bl	8002f70 <Error_Handler>
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3750      	adds	r7, #80	; 0x50
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000

08002f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f5e:	f000 fced 	bl	800393c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40000800 	.word	0x40000800

08002f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f74:	b672      	cpsid	i
}
 8002f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <Error_Handler+0x8>
	...

08002f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_MspInit+0x54>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HAL_MspInit+0x54>)
 8002f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_MspInit+0x54>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_MspInit+0x54>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_MspInit+0x54>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_MspInit+0x54>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	210f      	movs	r1, #15
 8002fbe:	f06f 0001 	mvn.w	r0, #1
 8002fc2:	f001 fc4f 	bl	8004864 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08e      	sub	sp, #56	; 0x38
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_InitTick+0xe4>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <HAL_InitTick+0xe4>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_InitTick+0xe4>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003000:	f107 0210 	add.w	r2, r7, #16
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f002 fe74 	bl	8005cf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800301a:	f002 fe45 	bl	8005ca8 <HAL_RCC_GetPCLK1Freq>
 800301e:	6378      	str	r0, [r7, #52]	; 0x34
 8003020:	e004      	b.n	800302c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003022:	f002 fe41 	bl	8005ca8 <HAL_RCC_GetPCLK1Freq>
 8003026:	4603      	mov	r3, r0
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_InitTick+0xe8>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	0c9b      	lsrs	r3, r3, #18
 8003036:	3b01      	subs	r3, #1
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_InitTick+0xec>)
 800303c:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <HAL_InitTick+0xf0>)
 800303e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_InitTick+0xec>)
 8003042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003046:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <HAL_InitTick+0xec>)
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_InitTick+0xec>)
 8003050:	2200      	movs	r2, #0
 8003052:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_InitTick+0xec>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_InitTick+0xec>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003060:	4817      	ldr	r0, [pc, #92]	; (80030c0 <HAL_InitTick+0xec>)
 8003062:	f002 fe7b 	bl	8005d5c <HAL_TIM_Base_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800306c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11b      	bne.n	80030ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003074:	4812      	ldr	r0, [pc, #72]	; (80030c0 <HAL_InitTick+0xec>)
 8003076:	f002 fecb 	bl	8005e10 <HAL_TIM_Base_Start_IT>
 800307a:	4603      	mov	r3, r0
 800307c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003080:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003084:	2b00      	cmp	r3, #0
 8003086:	d111      	bne.n	80030ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003088:	201e      	movs	r0, #30
 800308a:	f001 fc07 	bl	800489c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d808      	bhi.n	80030a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003094:	2200      	movs	r2, #0
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	201e      	movs	r0, #30
 800309a:	f001 fbe3 	bl	8004864 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_InitTick+0xf4>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e002      	b.n	80030ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80030ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3738      	adds	r7, #56	; 0x38
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	431bde83 	.word	0x431bde83
 80030c0:	20000678 	.word	0x20000678
 80030c4:	40000800 	.word	0x40000800
 80030c8:	200000ac 	.word	0x200000ac

080030cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <NMI_Handler+0x4>

080030d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <HardFault_Handler+0x4>

080030d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <MemManage_Handler+0x4>

080030de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <BusFault_Handler+0x4>

080030e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <UsageFault_Handler+0x4>

080030ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <DMA1_Stream1_IRQHandler+0x10>)
 80030fe:	f001 fd73 	bl	8004be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000834 	.word	0x20000834

0800310c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <DMA1_Stream3_IRQHandler+0x10>)
 8003112:	f001 fd69 	bl	8004be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200007d4 	.word	0x200007d4

08003120 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003124:	4802      	ldr	r0, [pc, #8]	; (8003130 <DMA1_Stream4_IRQHandler+0x10>)
 8003126:	f001 fd5f 	bl	8004be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000894 	.word	0x20000894

08003134 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <CAN1_RX0_IRQHandler+0x10>)
 800313a:	f001 f8ab 	bl	8004294 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200003e4 	.word	0x200003e4

08003148 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <TIM4_IRQHandler+0x10>)
 800314e:	f002 fecf 	bl	8005ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000678 	.word	0x20000678

0800315c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <DMA2_Stream1_IRQHandler+0x10>)
 8003162:	f001 fd41 	bl	8004be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200008f4 	.word	0x200008f4

08003170 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <DMA2_Stream6_IRQHandler+0x10>)
 8003176:	f001 fd37 	bl	8004be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000954 	.word	0x20000954

08003184 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <USART6_IRQHandler+0x10>)
 800318a:	f003 fa59 	bl	8006640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000790 	.word	0x20000790

08003198 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <UART7_IRQHandler+0x10>)
 800319e:	f003 fa4f 	bl	8006640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200006c4 	.word	0x200006c4

080031ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return 1;
 80031b0:	2301      	movs	r3, #1
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <_kill>:

int _kill(int pid, int sig)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031c6:	f006 fd61 	bl	8009c8c <__errno>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2216      	movs	r2, #22
 80031ce:	601a      	str	r2, [r3, #0]
  return -1;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <_exit>:

void _exit (int status)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ffe7 	bl	80031bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80031ee:	e7fe      	b.n	80031ee <_exit+0x12>

080031f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e00a      	b.n	8003218 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003202:	f3af 8000 	nop.w
 8003206:	4601      	mov	r1, r0
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	60ba      	str	r2, [r7, #8]
 800320e:	b2ca      	uxtb	r2, r1
 8003210:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3301      	adds	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	dbf0      	blt.n	8003202 <_read+0x12>
  }

  return len;
 8003220:	687b      	ldr	r3, [r7, #4]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e009      	b.n	8003250 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	60ba      	str	r2, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	dbf1      	blt.n	800323c <_write+0x12>
  }
  return len;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_close>:

int _close(int file)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800328a:	605a      	str	r2, [r3, #4]
  return 0;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <_isatty>:

int _isatty(int file)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <_sbrk+0x5c>)
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <_sbrk+0x60>)
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e0:	4b13      	ldr	r3, [pc, #76]	; (8003330 <_sbrk+0x64>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <_sbrk+0x64>)
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <_sbrk+0x68>)
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <_sbrk+0x64>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d207      	bcs.n	800330c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032fc:	f006 fcc6 	bl	8009c8c <__errno>
 8003300:	4603      	mov	r3, r0
 8003302:	220c      	movs	r2, #12
 8003304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800330a:	e009      	b.n	8003320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <_sbrk+0x64>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <_sbrk+0x64>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	4a05      	ldr	r2, [pc, #20]	; (8003330 <_sbrk+0x64>)
 800331c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20030000 	.word	0x20030000
 800332c:	00000400 	.word	0x00000400
 8003330:	200006c0 	.word	0x200006c0
 8003334:	20004720 	.word	0x20004720

08003338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <SystemInit+0x20>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	4a05      	ldr	r2, [pc, #20]	; (8003358 <SystemInit+0x20>)
 8003344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <MX_UART7_Init+0x4c>)
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <MX_UART7_Init+0x50>)
 8003364:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <MX_UART7_Init+0x4c>)
 8003368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800336c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <MX_UART7_Init+0x4c>)
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <MX_UART7_Init+0x4c>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <MX_UART7_Init+0x4c>)
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <MX_UART7_Init+0x4c>)
 8003382:	220c      	movs	r2, #12
 8003384:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <MX_UART7_Init+0x4c>)
 8003388:	2200      	movs	r2, #0
 800338a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <MX_UART7_Init+0x4c>)
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003392:	4805      	ldr	r0, [pc, #20]	; (80033a8 <MX_UART7_Init+0x4c>)
 8003394:	f002 ff90 	bl	80062b8 <HAL_UART_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800339e:	f7ff fde7 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200006c4 	.word	0x200006c4
 80033ac:	40007800 	.word	0x40007800

080033b0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_UART8_Init+0x4c>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <MX_UART8_Init+0x50>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <MX_UART8_Init+0x4c>)
 80033bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033c0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_UART8_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <MX_UART8_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <MX_UART8_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_UART8_Init+0x4c>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_UART8_Init+0x4c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_UART8_Init+0x4c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_UART8_Init+0x4c>)
 80033e8:	f002 ff66 	bl	80062b8 <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80033f2:	f7ff fdbd 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000708 	.word	0x20000708
 8003400:	40007c00 	.word	0x40007c00

08003404 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <MX_USART3_UART_Init+0x50>)
 800340c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800342a:	220c      	movs	r2, #12
 800342c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800343a:	4805      	ldr	r0, [pc, #20]	; (8003450 <MX_USART3_UART_Init+0x4c>)
 800343c:	f002 ff3c 	bl	80062b8 <HAL_UART_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003446:	f7ff fd93 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	2000074c 	.word	0x2000074c
 8003454:	40004800 	.word	0x40004800

08003458 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_USART6_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003468:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_USART6_UART_Init+0x4c>)
 8003490:	f002 ff12 	bl	80062b8 <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800349a:	f7ff fd69 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000790 	.word	0x20000790
 80034a8:	40011400 	.word	0x40011400

080034ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b090      	sub	sp, #64	; 0x40
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a94      	ldr	r2, [pc, #592]	; (800371c <HAL_UART_MspInit+0x270>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d164      	bne.n	8003598 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d2:	4b93      	ldr	r3, [pc, #588]	; (8003720 <HAL_UART_MspInit+0x274>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a92      	ldr	r2, [pc, #584]	; (8003720 <HAL_UART_MspInit+0x274>)
 80034d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b90      	ldr	r3, [pc, #576]	; (8003720 <HAL_UART_MspInit+0x274>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_UART_MspInit+0x274>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a8b      	ldr	r2, [pc, #556]	; (8003720 <HAL_UART_MspInit+0x274>)
 80034f4:	f043 0310 	orr.w	r3, r3, #16
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_UART_MspInit+0x274>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8003506:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003518:	2308      	movs	r3, #8
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800351c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003520:	4619      	mov	r1, r3
 8003522:	4880      	ldr	r0, [pc, #512]	; (8003724 <HAL_UART_MspInit+0x278>)
 8003524:	f001 fdca 	bl	80050bc <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8003528:	4b7f      	ldr	r3, [pc, #508]	; (8003728 <HAL_UART_MspInit+0x27c>)
 800352a:	4a80      	ldr	r2, [pc, #512]	; (800372c <HAL_UART_MspInit+0x280>)
 800352c:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800352e:	4b7e      	ldr	r3, [pc, #504]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003530:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003534:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003536:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800353c:	4b7a      	ldr	r3, [pc, #488]	; (8003728 <HAL_UART_MspInit+0x27c>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003542:	4b79      	ldr	r3, [pc, #484]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003548:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800354a:	4b77      	ldr	r3, [pc, #476]	; (8003728 <HAL_UART_MspInit+0x27c>)
 800354c:	2200      	movs	r2, #0
 800354e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003550:	4b75      	ldr	r3, [pc, #468]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003552:	2200      	movs	r2, #0
 8003554:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8003556:	4b74      	ldr	r3, [pc, #464]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800355c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800355e:	4b72      	ldr	r3, [pc, #456]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003560:	2200      	movs	r2, #0
 8003562:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003564:	4b70      	ldr	r3, [pc, #448]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003566:	2200      	movs	r2, #0
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800356a:	486f      	ldr	r0, [pc, #444]	; (8003728 <HAL_UART_MspInit+0x27c>)
 800356c:	f001 f9a4 	bl	80048b8 <HAL_DMA_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003576:	f7ff fcfb 	bl	8002f70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a6a      	ldr	r2, [pc, #424]	; (8003728 <HAL_UART_MspInit+0x27c>)
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
 8003580:	4a69      	ldr	r2, [pc, #420]	; (8003728 <HAL_UART_MspInit+0x27c>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 7, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2107      	movs	r1, #7
 800358a:	2052      	movs	r0, #82	; 0x52
 800358c:	f001 f96a 	bl	8004864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003590:	2052      	movs	r0, #82	; 0x52
 8003592:	f001 f983 	bl	800489c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003596:	e173      	b.n	8003880 <HAL_UART_MspInit+0x3d4>
  else if(uartHandle->Instance==UART8)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a64      	ldr	r2, [pc, #400]	; (8003730 <HAL_UART_MspInit+0x284>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d12c      	bne.n	80035fc <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART8_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <HAL_UART_MspInit+0x274>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <HAL_UART_MspInit+0x274>)
 80035ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_UART_MspInit+0x274>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	4b57      	ldr	r3, [pc, #348]	; (8003720 <HAL_UART_MspInit+0x274>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a56      	ldr	r2, [pc, #344]	; (8003720 <HAL_UART_MspInit+0x274>)
 80035c8:	f043 0310 	orr.w	r3, r3, #16
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b54      	ldr	r3, [pc, #336]	; (8003720 <HAL_UART_MspInit+0x274>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80035da:	2303      	movs	r3, #3
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2302      	movs	r3, #2
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e6:	2303      	movs	r3, #3
 80035e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80035ea:	2308      	movs	r3, #8
 80035ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f2:	4619      	mov	r1, r3
 80035f4:	484b      	ldr	r0, [pc, #300]	; (8003724 <HAL_UART_MspInit+0x278>)
 80035f6:	f001 fd61 	bl	80050bc <HAL_GPIO_Init>
}
 80035fa:	e141      	b.n	8003880 <HAL_UART_MspInit+0x3d4>
  else if(uartHandle->Instance==USART3)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a4c      	ldr	r2, [pc, #304]	; (8003734 <HAL_UART_MspInit+0x288>)
 8003602:	4293      	cmp	r3, r2
 8003604:	f040 80a2 	bne.w	800374c <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_UART_MspInit+0x274>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	4a43      	ldr	r2, [pc, #268]	; (8003720 <HAL_UART_MspInit+0x274>)
 8003612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003616:	6413      	str	r3, [r2, #64]	; 0x40
 8003618:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_UART_MspInit+0x274>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_UART_MspInit+0x274>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4a3c      	ldr	r2, [pc, #240]	; (8003720 <HAL_UART_MspInit+0x274>)
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	6313      	str	r3, [r2, #48]	; 0x30
 8003634:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <HAL_UART_MspInit+0x274>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8003640:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003646:	2302      	movs	r3, #2
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364e:	2303      	movs	r3, #3
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003652:	2307      	movs	r3, #7
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800365a:	4619      	mov	r1, r3
 800365c:	4836      	ldr	r0, [pc, #216]	; (8003738 <HAL_UART_MspInit+0x28c>)
 800365e:	f001 fd2d 	bl	80050bc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <HAL_UART_MspInit+0x290>)
 8003664:	4a36      	ldr	r2, [pc, #216]	; (8003740 <HAL_UART_MspInit+0x294>)
 8003666:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003668:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_UART_MspInit+0x290>)
 800366a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800366e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_UART_MspInit+0x290>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <HAL_UART_MspInit+0x290>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800367c:	4b2f      	ldr	r3, [pc, #188]	; (800373c <HAL_UART_MspInit+0x290>)
 800367e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003682:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_UART_MspInit+0x290>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800368a:	4b2c      	ldr	r3, [pc, #176]	; (800373c <HAL_UART_MspInit+0x290>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_UART_MspInit+0x290>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_UART_MspInit+0x290>)
 8003698:	2200      	movs	r2, #0
 800369a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_UART_MspInit+0x290>)
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80036a2:	4826      	ldr	r0, [pc, #152]	; (800373c <HAL_UART_MspInit+0x290>)
 80036a4:	f001 f908 	bl	80048b8 <HAL_DMA_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_UART_MspInit+0x206>
      Error_Handler();
 80036ae:	f7ff fc5f 	bl	8002f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_UART_MspInit+0x290>)
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <HAL_UART_MspInit+0x290>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036c0:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_UART_MspInit+0x29c>)
 80036c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 80036c4:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036c6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80036ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80036ec:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_UART_MspInit+0x298>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80036fe:	4811      	ldr	r0, [pc, #68]	; (8003744 <HAL_UART_MspInit+0x298>)
 8003700:	f001 f8da 	bl	80048b8 <HAL_DMA_Init>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_UART_MspInit+0x262>
      Error_Handler();
 800370a:	f7ff fc31 	bl	8002f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_UART_MspInit+0x298>)
 8003712:	635a      	str	r2, [r3, #52]	; 0x34
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <HAL_UART_MspInit+0x298>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6393      	str	r3, [r2, #56]	; 0x38
}
 800371a:	e0b1      	b.n	8003880 <HAL_UART_MspInit+0x3d4>
 800371c:	40007800 	.word	0x40007800
 8003720:	40023800 	.word	0x40023800
 8003724:	40021000 	.word	0x40021000
 8003728:	200007d4 	.word	0x200007d4
 800372c:	40026058 	.word	0x40026058
 8003730:	40007c00 	.word	0x40007c00
 8003734:	40004800 	.word	0x40004800
 8003738:	40020800 	.word	0x40020800
 800373c:	20000834 	.word	0x20000834
 8003740:	40026028 	.word	0x40026028
 8003744:	20000894 	.word	0x20000894
 8003748:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==USART6)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4d      	ldr	r2, [pc, #308]	; (8003888 <HAL_UART_MspInit+0x3dc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f040 8094 	bne.w	8003880 <HAL_UART_MspInit+0x3d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	4b4b      	ldr	r3, [pc, #300]	; (800388c <HAL_UART_MspInit+0x3e0>)
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	4a4a      	ldr	r2, [pc, #296]	; (800388c <HAL_UART_MspInit+0x3e0>)
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	6453      	str	r3, [r2, #68]	; 0x44
 8003768:	4b48      	ldr	r3, [pc, #288]	; (800388c <HAL_UART_MspInit+0x3e0>)
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_UART_MspInit+0x3e0>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	4a43      	ldr	r2, [pc, #268]	; (800388c <HAL_UART_MspInit+0x3e0>)
 800377e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003782:	6313      	str	r3, [r2, #48]	; 0x30
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_UART_MspInit+0x3e0>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8003790:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379e:	2303      	movs	r3, #3
 80037a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037a2:	2308      	movs	r3, #8
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037aa:	4619      	mov	r1, r3
 80037ac:	4838      	ldr	r0, [pc, #224]	; (8003890 <HAL_UART_MspInit+0x3e4>)
 80037ae:	f001 fc85 	bl	80050bc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037b4:	4a38      	ldr	r2, [pc, #224]	; (8003898 <HAL_UART_MspInit+0x3ec>)
 80037b6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037ba:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80037be:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037c0:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037d4:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80037e0:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ee:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80037f6:	4827      	ldr	r0, [pc, #156]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 80037f8:	f001 f85e 	bl	80048b8 <HAL_DMA_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_UART_MspInit+0x35a>
      Error_Handler();
 8003802:	f7ff fbb5 	bl	8002f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a22      	ldr	r2, [pc, #136]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
 800380c:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_UART_MspInit+0x3e8>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003814:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_UART_MspInit+0x3f4>)
 8003816:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_UART_MspInit+0x3f0>)
 800381a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800381e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_UART_MspInit+0x3f0>)
 800382e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003832:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003836:	2200      	movs	r2, #0
 8003838:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <HAL_UART_MspInit+0x3f0>)
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003840:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003842:	2200      	movs	r2, #0
 8003844:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003848:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800384c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003850:	2200      	movs	r2, #0
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003854:	4811      	ldr	r0, [pc, #68]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003856:	f001 f82f 	bl	80048b8 <HAL_DMA_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_UART_MspInit+0x3b8>
      Error_Handler();
 8003860:	f7ff fb86 	bl	8002f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a0d      	ldr	r2, [pc, #52]	; (800389c <HAL_UART_MspInit+0x3f0>)
 8003868:	635a      	str	r2, [r3, #52]	; 0x34
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <HAL_UART_MspInit+0x3f0>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003870:	2200      	movs	r2, #0
 8003872:	2105      	movs	r1, #5
 8003874:	2047      	movs	r0, #71	; 0x47
 8003876:	f000 fff5 	bl	8004864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800387a:	2047      	movs	r0, #71	; 0x47
 800387c:	f001 f80e 	bl	800489c <HAL_NVIC_EnableIRQ>
}
 8003880:	bf00      	nop
 8003882:	3740      	adds	r7, #64	; 0x40
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40011400 	.word	0x40011400
 800388c:	40023800 	.word	0x40023800
 8003890:	40021800 	.word	0x40021800
 8003894:	200008f4 	.word	0x200008f4
 8003898:	40026428 	.word	0x40026428
 800389c:	20000954 	.word	0x20000954
 80038a0:	400264a0 	.word	0x400264a0

080038a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038a8:	480d      	ldr	r0, [pc, #52]	; (80038e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038aa:	490e      	ldr	r1, [pc, #56]	; (80038e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038ac:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b0:	e002      	b.n	80038b8 <LoopCopyDataInit>

080038b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038b6:	3304      	adds	r3, #4

080038b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038bc:	d3f9      	bcc.n	80038b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038be:	4a0b      	ldr	r2, [pc, #44]	; (80038ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038c0:	4c0b      	ldr	r4, [pc, #44]	; (80038f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c4:	e001      	b.n	80038ca <LoopFillZerobss>

080038c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c8:	3204      	adds	r2, #4

080038ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038cc:	d3fb      	bcc.n	80038c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038ce:	f7ff fd33 	bl	8003338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038d2:	f006 f9e1 	bl	8009c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038d6:	f7ff faaf 	bl	8002e38 <main>
  bx  lr    
 80038da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80038e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e4:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80038e8:	0800eb74 	.word	0x0800eb74
  ldr r2, =_sbss
 80038ec:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 80038f0:	2000471c 	.word	0x2000471c

080038f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f4:	e7fe      	b.n	80038f4 <ADC_IRQHandler>
	...

080038f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <HAL_Init+0x40>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <HAL_Init+0x40>)
 8003902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_Init+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <HAL_Init+0x40>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a07      	ldr	r2, [pc, #28]	; (8003938 <HAL_Init+0x40>)
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003920:	2003      	movs	r0, #3
 8003922:	f000 ff94 	bl	800484e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003926:	200f      	movs	r0, #15
 8003928:	f7ff fb54 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800392c:	f7ff fb26 	bl	8002f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00

0800393c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_IncTick+0x20>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_IncTick+0x24>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4413      	add	r3, r2
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_IncTick+0x24>)
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	200000b0 	.word	0x200000b0
 8003960:	200009b4 	.word	0x200009b4

08003964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return uwTick;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_GetTick+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	200009b4 	.word	0x200009b4

0800397c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7ff ffee 	bl	8003964 <HAL_GetTick>
 8003988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003994:	d005      	beq.n	80039a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_Delay+0x44>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039a2:	bf00      	nop
 80039a4:	f7ff ffde 	bl	8003964 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d8f7      	bhi.n	80039a4 <HAL_Delay+0x28>
  {
  }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200000b0 	.word	0x200000b0

080039c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0ed      	b.n	8003bb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe ffe4 	bl	80029b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039f8:	f7ff ffb4 	bl	8003964 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039fe:	e012      	b.n	8003a26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a00:	f7ff ffb0 	bl	8003964 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b0a      	cmp	r3, #10
 8003a0c:	d90b      	bls.n	8003a26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0c5      	b.n	8003bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0e5      	beq.n	8003a00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0202 	bic.w	r2, r2, #2
 8003a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a44:	f7ff ff8e 	bl	8003964 <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a4a:	e012      	b.n	8003a72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a4c:	f7ff ff8a 	bl	8003964 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b0a      	cmp	r3, #10
 8003a58:	d90b      	bls.n	8003a72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2205      	movs	r2, #5
 8003a6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e09f      	b.n	8003bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e5      	bne.n	8003a4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	7e1b      	ldrb	r3, [r3, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d108      	bne.n	8003a9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e007      	b.n	8003aaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	7e5b      	ldrb	r3, [r3, #25]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d108      	bne.n	8003ac4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e007      	b.n	8003ad4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7e9b      	ldrb	r3, [r3, #26]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d108      	bne.n	8003aee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0220 	orr.w	r2, r2, #32
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e007      	b.n	8003afe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0220 	bic.w	r2, r2, #32
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7edb      	ldrb	r3, [r3, #27]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d108      	bne.n	8003b18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0210 	bic.w	r2, r2, #16
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e007      	b.n	8003b28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0210 	orr.w	r2, r2, #16
 8003b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7f1b      	ldrb	r3, [r3, #28]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d108      	bne.n	8003b42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0208 	orr.w	r2, r2, #8
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e007      	b.n	8003b52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0208 	bic.w	r2, r2, #8
 8003b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7f5b      	ldrb	r3, [r3, #29]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d108      	bne.n	8003b6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0204 	orr.w	r2, r2, #4
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e007      	b.n	8003b7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0204 	bic.w	r2, r2, #4
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d003      	beq.n	8003be2 <HAL_CAN_ConfigFilter+0x26>
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	f040 80be 	bne.w	8003d5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_CAN_ConfigFilter+0x1bc>)
 8003be4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bec:	f043 0201 	orr.w	r2, r3, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	431a      	orrs	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2201      	movs	r2, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	401a      	ands	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d123      	bne.n	8003c8c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3248      	adds	r2, #72	; 0x48
 8003c6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c82:	6979      	ldr	r1, [r7, #20]
 8003c84:	3348      	adds	r3, #72	; 0x48
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d122      	bne.n	8003cda <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003cb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3248      	adds	r2, #72	; 0x48
 8003cba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cd0:	6979      	ldr	r1, [r7, #20]
 8003cd2:	3348      	adds	r3, #72	; 0x48
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	401a      	ands	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003cf4:	e007      	b.n	8003d06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	401a      	ands	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003d20:	e007      	b.n	8003d32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d50:	f023 0201 	bic.w	r2, r3, #1
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e006      	b.n	8003d6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	40006400 	.word	0x40006400

08003d7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d12e      	bne.n	8003dee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003da8:	f7ff fddc 	bl	8003964 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003dae:	e012      	b.n	8003dd6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003db0:	f7ff fdd8 	bl	8003964 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b0a      	cmp	r3, #10
 8003dbc:	d90b      	bls.n	8003dd6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2205      	movs	r2, #5
 8003dce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e012      	b.n	8003dfc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e006      	b.n	8003dfc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	; 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d003      	beq.n	8003e30 <HAL_CAN_AddTxMessage+0x2c>
 8003e28:	7ffb      	ldrb	r3, [r7, #31]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	f040 80b8 	bne.w	8003fa0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80a0 	beq.w	8003f90 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	0e1b      	lsrs	r3, r3, #24
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d907      	bls.n	8003e70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e09e      	b.n	8003fae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e70:	2201      	movs	r2, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	409a      	lsls	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e8c:	68f9      	ldr	r1, [r7, #12]
 8003e8e:	6809      	ldr	r1, [r1, #0]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3318      	adds	r3, #24
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	440b      	add	r3, r1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e00f      	b.n	8003ebe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ea8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003eb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3318      	adds	r3, #24
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	440b      	add	r3, r1
 8003ebc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	3318      	adds	r3, #24
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	440b      	add	r3, r1
 8003ece:	3304      	adds	r3, #4
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	7d1b      	ldrb	r3, [r3, #20]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d111      	bne.n	8003efe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6811      	ldr	r1, [r2, #0]
 8003eee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	440b      	add	r3, r1
 8003efa:	3304      	adds	r3, #4
 8003efc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3307      	adds	r3, #7
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	061a      	lsls	r2, r3, #24
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3306      	adds	r3, #6
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	041b      	lsls	r3, r3, #16
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3305      	adds	r3, #5
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	3204      	adds	r2, #4
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	4610      	mov	r0, r2
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	6811      	ldr	r1, [r2, #0]
 8003f26:	ea43 0200 	orr.w	r2, r3, r0
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	440b      	add	r3, r1
 8003f30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003f34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	061a      	lsls	r2, r3, #24
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3302      	adds	r3, #2
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	4313      	orrs	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	4610      	mov	r0, r2
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	6811      	ldr	r1, [r2, #0]
 8003f5c:	ea43 0200 	orr.w	r2, r3, r0
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	440b      	add	r3, r1
 8003f66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003f6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	3318      	adds	r3, #24
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	4413      	add	r3, r2
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	3318      	adds	r3, #24
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	440b      	add	r3, r1
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e00e      	b.n	8003fae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e006      	b.n	8003fae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fcc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d002      	beq.n	8003fda <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d11d      	bne.n	8004016 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004038:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d003      	beq.n	8004048 <HAL_CAN_GetRxMessage+0x24>
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	2b02      	cmp	r3, #2
 8004044:	f040 80f3 	bne.w	800422e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0e7      	b.n	800423c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0d8      	b.n	800423c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	331b      	adds	r3, #27
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	4413      	add	r3, r2
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0204 	and.w	r2, r3, #4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10c      	bne.n	80040c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	331b      	adds	r3, #27
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4413      	add	r3, r2
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0d5b      	lsrs	r3, r3, #21
 80040b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e00b      	b.n	80040da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	331b      	adds	r3, #27
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	4413      	add	r3, r2
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	331b      	adds	r3, #27
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	4413      	add	r3, r2
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0202 	and.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	331b      	adds	r3, #27
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	4413      	add	r3, r2
 80040fc:	3304      	adds	r3, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	331b      	adds	r3, #27
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	4413      	add	r3, r2
 8004114:	3304      	adds	r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	b2da      	uxtb	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	331b      	adds	r3, #27
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	4413      	add	r3, r2
 8004142:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	4413      	add	r3, r2
 8004158:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	0a1a      	lsrs	r2, r3, #8
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	4413      	add	r3, r2
 8004172:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0c1a      	lsrs	r2, r3, #16
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	3302      	adds	r3, #2
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0e1a      	lsrs	r2, r3, #24
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	3303      	adds	r3, #3
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	3304      	adds	r3, #4
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	4413      	add	r3, r2
 80041be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0a1a      	lsrs	r2, r3, #8
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	3305      	adds	r3, #5
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0c1a      	lsrs	r2, r3, #16
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	3306      	adds	r3, #6
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0e1a      	lsrs	r2, r3, #24
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3307      	adds	r3, #7
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0220 	orr.w	r2, r2, #32
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	e007      	b.n	800422a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e006      	b.n	800423c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
  }
}
 800423c:	4618      	mov	r0, r3
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004258:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d002      	beq.n	8004266 <HAL_CAN_ActivateNotification+0x1e>
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d109      	bne.n	800427a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6959      	ldr	r1, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e006      	b.n	8004288 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800429c:	2300      	movs	r3, #0
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d07c      	beq.n	80043d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d023      	beq.n	800432c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f983 	bl	8004602 <HAL_CAN_TxMailbox0CompleteCallback>
 80042fc:	e016      	b.n	800432c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
 8004310:	e00c      	b.n	800432c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	e002      	b.n	800432c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f989 	bl	800463e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d024      	beq.n	8004380 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800433e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f963 	bl	8004616 <HAL_CAN_TxMailbox1CompleteCallback>
 8004350:	e016      	b.n	8004380 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	e00c      	b.n	8004380 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	e002      	b.n	8004380 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f969 	bl	8004652 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d024      	beq.n	80043d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004392:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f943 	bl	800462a <HAL_CAN_TxMailbox2CompleteCallback>
 80043a4:	e016      	b.n	80043d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	e00c      	b.n	80043d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e002      	b.n	80043d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f949 	bl	8004666 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2210      	movs	r2, #16
 80043f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d006      	beq.n	800441a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2208      	movs	r2, #8
 8004412:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f930 	bl	800467a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fe50 	bl	80010d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004452:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2210      	movs	r2, #16
 800445a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2208      	movs	r2, #8
 8004476:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f912 	bl	80046a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8f9 	bl	800468e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2210      	movs	r2, #16
 80044b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f8fc 	bl	80046b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2208      	movs	r2, #8
 80044d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8f5 	bl	80046ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d07b      	beq.n	80045e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d072      	beq.n	80045da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f043 0304 	orr.w	r3, r3, #4
 8004546:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454e:	2b00      	cmp	r3, #0
 8004550:	d043      	beq.n	80045da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004558:	2b00      	cmp	r3, #0
 800455a:	d03e      	beq.n	80045da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004562:	2b60      	cmp	r3, #96	; 0x60
 8004564:	d02b      	beq.n	80045be <HAL_CAN_IRQHandler+0x32a>
 8004566:	2b60      	cmp	r3, #96	; 0x60
 8004568:	d82e      	bhi.n	80045c8 <HAL_CAN_IRQHandler+0x334>
 800456a:	2b50      	cmp	r3, #80	; 0x50
 800456c:	d022      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x320>
 800456e:	2b50      	cmp	r3, #80	; 0x50
 8004570:	d82a      	bhi.n	80045c8 <HAL_CAN_IRQHandler+0x334>
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d019      	beq.n	80045aa <HAL_CAN_IRQHandler+0x316>
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d826      	bhi.n	80045c8 <HAL_CAN_IRQHandler+0x334>
 800457a:	2b30      	cmp	r3, #48	; 0x30
 800457c:	d010      	beq.n	80045a0 <HAL_CAN_IRQHandler+0x30c>
 800457e:	2b30      	cmp	r3, #48	; 0x30
 8004580:	d822      	bhi.n	80045c8 <HAL_CAN_IRQHandler+0x334>
 8004582:	2b10      	cmp	r3, #16
 8004584:	d002      	beq.n	800458c <HAL_CAN_IRQHandler+0x2f8>
 8004586:	2b20      	cmp	r3, #32
 8004588:	d005      	beq.n	8004596 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800458a:	e01d      	b.n	80045c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f043 0308 	orr.w	r3, r3, #8
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004594:	e019      	b.n	80045ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	f043 0310 	orr.w	r3, r3, #16
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800459e:	e014      	b.n	80045ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	f043 0320 	orr.w	r3, r3, #32
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045a8:	e00f      	b.n	80045ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045b2:	e00a      	b.n	80045ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045bc:	e005      	b.n	80045ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045c6:	e000      	b.n	80045ca <HAL_CAN_IRQHandler+0x336>
            break;
 80045c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2204      	movs	r2, #4
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f872 	bl	80046de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80045fa:	bf00      	nop
 80045fc:	3728      	adds	r7, #40	; 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <__NVIC_SetPriorityGrouping+0x44>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004710:	4013      	ands	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800471c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004726:	4a04      	ldr	r2, [pc, #16]	; (8004738 <__NVIC_SetPriorityGrouping+0x44>)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	60d3      	str	r3, [r2, #12]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <__NVIC_GetPriorityGrouping+0x18>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	f003 0307 	and.w	r3, r3, #7
}
 800474a:	4618      	mov	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	2b00      	cmp	r3, #0
 8004768:	db0b      	blt.n	8004782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	f003 021f 	and.w	r2, r3, #31
 8004770:	4907      	ldr	r1, [pc, #28]	; (8004790 <__NVIC_EnableIRQ+0x38>)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	2001      	movs	r0, #1
 800477a:	fa00 f202 	lsl.w	r2, r0, r2
 800477e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000e100 	.word	0xe000e100

08004794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	6039      	str	r1, [r7, #0]
 800479e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	db0a      	blt.n	80047be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	490c      	ldr	r1, [pc, #48]	; (80047e0 <__NVIC_SetPriority+0x4c>)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	0112      	lsls	r2, r2, #4
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	440b      	add	r3, r1
 80047b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047bc:	e00a      	b.n	80047d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4908      	ldr	r1, [pc, #32]	; (80047e4 <__NVIC_SetPriority+0x50>)
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	3b04      	subs	r3, #4
 80047cc:	0112      	lsls	r2, r2, #4
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	440b      	add	r3, r1
 80047d2:	761a      	strb	r2, [r3, #24]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000e100 	.word	0xe000e100
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f1c3 0307 	rsb	r3, r3, #7
 8004802:	2b04      	cmp	r3, #4
 8004804:	bf28      	it	cs
 8004806:	2304      	movcs	r3, #4
 8004808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3304      	adds	r3, #4
 800480e:	2b06      	cmp	r3, #6
 8004810:	d902      	bls.n	8004818 <NVIC_EncodePriority+0x30>
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3b03      	subs	r3, #3
 8004816:	e000      	b.n	800481a <NVIC_EncodePriority+0x32>
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800481c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43da      	mvns	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	401a      	ands	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004830:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	43d9      	mvns	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004840:	4313      	orrs	r3, r2
         );
}
 8004842:	4618      	mov	r0, r3
 8004844:	3724      	adds	r7, #36	; 0x24
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ff4c 	bl	80046f4 <__NVIC_SetPriorityGrouping>
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004876:	f7ff ff61 	bl	800473c <__NVIC_GetPriorityGrouping>
 800487a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	6978      	ldr	r0, [r7, #20]
 8004882:	f7ff ffb1 	bl	80047e8 <NVIC_EncodePriority>
 8004886:	4602      	mov	r2, r0
 8004888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ff80 	bl	8004794 <__NVIC_SetPriority>
}
 8004894:	bf00      	nop
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff54 	bl	8004758 <__NVIC_EnableIRQ>
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048c4:	f7ff f84e 	bl	8003964 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e099      	b.n	8004a08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048f4:	e00f      	b.n	8004916 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048f6:	f7ff f835 	bl	8003964 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b05      	cmp	r3, #5
 8004902:	d908      	bls.n	8004916 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2203      	movs	r2, #3
 800490e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e078      	b.n	8004a08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e8      	bne.n	80048f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4b38      	ldr	r3, [pc, #224]	; (8004a10 <HAL_DMA_Init+0x158>)
 8004930:	4013      	ands	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004942:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800494e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800495a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b04      	cmp	r3, #4
 800496e:	d107      	bne.n	8004980 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	4313      	orrs	r3, r2
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d117      	bne.n	80049da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fb01 	bl	8004fc4 <DMA_CheckFifoParam>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2240      	movs	r2, #64	; 0x40
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049d6:	2301      	movs	r3, #1
 80049d8:	e016      	b.n	8004a08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fab8 	bl	8004f58 <DMA_CalcBaseAndBitshift>
 80049e8:	4603      	mov	r3, r0
 80049ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f0:	223f      	movs	r2, #63	; 0x3f
 80049f2:	409a      	lsls	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	f010803f 	.word	0xf010803f

08004a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_Start_IT+0x26>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e040      	b.n	8004abc <HAL_DMA_Start_IT+0xa8>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d12f      	bne.n	8004aae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa4a 	bl	8004efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6c:	223f      	movs	r2, #63	; 0x3f
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0216 	orr.w	r2, r2, #22
 8004a82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0208 	orr.w	r2, r2, #8
 8004a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e005      	b.n	8004aba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ad2:	f7fe ff47 	bl	8003964 <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d008      	beq.n	8004af6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e052      	b.n	8004b9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0216 	bic.w	r2, r2, #22
 8004b04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_DMA_Abort+0x62>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0208 	bic.w	r2, r2, #8
 8004b34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b46:	e013      	b.n	8004b70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b48:	f7fe ff0c 	bl	8003964 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d90c      	bls.n	8004b70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e015      	b.n	8004b9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e4      	bne.n	8004b48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	223f      	movs	r2, #63	; 0x3f
 8004b84:	409a      	lsls	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00c      	b.n	8004bdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bf4:	4b8e      	ldr	r3, [pc, #568]	; (8004e30 <HAL_DMA_IRQHandler+0x248>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a8e      	ldr	r2, [pc, #568]	; (8004e34 <HAL_DMA_IRQHandler+0x24c>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0a9b      	lsrs	r3, r3, #10
 8004c00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	2208      	movs	r2, #8
 8004c14:	409a      	lsls	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01a      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d013      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0204 	bic.w	r2, r2, #4
 8004c3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	2208      	movs	r2, #8
 8004c42:	409a      	lsls	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	f043 0201 	orr.w	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2201      	movs	r2, #1
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	2201      	movs	r2, #1
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f043 0202 	orr.w	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	2204      	movs	r2, #4
 8004c90:	409a      	lsls	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	2204      	movs	r2, #4
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d043      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03c      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d024      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
 8004d16:	e01f      	b.n	8004d58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e016      	b.n	8004d58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0208 	bic.w	r2, r2, #8
 8004d46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 808f 	beq.w	8004e88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8087 	beq.w	8004e88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	2220      	movs	r2, #32
 8004d80:	409a      	lsls	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d136      	bne.n	8004e00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0216 	bic.w	r2, r2, #22
 8004da0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <HAL_DMA_IRQHandler+0x1da>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0208 	bic.w	r2, r2, #8
 8004dd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	223f      	movs	r2, #63	; 0x3f
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d07e      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
        }
        return;
 8004dfe:	e079      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01d      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d031      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
 8004e2c:	e02c      	b.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
 8004e2e:	bf00      	nop
 8004e30:	200000a8 	.word	0x200000a8
 8004e34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d023      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
 8004e48:	e01e      	b.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10f      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0210 	bic.w	r2, r2, #16
 8004e66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d032      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2205      	movs	r2, #5
 8004ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d307      	bcc.n	8004ed0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f2      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0x2cc>
 8004ece:	e000      	b.n	8004ed2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ed0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
 8004ef2:	e000      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ef4:	bf00      	nop
    }
  }
}
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d108      	bne.n	8004f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f3a:	e007      	b.n	8004f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	3b10      	subs	r3, #16
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <DMA_CalcBaseAndBitshift+0x64>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d909      	bls.n	8004f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	659a      	str	r2, [r3, #88]	; 0x58
 8004f98:	e007      	b.n	8004faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	aaaaaaab 	.word	0xaaaaaaab
 8004fc0:	0800e6b8 	.word	0x0800e6b8

08004fc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11f      	bne.n	800501e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d856      	bhi.n	8005092 <DMA_CheckFifoParam+0xce>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <DMA_CheckFifoParam+0x28>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08004ffd 	.word	0x08004ffd
 8004ff0:	0800500f 	.word	0x0800500f
 8004ff4:	08004ffd 	.word	0x08004ffd
 8004ff8:	08005093 	.word	0x08005093
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d046      	beq.n	8005096 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500c:	e043      	b.n	8005096 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005016:	d140      	bne.n	800509a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501c:	e03d      	b.n	800509a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005026:	d121      	bne.n	800506c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d837      	bhi.n	800509e <DMA_CheckFifoParam+0xda>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <DMA_CheckFifoParam+0x70>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005045 	.word	0x08005045
 8005038:	0800504b 	.word	0x0800504b
 800503c:	08005045 	.word	0x08005045
 8005040:	0800505d 	.word	0x0800505d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      break;
 8005048:	e030      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d025      	beq.n	80050a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800505a:	e022      	b.n	80050a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005064:	d11f      	bne.n	80050a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800506a:	e01c      	b.n	80050a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d903      	bls.n	800507a <DMA_CheckFifoParam+0xb6>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d003      	beq.n	8005080 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005078:	e018      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
      break;
 800507e:	e015      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00e      	beq.n	80050aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      break;
 8005090:	e00b      	b.n	80050aa <DMA_CheckFifoParam+0xe6>
      break;
 8005092:	bf00      	nop
 8005094:	e00a      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 8005096:	bf00      	nop
 8005098:	e008      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 800509a:	bf00      	nop
 800509c:	e006      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 800509e:	bf00      	nop
 80050a0:	e004      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 80050a2:	bf00      	nop
 80050a4:	e002      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;   
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 80050aa:	bf00      	nop
    }
  } 
  
  return status; 
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop

080050bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	; 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	e177      	b.n	80053c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050d8:	2201      	movs	r2, #1
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	f040 8166 	bne.w	80053c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d005      	beq.n	800510e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800510a:	2b02      	cmp	r3, #2
 800510c:	d130      	bne.n	8005170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	2203      	movs	r2, #3
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4013      	ands	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4313      	orrs	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005144:	2201      	movs	r2, #1
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f003 0201 	and.w	r2, r3, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	2b03      	cmp	r3, #3
 800517a:	d017      	beq.n	80051ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	2203      	movs	r2, #3
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	43db      	mvns	r3, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d123      	bne.n	8005200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	08da      	lsrs	r2, r3, #3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3208      	adds	r2, #8
 80051c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	220f      	movs	r2, #15
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	08da      	lsrs	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3208      	adds	r2, #8
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2203      	movs	r2, #3
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0203 	and.w	r2, r3, #3
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80c0 	beq.w	80053c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	4b66      	ldr	r3, [pc, #408]	; (80053e0 <HAL_GPIO_Init+0x324>)
 8005248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524a:	4a65      	ldr	r2, [pc, #404]	; (80053e0 <HAL_GPIO_Init+0x324>)
 800524c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005250:	6453      	str	r3, [r2, #68]	; 0x44
 8005252:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <HAL_GPIO_Init+0x324>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800525e:	4a61      	ldr	r2, [pc, #388]	; (80053e4 <HAL_GPIO_Init+0x328>)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	089b      	lsrs	r3, r3, #2
 8005264:	3302      	adds	r3, #2
 8005266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	220f      	movs	r2, #15
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a58      	ldr	r2, [pc, #352]	; (80053e8 <HAL_GPIO_Init+0x32c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d037      	beq.n	80052fa <HAL_GPIO_Init+0x23e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a57      	ldr	r2, [pc, #348]	; (80053ec <HAL_GPIO_Init+0x330>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d031      	beq.n	80052f6 <HAL_GPIO_Init+0x23a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a56      	ldr	r2, [pc, #344]	; (80053f0 <HAL_GPIO_Init+0x334>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02b      	beq.n	80052f2 <HAL_GPIO_Init+0x236>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a55      	ldr	r2, [pc, #340]	; (80053f4 <HAL_GPIO_Init+0x338>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d025      	beq.n	80052ee <HAL_GPIO_Init+0x232>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a54      	ldr	r2, [pc, #336]	; (80053f8 <HAL_GPIO_Init+0x33c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01f      	beq.n	80052ea <HAL_GPIO_Init+0x22e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a53      	ldr	r2, [pc, #332]	; (80053fc <HAL_GPIO_Init+0x340>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d019      	beq.n	80052e6 <HAL_GPIO_Init+0x22a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a52      	ldr	r2, [pc, #328]	; (8005400 <HAL_GPIO_Init+0x344>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_GPIO_Init+0x226>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a51      	ldr	r2, [pc, #324]	; (8005404 <HAL_GPIO_Init+0x348>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00d      	beq.n	80052de <HAL_GPIO_Init+0x222>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a50      	ldr	r2, [pc, #320]	; (8005408 <HAL_GPIO_Init+0x34c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <HAL_GPIO_Init+0x21e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4f      	ldr	r2, [pc, #316]	; (800540c <HAL_GPIO_Init+0x350>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_GPIO_Init+0x21a>
 80052d2:	2309      	movs	r3, #9
 80052d4:	e012      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052d6:	230a      	movs	r3, #10
 80052d8:	e010      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052da:	2308      	movs	r3, #8
 80052dc:	e00e      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052de:	2307      	movs	r3, #7
 80052e0:	e00c      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052e2:	2306      	movs	r3, #6
 80052e4:	e00a      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052e6:	2305      	movs	r3, #5
 80052e8:	e008      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052ea:	2304      	movs	r3, #4
 80052ec:	e006      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052ee:	2303      	movs	r3, #3
 80052f0:	e004      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e002      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_GPIO_Init+0x240>
 80052fa:	2300      	movs	r3, #0
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	f002 0203 	and.w	r2, r2, #3
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	4093      	lsls	r3, r2
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800530c:	4935      	ldr	r1, [pc, #212]	; (80053e4 <HAL_GPIO_Init+0x328>)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	089b      	lsrs	r3, r3, #2
 8005312:	3302      	adds	r3, #2
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800531a:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_GPIO_Init+0x354>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800533e:	4a34      	ldr	r2, [pc, #208]	; (8005410 <HAL_GPIO_Init+0x354>)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005344:	4b32      	ldr	r3, [pc, #200]	; (8005410 <HAL_GPIO_Init+0x354>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005368:	4a29      	ldr	r2, [pc, #164]	; (8005410 <HAL_GPIO_Init+0x354>)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800536e:	4b28      	ldr	r3, [pc, #160]	; (8005410 <HAL_GPIO_Init+0x354>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005392:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <HAL_GPIO_Init+0x354>)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005398:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <HAL_GPIO_Init+0x354>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053bc:	4a14      	ldr	r2, [pc, #80]	; (8005410 <HAL_GPIO_Init+0x354>)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3301      	adds	r3, #1
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	f67f ae84 	bls.w	80050d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3724      	adds	r7, #36	; 0x24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40013800 	.word	0x40013800
 80053e8:	40020000 	.word	0x40020000
 80053ec:	40020400 	.word	0x40020400
 80053f0:	40020800 	.word	0x40020800
 80053f4:	40020c00 	.word	0x40020c00
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40021400 	.word	0x40021400
 8005400:	40021800 	.word	0x40021800
 8005404:	40021c00 	.word	0x40021c00
 8005408:	40022000 	.word	0x40022000
 800540c:	40022400 	.word	0x40022400
 8005410:	40013c00 	.word	0x40013c00

08005414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
 8005420:	4613      	mov	r3, r2
 8005422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005424:	787b      	ldrb	r3, [r7, #1]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542a:	887a      	ldrh	r2, [r7, #2]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005430:	e003      	b.n	800543a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005432:	887b      	ldrh	r3, [r7, #2]
 8005434:	041a      	lsls	r2, r3, #16
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	619a      	str	r2, [r3, #24]
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e267      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d075      	beq.n	8005552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005466:	4b88      	ldr	r3, [pc, #544]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b04      	cmp	r3, #4
 8005470:	d00c      	beq.n	800548c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005472:	4b85      	ldr	r3, [pc, #532]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800547a:	2b08      	cmp	r3, #8
 800547c:	d112      	bne.n	80054a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800547e:	4b82      	ldr	r3, [pc, #520]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548a:	d10b      	bne.n	80054a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548c:	4b7e      	ldr	r3, [pc, #504]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d05b      	beq.n	8005550 <HAL_RCC_OscConfig+0x108>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d157      	bne.n	8005550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e242      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d106      	bne.n	80054bc <HAL_RCC_OscConfig+0x74>
 80054ae:	4b76      	ldr	r3, [pc, #472]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a75      	ldr	r2, [pc, #468]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e01d      	b.n	80054f8 <HAL_RCC_OscConfig+0xb0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054c4:	d10c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x98>
 80054c6:	4b70      	ldr	r3, [pc, #448]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a6f      	ldr	r2, [pc, #444]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	4b6d      	ldr	r3, [pc, #436]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a6c      	ldr	r2, [pc, #432]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e00b      	b.n	80054f8 <HAL_RCC_OscConfig+0xb0>
 80054e0:	4b69      	ldr	r3, [pc, #420]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a68      	ldr	r2, [pc, #416]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	4b66      	ldr	r3, [pc, #408]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a65      	ldr	r2, [pc, #404]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80054f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005500:	f7fe fa30 	bl	8003964 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005508:	f7fe fa2c 	bl	8003964 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	; 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e207      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	4b5b      	ldr	r3, [pc, #364]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0xc0>
 8005526:	e014      	b.n	8005552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005528:	f7fe fa1c 	bl	8003964 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005530:	f7fe fa18 	bl	8003964 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	; 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e1f3      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005542:	4b51      	ldr	r3, [pc, #324]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0xe8>
 800554e:	e000      	b.n	8005552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d063      	beq.n	8005626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800555e:	4b4a      	ldr	r3, [pc, #296]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556a:	4b47      	ldr	r3, [pc, #284]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005572:	2b08      	cmp	r3, #8
 8005574:	d11c      	bne.n	80055b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005576:	4b44      	ldr	r3, [pc, #272]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d116      	bne.n	80055b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005582:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_RCC_OscConfig+0x152>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d001      	beq.n	800559a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e1c7      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559a:	4b3b      	ldr	r3, [pc, #236]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4937      	ldr	r1, [pc, #220]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ae:	e03a      	b.n	8005626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d020      	beq.n	80055fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055b8:	4b34      	ldr	r3, [pc, #208]	; (800568c <HAL_RCC_OscConfig+0x244>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055be:	f7fe f9d1 	bl	8003964 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c6:	f7fe f9cd 	bl	8003964 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e1a8      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d8:	4b2b      	ldr	r3, [pc, #172]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0f0      	beq.n	80055c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e4:	4b28      	ldr	r3, [pc, #160]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4925      	ldr	r1, [pc, #148]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	600b      	str	r3, [r1, #0]
 80055f8:	e015      	b.n	8005626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055fa:	4b24      	ldr	r3, [pc, #144]	; (800568c <HAL_RCC_OscConfig+0x244>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fe f9b0 	bl	8003964 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005608:	f7fe f9ac 	bl	8003964 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e187      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d036      	beq.n	80056a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <HAL_RCC_OscConfig+0x248>)
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005640:	f7fe f990 	bl	8003964 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005648:	f7fe f98c 	bl	8003964 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e167      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_OscConfig+0x240>)
 800565c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x200>
 8005666:	e01b      	b.n	80056a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <HAL_RCC_OscConfig+0x248>)
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800566e:	f7fe f979 	bl	8003964 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005674:	e00e      	b.n	8005694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005676:	f7fe f975 	bl	8003964 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d907      	bls.n	8005694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e150      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
 8005688:	40023800 	.word	0x40023800
 800568c:	42470000 	.word	0x42470000
 8005690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005694:	4b88      	ldr	r3, [pc, #544]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ea      	bne.n	8005676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8097 	beq.w	80057dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b2:	4b81      	ldr	r3, [pc, #516]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10f      	bne.n	80056de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	4b7d      	ldr	r3, [pc, #500]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	4a7c      	ldr	r2, [pc, #496]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80056c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056cc:	6413      	str	r3, [r2, #64]	; 0x40
 80056ce:	4b7a      	ldr	r3, [pc, #488]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056de:	4b77      	ldr	r3, [pc, #476]	; (80058bc <HAL_RCC_OscConfig+0x474>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d118      	bne.n	800571c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ea:	4b74      	ldr	r3, [pc, #464]	; (80058bc <HAL_RCC_OscConfig+0x474>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a73      	ldr	r2, [pc, #460]	; (80058bc <HAL_RCC_OscConfig+0x474>)
 80056f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f6:	f7fe f935 	bl	8003964 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fe:	f7fe f931 	bl	8003964 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e10c      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005710:	4b6a      	ldr	r3, [pc, #424]	; (80058bc <HAL_RCC_OscConfig+0x474>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d106      	bne.n	8005732 <HAL_RCC_OscConfig+0x2ea>
 8005724:	4b64      	ldr	r3, [pc, #400]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	4a63      	ldr	r2, [pc, #396]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6713      	str	r3, [r2, #112]	; 0x70
 8005730:	e01c      	b.n	800576c <HAL_RCC_OscConfig+0x324>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b05      	cmp	r3, #5
 8005738:	d10c      	bne.n	8005754 <HAL_RCC_OscConfig+0x30c>
 800573a:	4b5f      	ldr	r3, [pc, #380]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	4a5e      	ldr	r2, [pc, #376]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005740:	f043 0304 	orr.w	r3, r3, #4
 8005744:	6713      	str	r3, [r2, #112]	; 0x70
 8005746:	4b5c      	ldr	r3, [pc, #368]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	4a5b      	ldr	r2, [pc, #364]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	6713      	str	r3, [r2, #112]	; 0x70
 8005752:	e00b      	b.n	800576c <HAL_RCC_OscConfig+0x324>
 8005754:	4b58      	ldr	r3, [pc, #352]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a57      	ldr	r2, [pc, #348]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
 8005760:	4b55      	ldr	r3, [pc, #340]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	4a54      	ldr	r2, [pc, #336]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005766:	f023 0304 	bic.w	r3, r3, #4
 800576a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d015      	beq.n	80057a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fe f8f6 	bl	8003964 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577a:	e00a      	b.n	8005792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800577c:	f7fe f8f2 	bl	8003964 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	f241 3288 	movw	r2, #5000	; 0x1388
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e0cb      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005792:	4b49      	ldr	r3, [pc, #292]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0ee      	beq.n	800577c <HAL_RCC_OscConfig+0x334>
 800579e:	e014      	b.n	80057ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a0:	f7fe f8e0 	bl	8003964 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a6:	e00a      	b.n	80057be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fe f8dc 	bl	8003964 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0b5      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057be:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1ee      	bne.n	80057a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d105      	bne.n	80057dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d0:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	4a38      	ldr	r2, [pc, #224]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80057d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80a1 	beq.w	8005928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057e6:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d05c      	beq.n	80058ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d141      	bne.n	800587e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <HAL_RCC_OscConfig+0x478>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fe f8b0 	bl	8003964 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005808:	f7fe f8ac 	bl	8003964 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e087      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581a:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	019b      	lsls	r3, r3, #6
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	3b01      	subs	r3, #1
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	061b      	lsls	r3, r3, #24
 800584a:	491b      	ldr	r1, [pc, #108]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005850:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <HAL_RCC_OscConfig+0x478>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fe f885 	bl	8003964 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585e:	f7fe f881 	bl	8003964 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e05c      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x416>
 800587c:	e054      	b.n	8005928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587e:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <HAL_RCC_OscConfig+0x478>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005884:	f7fe f86e 	bl	8003964 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800588c:	f7fe f86a 	bl	8003964 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e045      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_RCC_OscConfig+0x470>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x444>
 80058aa:	e03d      	b.n	8005928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d107      	bne.n	80058c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e038      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
 80058b8:	40023800 	.word	0x40023800
 80058bc:	40007000 	.word	0x40007000
 80058c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c4:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <HAL_RCC_OscConfig+0x4ec>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d028      	beq.n	8005924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058dc:	429a      	cmp	r2, r3
 80058de:	d121      	bne.n	8005924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d11a      	bne.n	8005924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058f4:	4013      	ands	r3, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d111      	bne.n	8005924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	3b01      	subs	r3, #1
 800590e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d107      	bne.n	8005924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800

08005938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0cc      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800594c:	4b68      	ldr	r3, [pc, #416]	; (8005af0 <HAL_RCC_ClockConfig+0x1b8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d90c      	bls.n	8005974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595a:	4b65      	ldr	r3, [pc, #404]	; (8005af0 <HAL_RCC_ClockConfig+0x1b8>)
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005962:	4b63      	ldr	r3, [pc, #396]	; (8005af0 <HAL_RCC_ClockConfig+0x1b8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d001      	beq.n	8005974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0b8      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d020      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800598c:	4b59      	ldr	r3, [pc, #356]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4a58      	ldr	r2, [pc, #352]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059a4:	4b53      	ldr	r3, [pc, #332]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	4a52      	ldr	r2, [pc, #328]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b0:	4b50      	ldr	r3, [pc, #320]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	494d      	ldr	r1, [pc, #308]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d044      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d107      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	4b47      	ldr	r3, [pc, #284]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d119      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e07f      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d003      	beq.n	80059f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d107      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f6:	4b3f      	ldr	r3, [pc, #252]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e06f      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a06:	4b3b      	ldr	r3, [pc, #236]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e067      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a16:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f023 0203 	bic.w	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4934      	ldr	r1, [pc, #208]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a28:	f7fd ff9c 	bl	8003964 <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a30:	f7fd ff98 	bl	8003964 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e04f      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	4b2b      	ldr	r3, [pc, #172]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 020c 	and.w	r2, r3, #12
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d1eb      	bne.n	8005a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a58:	4b25      	ldr	r3, [pc, #148]	; (8005af0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d20c      	bcs.n	8005a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b22      	ldr	r3, [pc, #136]	; (8005af0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6e:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e032      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a8c:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4916      	ldr	r1, [pc, #88]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aaa:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	490e      	ldr	r1, [pc, #56]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005abe:	f000 f821 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	091b      	lsrs	r3, r3, #4
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	490a      	ldr	r1, [pc, #40]	; (8005af8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ad0:	5ccb      	ldrb	r3, [r1, r3]
 8005ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <HAL_RCC_ClockConfig+0x1c4>)
 8005ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ada:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <HAL_RCC_ClockConfig+0x1c8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fd fa78 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40023c00 	.word	0x40023c00
 8005af4:	40023800 	.word	0x40023800
 8005af8:	0800e6a0 	.word	0x0800e6a0
 8005afc:	200000a8 	.word	0x200000a8
 8005b00:	200000ac 	.word	0x200000ac

08005b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b08:	b090      	sub	sp, #64	; 0x40
 8005b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b10:	2300      	movs	r3, #0
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b14:	2300      	movs	r3, #0
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b1c:	4b59      	ldr	r3, [pc, #356]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d00d      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0x40>
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	f200 80a1 	bhi.w	8005c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_RCC_GetSysClockFreq+0x34>
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d003      	beq.n	8005b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b36:	e09b      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b38:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005b3c:	e09b      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b3e:	4b53      	ldr	r3, [pc, #332]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b42:	e098      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b44:	4b4f      	ldr	r3, [pc, #316]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b4e:	4b4d      	ldr	r3, [pc, #308]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d028      	beq.n	8005bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5a:	4b4a      	ldr	r3, [pc, #296]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	099b      	lsrs	r3, r3, #6
 8005b60:	2200      	movs	r2, #0
 8005b62:	623b      	str	r3, [r7, #32]
 8005b64:	627a      	str	r2, [r7, #36]	; 0x24
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005b70:	fb03 f201 	mul.w	r2, r3, r1
 8005b74:	2300      	movs	r3, #0
 8005b76:	fb00 f303 	mul.w	r3, r0, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	4a43      	ldr	r2, [pc, #268]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8005b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b84:	460a      	mov	r2, r1
 8005b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8a:	4413      	add	r3, r2
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	2200      	movs	r2, #0
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	61fa      	str	r2, [r7, #28]
 8005b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b9e:	f7fb f883 	bl	8000ca8 <__aeabi_uldivmod>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005baa:	e053      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bac:	4b35      	ldr	r3, [pc, #212]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	617a      	str	r2, [r7, #20]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005bbe:	f04f 0b00 	mov.w	fp, #0
 8005bc2:	4652      	mov	r2, sl
 8005bc4:	465b      	mov	r3, fp
 8005bc6:	f04f 0000 	mov.w	r0, #0
 8005bca:	f04f 0100 	mov.w	r1, #0
 8005bce:	0159      	lsls	r1, r3, #5
 8005bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd4:	0150      	lsls	r0, r2, #5
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	ebb2 080a 	subs.w	r8, r2, sl
 8005bde:	eb63 090b 	sbc.w	r9, r3, fp
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8005bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	00eb      	lsls	r3, r5, #3
 8005c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c0c:	00e2      	lsls	r2, r4, #3
 8005c0e:	4614      	mov	r4, r2
 8005c10:	461d      	mov	r5, r3
 8005c12:	eb14 030a 	adds.w	r3, r4, sl
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	eb45 030b 	adc.w	r3, r5, fp
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	028b      	lsls	r3, r1, #10
 8005c2e:	4621      	mov	r1, r4
 8005c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c34:	4621      	mov	r1, r4
 8005c36:	028a      	lsls	r2, r1, #10
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	60fa      	str	r2, [r7, #12]
 8005c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c48:	f7fb f82e 	bl	8000ca8 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4613      	mov	r3, r2
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	3301      	adds	r3, #1
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c6e:	e002      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3740      	adds	r7, #64	; 0x40
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c82:	bf00      	nop
 8005c84:	40023800 	.word	0x40023800
 8005c88:	00f42400 	.word	0x00f42400
 8005c8c:	00b71b00 	.word	0x00b71b00

08005c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c96:	681b      	ldr	r3, [r3, #0]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	200000a8 	.word	0x200000a8

08005ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cac:	f7ff fff0 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	0a9b      	lsrs	r3, r3, #10
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	4903      	ldr	r1, [pc, #12]	; (8005ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cbe:	5ccb      	ldrb	r3, [r1, r3]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	0800e6b0 	.word	0x0800e6b0

08005cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cd4:	f7ff ffdc 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	0b5b      	lsrs	r3, r3, #13
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	4903      	ldr	r1, [pc, #12]	; (8005cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	0800e6b0 	.word	0x0800e6b0

08005cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	220f      	movs	r2, #15
 8005d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_RCC_GetClockConfig+0x5c>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 0203 	and.w	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <HAL_RCC_GetClockConfig+0x5c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <HAL_RCC_GetClockConfig+0x5c>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_RCC_GetClockConfig+0x5c>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	08db      	lsrs	r3, r3, #3
 8005d32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <HAL_RCC_GetClockConfig+0x60>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	601a      	str	r2, [r3, #0]
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40023800 	.word	0x40023800
 8005d58:	40023c00 	.word	0x40023c00

08005d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e041      	b.n	8005df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f839 	bl	8005dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f000 f9d8 	bl	8006150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d001      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e04e      	b.n	8005ec6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d022      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x80>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e52:	d01d      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x80>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1f      	ldr	r2, [pc, #124]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x80>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <HAL_TIM_Base_Start_IT+0xcc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x80>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x80>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x80>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x80>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_TIM_Base_Start_IT+0xdc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d111      	bne.n	8005eb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d010      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	e007      	b.n	8005ec4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40001800 	.word	0x40001800

08005ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d122      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d11b      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0202 	mvn.w	r2, #2
 8005f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8ee 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8e0 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f8f1 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0204 	mvn.w	r2, #4
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8c4 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8b6 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f8c7 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d122      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d11b      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0208 	mvn.w	r2, #8
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f89a 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f88c 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f89d 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	d122      	bne.n	8006048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b10      	cmp	r3, #16
 800600e:	d11b      	bne.n	8006048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0210 	mvn.w	r2, #16
 8006018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2208      	movs	r2, #8
 800601e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f870 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f862 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f873 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0201 	mvn.w	r2, #1
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fc ff6c 	bl	8002f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f902 	bl	80062a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d10e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d107      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f838 	bl	800613c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d107      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0220 	mvn.w	r2, #32
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8cc 	bl	8006290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a40      	ldr	r2, [pc, #256]	; (8006264 <TIM_Base_SetConfig+0x114>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d00f      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3d      	ldr	r2, [pc, #244]	; (8006268 <TIM_Base_SetConfig+0x118>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00b      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a3c      	ldr	r2, [pc, #240]	; (800626c <TIM_Base_SetConfig+0x11c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3b      	ldr	r2, [pc, #236]	; (8006270 <TIM_Base_SetConfig+0x120>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3a      	ldr	r2, [pc, #232]	; (8006274 <TIM_Base_SetConfig+0x124>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d108      	bne.n	80061a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2f      	ldr	r2, [pc, #188]	; (8006264 <TIM_Base_SetConfig+0x114>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02b      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b0:	d027      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2c      	ldr	r2, [pc, #176]	; (8006268 <TIM_Base_SetConfig+0x118>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d023      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2b      	ldr	r2, [pc, #172]	; (800626c <TIM_Base_SetConfig+0x11c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01f      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2a      	ldr	r2, [pc, #168]	; (8006270 <TIM_Base_SetConfig+0x120>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01b      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a29      	ldr	r2, [pc, #164]	; (8006274 <TIM_Base_SetConfig+0x124>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d017      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a28      	ldr	r2, [pc, #160]	; (8006278 <TIM_Base_SetConfig+0x128>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a27      	ldr	r2, [pc, #156]	; (800627c <TIM_Base_SetConfig+0x12c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a26      	ldr	r2, [pc, #152]	; (8006280 <TIM_Base_SetConfig+0x130>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a25      	ldr	r2, [pc, #148]	; (8006284 <TIM_Base_SetConfig+0x134>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a24      	ldr	r2, [pc, #144]	; (8006288 <TIM_Base_SetConfig+0x138>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a23      	ldr	r2, [pc, #140]	; (800628c <TIM_Base_SetConfig+0x13c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <TIM_Base_SetConfig+0x114>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_Base_SetConfig+0xf8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a0c      	ldr	r2, [pc, #48]	; (8006274 <TIM_Base_SetConfig+0x124>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d103      	bne.n	8006250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40010400 	.word	0x40010400
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800
 8006284:	40001800 	.word	0x40001800
 8006288:	40001c00 	.word	0x40001c00
 800628c:	40002000 	.word	0x40002000

08006290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e03f      	b.n	800634a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fd f8e4 	bl	80034ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2224      	movs	r2, #36	; 0x24
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f86d 	bl	80073dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b08a      	sub	sp, #40	; 0x28
 8006356:	af02      	add	r7, sp, #8
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b20      	cmp	r3, #32
 8006370:	d17c      	bne.n	800646c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_UART_Transmit+0x2c>
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e075      	b.n	800646e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UART_Transmit+0x3e>
 800638c:	2302      	movs	r3, #2
 800638e:	e06e      	b.n	800646e <HAL_UART_Transmit+0x11c>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2221      	movs	r2, #33	; 0x21
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063a6:	f7fd fadd 	bl	8003964 <HAL_GetTick>
 80063aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	88fa      	ldrh	r2, [r7, #6]
 80063b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c0:	d108      	bne.n	80063d4 <HAL_UART_Transmit+0x82>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d104      	bne.n	80063d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	e003      	b.n	80063dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063e4:	e02a      	b.n	800643c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	2180      	movs	r1, #128	; 0x80
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fd24 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e036      	b.n	800646e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006414:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	3302      	adds	r3, #2
 800641a:	61bb      	str	r3, [r7, #24]
 800641c:	e007      	b.n	800642e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	3301      	adds	r3, #1
 800642c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1cf      	bne.n	80063e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2200      	movs	r2, #0
 800644e:	2140      	movs	r1, #64	; 0x40
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fcf4 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e006      	b.n	800646e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	4618      	mov	r0, r3
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	d165      	bne.n	800655e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_UART_Transmit_DMA+0x26>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e05e      	b.n	8006560 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_UART_Transmit_DMA+0x38>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e057      	b.n	8006560 <HAL_UART_Transmit_DMA+0xe8>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2221      	movs	r2, #33	; 0x21
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	4a22      	ldr	r2, [pc, #136]	; (8006568 <HAL_UART_Transmit_DMA+0xf0>)
 80064de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	4a21      	ldr	r2, [pc, #132]	; (800656c <HAL_UART_Transmit_DMA+0xf4>)
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	4a20      	ldr	r2, [pc, #128]	; (8006570 <HAL_UART_Transmit_DMA+0xf8>)
 80064ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	2200      	movs	r2, #0
 80064f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	6819      	ldr	r1, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3304      	adds	r3, #4
 800650c:	461a      	mov	r2, r3
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	f7fe fa80 	bl	8004a14 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800651c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	617b      	str	r3, [r7, #20]
   return(result);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3314      	adds	r3, #20
 8006544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006546:	627a      	str	r2, [r7, #36]	; 0x24
 8006548:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6a39      	ldr	r1, [r7, #32]
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	61fb      	str	r3, [r7, #28]
   return(result);
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e000      	b.n	8006560 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800655e:	2302      	movs	r3, #2
  }
}
 8006560:	4618      	mov	r0, r3
 8006562:	3730      	adds	r7, #48	; 0x30
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	08006b99 	.word	0x08006b99
 800656c:	08006c33 	.word	0x08006c33
 8006570:	08006dab 	.word	0x08006dab

08006574 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08c      	sub	sp, #48	; 0x30
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b20      	cmp	r3, #32
 800658c:	d152      	bne.n	8006634 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e04b      	b.n	8006636 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e044      	b.n	8006636 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	461a      	mov	r2, r3
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fcab 	bl	8006f1c <UART_Start_Receive_DMA>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80065cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d12c      	bne.n	800662e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d125      	bne.n	8006628 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065dc:	2300      	movs	r3, #0
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	617b      	str	r3, [r7, #20]
   return(result);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f043 0310 	orr.w	r3, r3, #16
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006612:	627a      	str	r2, [r7, #36]	; 0x24
 8006614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6a39      	ldr	r1, [r7, #32]
 8006618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006626:	e002      	b.n	800662e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800662e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006632:	e000      	b.n	8006636 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006634:	2302      	movs	r3, #2
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3730      	adds	r7, #48	; 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b0ba      	sub	sp, #232	; 0xe8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006666:	2300      	movs	r3, #0
 8006668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800667e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10f      	bne.n	80066a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <HAL_UART_IRQHandler+0x66>
 8006692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fde1 	bl	8007266 <UART_Receive_IT>
      return;
 80066a4:	e256      	b.n	8006b54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 80de 	beq.w	800686c <HAL_UART_IRQHandler+0x22c>
 80066b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80d1 	beq.w	800686c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_UART_IRQHandler+0xae>
 80066d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f043 0201 	orr.w	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <HAL_UART_IRQHandler+0xd2>
 80066fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f043 0202 	orr.w	r2, r3, #2
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <HAL_UART_IRQHandler+0xf6>
 800671e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d011      	beq.n	8006766 <HAL_UART_IRQHandler+0x126>
 8006742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d105      	bne.n	800675a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800674e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f043 0208 	orr.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 81ed 	beq.w	8006b4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <HAL_UART_IRQHandler+0x14e>
 800677c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fd6c 	bl	8007266 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <HAL_UART_IRQHandler+0x17a>
 80067b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d04f      	beq.n	800685a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fc74 	bl	80070a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b40      	cmp	r3, #64	; 0x40
 80067cc:	d141      	bne.n	8006852 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1d9      	bne.n	80067ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d013      	beq.n	800684a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	4a7d      	ldr	r2, [pc, #500]	; (8006a1c <HAL_UART_IRQHandler+0x3dc>)
 8006828:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe f9b8 	bl	8004ba4 <HAL_DMA_Abort_IT>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d016      	beq.n	8006868 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006844:	4610      	mov	r0, r2
 8006846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006848:	e00e      	b.n	8006868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f99a 	bl	8006b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	e00a      	b.n	8006868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f996 	bl	8006b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	e006      	b.n	8006868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f992 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006866:	e170      	b.n	8006b4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	bf00      	nop
    return;
 800686a:	e16e      	b.n	8006b4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	2b01      	cmp	r3, #1
 8006872:	f040 814a 	bne.w	8006b0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687a:	f003 0310 	and.w	r3, r3, #16
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8143 	beq.w	8006b0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 813c 	beq.w	8006b0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	f040 80b4 	bne.w	8006a20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8140 	beq.w	8006b4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068d6:	429a      	cmp	r2, r3
 80068d8:	f080 8139 	bcs.w	8006b4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ee:	f000 8088 	beq.w	8006a02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800690c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800691e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800692a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1d9      	bne.n	80068f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800694e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006950:	f023 0301 	bic.w	r3, r3, #1
 8006954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800696a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e1      	bne.n	800693e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800698a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800698c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3314      	adds	r3, #20
 800699a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800699e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e3      	bne.n	800697a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d2:	f023 0310 	bic.w	r3, r3, #16
 80069d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80069e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e3      	bne.n	80069c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe f861 	bl	8004ac4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fb fe1c 	bl	8002650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a18:	e099      	b.n	8006b4e <HAL_UART_IRQHandler+0x50e>
 8006a1a:	bf00      	nop
 8006a1c:	0800716f 	.word	0x0800716f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 808b 	beq.w	8006b52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8086 	beq.w	8006b52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a6a:	647a      	str	r2, [r7, #68]	; 0x44
 8006a6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e3      	bne.n	8006a46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3314      	adds	r3, #20
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3314      	adds	r3, #20
 8006a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e3      	bne.n	8006a7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ae8:	61fa      	str	r2, [r7, #28]
 8006aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	69b9      	ldr	r1, [r7, #24]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	617b      	str	r3, [r7, #20]
   return(result);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e3      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fb fda4 	bl	8002650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b08:	e023      	b.n	8006b52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d009      	beq.n	8006b2a <HAL_UART_IRQHandler+0x4ea>
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fb37 	bl	8007196 <UART_Transmit_IT>
    return;
 8006b28:	e014      	b.n	8006b54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00e      	beq.n	8006b54 <HAL_UART_IRQHandler+0x514>
 8006b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fb77 	bl	8007236 <UART_EndTransmit_IT>
    return;
 8006b48:	e004      	b.n	8006b54 <HAL_UART_IRQHandler+0x514>
    return;
 8006b4a:	bf00      	nop
 8006b4c:	e002      	b.n	8006b54 <HAL_UART_IRQHandler+0x514>
      return;
 8006b4e:	bf00      	nop
 8006b50:	e000      	b.n	8006b54 <HAL_UART_IRQHandler+0x514>
      return;
 8006b52:	bf00      	nop
  }
}
 8006b54:	37e8      	adds	r7, #232	; 0xe8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop

08006b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b090      	sub	sp, #64	; 0x40
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d137      	bne.n	8006c24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bda:	633a      	str	r2, [r7, #48]	; 0x30
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c0e:	61fa      	str	r2, [r7, #28]
 8006c10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	69b9      	ldr	r1, [r7, #24]
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c22:	e002      	b.n	8006c2a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006c26:	f7ff ff99 	bl	8006b5c <HAL_UART_TxCpltCallback>
}
 8006c2a:	bf00      	nop
 8006c2c:	3740      	adds	r7, #64	; 0x40
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7fb fd77 	bl	8002734 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b09c      	sub	sp, #112	; 0x70
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d172      	bne.n	8006d50 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c90:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e5      	bne.n	8006c70 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	667b      	str	r3, [r7, #100]	; 0x64
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006cc4:	647a      	str	r2, [r7, #68]	; 0x44
 8006cc6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3314      	adds	r3, #20
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cee:	663b      	str	r3, [r7, #96]	; 0x60
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cf8:	633a      	str	r2, [r7, #48]	; 0x30
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e5      	bne.n	8006cd8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d119      	bne.n	8006d50 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0310 	bic.w	r3, r3, #16
 8006d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d3c:	61fa      	str	r2, [r7, #28]
 8006d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d106      	bne.n	8006d66 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d60:	f7fb fc76 	bl	8002650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d64:	e002      	b.n	8006d6c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006d66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d68:	f7fb fca6 	bl	80026b8 <HAL_UART_RxCpltCallback>
}
 8006d6c:	bf00      	nop
 8006d6e:	3770      	adds	r7, #112	; 0x70
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d108      	bne.n	8006d9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	4619      	mov	r1, r3
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7fb fc5b 	bl	8002650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d9a:	e002      	b.n	8006da2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fee7 	bl	8006b70 <HAL_UART_RxHalfCpltCallback>
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc6:	2b80      	cmp	r3, #128	; 0x80
 8006dc8:	bf0c      	ite	eq
 8006dca:	2301      	moveq	r3, #1
 8006dcc:	2300      	movne	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b21      	cmp	r3, #33	; 0x21
 8006ddc:	d108      	bne.n	8006df0 <UART_DMAError+0x46>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006dea:	68b8      	ldr	r0, [r7, #8]
 8006dec:	f000 f934 	bl	8007058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	bf0c      	ite	eq
 8006dfe:	2301      	moveq	r3, #1
 8006e00:	2300      	movne	r3, #0
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b22      	cmp	r3, #34	; 0x22
 8006e10:	d108      	bne.n	8006e24 <UART_DMAError+0x7a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e1e:	68b8      	ldr	r0, [r7, #8]
 8006e20:	f000 f942 	bl	80070a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f043 0210 	orr.w	r2, r3, #16
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e30:	68b8      	ldr	r0, [r7, #8]
 8006e32:	f7ff fea7 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b090      	sub	sp, #64	; 0x40
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4e:	e050      	b.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e56:	d04c      	beq.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5e:	f7fc fd81 	bl	8003964 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d241      	bcs.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e8e:	637a      	str	r2, [r7, #52]	; 0x34
 8006e90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3314      	adds	r3, #20
 8006ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec2:	623a      	str	r2, [r7, #32]
 8006ec4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	69f9      	ldr	r1, [r7, #28]
 8006ec8:	6a3a      	ldr	r2, [r7, #32]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e00f      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4013      	ands	r3, r2
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d09f      	beq.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3740      	adds	r7, #64	; 0x40
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b098      	sub	sp, #96	; 0x60
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2222      	movs	r2, #34	; 0x22
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	4a40      	ldr	r2, [pc, #256]	; (800704c <UART_Start_Receive_DMA+0x130>)
 8006f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	4a3f      	ldr	r2, [pc, #252]	; (8007050 <UART_Start_Receive_DMA+0x134>)
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	4a3e      	ldr	r2, [pc, #248]	; (8007054 <UART_Start_Receive_DMA+0x138>)
 8006f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	2200      	movs	r2, #0
 8006f62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f64:	f107 0308 	add.w	r3, r7, #8
 8006f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	f7fd fd4a 	bl	8004a14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d019      	beq.n	8006fda <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330c      	adds	r3, #12
 8006fac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e5      	bne.n	8006fa6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3314      	adds	r3, #20
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	f043 0301 	orr.w	r3, r3, #1
 8006ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3314      	adds	r3, #20
 8006ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ffa:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e5      	bne.n	8006fda <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3314      	adds	r3, #20
 8007014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	617b      	str	r3, [r7, #20]
   return(result);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007024:	653b      	str	r3, [r7, #80]	; 0x50
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3314      	adds	r3, #20
 800702c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800702e:	627a      	str	r2, [r7, #36]	; 0x24
 8007030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6a39      	ldr	r1, [r7, #32]
 8007034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61fb      	str	r3, [r7, #28]
   return(result);
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3760      	adds	r7, #96	; 0x60
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	08006c4f 	.word	0x08006c4f
 8007050:	08006d75 	.word	0x08006d75
 8007054:	08006dab 	.word	0x08006dab

08007058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b089      	sub	sp, #36	; 0x24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	61ba      	str	r2, [r7, #24]
 8007082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6979      	ldr	r1, [r7, #20]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	613b      	str	r3, [r7, #16]
   return(result);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800709c:	bf00      	nop
 800709e:	3724      	adds	r7, #36	; 0x24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b095      	sub	sp, #84	; 0x54
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070d0:	643a      	str	r2, [r7, #64]	; 0x40
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e5      	bne.n	80070b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3314      	adds	r3, #20
 8007102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800710a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	2b01      	cmp	r3, #1
 800711e:	d119      	bne.n	8007154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	330c      	adds	r3, #12
 8007126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f023 0310 	bic.w	r3, r3, #16
 8007136:	647b      	str	r3, [r7, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007140:	61ba      	str	r2, [r7, #24]
 8007142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6979      	ldr	r1, [r7, #20]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	613b      	str	r3, [r7, #16]
   return(result);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007162:	bf00      	nop
 8007164:	3754      	adds	r7, #84	; 0x54
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff fcfb 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b21      	cmp	r3, #33	; 0x21
 80071a8:	d13e      	bne.n	8007228 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b2:	d114      	bne.n	80071de <UART_Transmit_IT+0x48>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d110      	bne.n	80071de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	1c9a      	adds	r2, r3, #2
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	621a      	str	r2, [r3, #32]
 80071dc:	e008      	b.n	80071f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	1c59      	adds	r1, r3, #1
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6211      	str	r1, [r2, #32]
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	4619      	mov	r1, r3
 80071fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10f      	bne.n	8007224 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007212:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007222:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800724c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff fc80 	bl	8006b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b08c      	sub	sp, #48	; 0x30
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b22      	cmp	r3, #34	; 0x22
 8007278:	f040 80ab 	bne.w	80073d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007284:	d117      	bne.n	80072b6 <UART_Receive_IT+0x50>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d113      	bne.n	80072b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
 80072b4:	e026      	b.n	8007304 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c8:	d007      	beq.n	80072da <UART_Receive_IT+0x74>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <UART_Receive_IT+0x82>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e008      	b.n	80072fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29b      	uxth	r3, r3
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	4619      	mov	r1, r3
 8007312:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007314:	2b00      	cmp	r3, #0
 8007316:	d15a      	bne.n	80073ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0220 	bic.w	r2, r2, #32
 8007326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	2b01      	cmp	r3, #1
 8007356:	d135      	bne.n	80073c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330c      	adds	r3, #12
 8007364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	613b      	str	r3, [r7, #16]
   return(result);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f023 0310 	bic.w	r3, r3, #16
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	330c      	adds	r3, #12
 800737c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737e:	623a      	str	r2, [r7, #32]
 8007380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	69f9      	ldr	r1, [r7, #28]
 8007384:	6a3a      	ldr	r2, [r7, #32]
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	61bb      	str	r3, [r7, #24]
   return(result);
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e5      	bne.n	800735e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b10      	cmp	r3, #16
 800739e:	d10a      	bne.n	80073b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7fb f947 	bl	8002650 <HAL_UARTEx_RxEventCallback>
 80073c2:	e002      	b.n	80073ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fb f977 	bl	80026b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e002      	b.n	80073d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e000      	b.n	80073d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3730      	adds	r7, #48	; 0x30
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e0:	b0c0      	sub	sp, #256	; 0x100
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	68d9      	ldr	r1, [r3, #12]
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	ea40 0301 	orr.w	r3, r0, r1
 8007404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	431a      	orrs	r2, r3
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	431a      	orrs	r2, r3
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007434:	f021 010c 	bic.w	r1, r1, #12
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007442:	430b      	orrs	r3, r1
 8007444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007456:	6999      	ldr	r1, [r3, #24]
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	ea40 0301 	orr.w	r3, r0, r1
 8007462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b8f      	ldr	r3, [pc, #572]	; (80076a8 <UART_SetConfig+0x2cc>)
 800746c:	429a      	cmp	r2, r3
 800746e:	d005      	beq.n	800747c <UART_SetConfig+0xa0>
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4b8d      	ldr	r3, [pc, #564]	; (80076ac <UART_SetConfig+0x2d0>)
 8007478:	429a      	cmp	r2, r3
 800747a:	d104      	bne.n	8007486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800747c:	f7fe fc28 	bl	8005cd0 <HAL_RCC_GetPCLK2Freq>
 8007480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007484:	e003      	b.n	800748e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007486:	f7fe fc0f 	bl	8005ca8 <HAL_RCC_GetPCLK1Freq>
 800748a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007498:	f040 810c 	bne.w	80076b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800749c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074ae:	4622      	mov	r2, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	1891      	adds	r1, r2, r2
 80074b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80074b6:	415b      	adcs	r3, r3
 80074b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074be:	4621      	mov	r1, r4
 80074c0:	eb12 0801 	adds.w	r8, r2, r1
 80074c4:	4629      	mov	r1, r5
 80074c6:	eb43 0901 	adc.w	r9, r3, r1
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074de:	4690      	mov	r8, r2
 80074e0:	4699      	mov	r9, r3
 80074e2:	4623      	mov	r3, r4
 80074e4:	eb18 0303 	adds.w	r3, r8, r3
 80074e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074ec:	462b      	mov	r3, r5
 80074ee:	eb49 0303 	adc.w	r3, r9, r3
 80074f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800750a:	460b      	mov	r3, r1
 800750c:	18db      	adds	r3, r3, r3
 800750e:	653b      	str	r3, [r7, #80]	; 0x50
 8007510:	4613      	mov	r3, r2
 8007512:	eb42 0303 	adc.w	r3, r2, r3
 8007516:	657b      	str	r3, [r7, #84]	; 0x54
 8007518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800751c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007520:	f7f9 fbc2 	bl	8000ca8 <__aeabi_uldivmod>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4b61      	ldr	r3, [pc, #388]	; (80076b0 <UART_SetConfig+0x2d4>)
 800752a:	fba3 2302 	umull	r2, r3, r3, r2
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	011c      	lsls	r4, r3, #4
 8007532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007536:	2200      	movs	r2, #0
 8007538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800753c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007544:	4642      	mov	r2, r8
 8007546:	464b      	mov	r3, r9
 8007548:	1891      	adds	r1, r2, r2
 800754a:	64b9      	str	r1, [r7, #72]	; 0x48
 800754c:	415b      	adcs	r3, r3
 800754e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007554:	4641      	mov	r1, r8
 8007556:	eb12 0a01 	adds.w	sl, r2, r1
 800755a:	4649      	mov	r1, r9
 800755c:	eb43 0b01 	adc.w	fp, r3, r1
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800756c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007574:	4692      	mov	sl, r2
 8007576:	469b      	mov	fp, r3
 8007578:	4643      	mov	r3, r8
 800757a:	eb1a 0303 	adds.w	r3, sl, r3
 800757e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007582:	464b      	mov	r3, r9
 8007584:	eb4b 0303 	adc.w	r3, fp, r3
 8007588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800758c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800759c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075a0:	460b      	mov	r3, r1
 80075a2:	18db      	adds	r3, r3, r3
 80075a4:	643b      	str	r3, [r7, #64]	; 0x40
 80075a6:	4613      	mov	r3, r2
 80075a8:	eb42 0303 	adc.w	r3, r2, r3
 80075ac:	647b      	str	r3, [r7, #68]	; 0x44
 80075ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075b6:	f7f9 fb77 	bl	8000ca8 <__aeabi_uldivmod>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4611      	mov	r1, r2
 80075c0:	4b3b      	ldr	r3, [pc, #236]	; (80076b0 <UART_SetConfig+0x2d4>)
 80075c2:	fba3 2301 	umull	r2, r3, r3, r1
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2264      	movs	r2, #100	; 0x64
 80075ca:	fb02 f303 	mul.w	r3, r2, r3
 80075ce:	1acb      	subs	r3, r1, r3
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075d6:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <UART_SetConfig+0x2d4>)
 80075d8:	fba3 2302 	umull	r2, r3, r3, r2
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075e4:	441c      	add	r4, r3
 80075e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075f8:	4642      	mov	r2, r8
 80075fa:	464b      	mov	r3, r9
 80075fc:	1891      	adds	r1, r2, r2
 80075fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007600:	415b      	adcs	r3, r3
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007608:	4641      	mov	r1, r8
 800760a:	1851      	adds	r1, r2, r1
 800760c:	6339      	str	r1, [r7, #48]	; 0x30
 800760e:	4649      	mov	r1, r9
 8007610:	414b      	adcs	r3, r1
 8007612:	637b      	str	r3, [r7, #52]	; 0x34
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007620:	4659      	mov	r1, fp
 8007622:	00cb      	lsls	r3, r1, #3
 8007624:	4651      	mov	r1, sl
 8007626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800762a:	4651      	mov	r1, sl
 800762c:	00ca      	lsls	r2, r1, #3
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	4603      	mov	r3, r0
 8007634:	4642      	mov	r2, r8
 8007636:	189b      	adds	r3, r3, r2
 8007638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800763c:	464b      	mov	r3, r9
 800763e:	460a      	mov	r2, r1
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800765c:	460b      	mov	r3, r1
 800765e:	18db      	adds	r3, r3, r3
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 8007662:	4613      	mov	r3, r2
 8007664:	eb42 0303 	adc.w	r3, r2, r3
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800766e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007672:	f7f9 fb19 	bl	8000ca8 <__aeabi_uldivmod>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <UART_SetConfig+0x2d4>)
 800767c:	fba3 1302 	umull	r1, r3, r3, r2
 8007680:	095b      	lsrs	r3, r3, #5
 8007682:	2164      	movs	r1, #100	; 0x64
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	3332      	adds	r3, #50	; 0x32
 800768e:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <UART_SetConfig+0x2d4>)
 8007690:	fba2 2303 	umull	r2, r3, r2, r3
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	f003 0207 	and.w	r2, r3, #7
 800769a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4422      	add	r2, r4
 80076a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076a4:	e105      	b.n	80078b2 <UART_SetConfig+0x4d6>
 80076a6:	bf00      	nop
 80076a8:	40011000 	.word	0x40011000
 80076ac:	40011400 	.word	0x40011400
 80076b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076c6:	4642      	mov	r2, r8
 80076c8:	464b      	mov	r3, r9
 80076ca:	1891      	adds	r1, r2, r2
 80076cc:	6239      	str	r1, [r7, #32]
 80076ce:	415b      	adcs	r3, r3
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
 80076d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076d6:	4641      	mov	r1, r8
 80076d8:	1854      	adds	r4, r2, r1
 80076da:	4649      	mov	r1, r9
 80076dc:	eb43 0501 	adc.w	r5, r3, r1
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	00eb      	lsls	r3, r5, #3
 80076ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ee:	00e2      	lsls	r2, r4, #3
 80076f0:	4614      	mov	r4, r2
 80076f2:	461d      	mov	r5, r3
 80076f4:	4643      	mov	r3, r8
 80076f6:	18e3      	adds	r3, r4, r3
 80076f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076fc:	464b      	mov	r3, r9
 80076fe:	eb45 0303 	adc.w	r3, r5, r3
 8007702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007722:	4629      	mov	r1, r5
 8007724:	008b      	lsls	r3, r1, #2
 8007726:	4621      	mov	r1, r4
 8007728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800772c:	4621      	mov	r1, r4
 800772e:	008a      	lsls	r2, r1, #2
 8007730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007734:	f7f9 fab8 	bl	8000ca8 <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4b60      	ldr	r3, [pc, #384]	; (80078c0 <UART_SetConfig+0x4e4>)
 800773e:	fba3 2302 	umull	r2, r3, r3, r2
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	011c      	lsls	r4, r3, #4
 8007746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	1891      	adds	r1, r2, r2
 800775e:	61b9      	str	r1, [r7, #24]
 8007760:	415b      	adcs	r3, r3
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007768:	4641      	mov	r1, r8
 800776a:	1851      	adds	r1, r2, r1
 800776c:	6139      	str	r1, [r7, #16]
 800776e:	4649      	mov	r1, r9
 8007770:	414b      	adcs	r3, r1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007780:	4659      	mov	r1, fp
 8007782:	00cb      	lsls	r3, r1, #3
 8007784:	4651      	mov	r1, sl
 8007786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800778a:	4651      	mov	r1, sl
 800778c:	00ca      	lsls	r2, r1, #3
 800778e:	4610      	mov	r0, r2
 8007790:	4619      	mov	r1, r3
 8007792:	4603      	mov	r3, r0
 8007794:	4642      	mov	r2, r8
 8007796:	189b      	adds	r3, r3, r2
 8007798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800779c:	464b      	mov	r3, r9
 800779e:	460a      	mov	r2, r1
 80077a0:	eb42 0303 	adc.w	r3, r2, r3
 80077a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077c0:	4649      	mov	r1, r9
 80077c2:	008b      	lsls	r3, r1, #2
 80077c4:	4641      	mov	r1, r8
 80077c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ca:	4641      	mov	r1, r8
 80077cc:	008a      	lsls	r2, r1, #2
 80077ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077d2:	f7f9 fa69 	bl	8000ca8 <__aeabi_uldivmod>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4b39      	ldr	r3, [pc, #228]	; (80078c0 <UART_SetConfig+0x4e4>)
 80077dc:	fba3 1302 	umull	r1, r3, r3, r2
 80077e0:	095b      	lsrs	r3, r3, #5
 80077e2:	2164      	movs	r1, #100	; 0x64
 80077e4:	fb01 f303 	mul.w	r3, r1, r3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	3332      	adds	r3, #50	; 0x32
 80077ee:	4a34      	ldr	r2, [pc, #208]	; (80078c0 <UART_SetConfig+0x4e4>)
 80077f0:	fba2 2303 	umull	r2, r3, r2, r3
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077fa:	441c      	add	r4, r3
 80077fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007800:	2200      	movs	r2, #0
 8007802:	673b      	str	r3, [r7, #112]	; 0x70
 8007804:	677a      	str	r2, [r7, #116]	; 0x74
 8007806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800780a:	4642      	mov	r2, r8
 800780c:	464b      	mov	r3, r9
 800780e:	1891      	adds	r1, r2, r2
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	415b      	adcs	r3, r3
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800781a:	4641      	mov	r1, r8
 800781c:	1851      	adds	r1, r2, r1
 800781e:	6039      	str	r1, [r7, #0]
 8007820:	4649      	mov	r1, r9
 8007822:	414b      	adcs	r3, r1
 8007824:	607b      	str	r3, [r7, #4]
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007832:	4659      	mov	r1, fp
 8007834:	00cb      	lsls	r3, r1, #3
 8007836:	4651      	mov	r1, sl
 8007838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783c:	4651      	mov	r1, sl
 800783e:	00ca      	lsls	r2, r1, #3
 8007840:	4610      	mov	r0, r2
 8007842:	4619      	mov	r1, r3
 8007844:	4603      	mov	r3, r0
 8007846:	4642      	mov	r2, r8
 8007848:	189b      	adds	r3, r3, r2
 800784a:	66bb      	str	r3, [r7, #104]	; 0x68
 800784c:	464b      	mov	r3, r9
 800784e:	460a      	mov	r2, r1
 8007850:	eb42 0303 	adc.w	r3, r2, r3
 8007854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	663b      	str	r3, [r7, #96]	; 0x60
 8007860:	667a      	str	r2, [r7, #100]	; 0x64
 8007862:	f04f 0200 	mov.w	r2, #0
 8007866:	f04f 0300 	mov.w	r3, #0
 800786a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800786e:	4649      	mov	r1, r9
 8007870:	008b      	lsls	r3, r1, #2
 8007872:	4641      	mov	r1, r8
 8007874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007878:	4641      	mov	r1, r8
 800787a:	008a      	lsls	r2, r1, #2
 800787c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007880:	f7f9 fa12 	bl	8000ca8 <__aeabi_uldivmod>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <UART_SetConfig+0x4e4>)
 800788a:	fba3 1302 	umull	r1, r3, r3, r2
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	2164      	movs	r1, #100	; 0x64
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	3332      	adds	r3, #50	; 0x32
 800789c:	4a08      	ldr	r2, [pc, #32]	; (80078c0 <UART_SetConfig+0x4e4>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	f003 020f 	and.w	r2, r3, #15
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4422      	add	r2, r4
 80078b0:	609a      	str	r2, [r3, #8]
}
 80078b2:	bf00      	nop
 80078b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	51eb851f 	.word	0x51eb851f

080078c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80078d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078d6:	2b84      	cmp	r3, #132	; 0x84
 80078d8:	d005      	beq.n	80078e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80078da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4413      	add	r3, r2
 80078e2:	3303      	adds	r3, #3
 80078e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80078e6:	68fb      	ldr	r3, [r7, #12]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078f8:	f000 ffb2 	bl	8008860 <vTaskStartScheduler>
  
  return osOK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	bd80      	pop	{r7, pc}

08007902 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007904:	b089      	sub	sp, #36	; 0x24
 8007906:	af04      	add	r7, sp, #16
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d020      	beq.n	8007956 <osThreadCreate+0x54>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01c      	beq.n	8007956 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685c      	ldr	r4, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681d      	ldr	r5, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691e      	ldr	r6, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff ffc8 	bl	80078c4 <makeFreeRtosPriority>
 8007934:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800793e:	9202      	str	r2, [sp, #8]
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	9100      	str	r1, [sp, #0]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	4632      	mov	r2, r6
 8007948:	4629      	mov	r1, r5
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fdc0 	bl	80084d0 <xTaskCreateStatic>
 8007950:	4603      	mov	r3, r0
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	e01c      	b.n	8007990 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685c      	ldr	r4, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007962:	b29e      	uxth	r6, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff ffaa 	bl	80078c4 <makeFreeRtosPriority>
 8007970:	4602      	mov	r2, r0
 8007972:	f107 030c 	add.w	r3, r7, #12
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	9200      	str	r2, [sp, #0]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	4632      	mov	r2, r6
 800797e:	4629      	mov	r1, r5
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fe02 	bl	800858a <xTaskCreate>
 8007986:	4603      	mov	r3, r0
 8007988:	2b01      	cmp	r3, #1
 800798a:	d001      	beq.n	8007990 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800798c:	2300      	movs	r3, #0
 800798e:	e000      	b.n	8007992 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007990:	68fb      	ldr	r3, [r7, #12]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800799a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <osDelay+0x16>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e000      	b.n	80079b2 <osDelay+0x18>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 ff20 	bl	80087f8 <vTaskDelay>
  
  return osOK;
 80079b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	4619      	mov	r1, r3
 80079d8:	2001      	movs	r0, #1
 80079da:	f000 fa52 	bl	8007e82 <xQueueCreateMutexStatic>
 80079de:	4603      	mov	r3, r0
 80079e0:	e003      	b.n	80079ea <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80079e2:	2001      	movs	r0, #1
 80079e4:	f000 fa35 	bl	8007e52 <xQueueCreateMutex>
 80079e8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80079f2:	b590      	push	{r4, r7, lr}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af02      	add	r7, sp, #8
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d011      	beq.n	8007a28 <osMessageCreate+0x36>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00d      	beq.n	8007a28 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	2400      	movs	r4, #0
 8007a1e:	9400      	str	r4, [sp, #0]
 8007a20:	f000 f92c 	bl	8007c7c <xQueueGenericCreateStatic>
 8007a24:	4603      	mov	r3, r0
 8007a26:	e008      	b.n	8007a3a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	4619      	mov	r1, r3
 8007a34:	f000 f99a 	bl	8007d6c <xQueueGenericCreate>
 8007a38:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd90      	pop	{r4, r7, pc}

08007a42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f103 0208 	add.w	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f103 0208 	add.w	r2, r3, #8
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f103 0208 	add.w	r2, r3, #8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007afa:	d103      	bne.n	8007b04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	e00c      	b.n	8007b1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3308      	adds	r3, #8
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	e002      	b.n	8007b12 <vListInsert+0x2e>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d2f6      	bcs.n	8007b0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6892      	ldr	r2, [r2, #8]
 8007b6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6852      	ldr	r2, [r2, #4]
 8007b76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d103      	bne.n	8007b8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	1e5a      	subs	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007bd6:	f001 fd8d 	bl	80096f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	441a      	add	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	3b01      	subs	r3, #1
 8007c08:	68f9      	ldr	r1, [r7, #12]
 8007c0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	441a      	add	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	22ff      	movs	r2, #255	; 0xff
 8007c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	22ff      	movs	r2, #255	; 0xff
 8007c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d114      	bne.n	8007c56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01a      	beq.n	8007c6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3310      	adds	r3, #16
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 f853 	bl	8008ce4 <xTaskRemoveFromEventList>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d012      	beq.n	8007c6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <xQueueGenericReset+0xcc>)
 8007c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	e009      	b.n	8007c6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3310      	adds	r3, #16
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fef1 	bl	8007a42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff feec 	bl	8007a42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c6a:	f001 fd73 	bl	8009754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c6e:	2301      	movs	r3, #1
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08e      	sub	sp, #56	; 0x38
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <xQueueGenericCreateStatic+0x52>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <xQueueGenericCreateStatic+0x56>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <xQueueGenericCreateStatic+0x58>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	623b      	str	r3, [r7, #32]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <xQueueGenericCreateStatic+0x7e>
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <xQueueGenericCreateStatic+0x82>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e000      	b.n	8007d00 <xQueueGenericCreateStatic+0x84>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	61fb      	str	r3, [r7, #28]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d1a:	2348      	movs	r3, #72	; 0x48
 8007d1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b48      	cmp	r3, #72	; 0x48
 8007d22:	d00a      	beq.n	8007d3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	61bb      	str	r3, [r7, #24]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	4613      	mov	r3, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f83f 	bl	8007de0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3730      	adds	r7, #48	; 0x30
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	; 0x28
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	613b      	str	r3, [r7, #16]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	fb02 f303 	mul.w	r3, r2, r3
 8007d9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	3348      	adds	r3, #72	; 0x48
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 fd87 	bl	80098b8 <pvPortMalloc>
 8007daa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d011      	beq.n	8007dd6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	3348      	adds	r3, #72	; 0x48
 8007dba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dc4:	79fa      	ldrb	r2, [r7, #7]
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f805 	bl	8007de0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3720      	adds	r7, #32
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e002      	b.n	8007e02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e0e:	2101      	movs	r1, #1
 8007e10:	69b8      	ldr	r0, [r7, #24]
 8007e12:	f7ff fecb 	bl	8007bac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e16:	bf00      	nop
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00e      	beq.n	8007e4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2200      	movs	r2, #0
 8007e42:	2100      	movs	r1, #0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f837 	bl	8007eb8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b086      	sub	sp, #24
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	4603      	mov	r3, r0
 8007e5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	2300      	movs	r3, #0
 8007e62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6939      	ldr	r1, [r7, #16]
 8007e6a:	6978      	ldr	r0, [r7, #20]
 8007e6c:	f7ff ff7e 	bl	8007d6c <xQueueGenericCreate>
 8007e70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff ffd3 	bl	8007e1e <prvInitialiseMutex>

		return xNewQueue;
 8007e78:	68fb      	ldr	r3, [r7, #12]
	}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b088      	sub	sp, #32
 8007e86:	af02      	add	r7, sp, #8
 8007e88:	4603      	mov	r3, r0
 8007e8a:	6039      	str	r1, [r7, #0]
 8007e8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	6939      	ldr	r1, [r7, #16]
 8007ea0:	6978      	ldr	r0, [r7, #20]
 8007ea2:	f7ff feeb 	bl	8007c7c <xQueueGenericCreateStatic>
 8007ea6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff ffb8 	bl	8007e1e <prvInitialiseMutex>

		return xNewQueue;
 8007eae:	68fb      	ldr	r3, [r7, #12]
	}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08e      	sub	sp, #56	; 0x38
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10a      	bne.n	8007eea <xQueueGenericSend+0x32>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <xQueueGenericSend+0x40>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <xQueueGenericSend+0x44>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e000      	b.n	8007efe <xQueueGenericSend+0x46>
 8007efc:	2300      	movs	r3, #0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <xQueueGenericSend+0x60>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d103      	bne.n	8007f26 <xQueueGenericSend+0x6e>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <xQueueGenericSend+0x72>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <xQueueGenericSend+0x74>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <xQueueGenericSend+0x8e>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	623b      	str	r3, [r7, #32]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f46:	f001 f889 	bl	800905c <xTaskGetSchedulerState>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <xQueueGenericSend+0x9e>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <xQueueGenericSend+0xa2>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <xQueueGenericSend+0xa4>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61fb      	str	r3, [r7, #28]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f76:	f001 fbbd 	bl	80096f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d302      	bcc.n	8007f8c <xQueueGenericSend+0xd4>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d129      	bne.n	8007fe0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f92:	f000 f9b3 	bl	80082fc <prvCopyDataToQueue>
 8007f96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d010      	beq.n	8007fc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	3324      	adds	r3, #36	; 0x24
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fe9d 	bl	8008ce4 <xTaskRemoveFromEventList>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d013      	beq.n	8007fd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fb0:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <xQueueGenericSend+0x1f8>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	e00a      	b.n	8007fd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fc8:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <xQueueGenericSend+0x1f8>)
 8007fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fd8:	f001 fbbc 	bl	8009754 <vPortExitCritical>
				return pdPASS;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e063      	b.n	80080a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d103      	bne.n	8007fee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fe6:	f001 fbb5 	bl	8009754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e05c      	b.n	80080a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ff4:	f107 0314 	add.w	r3, r7, #20
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fed5 	bl	8008da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008002:	f001 fba7 	bl	8009754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008006:	f000 fc8b 	bl	8008920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800800a:	f001 fb73 	bl	80096f4 <vPortEnterCritical>
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008014:	b25b      	sxtb	r3, r3
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801a:	d103      	bne.n	8008024 <xQueueGenericSend+0x16c>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802a:	b25b      	sxtb	r3, r3
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008030:	d103      	bne.n	800803a <xQueueGenericSend+0x182>
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800803a:	f001 fb8b 	bl	8009754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800803e:	1d3a      	adds	r2, r7, #4
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fec4 	bl	8008dd4 <xTaskCheckForTimeOut>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d124      	bne.n	800809c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008054:	f000 fa24 	bl	80084a0 <prvIsQueueFull>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	3310      	adds	r3, #16
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fe18 	bl	8008c9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800806c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800806e:	f000 f9af 	bl	80083d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008072:	f000 fc63 	bl	800893c <xTaskResumeAll>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	f47f af7c 	bne.w	8007f76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <xQueueGenericSend+0x1f8>)
 8008080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	e772      	b.n	8007f76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008092:	f000 f99d 	bl	80083d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008096:	f000 fc51 	bl	800893c <xTaskResumeAll>
 800809a:	e76c      	b.n	8007f76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800809c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809e:	f000 f997 	bl	80083d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a2:	f000 fc4b 	bl	800893c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3738      	adds	r7, #56	; 0x38
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08e      	sub	sp, #56	; 0x38
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080be:	2300      	movs	r3, #0
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	623b      	str	r3, [r7, #32]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	61fb      	str	r3, [r7, #28]
}
 8008100:	bf00      	nop
 8008102:	e7fe      	b.n	8008102 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008104:	f000 ffaa 	bl	800905c <xTaskGetSchedulerState>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <xQueueSemaphoreTake+0x60>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <xQueueSemaphoreTake+0x64>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <xQueueSemaphoreTake+0x66>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10a      	bne.n	8008134 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	61bb      	str	r3, [r7, #24]
}
 8008130:	bf00      	nop
 8008132:	e7fe      	b.n	8008132 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008134:	f001 fade 	bl	80096f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	2b00      	cmp	r3, #0
 8008142:	d024      	beq.n	800818e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	1e5a      	subs	r2, r3, #1
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008154:	f001 f92a 	bl	80093ac <pvTaskIncrementMutexHeldCount>
 8008158:	4602      	mov	r2, r0
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00f      	beq.n	8008186 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	3310      	adds	r3, #16
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fdba 	bl	8008ce4 <xTaskRemoveFromEventList>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d007      	beq.n	8008186 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008176:	4b54      	ldr	r3, [pc, #336]	; (80082c8 <xQueueSemaphoreTake+0x214>)
 8008178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008186:	f001 fae5 	bl	8009754 <vPortExitCritical>
				return pdPASS;
 800818a:	2301      	movs	r3, #1
 800818c:	e097      	b.n	80082be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d111      	bne.n	80081b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	617b      	str	r3, [r7, #20]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081b0:	f001 fad0 	bl	8009754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e082      	b.n	80082be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081be:	f107 030c 	add.w	r3, r7, #12
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fdf0 	bl	8008da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081cc:	f001 fac2 	bl	8009754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081d0:	f000 fba6 	bl	8008920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081d4:	f001 fa8e 	bl	80096f4 <vPortEnterCritical>
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081de:	b25b      	sxtb	r3, r3
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e4:	d103      	bne.n	80081ee <xQueueSemaphoreTake+0x13a>
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081f4:	b25b      	sxtb	r3, r3
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081fa:	d103      	bne.n	8008204 <xQueueSemaphoreTake+0x150>
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008204:	f001 faa6 	bl	8009754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008208:	463a      	mov	r2, r7
 800820a:	f107 030c 	add.w	r3, r7, #12
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fddf 	bl	8008dd4 <xTaskCheckForTimeOut>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d132      	bne.n	8008282 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800821c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800821e:	f000 f929 	bl	8008474 <prvIsQueueEmpty>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d026      	beq.n	8008276 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008230:	f001 fa60 	bl	80096f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 ff2d 	bl	8009098 <xTaskPriorityInherit>
 800823e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008240:	f001 fa88 	bl	8009754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	3324      	adds	r3, #36	; 0x24
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fd25 	bl	8008c9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008254:	f000 f8bc 	bl	80083d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008258:	f000 fb70 	bl	800893c <xTaskResumeAll>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	f47f af68 	bne.w	8008134 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008264:	4b18      	ldr	r3, [pc, #96]	; (80082c8 <xQueueSemaphoreTake+0x214>)
 8008266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	e75e      	b.n	8008134 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008278:	f000 f8aa 	bl	80083d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800827c:	f000 fb5e 	bl	800893c <xTaskResumeAll>
 8008280:	e758      	b.n	8008134 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008284:	f000 f8a4 	bl	80083d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008288:	f000 fb58 	bl	800893c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800828c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800828e:	f000 f8f1 	bl	8008474 <prvIsQueueEmpty>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	f43f af4d 	beq.w	8008134 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00d      	beq.n	80082bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80082a0:	f001 fa28 	bl	80096f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082a6:	f000 f811 	bl	80082cc <prvGetDisinheritPriorityAfterTimeout>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 ffec 	bl	8009290 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80082b8:	f001 fa4c 	bl	8009754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3738      	adds	r7, #56	; 0x38
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d006      	beq.n	80082ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f1c3 0307 	rsb	r3, r3, #7
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e001      	b.n	80082ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80082ee:	68fb      	ldr	r3, [r7, #12]
	}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10d      	bne.n	8008336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d14d      	bne.n	80083be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 ff2c 	bl	8009184 <xTaskPriorityDisinherit>
 800832c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	609a      	str	r2, [r3, #8]
 8008334:	e043      	b.n	80083be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d119      	bne.n	8008370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6858      	ldr	r0, [r3, #4]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	461a      	mov	r2, r3
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	f001 fcca 	bl	8009ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	429a      	cmp	r2, r3
 8008364:	d32b      	bcc.n	80083be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	605a      	str	r2, [r3, #4]
 800836e:	e026      	b.n	80083be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	68d8      	ldr	r0, [r3, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	461a      	mov	r2, r3
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	f001 fcb0 	bl	8009ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008388:	425b      	negs	r3, r3
 800838a:	441a      	add	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d207      	bcs.n	80083ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	425b      	negs	r3, r3
 80083a6:	441a      	add	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d105      	bne.n	80083be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083c6:	697b      	ldr	r3, [r7, #20]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083d8:	f001 f98c 	bl	80096f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083e4:	e011      	b.n	800840a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d012      	beq.n	8008414 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3324      	adds	r3, #36	; 0x24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fc76 	bl	8008ce4 <xTaskRemoveFromEventList>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083fe:	f000 fd4b 	bl	8008e98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	3b01      	subs	r3, #1
 8008406:	b2db      	uxtb	r3, r3
 8008408:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800840a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800840e:	2b00      	cmp	r3, #0
 8008410:	dce9      	bgt.n	80083e6 <prvUnlockQueue+0x16>
 8008412:	e000      	b.n	8008416 <prvUnlockQueue+0x46>
					break;
 8008414:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	22ff      	movs	r2, #255	; 0xff
 800841a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800841e:	f001 f999 	bl	8009754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008422:	f001 f967 	bl	80096f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800842c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800842e:	e011      	b.n	8008454 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d012      	beq.n	800845e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3310      	adds	r3, #16
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fc51 	bl	8008ce4 <xTaskRemoveFromEventList>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008448:	f000 fd26 	bl	8008e98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	3b01      	subs	r3, #1
 8008450:	b2db      	uxtb	r3, r3
 8008452:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008458:	2b00      	cmp	r3, #0
 800845a:	dce9      	bgt.n	8008430 <prvUnlockQueue+0x60>
 800845c:	e000      	b.n	8008460 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800845e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	22ff      	movs	r2, #255	; 0xff
 8008464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008468:	f001 f974 	bl	8009754 <vPortExitCritical>
}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800847c:	f001 f93a 	bl	80096f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	e001      	b.n	8008492 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008492:	f001 f95f 	bl	8009754 <vPortExitCritical>

	return xReturn;
 8008496:	68fb      	ldr	r3, [r7, #12]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084a8:	f001 f924 	bl	80096f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d102      	bne.n	80084be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e001      	b.n	80084c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084c2:	f001 f947 	bl	8009754 <vPortExitCritical>

	return xReturn;
 80084c6:	68fb      	ldr	r3, [r7, #12]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08e      	sub	sp, #56	; 0x38
 80084d4:	af04      	add	r7, sp, #16
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	623b      	str	r3, [r7, #32]
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xTaskCreateStatic+0x46>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	61fb      	str	r3, [r7, #28]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008516:	2354      	movs	r3, #84	; 0x54
 8008518:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2b54      	cmp	r3, #84	; 0x54
 800851e:	d00a      	beq.n	8008536 <xTaskCreateStatic+0x66>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	61bb      	str	r3, [r7, #24]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008536:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01e      	beq.n	800857c <xTaskCreateStatic+0xac>
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01b      	beq.n	800857c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800854c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	2202      	movs	r2, #2
 8008552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008556:	2300      	movs	r3, #0
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	9302      	str	r3, [sp, #8]
 800855e:	f107 0314 	add.w	r3, r7, #20
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f850 	bl	8008614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008576:	f000 f8d5 	bl	8008724 <prvAddNewTaskToReadyList>
 800857a:	e001      	b.n	8008580 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008580:	697b      	ldr	r3, [r7, #20]
	}
 8008582:	4618      	mov	r0, r3
 8008584:	3728      	adds	r7, #40	; 0x28
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800858a:	b580      	push	{r7, lr}
 800858c:	b08c      	sub	sp, #48	; 0x30
 800858e:	af04      	add	r7, sp, #16
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	4613      	mov	r3, r2
 8008598:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 f98a 	bl	80098b8 <pvPortMalloc>
 80085a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00e      	beq.n	80085ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085ac:	2054      	movs	r0, #84	; 0x54
 80085ae:	f001 f983 	bl	80098b8 <pvPortMalloc>
 80085b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	631a      	str	r2, [r3, #48]	; 0x30
 80085c0:	e005      	b.n	80085ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085c2:	6978      	ldr	r0, [r7, #20]
 80085c4:	f001 fa44 	bl	8009a50 <vPortFree>
 80085c8:	e001      	b.n	80085ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d017      	beq.n	8008604 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085dc:	88fa      	ldrh	r2, [r7, #6]
 80085de:	2300      	movs	r3, #0
 80085e0:	9303      	str	r3, [sp, #12]
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	9302      	str	r3, [sp, #8]
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 f80e 	bl	8008614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085f8:	69f8      	ldr	r0, [r7, #28]
 80085fa:	f000 f893 	bl	8008724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085fe:	2301      	movs	r3, #1
 8008600:	61bb      	str	r3, [r7, #24]
 8008602:	e002      	b.n	800860a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008608:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800860a:	69bb      	ldr	r3, [r7, #24]
	}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800862c:	3b01      	subs	r3, #1
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	f023 0307 	bic.w	r3, r3, #7
 800863a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	617b      	str	r3, [r7, #20]
}
 8008658:	bf00      	nop
 800865a:	e7fe      	b.n	800865a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01f      	beq.n	80086a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008662:	2300      	movs	r3, #0
 8008664:	61fb      	str	r3, [r7, #28]
 8008666:	e012      	b.n	800868e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	7819      	ldrb	r1, [r3, #0]
 8008670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	3334      	adds	r3, #52	; 0x34
 8008678:	460a      	mov	r2, r1
 800867a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d006      	beq.n	8008696 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	3301      	adds	r3, #1
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	2b0f      	cmp	r3, #15
 8008692:	d9e9      	bls.n	8008668 <prvInitialiseNewTask+0x54>
 8008694:	e000      	b.n	8008698 <prvInitialiseNewTask+0x84>
			{
				break;
 8008696:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086a0:	e003      	b.n	80086aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	2b06      	cmp	r3, #6
 80086ae:	d901      	bls.n	80086b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086b0:	2306      	movs	r3, #6
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	2200      	movs	r2, #0
 80086c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	3304      	adds	r3, #4
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff f9d9 	bl	8007a82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	3318      	adds	r3, #24
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff f9d4 	bl	8007a82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f1c3 0207 	rsb	r2, r3, #7
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	2200      	movs	r2, #0
 80086f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	68f9      	ldr	r1, [r7, #12]
 8008702:	69b8      	ldr	r0, [r7, #24]
 8008704:	f000 fecc 	bl	80094a0 <pxPortInitialiseStack>
 8008708:	4602      	mov	r2, r0
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800871a:	bf00      	nop
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800872c:	f000 ffe2 	bl	80096f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008730:	4b2a      	ldr	r3, [pc, #168]	; (80087dc <prvAddNewTaskToReadyList+0xb8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a29      	ldr	r2, [pc, #164]	; (80087dc <prvAddNewTaskToReadyList+0xb8>)
 8008738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800873a:	4b29      	ldr	r3, [pc, #164]	; (80087e0 <prvAddNewTaskToReadyList+0xbc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008742:	4a27      	ldr	r2, [pc, #156]	; (80087e0 <prvAddNewTaskToReadyList+0xbc>)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008748:	4b24      	ldr	r3, [pc, #144]	; (80087dc <prvAddNewTaskToReadyList+0xb8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d110      	bne.n	8008772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008750:	f000 fbc6 	bl	8008ee0 <prvInitialiseTaskLists>
 8008754:	e00d      	b.n	8008772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008756:	4b23      	ldr	r3, [pc, #140]	; (80087e4 <prvAddNewTaskToReadyList+0xc0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800875e:	4b20      	ldr	r3, [pc, #128]	; (80087e0 <prvAddNewTaskToReadyList+0xbc>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	429a      	cmp	r2, r3
 800876a:	d802      	bhi.n	8008772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800876c:	4a1c      	ldr	r2, [pc, #112]	; (80087e0 <prvAddNewTaskToReadyList+0xbc>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008772:	4b1d      	ldr	r3, [pc, #116]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	4a1b      	ldr	r2, [pc, #108]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 800877a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	2201      	movs	r2, #1
 8008782:	409a      	lsls	r2, r3
 8008784:	4b19      	ldr	r3, [pc, #100]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4313      	orrs	r3, r2
 800878a:	4a18      	ldr	r2, [pc, #96]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4a15      	ldr	r2, [pc, #84]	; (80087f0 <prvAddNewTaskToReadyList+0xcc>)
 800879c:	441a      	add	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f7ff f979 	bl	8007a9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087aa:	f000 ffd3 	bl	8009754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <prvAddNewTaskToReadyList+0xc0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087b6:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <prvAddNewTaskToReadyList+0xbc>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d207      	bcs.n	80087d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087c4:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <prvAddNewTaskToReadyList+0xd0>)
 80087c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20000ab8 	.word	0x20000ab8
 80087e0:	200009b8 	.word	0x200009b8
 80087e4:	20000ac4 	.word	0x20000ac4
 80087e8:	20000ad4 	.word	0x20000ad4
 80087ec:	20000ac0 	.word	0x20000ac0
 80087f0:	200009bc 	.word	0x200009bc
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d017      	beq.n	800883a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800880a:	4b13      	ldr	r3, [pc, #76]	; (8008858 <vTaskDelay+0x60>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <vTaskDelay+0x30>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	60bb      	str	r3, [r7, #8]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008828:	f000 f87a 	bl	8008920 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800882c:	2100      	movs	r1, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fdd0 	bl	80093d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008834:	f000 f882 	bl	800893c <xTaskResumeAll>
 8008838:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d107      	bne.n	8008850 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <vTaskDelay+0x64>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000ae0 	.word	0x20000ae0
 800885c:	e000ed04 	.word	0xe000ed04

08008860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800886e:	463a      	mov	r2, r7
 8008870:	1d39      	adds	r1, r7, #4
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4618      	mov	r0, r3
 8008878:	f7fa f938 	bl	8002aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	9202      	str	r2, [sp, #8]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	2300      	movs	r3, #0
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	2300      	movs	r3, #0
 800888c:	460a      	mov	r2, r1
 800888e:	491e      	ldr	r1, [pc, #120]	; (8008908 <vTaskStartScheduler+0xa8>)
 8008890:	481e      	ldr	r0, [pc, #120]	; (800890c <vTaskStartScheduler+0xac>)
 8008892:	f7ff fe1d 	bl	80084d0 <xTaskCreateStatic>
 8008896:	4603      	mov	r3, r0
 8008898:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <vTaskStartScheduler+0xb0>)
 800889a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800889c:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <vTaskStartScheduler+0xb0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e001      	b.n	80088ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d116      	bne.n	80088e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	613b      	str	r3, [r7, #16]
}
 80088c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088c8:	4b12      	ldr	r3, [pc, #72]	; (8008914 <vTaskStartScheduler+0xb4>)
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088d0:	4b11      	ldr	r3, [pc, #68]	; (8008918 <vTaskStartScheduler+0xb8>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088d6:	4b11      	ldr	r3, [pc, #68]	; (800891c <vTaskStartScheduler+0xbc>)
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088dc:	f000 fe68 	bl	80095b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088e0:	e00e      	b.n	8008900 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088e8:	d10a      	bne.n	8008900 <vTaskStartScheduler+0xa0>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	60fb      	str	r3, [r7, #12]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <vTaskStartScheduler+0x9e>
}
 8008900:	bf00      	nop
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	0800e698 	.word	0x0800e698
 800890c:	08008eb1 	.word	0x08008eb1
 8008910:	20000adc 	.word	0x20000adc
 8008914:	20000ad8 	.word	0x20000ad8
 8008918:	20000ac4 	.word	0x20000ac4
 800891c:	20000abc 	.word	0x20000abc

08008920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <vTaskSuspendAll+0x18>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	4a03      	ldr	r2, [pc, #12]	; (8008938 <vTaskSuspendAll+0x18>)
 800892c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800892e:	bf00      	nop
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	20000ae0 	.word	0x20000ae0

0800893c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800894a:	4b41      	ldr	r3, [pc, #260]	; (8008a50 <xTaskResumeAll+0x114>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <xTaskResumeAll+0x2c>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	603b      	str	r3, [r7, #0]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008968:	f000 fec4 	bl	80096f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800896c:	4b38      	ldr	r3, [pc, #224]	; (8008a50 <xTaskResumeAll+0x114>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3b01      	subs	r3, #1
 8008972:	4a37      	ldr	r2, [pc, #220]	; (8008a50 <xTaskResumeAll+0x114>)
 8008974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008976:	4b36      	ldr	r3, [pc, #216]	; (8008a50 <xTaskResumeAll+0x114>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d161      	bne.n	8008a42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800897e:	4b35      	ldr	r3, [pc, #212]	; (8008a54 <xTaskResumeAll+0x118>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05d      	beq.n	8008a42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008986:	e02e      	b.n	80089e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008988:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <xTaskResumeAll+0x11c>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3318      	adds	r3, #24
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff f8de 	bl	8007b56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f8d9 	bl	8007b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	2201      	movs	r2, #1
 80089aa:	409a      	lsls	r2, r3
 80089ac:	4b2b      	ldr	r3, [pc, #172]	; (8008a5c <xTaskResumeAll+0x120>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	4a2a      	ldr	r2, [pc, #168]	; (8008a5c <xTaskResumeAll+0x120>)
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4a27      	ldr	r2, [pc, #156]	; (8008a60 <xTaskResumeAll+0x124>)
 80089c4:	441a      	add	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4619      	mov	r1, r3
 80089cc:	4610      	mov	r0, r2
 80089ce:	f7ff f865 	bl	8007a9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d6:	4b23      	ldr	r3, [pc, #140]	; (8008a64 <xTaskResumeAll+0x128>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	429a      	cmp	r2, r3
 80089de:	d302      	bcc.n	80089e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80089e0:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <xTaskResumeAll+0x12c>)
 80089e2:	2201      	movs	r2, #1
 80089e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089e6:	4b1c      	ldr	r3, [pc, #112]	; (8008a58 <xTaskResumeAll+0x11c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1cc      	bne.n	8008988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089f4:	f000 fb12 	bl	800901c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <xTaskResumeAll+0x130>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d010      	beq.n	8008a26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a04:	f000 f836 	bl	8008a74 <xTaskIncrementTick>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008a0e:	4b16      	ldr	r3, [pc, #88]	; (8008a68 <xTaskResumeAll+0x12c>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f1      	bne.n	8008a04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008a20:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <xTaskResumeAll+0x130>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <xTaskResumeAll+0x12c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a32:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <xTaskResumeAll+0x134>)
 8008a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a42:	f000 fe87 	bl	8009754 <vPortExitCritical>

	return xAlreadyYielded;
 8008a46:	68bb      	ldr	r3, [r7, #8]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000ae0 	.word	0x20000ae0
 8008a54:	20000ab8 	.word	0x20000ab8
 8008a58:	20000a78 	.word	0x20000a78
 8008a5c:	20000ac0 	.word	0x20000ac0
 8008a60:	200009bc 	.word	0x200009bc
 8008a64:	200009b8 	.word	0x200009b8
 8008a68:	20000acc 	.word	0x20000acc
 8008a6c:	20000ac8 	.word	0x20000ac8
 8008a70:	e000ed04 	.word	0xe000ed04

08008a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a7e:	4b4e      	ldr	r3, [pc, #312]	; (8008bb8 <xTaskIncrementTick+0x144>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 808e 	bne.w	8008ba4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a88:	4b4c      	ldr	r3, [pc, #304]	; (8008bbc <xTaskIncrementTick+0x148>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a90:	4a4a      	ldr	r2, [pc, #296]	; (8008bbc <xTaskIncrementTick+0x148>)
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d120      	bne.n	8008ade <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a9c:	4b48      	ldr	r3, [pc, #288]	; (8008bc0 <xTaskIncrementTick+0x14c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <xTaskIncrementTick+0x48>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	603b      	str	r3, [r7, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <xTaskIncrementTick+0x46>
 8008abc:	4b40      	ldr	r3, [pc, #256]	; (8008bc0 <xTaskIncrementTick+0x14c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	4b40      	ldr	r3, [pc, #256]	; (8008bc4 <xTaskIncrementTick+0x150>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a3e      	ldr	r2, [pc, #248]	; (8008bc0 <xTaskIncrementTick+0x14c>)
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	4a3e      	ldr	r2, [pc, #248]	; (8008bc4 <xTaskIncrementTick+0x150>)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	4b3d      	ldr	r3, [pc, #244]	; (8008bc8 <xTaskIncrementTick+0x154>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	4a3c      	ldr	r2, [pc, #240]	; (8008bc8 <xTaskIncrementTick+0x154>)
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	f000 fa9f 	bl	800901c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ade:	4b3b      	ldr	r3, [pc, #236]	; (8008bcc <xTaskIncrementTick+0x158>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d348      	bcc.n	8008b7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ae8:	4b35      	ldr	r3, [pc, #212]	; (8008bc0 <xTaskIncrementTick+0x14c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af2:	4b36      	ldr	r3, [pc, #216]	; (8008bcc <xTaskIncrementTick+0x158>)
 8008af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008af8:	601a      	str	r2, [r3, #0]
					break;
 8008afa:	e03e      	b.n	8008b7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afc:	4b30      	ldr	r3, [pc, #192]	; (8008bc0 <xTaskIncrementTick+0x14c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d203      	bcs.n	8008b1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b14:	4a2d      	ldr	r2, [pc, #180]	; (8008bcc <xTaskIncrementTick+0x158>)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b1a:	e02e      	b.n	8008b7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff f818 	bl	8007b56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d004      	beq.n	8008b38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	3318      	adds	r3, #24
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff f80f 	bl	8007b56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	409a      	lsls	r2, r3
 8008b40:	4b23      	ldr	r3, [pc, #140]	; (8008bd0 <xTaskIncrementTick+0x15c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	4a22      	ldr	r2, [pc, #136]	; (8008bd0 <xTaskIncrementTick+0x15c>)
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4a1f      	ldr	r2, [pc, #124]	; (8008bd4 <xTaskIncrementTick+0x160>)
 8008b58:	441a      	add	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f7fe ff9b 	bl	8007a9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <xTaskIncrementTick+0x164>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d3b9      	bcc.n	8008ae8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b78:	e7b6      	b.n	8008ae8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b7a:	4b17      	ldr	r3, [pc, #92]	; (8008bd8 <xTaskIncrementTick+0x164>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b80:	4914      	ldr	r1, [pc, #80]	; (8008bd4 <xTaskIncrementTick+0x160>)
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d901      	bls.n	8008b96 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008b92:	2301      	movs	r3, #1
 8008b94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b96:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <xTaskIncrementTick+0x168>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d007      	beq.n	8008bae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e004      	b.n	8008bae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <xTaskIncrementTick+0x16c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	4a0d      	ldr	r2, [pc, #52]	; (8008be0 <xTaskIncrementTick+0x16c>)
 8008bac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bae:	697b      	ldr	r3, [r7, #20]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000ae0 	.word	0x20000ae0
 8008bbc:	20000abc 	.word	0x20000abc
 8008bc0:	20000a70 	.word	0x20000a70
 8008bc4:	20000a74 	.word	0x20000a74
 8008bc8:	20000ad0 	.word	0x20000ad0
 8008bcc:	20000ad8 	.word	0x20000ad8
 8008bd0:	20000ac0 	.word	0x20000ac0
 8008bd4:	200009bc 	.word	0x200009bc
 8008bd8:	200009b8 	.word	0x200009b8
 8008bdc:	20000acc 	.word	0x20000acc
 8008be0:	20000ac8 	.word	0x20000ac8

08008be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bea:	4b27      	ldr	r3, [pc, #156]	; (8008c88 <vTaskSwitchContext+0xa4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bf2:	4b26      	ldr	r3, [pc, #152]	; (8008c8c <vTaskSwitchContext+0xa8>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bf8:	e03f      	b.n	8008c7a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008bfa:	4b24      	ldr	r3, [pc, #144]	; (8008c8c <vTaskSwitchContext+0xa8>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c00:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <vTaskSwitchContext+0xac>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	fab3 f383 	clz	r3, r3
 8008c0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	f1c3 031f 	rsb	r3, r3, #31
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	491f      	ldr	r1, [pc, #124]	; (8008c94 <vTaskSwitchContext+0xb0>)
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	607b      	str	r3, [r7, #4]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <vTaskSwitchContext+0x5a>
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4a12      	ldr	r2, [pc, #72]	; (8008c94 <vTaskSwitchContext+0xb0>)
 8008c4c:	4413      	add	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	605a      	str	r2, [r3, #4]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3308      	adds	r3, #8
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d104      	bne.n	8008c70 <vTaskSwitchContext+0x8c>
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	605a      	str	r2, [r3, #4]
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	4a08      	ldr	r2, [pc, #32]	; (8008c98 <vTaskSwitchContext+0xb4>)
 8008c78:	6013      	str	r3, [r2, #0]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20000ae0 	.word	0x20000ae0
 8008c8c:	20000acc 	.word	0x20000acc
 8008c90:	20000ac0 	.word	0x20000ac0
 8008c94:	200009bc 	.word	0x200009bc
 8008c98:	200009b8 	.word	0x200009b8

08008c9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60fb      	str	r3, [r7, #12]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cc2:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <vTaskPlaceOnEventList+0x44>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3318      	adds	r3, #24
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fe ff0a 	bl	8007ae4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	6838      	ldr	r0, [r7, #0]
 8008cd4:	f000 fb7e 	bl	80093d4 <prvAddCurrentTaskToDelayedList>
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	200009b8 	.word	0x200009b8

08008ce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	60fb      	str	r3, [r7, #12]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	3318      	adds	r3, #24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe ff1e 	bl	8007b56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d1a:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <xTaskRemoveFromEventList+0xac>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d11c      	bne.n	8008d5c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe ff15 	bl	8007b56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	2201      	movs	r2, #1
 8008d32:	409a      	lsls	r2, r3
 8008d34:	4b17      	ldr	r3, [pc, #92]	; (8008d94 <xTaskRemoveFromEventList+0xb0>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	4a16      	ldr	r2, [pc, #88]	; (8008d94 <xTaskRemoveFromEventList+0xb0>)
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4a13      	ldr	r2, [pc, #76]	; (8008d98 <xTaskRemoveFromEventList+0xb4>)
 8008d4c:	441a      	add	r2, r3
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f7fe fea1 	bl	8007a9c <vListInsertEnd>
 8008d5a:	e005      	b.n	8008d68 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3318      	adds	r3, #24
 8008d60:	4619      	mov	r1, r3
 8008d62:	480e      	ldr	r0, [pc, #56]	; (8008d9c <xTaskRemoveFromEventList+0xb8>)
 8008d64:	f7fe fe9a 	bl	8007a9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6c:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <xTaskRemoveFromEventList+0xbc>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d905      	bls.n	8008d82 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d76:	2301      	movs	r3, #1
 8008d78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <xTaskRemoveFromEventList+0xc0>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	e001      	b.n	8008d86 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d86:	697b      	ldr	r3, [r7, #20]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20000ae0 	.word	0x20000ae0
 8008d94:	20000ac0 	.word	0x20000ac0
 8008d98:	200009bc 	.word	0x200009bc
 8008d9c:	20000a78 	.word	0x20000a78
 8008da0:	200009b8 	.word	0x200009b8
 8008da4:	20000acc 	.word	0x20000acc

08008da8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008db0:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <vTaskInternalSetTimeOutState+0x24>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <vTaskInternalSetTimeOutState+0x28>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	605a      	str	r2, [r3, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	20000ad0 	.word	0x20000ad0
 8008dd0:	20000abc 	.word	0x20000abc

08008dd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	613b      	str	r3, [r7, #16]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60fb      	str	r3, [r7, #12]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e16:	f000 fc6d 	bl	80096f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e1a:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <xTaskCheckForTimeOut+0xbc>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e32:	d102      	bne.n	8008e3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e34:	2300      	movs	r3, #0
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	e023      	b.n	8008e82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <xTaskCheckForTimeOut+0xc0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d007      	beq.n	8008e56 <xTaskCheckForTimeOut+0x82>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d302      	bcc.n	8008e56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	61fb      	str	r3, [r7, #28]
 8008e54:	e015      	b.n	8008e82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d20b      	bcs.n	8008e78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff9b 	bl	8008da8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	61fb      	str	r3, [r7, #28]
 8008e76:	e004      	b.n	8008e82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e82:	f000 fc67 	bl	8009754 <vPortExitCritical>

	return xReturn;
 8008e86:	69fb      	ldr	r3, [r7, #28]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000abc 	.word	0x20000abc
 8008e94:	20000ad0 	.word	0x20000ad0

08008e98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e9c:	4b03      	ldr	r3, [pc, #12]	; (8008eac <vTaskMissedYield+0x14>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
}
 8008ea2:	bf00      	nop
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	20000acc 	.word	0x20000acc

08008eb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008eb8:	f000 f852 	bl	8008f60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ebc:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <prvIdleTask+0x28>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d9f9      	bls.n	8008eb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <prvIdleTask+0x2c>)
 8008ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ed4:	e7f0      	b.n	8008eb8 <prvIdleTask+0x8>
 8008ed6:	bf00      	nop
 8008ed8:	200009bc 	.word	0x200009bc
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	607b      	str	r3, [r7, #4]
 8008eea:	e00c      	b.n	8008f06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4a12      	ldr	r2, [pc, #72]	; (8008f40 <prvInitialiseTaskLists+0x60>)
 8008ef8:	4413      	add	r3, r2
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe fda1 	bl	8007a42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3301      	adds	r3, #1
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b06      	cmp	r3, #6
 8008f0a:	d9ef      	bls.n	8008eec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f0c:	480d      	ldr	r0, [pc, #52]	; (8008f44 <prvInitialiseTaskLists+0x64>)
 8008f0e:	f7fe fd98 	bl	8007a42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f12:	480d      	ldr	r0, [pc, #52]	; (8008f48 <prvInitialiseTaskLists+0x68>)
 8008f14:	f7fe fd95 	bl	8007a42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f18:	480c      	ldr	r0, [pc, #48]	; (8008f4c <prvInitialiseTaskLists+0x6c>)
 8008f1a:	f7fe fd92 	bl	8007a42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f1e:	480c      	ldr	r0, [pc, #48]	; (8008f50 <prvInitialiseTaskLists+0x70>)
 8008f20:	f7fe fd8f 	bl	8007a42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f24:	480b      	ldr	r0, [pc, #44]	; (8008f54 <prvInitialiseTaskLists+0x74>)
 8008f26:	f7fe fd8c 	bl	8007a42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f2a:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <prvInitialiseTaskLists+0x78>)
 8008f2c:	4a05      	ldr	r2, [pc, #20]	; (8008f44 <prvInitialiseTaskLists+0x64>)
 8008f2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <prvInitialiseTaskLists+0x7c>)
 8008f32:	4a05      	ldr	r2, [pc, #20]	; (8008f48 <prvInitialiseTaskLists+0x68>)
 8008f34:	601a      	str	r2, [r3, #0]
}
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200009bc 	.word	0x200009bc
 8008f44:	20000a48 	.word	0x20000a48
 8008f48:	20000a5c 	.word	0x20000a5c
 8008f4c:	20000a78 	.word	0x20000a78
 8008f50:	20000a8c 	.word	0x20000a8c
 8008f54:	20000aa4 	.word	0x20000aa4
 8008f58:	20000a70 	.word	0x20000a70
 8008f5c:	20000a74 	.word	0x20000a74

08008f60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f66:	e019      	b.n	8008f9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f68:	f000 fbc4 	bl	80096f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <prvCheckTasksWaitingTermination+0x50>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe fdec 	bl	8007b56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <prvCheckTasksWaitingTermination+0x54>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	4a0b      	ldr	r2, [pc, #44]	; (8008fb4 <prvCheckTasksWaitingTermination+0x54>)
 8008f86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f88:	4b0b      	ldr	r3, [pc, #44]	; (8008fb8 <prvCheckTasksWaitingTermination+0x58>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	4a0a      	ldr	r2, [pc, #40]	; (8008fb8 <prvCheckTasksWaitingTermination+0x58>)
 8008f90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f92:	f000 fbdf 	bl	8009754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f810 	bl	8008fbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <prvCheckTasksWaitingTermination+0x58>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e1      	bne.n	8008f68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000a8c 	.word	0x20000a8c
 8008fb4:	20000ab8 	.word	0x20000ab8
 8008fb8:	20000aa0 	.word	0x20000aa0

08008fbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d108      	bne.n	8008fe0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fd3c 	bl	8009a50 <vPortFree>
				vPortFree( pxTCB );
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fd39 	bl	8009a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fde:	e018      	b.n	8009012 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d103      	bne.n	8008ff2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fd30 	bl	8009a50 <vPortFree>
	}
 8008ff0:	e00f      	b.n	8009012 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d00a      	beq.n	8009012 <prvDeleteTCB+0x56>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	60fb      	str	r3, [r7, #12]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <prvDeleteTCB+0x54>
	}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009022:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <prvResetNextTaskUnblockTime+0x38>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <prvResetNextTaskUnblockTime+0x3c>)
 800902e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009032:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009034:	e008      	b.n	8009048 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009036:	4b07      	ldr	r3, [pc, #28]	; (8009054 <prvResetNextTaskUnblockTime+0x38>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4a04      	ldr	r2, [pc, #16]	; (8009058 <prvResetNextTaskUnblockTime+0x3c>)
 8009046:	6013      	str	r3, [r2, #0]
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	20000a70 	.word	0x20000a70
 8009058:	20000ad8 	.word	0x20000ad8

0800905c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009062:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <xTaskGetSchedulerState+0x34>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d102      	bne.n	8009070 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800906a:	2301      	movs	r3, #1
 800906c:	607b      	str	r3, [r7, #4]
 800906e:	e008      	b.n	8009082 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009070:	4b08      	ldr	r3, [pc, #32]	; (8009094 <xTaskGetSchedulerState+0x38>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d102      	bne.n	800907e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009078:	2302      	movs	r3, #2
 800907a:	607b      	str	r3, [r7, #4]
 800907c:	e001      	b.n	8009082 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800907e:	2300      	movs	r3, #0
 8009080:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009082:	687b      	ldr	r3, [r7, #4]
	}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20000ac4 	.word	0x20000ac4
 8009094:	20000ae0 	.word	0x20000ae0

08009098 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d05e      	beq.n	800916c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b2:	4b31      	ldr	r3, [pc, #196]	; (8009178 <xTaskPriorityInherit+0xe0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d24e      	bcs.n	800915a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	db06      	blt.n	80090d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c4:	4b2c      	ldr	r3, [pc, #176]	; (8009178 <xTaskPriorityInherit+0xe0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ca:	f1c3 0207 	rsb	r2, r3, #7
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6959      	ldr	r1, [r3, #20]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4a26      	ldr	r2, [pc, #152]	; (800917c <xTaskPriorityInherit+0xe4>)
 80090e4:	4413      	add	r3, r2
 80090e6:	4299      	cmp	r1, r3
 80090e8:	d12f      	bne.n	800914a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fd31 	bl	8007b56 <uxListRemove>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	2201      	movs	r2, #1
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	43da      	mvns	r2, r3
 8009106:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <xTaskPriorityInherit+0xe8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4013      	ands	r3, r2
 800910c:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <xTaskPriorityInherit+0xe8>)
 800910e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009110:	4b19      	ldr	r3, [pc, #100]	; (8009178 <xTaskPriorityInherit+0xe0>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911e:	2201      	movs	r2, #1
 8009120:	409a      	lsls	r2, r3
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <xTaskPriorityInherit+0xe8>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4313      	orrs	r3, r2
 8009128:	4a15      	ldr	r2, [pc, #84]	; (8009180 <xTaskPriorityInherit+0xe8>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a10      	ldr	r2, [pc, #64]	; (800917c <xTaskPriorityInherit+0xe4>)
 800913a:	441a      	add	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe fcaa 	bl	8007a9c <vListInsertEnd>
 8009148:	e004      	b.n	8009154 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <xTaskPriorityInherit+0xe0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e008      	b.n	800916c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <xTaskPriorityInherit+0xe0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	429a      	cmp	r2, r3
 8009166:	d201      	bcs.n	800916c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009168:	2301      	movs	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800916c:	68fb      	ldr	r3, [r7, #12]
	}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200009b8 	.word	0x200009b8
 800917c:	200009bc 	.word	0x200009bc
 8009180:	20000ac0 	.word	0x20000ac0

08009184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d06e      	beq.n	8009278 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800919a:	4b3a      	ldr	r3, [pc, #232]	; (8009284 <xTaskPriorityDisinherit+0x100>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d00a      	beq.n	80091ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	60fb      	str	r3, [r7, #12]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60bb      	str	r3, [r7, #8]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091dc:	1e5a      	subs	r2, r3, #1
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d044      	beq.n	8009278 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d140      	bne.n	8009278 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fcab 	bl	8007b56 <uxListRemove>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d115      	bne.n	8009232 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920a:	491f      	ldr	r1, [pc, #124]	; (8009288 <xTaskPriorityDisinherit+0x104>)
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xTaskPriorityDisinherit+0xae>
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	2201      	movs	r2, #1
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	43da      	mvns	r2, r3
 8009228:	4b18      	ldr	r3, [pc, #96]	; (800928c <xTaskPriorityDisinherit+0x108>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4013      	ands	r3, r2
 800922e:	4a17      	ldr	r2, [pc, #92]	; (800928c <xTaskPriorityDisinherit+0x108>)
 8009230:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	f1c3 0207 	rsb	r2, r3, #7
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	2201      	movs	r2, #1
 800924c:	409a      	lsls	r2, r3
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <xTaskPriorityDisinherit+0x108>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4313      	orrs	r3, r2
 8009254:	4a0d      	ldr	r2, [pc, #52]	; (800928c <xTaskPriorityDisinherit+0x108>)
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4a08      	ldr	r2, [pc, #32]	; (8009288 <xTaskPriorityDisinherit+0x104>)
 8009266:	441a      	add	r2, r3
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fe fc14 	bl	8007a9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009274:	2301      	movs	r3, #1
 8009276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009278:	697b      	ldr	r3, [r7, #20]
	}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	200009b8 	.word	0x200009b8
 8009288:	200009bc 	.word	0x200009bc
 800928c:	20000ac0 	.word	0x20000ac0

08009290 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800929e:	2301      	movs	r3, #1
 80092a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d077      	beq.n	8009398 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	60fb      	str	r3, [r7, #12]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d902      	bls.n	80092d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	e002      	b.n	80092dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d058      	beq.n	8009398 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d153      	bne.n	8009398 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092f0:	4b2b      	ldr	r3, [pc, #172]	; (80093a0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d10a      	bne.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	60bb      	str	r3, [r7, #8]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	2b00      	cmp	r3, #0
 8009322:	db04      	blt.n	800932e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f1c3 0207 	rsb	r2, r3, #7
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	6959      	ldr	r1, [r3, #20]
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4613      	mov	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4a19      	ldr	r2, [pc, #100]	; (80093a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800933e:	4413      	add	r3, r2
 8009340:	4299      	cmp	r1, r3
 8009342:	d129      	bne.n	8009398 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	3304      	adds	r3, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fc04 	bl	8007b56 <uxListRemove>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	2201      	movs	r2, #1
 800935a:	fa02 f303 	lsl.w	r3, r2, r3
 800935e:	43da      	mvns	r2, r3
 8009360:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4013      	ands	r3, r2
 8009366:	4a10      	ldr	r2, [pc, #64]	; (80093a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009368:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	2201      	movs	r2, #1
 8009370:	409a      	lsls	r2, r3
 8009372:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4313      	orrs	r3, r2
 8009378:	4a0b      	ldr	r2, [pc, #44]	; (80093a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4a06      	ldr	r2, [pc, #24]	; (80093a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800938a:	441a      	add	r2, r3
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	3304      	adds	r3, #4
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f7fe fb82 	bl	8007a9c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009398:	bf00      	nop
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200009b8 	.word	0x200009b8
 80093a4:	200009bc 	.word	0x200009bc
 80093a8:	20000ac0 	.word	0x20000ac0

080093ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d004      	beq.n	80093c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80093b8:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093be:	3201      	adds	r2, #1
 80093c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80093c2:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80093c4:	681b      	ldr	r3, [r3, #0]
	}
 80093c6:	4618      	mov	r0, r3
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	200009b8 	.word	0x200009b8

080093d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093de:	4b29      	ldr	r3, [pc, #164]	; (8009484 <prvAddCurrentTaskToDelayedList+0xb0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093e4:	4b28      	ldr	r3, [pc, #160]	; (8009488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fbb3 	bl	8007b56 <uxListRemove>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80093f6:	4b24      	ldr	r3, [pc, #144]	; (8009488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	2201      	movs	r2, #1
 80093fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009402:	43da      	mvns	r2, r3
 8009404:	4b21      	ldr	r3, [pc, #132]	; (800948c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4013      	ands	r3, r2
 800940a:	4a20      	ldr	r2, [pc, #128]	; (800948c <prvAddCurrentTaskToDelayedList+0xb8>)
 800940c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009414:	d10a      	bne.n	800942c <prvAddCurrentTaskToDelayedList+0x58>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d007      	beq.n	800942c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3304      	adds	r3, #4
 8009422:	4619      	mov	r1, r3
 8009424:	481a      	ldr	r0, [pc, #104]	; (8009490 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009426:	f7fe fb39 	bl	8007a9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800942a:	e026      	b.n	800947a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009434:	4b14      	ldr	r3, [pc, #80]	; (8009488 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	429a      	cmp	r2, r3
 8009442:	d209      	bcs.n	8009458 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009444:	4b13      	ldr	r3, [pc, #76]	; (8009494 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3304      	adds	r3, #4
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f7fe fb47 	bl	8007ae4 <vListInsert>
}
 8009456:	e010      	b.n	800947a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009458:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <prvAddCurrentTaskToDelayedList+0xc4>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3304      	adds	r3, #4
 8009462:	4619      	mov	r1, r3
 8009464:	4610      	mov	r0, r2
 8009466:	f7fe fb3d 	bl	8007ae4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800946a:	4b0c      	ldr	r3, [pc, #48]	; (800949c <prvAddCurrentTaskToDelayedList+0xc8>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	429a      	cmp	r2, r3
 8009472:	d202      	bcs.n	800947a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009474:	4a09      	ldr	r2, [pc, #36]	; (800949c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6013      	str	r3, [r2, #0]
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000abc 	.word	0x20000abc
 8009488:	200009b8 	.word	0x200009b8
 800948c:	20000ac0 	.word	0x20000ac0
 8009490:	20000aa4 	.word	0x20000aa4
 8009494:	20000a74 	.word	0x20000a74
 8009498:	20000a70 	.word	0x20000a70
 800949c:	20000ad8 	.word	0x20000ad8

080094a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3b04      	subs	r3, #4
 80094b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3b04      	subs	r3, #4
 80094be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f023 0201 	bic.w	r2, r3, #1
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3b04      	subs	r3, #4
 80094ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094d0:	4a0c      	ldr	r2, [pc, #48]	; (8009504 <pxPortInitialiseStack+0x64>)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3b14      	subs	r3, #20
 80094da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3b04      	subs	r3, #4
 80094e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f06f 0202 	mvn.w	r2, #2
 80094ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3b20      	subs	r3, #32
 80094f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094f6:	68fb      	ldr	r3, [r7, #12]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	08009509 	.word	0x08009509

08009508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <prvTaskExitError+0x54>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800951a:	d00a      	beq.n	8009532 <prvTaskExitError+0x2a>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <prvTaskExitError+0x28>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	60bb      	str	r3, [r7, #8]
}
 8009544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009546:	bf00      	nop
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0fc      	beq.n	8009548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800954e:	bf00      	nop
 8009550:	bf00      	nop
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	200000b4 	.word	0x200000b4

08009560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <pxCurrentTCBConst2>)
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	6808      	ldr	r0, [r1, #0]
 8009566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	f380 8809 	msr	PSP, r0
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8811 	msr	BASEPRI, r0
 800957a:	4770      	bx	lr
 800957c:	f3af 8000 	nop.w

08009580 <pxCurrentTCBConst2>:
 8009580:	200009b8 	.word	0x200009b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop

08009588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009588:	4808      	ldr	r0, [pc, #32]	; (80095ac <prvPortStartFirstTask+0x24>)
 800958a:	6800      	ldr	r0, [r0, #0]
 800958c:	6800      	ldr	r0, [r0, #0]
 800958e:	f380 8808 	msr	MSP, r0
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8814 	msr	CONTROL, r0
 800959a:	b662      	cpsie	i
 800959c:	b661      	cpsie	f
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	df00      	svc	0
 80095a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095aa:	bf00      	nop
 80095ac:	e000ed08 	.word	0xe000ed08

080095b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095b6:	4b46      	ldr	r3, [pc, #280]	; (80096d0 <xPortStartScheduler+0x120>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a46      	ldr	r2, [pc, #280]	; (80096d4 <xPortStartScheduler+0x124>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d10a      	bne.n	80095d6 <xPortStartScheduler+0x26>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	613b      	str	r3, [r7, #16]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095d6:	4b3e      	ldr	r3, [pc, #248]	; (80096d0 <xPortStartScheduler+0x120>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a3f      	ldr	r2, [pc, #252]	; (80096d8 <xPortStartScheduler+0x128>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d10a      	bne.n	80095f6 <xPortStartScheduler+0x46>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	60fb      	str	r3, [r7, #12]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095f6:	4b39      	ldr	r3, [pc, #228]	; (80096dc <xPortStartScheduler+0x12c>)
 80095f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	22ff      	movs	r2, #255	; 0xff
 8009606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009618:	b2da      	uxtb	r2, r3
 800961a:	4b31      	ldr	r3, [pc, #196]	; (80096e0 <xPortStartScheduler+0x130>)
 800961c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800961e:	4b31      	ldr	r3, [pc, #196]	; (80096e4 <xPortStartScheduler+0x134>)
 8009620:	2207      	movs	r2, #7
 8009622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009624:	e009      	b.n	800963a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009626:	4b2f      	ldr	r3, [pc, #188]	; (80096e4 <xPortStartScheduler+0x134>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3b01      	subs	r3, #1
 800962c:	4a2d      	ldr	r2, [pc, #180]	; (80096e4 <xPortStartScheduler+0x134>)
 800962e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	b2db      	uxtb	r3, r3
 8009638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009642:	2b80      	cmp	r3, #128	; 0x80
 8009644:	d0ef      	beq.n	8009626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009646:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <xPortStartScheduler+0x134>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f1c3 0307 	rsb	r3, r3, #7
 800964e:	2b04      	cmp	r3, #4
 8009650:	d00a      	beq.n	8009668 <xPortStartScheduler+0xb8>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60bb      	str	r3, [r7, #8]
}
 8009664:	bf00      	nop
 8009666:	e7fe      	b.n	8009666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009668:	4b1e      	ldr	r3, [pc, #120]	; (80096e4 <xPortStartScheduler+0x134>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <xPortStartScheduler+0x134>)
 8009670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <xPortStartScheduler+0x134>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800967a:	4a1a      	ldr	r2, [pc, #104]	; (80096e4 <xPortStartScheduler+0x134>)
 800967c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	b2da      	uxtb	r2, r3
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009686:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <xPortStartScheduler+0x138>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a17      	ldr	r2, [pc, #92]	; (80096e8 <xPortStartScheduler+0x138>)
 800968c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <xPortStartScheduler+0x138>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a14      	ldr	r2, [pc, #80]	; (80096e8 <xPortStartScheduler+0x138>)
 8009698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800969c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800969e:	f000 f8dd 	bl	800985c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <xPortStartScheduler+0x13c>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096a8:	f000 f8fc 	bl	80098a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096ac:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <xPortStartScheduler+0x140>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a0f      	ldr	r2, [pc, #60]	; (80096f0 <xPortStartScheduler+0x140>)
 80096b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096b8:	f7ff ff66 	bl	8009588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096bc:	f7ff fa92 	bl	8008be4 <vTaskSwitchContext>
	prvTaskExitError();
 80096c0:	f7ff ff22 	bl	8009508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	e000ed00 	.word	0xe000ed00
 80096d4:	410fc271 	.word	0x410fc271
 80096d8:	410fc270 	.word	0x410fc270
 80096dc:	e000e400 	.word	0xe000e400
 80096e0:	20000ae4 	.word	0x20000ae4
 80096e4:	20000ae8 	.word	0x20000ae8
 80096e8:	e000ed20 	.word	0xe000ed20
 80096ec:	200000b4 	.word	0x200000b4
 80096f0:	e000ef34 	.word	0xe000ef34

080096f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	607b      	str	r3, [r7, #4]
}
 800970c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800970e:	4b0f      	ldr	r3, [pc, #60]	; (800974c <vPortEnterCritical+0x58>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3301      	adds	r3, #1
 8009714:	4a0d      	ldr	r2, [pc, #52]	; (800974c <vPortEnterCritical+0x58>)
 8009716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009718:	4b0c      	ldr	r3, [pc, #48]	; (800974c <vPortEnterCritical+0x58>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d10f      	bne.n	8009740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009720:	4b0b      	ldr	r3, [pc, #44]	; (8009750 <vPortEnterCritical+0x5c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <vPortEnterCritical+0x4c>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	603b      	str	r3, [r7, #0]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <vPortEnterCritical+0x4a>
	}
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	200000b4 	.word	0x200000b4
 8009750:	e000ed04 	.word	0xe000ed04

08009754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800975a:	4b12      	ldr	r3, [pc, #72]	; (80097a4 <vPortExitCritical+0x50>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10a      	bne.n	8009778 <vPortExitCritical+0x24>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	607b      	str	r3, [r7, #4]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <vPortExitCritical+0x50>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3b01      	subs	r3, #1
 800977e:	4a09      	ldr	r2, [pc, #36]	; (80097a4 <vPortExitCritical+0x50>)
 8009780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009782:	4b08      	ldr	r3, [pc, #32]	; (80097a4 <vPortExitCritical+0x50>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d105      	bne.n	8009796 <vPortExitCritical+0x42>
 800978a:	2300      	movs	r3, #0
 800978c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009796:	bf00      	nop
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	200000b4 	.word	0x200000b4
	...

080097b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097b0:	f3ef 8009 	mrs	r0, PSP
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	4b15      	ldr	r3, [pc, #84]	; (8009810 <pxCurrentTCBConst>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	f01e 0f10 	tst.w	lr, #16
 80097c0:	bf08      	it	eq
 80097c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	6010      	str	r0, [r2, #0]
 80097cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097d4:	f380 8811 	msr	BASEPRI, r0
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f7ff fa00 	bl	8008be4 <vTaskSwitchContext>
 80097e4:	f04f 0000 	mov.w	r0, #0
 80097e8:	f380 8811 	msr	BASEPRI, r0
 80097ec:	bc09      	pop	{r0, r3}
 80097ee:	6819      	ldr	r1, [r3, #0]
 80097f0:	6808      	ldr	r0, [r1, #0]
 80097f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f6:	f01e 0f10 	tst.w	lr, #16
 80097fa:	bf08      	it	eq
 80097fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009800:	f380 8809 	msr	PSP, r0
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w

08009810 <pxCurrentTCBConst>:
 8009810:	200009b8 	.word	0x200009b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop

08009818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	607b      	str	r3, [r7, #4]
}
 8009830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009832:	f7ff f91f 	bl	8008a74 <xTaskIncrementTick>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800983c:	4b06      	ldr	r3, [pc, #24]	; (8009858 <SysTick_Handler+0x40>)
 800983e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	2300      	movs	r3, #0
 8009846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	f383 8811 	msr	BASEPRI, r3
}
 800984e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	e000ed04 	.word	0xe000ed04

0800985c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009860:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <vPortSetupTimerInterrupt+0x34>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009866:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <vPortSetupTimerInterrupt+0x38>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <vPortSetupTimerInterrupt+0x3c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a0a      	ldr	r2, [pc, #40]	; (800989c <vPortSetupTimerInterrupt+0x40>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	099b      	lsrs	r3, r3, #6
 8009878:	4a09      	ldr	r2, [pc, #36]	; (80098a0 <vPortSetupTimerInterrupt+0x44>)
 800987a:	3b01      	subs	r3, #1
 800987c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800987e:	4b04      	ldr	r3, [pc, #16]	; (8009890 <vPortSetupTimerInterrupt+0x34>)
 8009880:	2207      	movs	r2, #7
 8009882:	601a      	str	r2, [r3, #0]
}
 8009884:	bf00      	nop
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	e000e010 	.word	0xe000e010
 8009894:	e000e018 	.word	0xe000e018
 8009898:	200000a8 	.word	0x200000a8
 800989c:	10624dd3 	.word	0x10624dd3
 80098a0:	e000e014 	.word	0xe000e014

080098a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098b4 <vPortEnableVFP+0x10>
 80098a8:	6801      	ldr	r1, [r0, #0]
 80098aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098ae:	6001      	str	r1, [r0, #0]
 80098b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098b2:	bf00      	nop
 80098b4:	e000ed88 	.word	0xe000ed88

080098b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098c4:	f7ff f82c 	bl	8008920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098c8:	4b5b      	ldr	r3, [pc, #364]	; (8009a38 <pvPortMalloc+0x180>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098d0:	f000 f920 	bl	8009b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098d4:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <pvPortMalloc+0x184>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f040 8093 	bne.w	8009a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01d      	beq.n	8009924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098e8:	2208      	movs	r2, #8
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d014      	beq.n	8009924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f023 0307 	bic.w	r3, r3, #7
 8009900:	3308      	adds	r3, #8
 8009902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <pvPortMalloc+0x6c>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	617b      	str	r3, [r7, #20]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d06e      	beq.n	8009a08 <pvPortMalloc+0x150>
 800992a:	4b45      	ldr	r3, [pc, #276]	; (8009a40 <pvPortMalloc+0x188>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d869      	bhi.n	8009a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009934:	4b43      	ldr	r3, [pc, #268]	; (8009a44 <pvPortMalloc+0x18c>)
 8009936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009938:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <pvPortMalloc+0x18c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800993e:	e004      	b.n	800994a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d903      	bls.n	800995c <pvPortMalloc+0xa4>
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1f1      	bne.n	8009940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800995c:	4b36      	ldr	r3, [pc, #216]	; (8009a38 <pvPortMalloc+0x180>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009962:	429a      	cmp	r2, r3
 8009964:	d050      	beq.n	8009a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2208      	movs	r2, #8
 800996c:	4413      	add	r3, r2
 800996e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	2308      	movs	r3, #8
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	429a      	cmp	r2, r3
 8009986:	d91f      	bls.n	80099c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <pvPortMalloc+0xf8>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	613b      	str	r3, [r7, #16]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099c2:	69b8      	ldr	r0, [r7, #24]
 80099c4:	f000 f908 	bl	8009bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099c8:	4b1d      	ldr	r3, [pc, #116]	; (8009a40 <pvPortMalloc+0x188>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <pvPortMalloc+0x188>)
 80099d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099d6:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <pvPortMalloc+0x188>)
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <pvPortMalloc+0x190>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d203      	bcs.n	80099ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099e2:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <pvPortMalloc+0x188>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <pvPortMalloc+0x190>)
 80099e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <pvPortMalloc+0x184>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <pvPortMalloc+0x194>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3301      	adds	r3, #1
 8009a04:	4a11      	ldr	r2, [pc, #68]	; (8009a4c <pvPortMalloc+0x194>)
 8009a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a08:	f7fe ff98 	bl	800893c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f003 0307 	and.w	r3, r3, #7
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <pvPortMalloc+0x174>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	60fb      	str	r3, [r7, #12]
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <pvPortMalloc+0x172>
	return pvReturn;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3728      	adds	r7, #40	; 0x28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	200046f4 	.word	0x200046f4
 8009a3c:	20004708 	.word	0x20004708
 8009a40:	200046f8 	.word	0x200046f8
 8009a44:	200046ec 	.word	0x200046ec
 8009a48:	200046fc 	.word	0x200046fc
 8009a4c:	20004700 	.word	0x20004700

08009a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d04d      	beq.n	8009afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a62:	2308      	movs	r3, #8
 8009a64:	425b      	negs	r3, r3
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <vPortFree+0xb8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <vPortFree+0x44>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60fb      	str	r3, [r7, #12]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <vPortFree+0x62>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	60bb      	str	r3, [r7, #8]
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <vPortFree+0xb8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01e      	beq.n	8009afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11a      	bne.n	8009afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <vPortFree+0xb8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ad8:	f7fe ff22 	bl	8008920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <vPortFree+0xbc>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <vPortFree+0xbc>)
 8009ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009aea:	6938      	ldr	r0, [r7, #16]
 8009aec:	f000 f874 	bl	8009bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <vPortFree+0xc0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	4a06      	ldr	r2, [pc, #24]	; (8009b10 <vPortFree+0xc0>)
 8009af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009afa:	f7fe ff1f 	bl	800893c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009afe:	bf00      	nop
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20004708 	.word	0x20004708
 8009b0c:	200046f8 	.word	0x200046f8
 8009b10:	20004704 	.word	0x20004704

08009b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <prvHeapInit+0xac>)
 8009b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00c      	beq.n	8009b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3307      	adds	r3, #7
 8009b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0307 	bic.w	r3, r3, #7
 8009b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	4a1f      	ldr	r2, [pc, #124]	; (8009bc0 <prvHeapInit+0xac>)
 8009b44:	4413      	add	r3, r2
 8009b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b4c:	4a1d      	ldr	r2, [pc, #116]	; (8009bc4 <prvHeapInit+0xb0>)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b52:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <prvHeapInit+0xb0>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b60:	2208      	movs	r2, #8
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1a9b      	subs	r3, r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4a15      	ldr	r2, [pc, #84]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b76:	4b14      	ldr	r3, [pc, #80]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b7e:	4b12      	ldr	r3, [pc, #72]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b94:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <prvHeapInit+0xb4>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4a0a      	ldr	r2, [pc, #40]	; (8009bcc <prvHeapInit+0xb8>)
 8009ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	4a09      	ldr	r2, [pc, #36]	; (8009bd0 <prvHeapInit+0xbc>)
 8009baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <prvHeapInit+0xc0>)
 8009bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bb2:	601a      	str	r2, [r3, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	20000aec 	.word	0x20000aec
 8009bc4:	200046ec 	.word	0x200046ec
 8009bc8:	200046f4 	.word	0x200046f4
 8009bcc:	200046fc 	.word	0x200046fc
 8009bd0:	200046f8 	.word	0x200046f8
 8009bd4:	20004708 	.word	0x20004708

08009bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009be0:	4b28      	ldr	r3, [pc, #160]	; (8009c84 <prvInsertBlockIntoFreeList+0xac>)
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	e002      	b.n	8009bec <prvInsertBlockIntoFreeList+0x14>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d8f7      	bhi.n	8009be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	4413      	add	r3, r2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d108      	bne.n	8009c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	441a      	add	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	441a      	add	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d118      	bne.n	8009c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b15      	ldr	r3, [pc, #84]	; (8009c88 <prvInsertBlockIntoFreeList+0xb0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d00d      	beq.n	8009c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	441a      	add	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	e008      	b.n	8009c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <prvInsertBlockIntoFreeList+0xb0>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e003      	b.n	8009c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d002      	beq.n	8009c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	200046ec 	.word	0x200046ec
 8009c88:	200046f4 	.word	0x200046f4

08009c8c <__errno>:
 8009c8c:	4b01      	ldr	r3, [pc, #4]	; (8009c94 <__errno+0x8>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	200000b8 	.word	0x200000b8

08009c98 <__libc_init_array>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4d0d      	ldr	r5, [pc, #52]	; (8009cd0 <__libc_init_array+0x38>)
 8009c9c:	4c0d      	ldr	r4, [pc, #52]	; (8009cd4 <__libc_init_array+0x3c>)
 8009c9e:	1b64      	subs	r4, r4, r5
 8009ca0:	10a4      	asrs	r4, r4, #2
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	42a6      	cmp	r6, r4
 8009ca6:	d109      	bne.n	8009cbc <__libc_init_array+0x24>
 8009ca8:	4d0b      	ldr	r5, [pc, #44]	; (8009cd8 <__libc_init_array+0x40>)
 8009caa:	4c0c      	ldr	r4, [pc, #48]	; (8009cdc <__libc_init_array+0x44>)
 8009cac:	f004 fcb0 	bl	800e610 <_init>
 8009cb0:	1b64      	subs	r4, r4, r5
 8009cb2:	10a4      	asrs	r4, r4, #2
 8009cb4:	2600      	movs	r6, #0
 8009cb6:	42a6      	cmp	r6, r4
 8009cb8:	d105      	bne.n	8009cc6 <__libc_init_array+0x2e>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc0:	4798      	blx	r3
 8009cc2:	3601      	adds	r6, #1
 8009cc4:	e7ee      	b.n	8009ca4 <__libc_init_array+0xc>
 8009cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cca:	4798      	blx	r3
 8009ccc:	3601      	adds	r6, #1
 8009cce:	e7f2      	b.n	8009cb6 <__libc_init_array+0x1e>
 8009cd0:	0800eb6c 	.word	0x0800eb6c
 8009cd4:	0800eb6c 	.word	0x0800eb6c
 8009cd8:	0800eb6c 	.word	0x0800eb6c
 8009cdc:	0800eb70 	.word	0x0800eb70

08009ce0 <memcpy>:
 8009ce0:	440a      	add	r2, r1
 8009ce2:	4291      	cmp	r1, r2
 8009ce4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ce8:	d100      	bne.n	8009cec <memcpy+0xc>
 8009cea:	4770      	bx	lr
 8009cec:	b510      	push	{r4, lr}
 8009cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cf6:	4291      	cmp	r1, r2
 8009cf8:	d1f9      	bne.n	8009cee <memcpy+0xe>
 8009cfa:	bd10      	pop	{r4, pc}

08009cfc <memset>:
 8009cfc:	4402      	add	r2, r0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d100      	bne.n	8009d06 <memset+0xa>
 8009d04:	4770      	bx	lr
 8009d06:	f803 1b01 	strb.w	r1, [r3], #1
 8009d0a:	e7f9      	b.n	8009d00 <memset+0x4>

08009d0c <__cvt>:
 8009d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	ec55 4b10 	vmov	r4, r5, d0
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	460e      	mov	r6, r1
 8009d18:	4619      	mov	r1, r3
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	bfbb      	ittet	lt
 8009d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d22:	461d      	movlt	r5, r3
 8009d24:	2300      	movge	r3, #0
 8009d26:	232d      	movlt	r3, #45	; 0x2d
 8009d28:	700b      	strb	r3, [r1, #0]
 8009d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d30:	4691      	mov	r9, r2
 8009d32:	f023 0820 	bic.w	r8, r3, #32
 8009d36:	bfbc      	itt	lt
 8009d38:	4622      	movlt	r2, r4
 8009d3a:	4614      	movlt	r4, r2
 8009d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d40:	d005      	beq.n	8009d4e <__cvt+0x42>
 8009d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d46:	d100      	bne.n	8009d4a <__cvt+0x3e>
 8009d48:	3601      	adds	r6, #1
 8009d4a:	2102      	movs	r1, #2
 8009d4c:	e000      	b.n	8009d50 <__cvt+0x44>
 8009d4e:	2103      	movs	r1, #3
 8009d50:	ab03      	add	r3, sp, #12
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	ab02      	add	r3, sp, #8
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	ec45 4b10 	vmov	d0, r4, r5
 8009d5c:	4653      	mov	r3, sl
 8009d5e:	4632      	mov	r2, r6
 8009d60:	f001 fdce 	bl	800b900 <_dtoa_r>
 8009d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d68:	4607      	mov	r7, r0
 8009d6a:	d102      	bne.n	8009d72 <__cvt+0x66>
 8009d6c:	f019 0f01 	tst.w	r9, #1
 8009d70:	d022      	beq.n	8009db8 <__cvt+0xac>
 8009d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d76:	eb07 0906 	add.w	r9, r7, r6
 8009d7a:	d110      	bne.n	8009d9e <__cvt+0x92>
 8009d7c:	783b      	ldrb	r3, [r7, #0]
 8009d7e:	2b30      	cmp	r3, #48	; 0x30
 8009d80:	d10a      	bne.n	8009d98 <__cvt+0x8c>
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f6 fead 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d8e:	b918      	cbnz	r0, 8009d98 <__cvt+0x8c>
 8009d90:	f1c6 0601 	rsb	r6, r6, #1
 8009d94:	f8ca 6000 	str.w	r6, [sl]
 8009d98:	f8da 3000 	ldr.w	r3, [sl]
 8009d9c:	4499      	add	r9, r3
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2300      	movs	r3, #0
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 fe9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8009daa:	b108      	cbz	r0, 8009db0 <__cvt+0xa4>
 8009dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009db0:	2230      	movs	r2, #48	; 0x30
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	454b      	cmp	r3, r9
 8009db6:	d307      	bcc.n	8009dc8 <__cvt+0xbc>
 8009db8:	9b03      	ldr	r3, [sp, #12]
 8009dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dbc:	1bdb      	subs	r3, r3, r7
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	b004      	add	sp, #16
 8009dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc8:	1c59      	adds	r1, r3, #1
 8009dca:	9103      	str	r1, [sp, #12]
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	e7f0      	b.n	8009db2 <__cvt+0xa6>

08009dd0 <__exponent>:
 8009dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	bfb8      	it	lt
 8009dd8:	4249      	neglt	r1, r1
 8009dda:	f803 2b02 	strb.w	r2, [r3], #2
 8009dde:	bfb4      	ite	lt
 8009de0:	222d      	movlt	r2, #45	; 0x2d
 8009de2:	222b      	movge	r2, #43	; 0x2b
 8009de4:	2909      	cmp	r1, #9
 8009de6:	7042      	strb	r2, [r0, #1]
 8009de8:	dd2a      	ble.n	8009e40 <__exponent+0x70>
 8009dea:	f10d 0407 	add.w	r4, sp, #7
 8009dee:	46a4      	mov	ip, r4
 8009df0:	270a      	movs	r7, #10
 8009df2:	46a6      	mov	lr, r4
 8009df4:	460a      	mov	r2, r1
 8009df6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009dfa:	fb07 1516 	mls	r5, r7, r6, r1
 8009dfe:	3530      	adds	r5, #48	; 0x30
 8009e00:	2a63      	cmp	r2, #99	; 0x63
 8009e02:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009e06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	dcf1      	bgt.n	8009df2 <__exponent+0x22>
 8009e0e:	3130      	adds	r1, #48	; 0x30
 8009e10:	f1ae 0502 	sub.w	r5, lr, #2
 8009e14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e18:	1c44      	adds	r4, r0, #1
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4561      	cmp	r1, ip
 8009e1e:	d30a      	bcc.n	8009e36 <__exponent+0x66>
 8009e20:	f10d 0209 	add.w	r2, sp, #9
 8009e24:	eba2 020e 	sub.w	r2, r2, lr
 8009e28:	4565      	cmp	r5, ip
 8009e2a:	bf88      	it	hi
 8009e2c:	2200      	movhi	r2, #0
 8009e2e:	4413      	add	r3, r2
 8009e30:	1a18      	subs	r0, r3, r0
 8009e32:	b003      	add	sp, #12
 8009e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e3e:	e7ed      	b.n	8009e1c <__exponent+0x4c>
 8009e40:	2330      	movs	r3, #48	; 0x30
 8009e42:	3130      	adds	r1, #48	; 0x30
 8009e44:	7083      	strb	r3, [r0, #2]
 8009e46:	70c1      	strb	r1, [r0, #3]
 8009e48:	1d03      	adds	r3, r0, #4
 8009e4a:	e7f1      	b.n	8009e30 <__exponent+0x60>

08009e4c <_printf_float>:
 8009e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e50:	ed2d 8b02 	vpush	{d8}
 8009e54:	b08d      	sub	sp, #52	; 0x34
 8009e56:	460c      	mov	r4, r1
 8009e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e5c:	4616      	mov	r6, r2
 8009e5e:	461f      	mov	r7, r3
 8009e60:	4605      	mov	r5, r0
 8009e62:	f002 feab 	bl	800cbbc <_localeconv_r>
 8009e66:	f8d0 a000 	ldr.w	sl, [r0]
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	f7f6 f9c0 	bl	80001f0 <strlen>
 8009e70:	2300      	movs	r3, #0
 8009e72:	930a      	str	r3, [sp, #40]	; 0x28
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	9305      	str	r3, [sp, #20]
 8009e78:	f8d8 3000 	ldr.w	r3, [r8]
 8009e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e80:	3307      	adds	r3, #7
 8009e82:	f023 0307 	bic.w	r3, r3, #7
 8009e86:	f103 0208 	add.w	r2, r3, #8
 8009e8a:	f8c8 2000 	str.w	r2, [r8]
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e9e:	9307      	str	r3, [sp, #28]
 8009ea0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ea4:	ee08 0a10 	vmov	s16, r0
 8009ea8:	4b9f      	ldr	r3, [pc, #636]	; (800a128 <_printf_float+0x2dc>)
 8009eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eb2:	f7f6 fe4b 	bl	8000b4c <__aeabi_dcmpun>
 8009eb6:	bb88      	cbnz	r0, 8009f1c <_printf_float+0xd0>
 8009eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ebc:	4b9a      	ldr	r3, [pc, #616]	; (800a128 <_printf_float+0x2dc>)
 8009ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ec2:	f7f6 fe25 	bl	8000b10 <__aeabi_dcmple>
 8009ec6:	bb48      	cbnz	r0, 8009f1c <_printf_float+0xd0>
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 fe14 	bl	8000afc <__aeabi_dcmplt>
 8009ed4:	b110      	cbz	r0, 8009edc <_printf_float+0x90>
 8009ed6:	232d      	movs	r3, #45	; 0x2d
 8009ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009edc:	4b93      	ldr	r3, [pc, #588]	; (800a12c <_printf_float+0x2e0>)
 8009ede:	4894      	ldr	r0, [pc, #592]	; (800a130 <_printf_float+0x2e4>)
 8009ee0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ee4:	bf94      	ite	ls
 8009ee6:	4698      	movls	r8, r3
 8009ee8:	4680      	movhi	r8, r0
 8009eea:	2303      	movs	r3, #3
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	9b05      	ldr	r3, [sp, #20]
 8009ef0:	f023 0204 	bic.w	r2, r3, #4
 8009ef4:	6022      	str	r2, [r4, #0]
 8009ef6:	f04f 0900 	mov.w	r9, #0
 8009efa:	9700      	str	r7, [sp, #0]
 8009efc:	4633      	mov	r3, r6
 8009efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f00:	4621      	mov	r1, r4
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 f9d8 	bl	800a2b8 <_printf_common>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f040 8090 	bne.w	800a02e <_printf_float+0x1e2>
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f12:	b00d      	add	sp, #52	; 0x34
 8009f14:	ecbd 8b02 	vpop	{d8}
 8009f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1c:	4642      	mov	r2, r8
 8009f1e:	464b      	mov	r3, r9
 8009f20:	4640      	mov	r0, r8
 8009f22:	4649      	mov	r1, r9
 8009f24:	f7f6 fe12 	bl	8000b4c <__aeabi_dcmpun>
 8009f28:	b140      	cbz	r0, 8009f3c <_printf_float+0xf0>
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bfbc      	itt	lt
 8009f30:	232d      	movlt	r3, #45	; 0x2d
 8009f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f36:	487f      	ldr	r0, [pc, #508]	; (800a134 <_printf_float+0x2e8>)
 8009f38:	4b7f      	ldr	r3, [pc, #508]	; (800a138 <_printf_float+0x2ec>)
 8009f3a:	e7d1      	b.n	8009ee0 <_printf_float+0x94>
 8009f3c:	6863      	ldr	r3, [r4, #4]
 8009f3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f42:	9206      	str	r2, [sp, #24]
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	d13f      	bne.n	8009fc8 <_printf_float+0x17c>
 8009f48:	2306      	movs	r3, #6
 8009f4a:	6063      	str	r3, [r4, #4]
 8009f4c:	9b05      	ldr	r3, [sp, #20]
 8009f4e:	6861      	ldr	r1, [r4, #4]
 8009f50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f54:	2300      	movs	r3, #0
 8009f56:	9303      	str	r3, [sp, #12]
 8009f58:	ab0a      	add	r3, sp, #40	; 0x28
 8009f5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f5e:	ab09      	add	r3, sp, #36	; 0x24
 8009f60:	ec49 8b10 	vmov	d0, r8, r9
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	6022      	str	r2, [r4, #0]
 8009f68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f7ff fecd 	bl	8009d0c <__cvt>
 8009f72:	9b06      	ldr	r3, [sp, #24]
 8009f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f76:	2b47      	cmp	r3, #71	; 0x47
 8009f78:	4680      	mov	r8, r0
 8009f7a:	d108      	bne.n	8009f8e <_printf_float+0x142>
 8009f7c:	1cc8      	adds	r0, r1, #3
 8009f7e:	db02      	blt.n	8009f86 <_printf_float+0x13a>
 8009f80:	6863      	ldr	r3, [r4, #4]
 8009f82:	4299      	cmp	r1, r3
 8009f84:	dd41      	ble.n	800a00a <_printf_float+0x1be>
 8009f86:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f8a:	fa5f fb8b 	uxtb.w	fp, fp
 8009f8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f92:	d820      	bhi.n	8009fd6 <_printf_float+0x18a>
 8009f94:	3901      	subs	r1, #1
 8009f96:	465a      	mov	r2, fp
 8009f98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8009f9e:	f7ff ff17 	bl	8009dd0 <__exponent>
 8009fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fa4:	1813      	adds	r3, r2, r0
 8009fa6:	2a01      	cmp	r2, #1
 8009fa8:	4681      	mov	r9, r0
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	dc02      	bgt.n	8009fb4 <_printf_float+0x168>
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	07d2      	lsls	r2, r2, #31
 8009fb2:	d501      	bpl.n	8009fb8 <_printf_float+0x16c>
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d09c      	beq.n	8009efa <_printf_float+0xae>
 8009fc0:	232d      	movs	r3, #45	; 0x2d
 8009fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc6:	e798      	b.n	8009efa <_printf_float+0xae>
 8009fc8:	9a06      	ldr	r2, [sp, #24]
 8009fca:	2a47      	cmp	r2, #71	; 0x47
 8009fcc:	d1be      	bne.n	8009f4c <_printf_float+0x100>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1bc      	bne.n	8009f4c <_printf_float+0x100>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e7b9      	b.n	8009f4a <_printf_float+0xfe>
 8009fd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fda:	d118      	bne.n	800a00e <_printf_float+0x1c2>
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	6863      	ldr	r3, [r4, #4]
 8009fe0:	dd0b      	ble.n	8009ffa <_printf_float+0x1ae>
 8009fe2:	6121      	str	r1, [r4, #16]
 8009fe4:	b913      	cbnz	r3, 8009fec <_printf_float+0x1a0>
 8009fe6:	6822      	ldr	r2, [r4, #0]
 8009fe8:	07d0      	lsls	r0, r2, #31
 8009fea:	d502      	bpl.n	8009ff2 <_printf_float+0x1a6>
 8009fec:	3301      	adds	r3, #1
 8009fee:	440b      	add	r3, r1
 8009ff0:	6123      	str	r3, [r4, #16]
 8009ff2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ff4:	f04f 0900 	mov.w	r9, #0
 8009ff8:	e7de      	b.n	8009fb8 <_printf_float+0x16c>
 8009ffa:	b913      	cbnz	r3, 800a002 <_printf_float+0x1b6>
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	07d2      	lsls	r2, r2, #31
 800a000:	d501      	bpl.n	800a006 <_printf_float+0x1ba>
 800a002:	3302      	adds	r3, #2
 800a004:	e7f4      	b.n	8009ff0 <_printf_float+0x1a4>
 800a006:	2301      	movs	r3, #1
 800a008:	e7f2      	b.n	8009ff0 <_printf_float+0x1a4>
 800a00a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a010:	4299      	cmp	r1, r3
 800a012:	db05      	blt.n	800a020 <_printf_float+0x1d4>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	6121      	str	r1, [r4, #16]
 800a018:	07d8      	lsls	r0, r3, #31
 800a01a:	d5ea      	bpl.n	8009ff2 <_printf_float+0x1a6>
 800a01c:	1c4b      	adds	r3, r1, #1
 800a01e:	e7e7      	b.n	8009ff0 <_printf_float+0x1a4>
 800a020:	2900      	cmp	r1, #0
 800a022:	bfd4      	ite	le
 800a024:	f1c1 0202 	rsble	r2, r1, #2
 800a028:	2201      	movgt	r2, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	e7e0      	b.n	8009ff0 <_printf_float+0x1a4>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	055a      	lsls	r2, r3, #21
 800a032:	d407      	bmi.n	800a044 <_printf_float+0x1f8>
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	4642      	mov	r2, r8
 800a038:	4631      	mov	r1, r6
 800a03a:	4628      	mov	r0, r5
 800a03c:	47b8      	blx	r7
 800a03e:	3001      	adds	r0, #1
 800a040:	d12c      	bne.n	800a09c <_printf_float+0x250>
 800a042:	e764      	b.n	8009f0e <_printf_float+0xc2>
 800a044:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a048:	f240 80e0 	bls.w	800a20c <_printf_float+0x3c0>
 800a04c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a050:	2200      	movs	r2, #0
 800a052:	2300      	movs	r3, #0
 800a054:	f7f6 fd48 	bl	8000ae8 <__aeabi_dcmpeq>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d034      	beq.n	800a0c6 <_printf_float+0x27a>
 800a05c:	4a37      	ldr	r2, [pc, #220]	; (800a13c <_printf_float+0x2f0>)
 800a05e:	2301      	movs	r3, #1
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f af51 	beq.w	8009f0e <_printf_float+0xc2>
 800a06c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a070:	429a      	cmp	r2, r3
 800a072:	db02      	blt.n	800a07a <_printf_float+0x22e>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	07d8      	lsls	r0, r3, #31
 800a078:	d510      	bpl.n	800a09c <_printf_float+0x250>
 800a07a:	ee18 3a10 	vmov	r3, s16
 800a07e:	4652      	mov	r2, sl
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f af41 	beq.w	8009f0e <_printf_float+0xc2>
 800a08c:	f04f 0800 	mov.w	r8, #0
 800a090:	f104 091a 	add.w	r9, r4, #26
 800a094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a096:	3b01      	subs	r3, #1
 800a098:	4543      	cmp	r3, r8
 800a09a:	dc09      	bgt.n	800a0b0 <_printf_float+0x264>
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	079b      	lsls	r3, r3, #30
 800a0a0:	f100 8105 	bmi.w	800a2ae <_printf_float+0x462>
 800a0a4:	68e0      	ldr	r0, [r4, #12]
 800a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a8:	4298      	cmp	r0, r3
 800a0aa:	bfb8      	it	lt
 800a0ac:	4618      	movlt	r0, r3
 800a0ae:	e730      	b.n	8009f12 <_printf_float+0xc6>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	464a      	mov	r2, r9
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b8      	blx	r7
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	f43f af27 	beq.w	8009f0e <_printf_float+0xc2>
 800a0c0:	f108 0801 	add.w	r8, r8, #1
 800a0c4:	e7e6      	b.n	800a094 <_printf_float+0x248>
 800a0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	dc39      	bgt.n	800a140 <_printf_float+0x2f4>
 800a0cc:	4a1b      	ldr	r2, [pc, #108]	; (800a13c <_printf_float+0x2f0>)
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f af19 	beq.w	8009f0e <_printf_float+0xc2>
 800a0dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	d102      	bne.n	800a0ea <_printf_float+0x29e>
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d5d8      	bpl.n	800a09c <_printf_float+0x250>
 800a0ea:	ee18 3a10 	vmov	r3, s16
 800a0ee:	4652      	mov	r2, sl
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	47b8      	blx	r7
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	f43f af09 	beq.w	8009f0e <_printf_float+0xc2>
 800a0fc:	f04f 0900 	mov.w	r9, #0
 800a100:	f104 0a1a 	add.w	sl, r4, #26
 800a104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a106:	425b      	negs	r3, r3
 800a108:	454b      	cmp	r3, r9
 800a10a:	dc01      	bgt.n	800a110 <_printf_float+0x2c4>
 800a10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a10e:	e792      	b.n	800a036 <_printf_float+0x1ea>
 800a110:	2301      	movs	r3, #1
 800a112:	4652      	mov	r2, sl
 800a114:	4631      	mov	r1, r6
 800a116:	4628      	mov	r0, r5
 800a118:	47b8      	blx	r7
 800a11a:	3001      	adds	r0, #1
 800a11c:	f43f aef7 	beq.w	8009f0e <_printf_float+0xc2>
 800a120:	f109 0901 	add.w	r9, r9, #1
 800a124:	e7ee      	b.n	800a104 <_printf_float+0x2b8>
 800a126:	bf00      	nop
 800a128:	7fefffff 	.word	0x7fefffff
 800a12c:	0800e6c4 	.word	0x0800e6c4
 800a130:	0800e6c8 	.word	0x0800e6c8
 800a134:	0800e6d0 	.word	0x0800e6d0
 800a138:	0800e6cc 	.word	0x0800e6cc
 800a13c:	0800e6d4 	.word	0x0800e6d4
 800a140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a144:	429a      	cmp	r2, r3
 800a146:	bfa8      	it	ge
 800a148:	461a      	movge	r2, r3
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	4691      	mov	r9, r2
 800a14e:	dc37      	bgt.n	800a1c0 <_printf_float+0x374>
 800a150:	f04f 0b00 	mov.w	fp, #0
 800a154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a158:	f104 021a 	add.w	r2, r4, #26
 800a15c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a15e:	9305      	str	r3, [sp, #20]
 800a160:	eba3 0309 	sub.w	r3, r3, r9
 800a164:	455b      	cmp	r3, fp
 800a166:	dc33      	bgt.n	800a1d0 <_printf_float+0x384>
 800a168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a16c:	429a      	cmp	r2, r3
 800a16e:	db3b      	blt.n	800a1e8 <_printf_float+0x39c>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	07da      	lsls	r2, r3, #31
 800a174:	d438      	bmi.n	800a1e8 <_printf_float+0x39c>
 800a176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a178:	9a05      	ldr	r2, [sp, #20]
 800a17a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a17c:	1a9a      	subs	r2, r3, r2
 800a17e:	eba3 0901 	sub.w	r9, r3, r1
 800a182:	4591      	cmp	r9, r2
 800a184:	bfa8      	it	ge
 800a186:	4691      	movge	r9, r2
 800a188:	f1b9 0f00 	cmp.w	r9, #0
 800a18c:	dc35      	bgt.n	800a1fa <_printf_float+0x3ae>
 800a18e:	f04f 0800 	mov.w	r8, #0
 800a192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a196:	f104 0a1a 	add.w	sl, r4, #26
 800a19a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	eba3 0309 	sub.w	r3, r3, r9
 800a1a4:	4543      	cmp	r3, r8
 800a1a6:	f77f af79 	ble.w	800a09c <_printf_float+0x250>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	4652      	mov	r2, sl
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	f43f aeaa 	beq.w	8009f0e <_printf_float+0xc2>
 800a1ba:	f108 0801 	add.w	r8, r8, #1
 800a1be:	e7ec      	b.n	800a19a <_printf_float+0x34e>
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b8      	blx	r7
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d1c0      	bne.n	800a150 <_printf_float+0x304>
 800a1ce:	e69e      	b.n	8009f0e <_printf_float+0xc2>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	9205      	str	r2, [sp, #20]
 800a1d8:	47b8      	blx	r7
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f43f ae97 	beq.w	8009f0e <_printf_float+0xc2>
 800a1e0:	9a05      	ldr	r2, [sp, #20]
 800a1e2:	f10b 0b01 	add.w	fp, fp, #1
 800a1e6:	e7b9      	b.n	800a15c <_printf_float+0x310>
 800a1e8:	ee18 3a10 	vmov	r3, s16
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	47b8      	blx	r7
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d1be      	bne.n	800a176 <_printf_float+0x32a>
 800a1f8:	e689      	b.n	8009f0e <_printf_float+0xc2>
 800a1fa:	9a05      	ldr	r2, [sp, #20]
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	4442      	add	r2, r8
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	47b8      	blx	r7
 800a206:	3001      	adds	r0, #1
 800a208:	d1c1      	bne.n	800a18e <_printf_float+0x342>
 800a20a:	e680      	b.n	8009f0e <_printf_float+0xc2>
 800a20c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a20e:	2a01      	cmp	r2, #1
 800a210:	dc01      	bgt.n	800a216 <_printf_float+0x3ca>
 800a212:	07db      	lsls	r3, r3, #31
 800a214:	d538      	bpl.n	800a288 <_printf_float+0x43c>
 800a216:	2301      	movs	r3, #1
 800a218:	4642      	mov	r2, r8
 800a21a:	4631      	mov	r1, r6
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b8      	blx	r7
 800a220:	3001      	adds	r0, #1
 800a222:	f43f ae74 	beq.w	8009f0e <_printf_float+0xc2>
 800a226:	ee18 3a10 	vmov	r3, s16
 800a22a:	4652      	mov	r2, sl
 800a22c:	4631      	mov	r1, r6
 800a22e:	4628      	mov	r0, r5
 800a230:	47b8      	blx	r7
 800a232:	3001      	adds	r0, #1
 800a234:	f43f ae6b 	beq.w	8009f0e <_printf_float+0xc2>
 800a238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a23c:	2200      	movs	r2, #0
 800a23e:	2300      	movs	r3, #0
 800a240:	f7f6 fc52 	bl	8000ae8 <__aeabi_dcmpeq>
 800a244:	b9d8      	cbnz	r0, 800a27e <_printf_float+0x432>
 800a246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a248:	f108 0201 	add.w	r2, r8, #1
 800a24c:	3b01      	subs	r3, #1
 800a24e:	4631      	mov	r1, r6
 800a250:	4628      	mov	r0, r5
 800a252:	47b8      	blx	r7
 800a254:	3001      	adds	r0, #1
 800a256:	d10e      	bne.n	800a276 <_printf_float+0x42a>
 800a258:	e659      	b.n	8009f0e <_printf_float+0xc2>
 800a25a:	2301      	movs	r3, #1
 800a25c:	4652      	mov	r2, sl
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	f43f ae52 	beq.w	8009f0e <_printf_float+0xc2>
 800a26a:	f108 0801 	add.w	r8, r8, #1
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	3b01      	subs	r3, #1
 800a272:	4543      	cmp	r3, r8
 800a274:	dcf1      	bgt.n	800a25a <_printf_float+0x40e>
 800a276:	464b      	mov	r3, r9
 800a278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a27c:	e6dc      	b.n	800a038 <_printf_float+0x1ec>
 800a27e:	f04f 0800 	mov.w	r8, #0
 800a282:	f104 0a1a 	add.w	sl, r4, #26
 800a286:	e7f2      	b.n	800a26e <_printf_float+0x422>
 800a288:	2301      	movs	r3, #1
 800a28a:	4642      	mov	r2, r8
 800a28c:	e7df      	b.n	800a24e <_printf_float+0x402>
 800a28e:	2301      	movs	r3, #1
 800a290:	464a      	mov	r2, r9
 800a292:	4631      	mov	r1, r6
 800a294:	4628      	mov	r0, r5
 800a296:	47b8      	blx	r7
 800a298:	3001      	adds	r0, #1
 800a29a:	f43f ae38 	beq.w	8009f0e <_printf_float+0xc2>
 800a29e:	f108 0801 	add.w	r8, r8, #1
 800a2a2:	68e3      	ldr	r3, [r4, #12]
 800a2a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2a6:	1a5b      	subs	r3, r3, r1
 800a2a8:	4543      	cmp	r3, r8
 800a2aa:	dcf0      	bgt.n	800a28e <_printf_float+0x442>
 800a2ac:	e6fa      	b.n	800a0a4 <_printf_float+0x258>
 800a2ae:	f04f 0800 	mov.w	r8, #0
 800a2b2:	f104 0919 	add.w	r9, r4, #25
 800a2b6:	e7f4      	b.n	800a2a2 <_printf_float+0x456>

0800a2b8 <_printf_common>:
 800a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2bc:	4616      	mov	r6, r2
 800a2be:	4699      	mov	r9, r3
 800a2c0:	688a      	ldr	r2, [r1, #8]
 800a2c2:	690b      	ldr	r3, [r1, #16]
 800a2c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	bfb8      	it	lt
 800a2cc:	4613      	movlt	r3, r2
 800a2ce:	6033      	str	r3, [r6, #0]
 800a2d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	b10a      	cbz	r2, 800a2de <_printf_common+0x26>
 800a2da:	3301      	adds	r3, #1
 800a2dc:	6033      	str	r3, [r6, #0]
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	0699      	lsls	r1, r3, #26
 800a2e2:	bf42      	ittt	mi
 800a2e4:	6833      	ldrmi	r3, [r6, #0]
 800a2e6:	3302      	addmi	r3, #2
 800a2e8:	6033      	strmi	r3, [r6, #0]
 800a2ea:	6825      	ldr	r5, [r4, #0]
 800a2ec:	f015 0506 	ands.w	r5, r5, #6
 800a2f0:	d106      	bne.n	800a300 <_printf_common+0x48>
 800a2f2:	f104 0a19 	add.w	sl, r4, #25
 800a2f6:	68e3      	ldr	r3, [r4, #12]
 800a2f8:	6832      	ldr	r2, [r6, #0]
 800a2fa:	1a9b      	subs	r3, r3, r2
 800a2fc:	42ab      	cmp	r3, r5
 800a2fe:	dc26      	bgt.n	800a34e <_printf_common+0x96>
 800a300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a304:	1e13      	subs	r3, r2, #0
 800a306:	6822      	ldr	r2, [r4, #0]
 800a308:	bf18      	it	ne
 800a30a:	2301      	movne	r3, #1
 800a30c:	0692      	lsls	r2, r2, #26
 800a30e:	d42b      	bmi.n	800a368 <_printf_common+0xb0>
 800a310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a314:	4649      	mov	r1, r9
 800a316:	4638      	mov	r0, r7
 800a318:	47c0      	blx	r8
 800a31a:	3001      	adds	r0, #1
 800a31c:	d01e      	beq.n	800a35c <_printf_common+0xa4>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	68e5      	ldr	r5, [r4, #12]
 800a322:	6832      	ldr	r2, [r6, #0]
 800a324:	f003 0306 	and.w	r3, r3, #6
 800a328:	2b04      	cmp	r3, #4
 800a32a:	bf08      	it	eq
 800a32c:	1aad      	subeq	r5, r5, r2
 800a32e:	68a3      	ldr	r3, [r4, #8]
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	bf0c      	ite	eq
 800a334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a338:	2500      	movne	r5, #0
 800a33a:	4293      	cmp	r3, r2
 800a33c:	bfc4      	itt	gt
 800a33e:	1a9b      	subgt	r3, r3, r2
 800a340:	18ed      	addgt	r5, r5, r3
 800a342:	2600      	movs	r6, #0
 800a344:	341a      	adds	r4, #26
 800a346:	42b5      	cmp	r5, r6
 800a348:	d11a      	bne.n	800a380 <_printf_common+0xc8>
 800a34a:	2000      	movs	r0, #0
 800a34c:	e008      	b.n	800a360 <_printf_common+0xa8>
 800a34e:	2301      	movs	r3, #1
 800a350:	4652      	mov	r2, sl
 800a352:	4649      	mov	r1, r9
 800a354:	4638      	mov	r0, r7
 800a356:	47c0      	blx	r8
 800a358:	3001      	adds	r0, #1
 800a35a:	d103      	bne.n	800a364 <_printf_common+0xac>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a364:	3501      	adds	r5, #1
 800a366:	e7c6      	b.n	800a2f6 <_printf_common+0x3e>
 800a368:	18e1      	adds	r1, r4, r3
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	2030      	movs	r0, #48	; 0x30
 800a36e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a372:	4422      	add	r2, r4
 800a374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a37c:	3302      	adds	r3, #2
 800a37e:	e7c7      	b.n	800a310 <_printf_common+0x58>
 800a380:	2301      	movs	r3, #1
 800a382:	4622      	mov	r2, r4
 800a384:	4649      	mov	r1, r9
 800a386:	4638      	mov	r0, r7
 800a388:	47c0      	blx	r8
 800a38a:	3001      	adds	r0, #1
 800a38c:	d0e6      	beq.n	800a35c <_printf_common+0xa4>
 800a38e:	3601      	adds	r6, #1
 800a390:	e7d9      	b.n	800a346 <_printf_common+0x8e>
	...

0800a394 <_printf_i>:
 800a394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a398:	7e0f      	ldrb	r7, [r1, #24]
 800a39a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a39c:	2f78      	cmp	r7, #120	; 0x78
 800a39e:	4691      	mov	r9, r2
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	469a      	mov	sl, r3
 800a3a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3aa:	d807      	bhi.n	800a3bc <_printf_i+0x28>
 800a3ac:	2f62      	cmp	r7, #98	; 0x62
 800a3ae:	d80a      	bhi.n	800a3c6 <_printf_i+0x32>
 800a3b0:	2f00      	cmp	r7, #0
 800a3b2:	f000 80d8 	beq.w	800a566 <_printf_i+0x1d2>
 800a3b6:	2f58      	cmp	r7, #88	; 0x58
 800a3b8:	f000 80a3 	beq.w	800a502 <_printf_i+0x16e>
 800a3bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3c4:	e03a      	b.n	800a43c <_printf_i+0xa8>
 800a3c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3ca:	2b15      	cmp	r3, #21
 800a3cc:	d8f6      	bhi.n	800a3bc <_printf_i+0x28>
 800a3ce:	a101      	add	r1, pc, #4	; (adr r1, 800a3d4 <_printf_i+0x40>)
 800a3d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3d4:	0800a42d 	.word	0x0800a42d
 800a3d8:	0800a441 	.word	0x0800a441
 800a3dc:	0800a3bd 	.word	0x0800a3bd
 800a3e0:	0800a3bd 	.word	0x0800a3bd
 800a3e4:	0800a3bd 	.word	0x0800a3bd
 800a3e8:	0800a3bd 	.word	0x0800a3bd
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a3bd 	.word	0x0800a3bd
 800a3f4:	0800a3bd 	.word	0x0800a3bd
 800a3f8:	0800a3bd 	.word	0x0800a3bd
 800a3fc:	0800a3bd 	.word	0x0800a3bd
 800a400:	0800a54d 	.word	0x0800a54d
 800a404:	0800a471 	.word	0x0800a471
 800a408:	0800a52f 	.word	0x0800a52f
 800a40c:	0800a3bd 	.word	0x0800a3bd
 800a410:	0800a3bd 	.word	0x0800a3bd
 800a414:	0800a56f 	.word	0x0800a56f
 800a418:	0800a3bd 	.word	0x0800a3bd
 800a41c:	0800a471 	.word	0x0800a471
 800a420:	0800a3bd 	.word	0x0800a3bd
 800a424:	0800a3bd 	.word	0x0800a3bd
 800a428:	0800a537 	.word	0x0800a537
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	1d1a      	adds	r2, r3, #4
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	602a      	str	r2, [r5, #0]
 800a434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a43c:	2301      	movs	r3, #1
 800a43e:	e0a3      	b.n	800a588 <_printf_i+0x1f4>
 800a440:	6820      	ldr	r0, [r4, #0]
 800a442:	6829      	ldr	r1, [r5, #0]
 800a444:	0606      	lsls	r6, r0, #24
 800a446:	f101 0304 	add.w	r3, r1, #4
 800a44a:	d50a      	bpl.n	800a462 <_printf_i+0xce>
 800a44c:	680e      	ldr	r6, [r1, #0]
 800a44e:	602b      	str	r3, [r5, #0]
 800a450:	2e00      	cmp	r6, #0
 800a452:	da03      	bge.n	800a45c <_printf_i+0xc8>
 800a454:	232d      	movs	r3, #45	; 0x2d
 800a456:	4276      	negs	r6, r6
 800a458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a45c:	485e      	ldr	r0, [pc, #376]	; (800a5d8 <_printf_i+0x244>)
 800a45e:	230a      	movs	r3, #10
 800a460:	e019      	b.n	800a496 <_printf_i+0x102>
 800a462:	680e      	ldr	r6, [r1, #0]
 800a464:	602b      	str	r3, [r5, #0]
 800a466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a46a:	bf18      	it	ne
 800a46c:	b236      	sxthne	r6, r6
 800a46e:	e7ef      	b.n	800a450 <_printf_i+0xbc>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	6820      	ldr	r0, [r4, #0]
 800a474:	1d19      	adds	r1, r3, #4
 800a476:	6029      	str	r1, [r5, #0]
 800a478:	0601      	lsls	r1, r0, #24
 800a47a:	d501      	bpl.n	800a480 <_printf_i+0xec>
 800a47c:	681e      	ldr	r6, [r3, #0]
 800a47e:	e002      	b.n	800a486 <_printf_i+0xf2>
 800a480:	0646      	lsls	r6, r0, #25
 800a482:	d5fb      	bpl.n	800a47c <_printf_i+0xe8>
 800a484:	881e      	ldrh	r6, [r3, #0]
 800a486:	4854      	ldr	r0, [pc, #336]	; (800a5d8 <_printf_i+0x244>)
 800a488:	2f6f      	cmp	r7, #111	; 0x6f
 800a48a:	bf0c      	ite	eq
 800a48c:	2308      	moveq	r3, #8
 800a48e:	230a      	movne	r3, #10
 800a490:	2100      	movs	r1, #0
 800a492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a496:	6865      	ldr	r5, [r4, #4]
 800a498:	60a5      	str	r5, [r4, #8]
 800a49a:	2d00      	cmp	r5, #0
 800a49c:	bfa2      	ittt	ge
 800a49e:	6821      	ldrge	r1, [r4, #0]
 800a4a0:	f021 0104 	bicge.w	r1, r1, #4
 800a4a4:	6021      	strge	r1, [r4, #0]
 800a4a6:	b90e      	cbnz	r6, 800a4ac <_printf_i+0x118>
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	d04d      	beq.n	800a548 <_printf_i+0x1b4>
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a4b6:	5dc7      	ldrb	r7, [r0, r7]
 800a4b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4bc:	4637      	mov	r7, r6
 800a4be:	42bb      	cmp	r3, r7
 800a4c0:	460e      	mov	r6, r1
 800a4c2:	d9f4      	bls.n	800a4ae <_printf_i+0x11a>
 800a4c4:	2b08      	cmp	r3, #8
 800a4c6:	d10b      	bne.n	800a4e0 <_printf_i+0x14c>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	07de      	lsls	r6, r3, #31
 800a4cc:	d508      	bpl.n	800a4e0 <_printf_i+0x14c>
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	6861      	ldr	r1, [r4, #4]
 800a4d2:	4299      	cmp	r1, r3
 800a4d4:	bfde      	ittt	le
 800a4d6:	2330      	movle	r3, #48	; 0x30
 800a4d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4e0:	1b52      	subs	r2, r2, r5
 800a4e2:	6122      	str	r2, [r4, #16]
 800a4e4:	f8cd a000 	str.w	sl, [sp]
 800a4e8:	464b      	mov	r3, r9
 800a4ea:	aa03      	add	r2, sp, #12
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7ff fee2 	bl	800a2b8 <_printf_common>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d14c      	bne.n	800a592 <_printf_i+0x1fe>
 800a4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4fc:	b004      	add	sp, #16
 800a4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a502:	4835      	ldr	r0, [pc, #212]	; (800a5d8 <_printf_i+0x244>)
 800a504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a508:	6829      	ldr	r1, [r5, #0]
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a510:	6029      	str	r1, [r5, #0]
 800a512:	061d      	lsls	r5, r3, #24
 800a514:	d514      	bpl.n	800a540 <_printf_i+0x1ac>
 800a516:	07df      	lsls	r7, r3, #31
 800a518:	bf44      	itt	mi
 800a51a:	f043 0320 	orrmi.w	r3, r3, #32
 800a51e:	6023      	strmi	r3, [r4, #0]
 800a520:	b91e      	cbnz	r6, 800a52a <_printf_i+0x196>
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	f023 0320 	bic.w	r3, r3, #32
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	2310      	movs	r3, #16
 800a52c:	e7b0      	b.n	800a490 <_printf_i+0xfc>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	f043 0320 	orr.w	r3, r3, #32
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	2378      	movs	r3, #120	; 0x78
 800a538:	4828      	ldr	r0, [pc, #160]	; (800a5dc <_printf_i+0x248>)
 800a53a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a53e:	e7e3      	b.n	800a508 <_printf_i+0x174>
 800a540:	0659      	lsls	r1, r3, #25
 800a542:	bf48      	it	mi
 800a544:	b2b6      	uxthmi	r6, r6
 800a546:	e7e6      	b.n	800a516 <_printf_i+0x182>
 800a548:	4615      	mov	r5, r2
 800a54a:	e7bb      	b.n	800a4c4 <_printf_i+0x130>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	6826      	ldr	r6, [r4, #0]
 800a550:	6961      	ldr	r1, [r4, #20]
 800a552:	1d18      	adds	r0, r3, #4
 800a554:	6028      	str	r0, [r5, #0]
 800a556:	0635      	lsls	r5, r6, #24
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	d501      	bpl.n	800a560 <_printf_i+0x1cc>
 800a55c:	6019      	str	r1, [r3, #0]
 800a55e:	e002      	b.n	800a566 <_printf_i+0x1d2>
 800a560:	0670      	lsls	r0, r6, #25
 800a562:	d5fb      	bpl.n	800a55c <_printf_i+0x1c8>
 800a564:	8019      	strh	r1, [r3, #0]
 800a566:	2300      	movs	r3, #0
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	4615      	mov	r5, r2
 800a56c:	e7ba      	b.n	800a4e4 <_printf_i+0x150>
 800a56e:	682b      	ldr	r3, [r5, #0]
 800a570:	1d1a      	adds	r2, r3, #4
 800a572:	602a      	str	r2, [r5, #0]
 800a574:	681d      	ldr	r5, [r3, #0]
 800a576:	6862      	ldr	r2, [r4, #4]
 800a578:	2100      	movs	r1, #0
 800a57a:	4628      	mov	r0, r5
 800a57c:	f7f5 fe40 	bl	8000200 <memchr>
 800a580:	b108      	cbz	r0, 800a586 <_printf_i+0x1f2>
 800a582:	1b40      	subs	r0, r0, r5
 800a584:	6060      	str	r0, [r4, #4]
 800a586:	6863      	ldr	r3, [r4, #4]
 800a588:	6123      	str	r3, [r4, #16]
 800a58a:	2300      	movs	r3, #0
 800a58c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a590:	e7a8      	b.n	800a4e4 <_printf_i+0x150>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	462a      	mov	r2, r5
 800a596:	4649      	mov	r1, r9
 800a598:	4640      	mov	r0, r8
 800a59a:	47d0      	blx	sl
 800a59c:	3001      	adds	r0, #1
 800a59e:	d0ab      	beq.n	800a4f8 <_printf_i+0x164>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	079b      	lsls	r3, r3, #30
 800a5a4:	d413      	bmi.n	800a5ce <_printf_i+0x23a>
 800a5a6:	68e0      	ldr	r0, [r4, #12]
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	4298      	cmp	r0, r3
 800a5ac:	bfb8      	it	lt
 800a5ae:	4618      	movlt	r0, r3
 800a5b0:	e7a4      	b.n	800a4fc <_printf_i+0x168>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	47d0      	blx	sl
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d09b      	beq.n	800a4f8 <_printf_i+0x164>
 800a5c0:	3501      	adds	r5, #1
 800a5c2:	68e3      	ldr	r3, [r4, #12]
 800a5c4:	9903      	ldr	r1, [sp, #12]
 800a5c6:	1a5b      	subs	r3, r3, r1
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	dcf2      	bgt.n	800a5b2 <_printf_i+0x21e>
 800a5cc:	e7eb      	b.n	800a5a6 <_printf_i+0x212>
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	f104 0619 	add.w	r6, r4, #25
 800a5d4:	e7f5      	b.n	800a5c2 <_printf_i+0x22e>
 800a5d6:	bf00      	nop
 800a5d8:	0800e6d6 	.word	0x0800e6d6
 800a5dc:	0800e6e7 	.word	0x0800e6e7

0800a5e0 <_scanf_float>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	b087      	sub	sp, #28
 800a5e6:	4617      	mov	r7, r2
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	688b      	ldr	r3, [r1, #8]
 800a5ec:	1e5a      	subs	r2, r3, #1
 800a5ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a5f2:	bf83      	ittte	hi
 800a5f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a5f8:	195b      	addhi	r3, r3, r5
 800a5fa:	9302      	strhi	r3, [sp, #8]
 800a5fc:	2300      	movls	r3, #0
 800a5fe:	bf86      	itte	hi
 800a600:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a604:	608b      	strhi	r3, [r1, #8]
 800a606:	9302      	strls	r3, [sp, #8]
 800a608:	680b      	ldr	r3, [r1, #0]
 800a60a:	468b      	mov	fp, r1
 800a60c:	2500      	movs	r5, #0
 800a60e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a612:	f84b 3b1c 	str.w	r3, [fp], #28
 800a616:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a61a:	4680      	mov	r8, r0
 800a61c:	460c      	mov	r4, r1
 800a61e:	465e      	mov	r6, fp
 800a620:	46aa      	mov	sl, r5
 800a622:	46a9      	mov	r9, r5
 800a624:	9501      	str	r5, [sp, #4]
 800a626:	68a2      	ldr	r2, [r4, #8]
 800a628:	b152      	cbz	r2, 800a640 <_scanf_float+0x60>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b4e      	cmp	r3, #78	; 0x4e
 800a630:	d864      	bhi.n	800a6fc <_scanf_float+0x11c>
 800a632:	2b40      	cmp	r3, #64	; 0x40
 800a634:	d83c      	bhi.n	800a6b0 <_scanf_float+0xd0>
 800a636:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a63a:	b2c8      	uxtb	r0, r1
 800a63c:	280e      	cmp	r0, #14
 800a63e:	d93a      	bls.n	800a6b6 <_scanf_float+0xd6>
 800a640:	f1b9 0f00 	cmp.w	r9, #0
 800a644:	d003      	beq.n	800a64e <_scanf_float+0x6e>
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a652:	f1ba 0f01 	cmp.w	sl, #1
 800a656:	f200 8113 	bhi.w	800a880 <_scanf_float+0x2a0>
 800a65a:	455e      	cmp	r6, fp
 800a65c:	f200 8105 	bhi.w	800a86a <_scanf_float+0x28a>
 800a660:	2501      	movs	r5, #1
 800a662:	4628      	mov	r0, r5
 800a664:	b007      	add	sp, #28
 800a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a66e:	2a0d      	cmp	r2, #13
 800a670:	d8e6      	bhi.n	800a640 <_scanf_float+0x60>
 800a672:	a101      	add	r1, pc, #4	; (adr r1, 800a678 <_scanf_float+0x98>)
 800a674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a678:	0800a7b7 	.word	0x0800a7b7
 800a67c:	0800a641 	.word	0x0800a641
 800a680:	0800a641 	.word	0x0800a641
 800a684:	0800a641 	.word	0x0800a641
 800a688:	0800a817 	.word	0x0800a817
 800a68c:	0800a7ef 	.word	0x0800a7ef
 800a690:	0800a641 	.word	0x0800a641
 800a694:	0800a641 	.word	0x0800a641
 800a698:	0800a7c5 	.word	0x0800a7c5
 800a69c:	0800a641 	.word	0x0800a641
 800a6a0:	0800a641 	.word	0x0800a641
 800a6a4:	0800a641 	.word	0x0800a641
 800a6a8:	0800a641 	.word	0x0800a641
 800a6ac:	0800a77d 	.word	0x0800a77d
 800a6b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a6b4:	e7db      	b.n	800a66e <_scanf_float+0x8e>
 800a6b6:	290e      	cmp	r1, #14
 800a6b8:	d8c2      	bhi.n	800a640 <_scanf_float+0x60>
 800a6ba:	a001      	add	r0, pc, #4	; (adr r0, 800a6c0 <_scanf_float+0xe0>)
 800a6bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a6c0:	0800a76f 	.word	0x0800a76f
 800a6c4:	0800a641 	.word	0x0800a641
 800a6c8:	0800a76f 	.word	0x0800a76f
 800a6cc:	0800a803 	.word	0x0800a803
 800a6d0:	0800a641 	.word	0x0800a641
 800a6d4:	0800a71d 	.word	0x0800a71d
 800a6d8:	0800a759 	.word	0x0800a759
 800a6dc:	0800a759 	.word	0x0800a759
 800a6e0:	0800a759 	.word	0x0800a759
 800a6e4:	0800a759 	.word	0x0800a759
 800a6e8:	0800a759 	.word	0x0800a759
 800a6ec:	0800a759 	.word	0x0800a759
 800a6f0:	0800a759 	.word	0x0800a759
 800a6f4:	0800a759 	.word	0x0800a759
 800a6f8:	0800a759 	.word	0x0800a759
 800a6fc:	2b6e      	cmp	r3, #110	; 0x6e
 800a6fe:	d809      	bhi.n	800a714 <_scanf_float+0x134>
 800a700:	2b60      	cmp	r3, #96	; 0x60
 800a702:	d8b2      	bhi.n	800a66a <_scanf_float+0x8a>
 800a704:	2b54      	cmp	r3, #84	; 0x54
 800a706:	d077      	beq.n	800a7f8 <_scanf_float+0x218>
 800a708:	2b59      	cmp	r3, #89	; 0x59
 800a70a:	d199      	bne.n	800a640 <_scanf_float+0x60>
 800a70c:	2d07      	cmp	r5, #7
 800a70e:	d197      	bne.n	800a640 <_scanf_float+0x60>
 800a710:	2508      	movs	r5, #8
 800a712:	e029      	b.n	800a768 <_scanf_float+0x188>
 800a714:	2b74      	cmp	r3, #116	; 0x74
 800a716:	d06f      	beq.n	800a7f8 <_scanf_float+0x218>
 800a718:	2b79      	cmp	r3, #121	; 0x79
 800a71a:	e7f6      	b.n	800a70a <_scanf_float+0x12a>
 800a71c:	6821      	ldr	r1, [r4, #0]
 800a71e:	05c8      	lsls	r0, r1, #23
 800a720:	d51a      	bpl.n	800a758 <_scanf_float+0x178>
 800a722:	9b02      	ldr	r3, [sp, #8]
 800a724:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a728:	6021      	str	r1, [r4, #0]
 800a72a:	f109 0901 	add.w	r9, r9, #1
 800a72e:	b11b      	cbz	r3, 800a738 <_scanf_float+0x158>
 800a730:	3b01      	subs	r3, #1
 800a732:	3201      	adds	r2, #1
 800a734:	9302      	str	r3, [sp, #8]
 800a736:	60a2      	str	r2, [r4, #8]
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	60a3      	str	r3, [r4, #8]
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	3301      	adds	r3, #1
 800a742:	6123      	str	r3, [r4, #16]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3b01      	subs	r3, #1
 800a748:	2b00      	cmp	r3, #0
 800a74a:	607b      	str	r3, [r7, #4]
 800a74c:	f340 8084 	ble.w	800a858 <_scanf_float+0x278>
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	3301      	adds	r3, #1
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	e766      	b.n	800a626 <_scanf_float+0x46>
 800a758:	eb1a 0f05 	cmn.w	sl, r5
 800a75c:	f47f af70 	bne.w	800a640 <_scanf_float+0x60>
 800a760:	6822      	ldr	r2, [r4, #0]
 800a762:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a766:	6022      	str	r2, [r4, #0]
 800a768:	f806 3b01 	strb.w	r3, [r6], #1
 800a76c:	e7e4      	b.n	800a738 <_scanf_float+0x158>
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	0610      	lsls	r0, r2, #24
 800a772:	f57f af65 	bpl.w	800a640 <_scanf_float+0x60>
 800a776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a77a:	e7f4      	b.n	800a766 <_scanf_float+0x186>
 800a77c:	f1ba 0f00 	cmp.w	sl, #0
 800a780:	d10e      	bne.n	800a7a0 <_scanf_float+0x1c0>
 800a782:	f1b9 0f00 	cmp.w	r9, #0
 800a786:	d10e      	bne.n	800a7a6 <_scanf_float+0x1c6>
 800a788:	6822      	ldr	r2, [r4, #0]
 800a78a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a78e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a792:	d108      	bne.n	800a7a6 <_scanf_float+0x1c6>
 800a794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a798:	6022      	str	r2, [r4, #0]
 800a79a:	f04f 0a01 	mov.w	sl, #1
 800a79e:	e7e3      	b.n	800a768 <_scanf_float+0x188>
 800a7a0:	f1ba 0f02 	cmp.w	sl, #2
 800a7a4:	d055      	beq.n	800a852 <_scanf_float+0x272>
 800a7a6:	2d01      	cmp	r5, #1
 800a7a8:	d002      	beq.n	800a7b0 <_scanf_float+0x1d0>
 800a7aa:	2d04      	cmp	r5, #4
 800a7ac:	f47f af48 	bne.w	800a640 <_scanf_float+0x60>
 800a7b0:	3501      	adds	r5, #1
 800a7b2:	b2ed      	uxtb	r5, r5
 800a7b4:	e7d8      	b.n	800a768 <_scanf_float+0x188>
 800a7b6:	f1ba 0f01 	cmp.w	sl, #1
 800a7ba:	f47f af41 	bne.w	800a640 <_scanf_float+0x60>
 800a7be:	f04f 0a02 	mov.w	sl, #2
 800a7c2:	e7d1      	b.n	800a768 <_scanf_float+0x188>
 800a7c4:	b97d      	cbnz	r5, 800a7e6 <_scanf_float+0x206>
 800a7c6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ca:	f47f af3c 	bne.w	800a646 <_scanf_float+0x66>
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7d8:	f47f af39 	bne.w	800a64e <_scanf_float+0x6e>
 800a7dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7e0:	6022      	str	r2, [r4, #0]
 800a7e2:	2501      	movs	r5, #1
 800a7e4:	e7c0      	b.n	800a768 <_scanf_float+0x188>
 800a7e6:	2d03      	cmp	r5, #3
 800a7e8:	d0e2      	beq.n	800a7b0 <_scanf_float+0x1d0>
 800a7ea:	2d05      	cmp	r5, #5
 800a7ec:	e7de      	b.n	800a7ac <_scanf_float+0x1cc>
 800a7ee:	2d02      	cmp	r5, #2
 800a7f0:	f47f af26 	bne.w	800a640 <_scanf_float+0x60>
 800a7f4:	2503      	movs	r5, #3
 800a7f6:	e7b7      	b.n	800a768 <_scanf_float+0x188>
 800a7f8:	2d06      	cmp	r5, #6
 800a7fa:	f47f af21 	bne.w	800a640 <_scanf_float+0x60>
 800a7fe:	2507      	movs	r5, #7
 800a800:	e7b2      	b.n	800a768 <_scanf_float+0x188>
 800a802:	6822      	ldr	r2, [r4, #0]
 800a804:	0591      	lsls	r1, r2, #22
 800a806:	f57f af1b 	bpl.w	800a640 <_scanf_float+0x60>
 800a80a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a80e:	6022      	str	r2, [r4, #0]
 800a810:	f8cd 9004 	str.w	r9, [sp, #4]
 800a814:	e7a8      	b.n	800a768 <_scanf_float+0x188>
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a81c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a820:	d006      	beq.n	800a830 <_scanf_float+0x250>
 800a822:	0550      	lsls	r0, r2, #21
 800a824:	f57f af0c 	bpl.w	800a640 <_scanf_float+0x60>
 800a828:	f1b9 0f00 	cmp.w	r9, #0
 800a82c:	f43f af0f 	beq.w	800a64e <_scanf_float+0x6e>
 800a830:	0591      	lsls	r1, r2, #22
 800a832:	bf58      	it	pl
 800a834:	9901      	ldrpl	r1, [sp, #4]
 800a836:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a83a:	bf58      	it	pl
 800a83c:	eba9 0101 	subpl.w	r1, r9, r1
 800a840:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a844:	bf58      	it	pl
 800a846:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a84a:	6022      	str	r2, [r4, #0]
 800a84c:	f04f 0900 	mov.w	r9, #0
 800a850:	e78a      	b.n	800a768 <_scanf_float+0x188>
 800a852:	f04f 0a03 	mov.w	sl, #3
 800a856:	e787      	b.n	800a768 <_scanf_float+0x188>
 800a858:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a85c:	4639      	mov	r1, r7
 800a85e:	4640      	mov	r0, r8
 800a860:	4798      	blx	r3
 800a862:	2800      	cmp	r0, #0
 800a864:	f43f aedf 	beq.w	800a626 <_scanf_float+0x46>
 800a868:	e6ea      	b.n	800a640 <_scanf_float+0x60>
 800a86a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a86e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a872:	463a      	mov	r2, r7
 800a874:	4640      	mov	r0, r8
 800a876:	4798      	blx	r3
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	6123      	str	r3, [r4, #16]
 800a87e:	e6ec      	b.n	800a65a <_scanf_float+0x7a>
 800a880:	1e6b      	subs	r3, r5, #1
 800a882:	2b06      	cmp	r3, #6
 800a884:	d825      	bhi.n	800a8d2 <_scanf_float+0x2f2>
 800a886:	2d02      	cmp	r5, #2
 800a888:	d836      	bhi.n	800a8f8 <_scanf_float+0x318>
 800a88a:	455e      	cmp	r6, fp
 800a88c:	f67f aee8 	bls.w	800a660 <_scanf_float+0x80>
 800a890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a894:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a898:	463a      	mov	r2, r7
 800a89a:	4640      	mov	r0, r8
 800a89c:	4798      	blx	r3
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	6123      	str	r3, [r4, #16]
 800a8a4:	e7f1      	b.n	800a88a <_scanf_float+0x2aa>
 800a8a6:	9802      	ldr	r0, [sp, #8]
 800a8a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a8b0:	9002      	str	r0, [sp, #8]
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	4798      	blx	r3
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	6123      	str	r3, [r4, #16]
 800a8be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a8c2:	fa5f fa8a 	uxtb.w	sl, sl
 800a8c6:	f1ba 0f02 	cmp.w	sl, #2
 800a8ca:	d1ec      	bne.n	800a8a6 <_scanf_float+0x2c6>
 800a8cc:	3d03      	subs	r5, #3
 800a8ce:	b2ed      	uxtb	r5, r5
 800a8d0:	1b76      	subs	r6, r6, r5
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	05da      	lsls	r2, r3, #23
 800a8d6:	d52f      	bpl.n	800a938 <_scanf_float+0x358>
 800a8d8:	055b      	lsls	r3, r3, #21
 800a8da:	d510      	bpl.n	800a8fe <_scanf_float+0x31e>
 800a8dc:	455e      	cmp	r6, fp
 800a8de:	f67f aebf 	bls.w	800a660 <_scanf_float+0x80>
 800a8e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8ea:	463a      	mov	r2, r7
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	4798      	blx	r3
 800a8f0:	6923      	ldr	r3, [r4, #16]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	6123      	str	r3, [r4, #16]
 800a8f6:	e7f1      	b.n	800a8dc <_scanf_float+0x2fc>
 800a8f8:	46aa      	mov	sl, r5
 800a8fa:	9602      	str	r6, [sp, #8]
 800a8fc:	e7df      	b.n	800a8be <_scanf_float+0x2de>
 800a8fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a902:	6923      	ldr	r3, [r4, #16]
 800a904:	2965      	cmp	r1, #101	; 0x65
 800a906:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a90a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a90e:	6123      	str	r3, [r4, #16]
 800a910:	d00c      	beq.n	800a92c <_scanf_float+0x34c>
 800a912:	2945      	cmp	r1, #69	; 0x45
 800a914:	d00a      	beq.n	800a92c <_scanf_float+0x34c>
 800a916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a91a:	463a      	mov	r2, r7
 800a91c:	4640      	mov	r0, r8
 800a91e:	4798      	blx	r3
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a926:	3b01      	subs	r3, #1
 800a928:	1eb5      	subs	r5, r6, #2
 800a92a:	6123      	str	r3, [r4, #16]
 800a92c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a930:	463a      	mov	r2, r7
 800a932:	4640      	mov	r0, r8
 800a934:	4798      	blx	r3
 800a936:	462e      	mov	r6, r5
 800a938:	6825      	ldr	r5, [r4, #0]
 800a93a:	f015 0510 	ands.w	r5, r5, #16
 800a93e:	d159      	bne.n	800a9f4 <_scanf_float+0x414>
 800a940:	7035      	strb	r5, [r6, #0]
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a94c:	d11b      	bne.n	800a986 <_scanf_float+0x3a6>
 800a94e:	9b01      	ldr	r3, [sp, #4]
 800a950:	454b      	cmp	r3, r9
 800a952:	eba3 0209 	sub.w	r2, r3, r9
 800a956:	d123      	bne.n	800a9a0 <_scanf_float+0x3c0>
 800a958:	2200      	movs	r2, #0
 800a95a:	4659      	mov	r1, fp
 800a95c:	4640      	mov	r0, r8
 800a95e:	f000 fe99 	bl	800b694 <_strtod_r>
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	f012 0f02 	tst.w	r2, #2
 800a96a:	ec57 6b10 	vmov	r6, r7, d0
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	d021      	beq.n	800a9b6 <_scanf_float+0x3d6>
 800a972:	9903      	ldr	r1, [sp, #12]
 800a974:	1d1a      	adds	r2, r3, #4
 800a976:	600a      	str	r2, [r1, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	e9c3 6700 	strd	r6, r7, [r3]
 800a97e:	68e3      	ldr	r3, [r4, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	60e3      	str	r3, [r4, #12]
 800a984:	e66d      	b.n	800a662 <_scanf_float+0x82>
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0e5      	beq.n	800a958 <_scanf_float+0x378>
 800a98c:	9905      	ldr	r1, [sp, #20]
 800a98e:	230a      	movs	r3, #10
 800a990:	462a      	mov	r2, r5
 800a992:	3101      	adds	r1, #1
 800a994:	4640      	mov	r0, r8
 800a996:	f000 ff05 	bl	800b7a4 <_strtol_r>
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	9e05      	ldr	r6, [sp, #20]
 800a99e:	1ac2      	subs	r2, r0, r3
 800a9a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a9a4:	429e      	cmp	r6, r3
 800a9a6:	bf28      	it	cs
 800a9a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a9ac:	4912      	ldr	r1, [pc, #72]	; (800a9f8 <_scanf_float+0x418>)
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 f82c 	bl	800aa0c <siprintf>
 800a9b4:	e7d0      	b.n	800a958 <_scanf_float+0x378>
 800a9b6:	9903      	ldr	r1, [sp, #12]
 800a9b8:	f012 0f04 	tst.w	r2, #4
 800a9bc:	f103 0204 	add.w	r2, r3, #4
 800a9c0:	600a      	str	r2, [r1, #0]
 800a9c2:	d1d9      	bne.n	800a978 <_scanf_float+0x398>
 800a9c4:	f8d3 8000 	ldr.w	r8, [r3]
 800a9c8:	ee10 2a10 	vmov	r2, s0
 800a9cc:	ee10 0a10 	vmov	r0, s0
 800a9d0:	463b      	mov	r3, r7
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	f7f6 f8ba 	bl	8000b4c <__aeabi_dcmpun>
 800a9d8:	b128      	cbz	r0, 800a9e6 <_scanf_float+0x406>
 800a9da:	4808      	ldr	r0, [pc, #32]	; (800a9fc <_scanf_float+0x41c>)
 800a9dc:	f000 f810 	bl	800aa00 <nanf>
 800a9e0:	ed88 0a00 	vstr	s0, [r8]
 800a9e4:	e7cb      	b.n	800a97e <_scanf_float+0x39e>
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	f7f6 f90d 	bl	8000c08 <__aeabi_d2f>
 800a9ee:	f8c8 0000 	str.w	r0, [r8]
 800a9f2:	e7c4      	b.n	800a97e <_scanf_float+0x39e>
 800a9f4:	2500      	movs	r5, #0
 800a9f6:	e634      	b.n	800a662 <_scanf_float+0x82>
 800a9f8:	0800e6f8 	.word	0x0800e6f8
 800a9fc:	0800eb00 	.word	0x0800eb00

0800aa00 <nanf>:
 800aa00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aa08 <nanf+0x8>
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	7fc00000 	.word	0x7fc00000

0800aa0c <siprintf>:
 800aa0c:	b40e      	push	{r1, r2, r3}
 800aa0e:	b500      	push	{lr}
 800aa10:	b09c      	sub	sp, #112	; 0x70
 800aa12:	ab1d      	add	r3, sp, #116	; 0x74
 800aa14:	9002      	str	r0, [sp, #8]
 800aa16:	9006      	str	r0, [sp, #24]
 800aa18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa1c:	4809      	ldr	r0, [pc, #36]	; (800aa44 <siprintf+0x38>)
 800aa1e:	9107      	str	r1, [sp, #28]
 800aa20:	9104      	str	r1, [sp, #16]
 800aa22:	4909      	ldr	r1, [pc, #36]	; (800aa48 <siprintf+0x3c>)
 800aa24:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa28:	9105      	str	r1, [sp, #20]
 800aa2a:	6800      	ldr	r0, [r0, #0]
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	a902      	add	r1, sp, #8
 800aa30:	f002 fef6 	bl	800d820 <_svfiprintf_r>
 800aa34:	9b02      	ldr	r3, [sp, #8]
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	b01c      	add	sp, #112	; 0x70
 800aa3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa40:	b003      	add	sp, #12
 800aa42:	4770      	bx	lr
 800aa44:	200000b8 	.word	0x200000b8
 800aa48:	ffff0208 	.word	0xffff0208

0800aa4c <sulp>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	4604      	mov	r4, r0
 800aa50:	460d      	mov	r5, r1
 800aa52:	ec45 4b10 	vmov	d0, r4, r5
 800aa56:	4616      	mov	r6, r2
 800aa58:	f002 fc40 	bl	800d2dc <__ulp>
 800aa5c:	ec51 0b10 	vmov	r0, r1, d0
 800aa60:	b17e      	cbz	r6, 800aa82 <sulp+0x36>
 800aa62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	dd09      	ble.n	800aa82 <sulp+0x36>
 800aa6e:	051b      	lsls	r3, r3, #20
 800aa70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa74:	2400      	movs	r4, #0
 800aa76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	f7f5 fdcb 	bl	8000618 <__aeabi_dmul>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <_strtod_l>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ed2d 8b02 	vpush	{d8}
 800aa90:	b09d      	sub	sp, #116	; 0x74
 800aa92:	461f      	mov	r7, r3
 800aa94:	2300      	movs	r3, #0
 800aa96:	9318      	str	r3, [sp, #96]	; 0x60
 800aa98:	4ba2      	ldr	r3, [pc, #648]	; (800ad24 <_strtod_l+0x29c>)
 800aa9a:	9213      	str	r2, [sp, #76]	; 0x4c
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	9305      	str	r3, [sp, #20]
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	4688      	mov	r8, r1
 800aaa6:	f7f5 fba3 	bl	80001f0 <strlen>
 800aaaa:	f04f 0a00 	mov.w	sl, #0
 800aaae:	4605      	mov	r5, r0
 800aab0:	f04f 0b00 	mov.w	fp, #0
 800aab4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaba:	781a      	ldrb	r2, [r3, #0]
 800aabc:	2a2b      	cmp	r2, #43	; 0x2b
 800aabe:	d04e      	beq.n	800ab5e <_strtod_l+0xd6>
 800aac0:	d83b      	bhi.n	800ab3a <_strtod_l+0xb2>
 800aac2:	2a0d      	cmp	r2, #13
 800aac4:	d834      	bhi.n	800ab30 <_strtod_l+0xa8>
 800aac6:	2a08      	cmp	r2, #8
 800aac8:	d834      	bhi.n	800ab34 <_strtod_l+0xac>
 800aaca:	2a00      	cmp	r2, #0
 800aacc:	d03e      	beq.n	800ab4c <_strtod_l+0xc4>
 800aace:	2300      	movs	r3, #0
 800aad0:	930a      	str	r3, [sp, #40]	; 0x28
 800aad2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aad4:	7833      	ldrb	r3, [r6, #0]
 800aad6:	2b30      	cmp	r3, #48	; 0x30
 800aad8:	f040 80b0 	bne.w	800ac3c <_strtod_l+0x1b4>
 800aadc:	7873      	ldrb	r3, [r6, #1]
 800aade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aae2:	2b58      	cmp	r3, #88	; 0x58
 800aae4:	d168      	bne.n	800abb8 <_strtod_l+0x130>
 800aae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae8:	9301      	str	r3, [sp, #4]
 800aaea:	ab18      	add	r3, sp, #96	; 0x60
 800aaec:	9702      	str	r7, [sp, #8]
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	4a8d      	ldr	r2, [pc, #564]	; (800ad28 <_strtod_l+0x2a0>)
 800aaf2:	ab19      	add	r3, sp, #100	; 0x64
 800aaf4:	a917      	add	r1, sp, #92	; 0x5c
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f001 fd58 	bl	800c5ac <__gethex>
 800aafc:	f010 0707 	ands.w	r7, r0, #7
 800ab00:	4605      	mov	r5, r0
 800ab02:	d005      	beq.n	800ab10 <_strtod_l+0x88>
 800ab04:	2f06      	cmp	r7, #6
 800ab06:	d12c      	bne.n	800ab62 <_strtod_l+0xda>
 800ab08:	3601      	adds	r6, #1
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ab0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f040 8590 	bne.w	800b638 <_strtod_l+0xbb0>
 800ab18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1a:	b1eb      	cbz	r3, 800ab58 <_strtod_l+0xd0>
 800ab1c:	4652      	mov	r2, sl
 800ab1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab22:	ec43 2b10 	vmov	d0, r2, r3
 800ab26:	b01d      	add	sp, #116	; 0x74
 800ab28:	ecbd 8b02 	vpop	{d8}
 800ab2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab30:	2a20      	cmp	r2, #32
 800ab32:	d1cc      	bne.n	800aace <_strtod_l+0x46>
 800ab34:	3301      	adds	r3, #1
 800ab36:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab38:	e7be      	b.n	800aab8 <_strtod_l+0x30>
 800ab3a:	2a2d      	cmp	r2, #45	; 0x2d
 800ab3c:	d1c7      	bne.n	800aace <_strtod_l+0x46>
 800ab3e:	2201      	movs	r2, #1
 800ab40:	920a      	str	r2, [sp, #40]	; 0x28
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab46:	785b      	ldrb	r3, [r3, #1]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1c2      	bne.n	800aad2 <_strtod_l+0x4a>
 800ab4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 856e 	bne.w	800b634 <_strtod_l+0xbac>
 800ab58:	4652      	mov	r2, sl
 800ab5a:	465b      	mov	r3, fp
 800ab5c:	e7e1      	b.n	800ab22 <_strtod_l+0x9a>
 800ab5e:	2200      	movs	r2, #0
 800ab60:	e7ee      	b.n	800ab40 <_strtod_l+0xb8>
 800ab62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab64:	b13a      	cbz	r2, 800ab76 <_strtod_l+0xee>
 800ab66:	2135      	movs	r1, #53	; 0x35
 800ab68:	a81a      	add	r0, sp, #104	; 0x68
 800ab6a:	f002 fcc2 	bl	800d4f2 <__copybits>
 800ab6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab70:	4620      	mov	r0, r4
 800ab72:	f002 f881 	bl	800cc78 <_Bfree>
 800ab76:	3f01      	subs	r7, #1
 800ab78:	2f04      	cmp	r7, #4
 800ab7a:	d806      	bhi.n	800ab8a <_strtod_l+0x102>
 800ab7c:	e8df f007 	tbb	[pc, r7]
 800ab80:	1714030a 	.word	0x1714030a
 800ab84:	0a          	.byte	0x0a
 800ab85:	00          	.byte	0x00
 800ab86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ab8a:	0728      	lsls	r0, r5, #28
 800ab8c:	d5c0      	bpl.n	800ab10 <_strtod_l+0x88>
 800ab8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ab92:	e7bd      	b.n	800ab10 <_strtod_l+0x88>
 800ab94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ab98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aba6:	e7f0      	b.n	800ab8a <_strtod_l+0x102>
 800aba8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ad2c <_strtod_l+0x2a4>
 800abac:	e7ed      	b.n	800ab8a <_strtod_l+0x102>
 800abae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800abb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800abb6:	e7e8      	b.n	800ab8a <_strtod_l+0x102>
 800abb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abba:	1c5a      	adds	r2, r3, #1
 800abbc:	9217      	str	r2, [sp, #92]	; 0x5c
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	2b30      	cmp	r3, #48	; 0x30
 800abc2:	d0f9      	beq.n	800abb8 <_strtod_l+0x130>
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d0a3      	beq.n	800ab10 <_strtod_l+0x88>
 800abc8:	2301      	movs	r3, #1
 800abca:	f04f 0900 	mov.w	r9, #0
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abd2:	9308      	str	r3, [sp, #32]
 800abd4:	f8cd 901c 	str.w	r9, [sp, #28]
 800abd8:	464f      	mov	r7, r9
 800abda:	220a      	movs	r2, #10
 800abdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800abde:	7806      	ldrb	r6, [r0, #0]
 800abe0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800abe4:	b2d9      	uxtb	r1, r3
 800abe6:	2909      	cmp	r1, #9
 800abe8:	d92a      	bls.n	800ac40 <_strtod_l+0x1b8>
 800abea:	9905      	ldr	r1, [sp, #20]
 800abec:	462a      	mov	r2, r5
 800abee:	f002 ff2f 	bl	800da50 <strncmp>
 800abf2:	b398      	cbz	r0, 800ac5c <_strtod_l+0x1d4>
 800abf4:	2000      	movs	r0, #0
 800abf6:	4632      	mov	r2, r6
 800abf8:	463d      	mov	r5, r7
 800abfa:	9005      	str	r0, [sp, #20]
 800abfc:	4603      	mov	r3, r0
 800abfe:	2a65      	cmp	r2, #101	; 0x65
 800ac00:	d001      	beq.n	800ac06 <_strtod_l+0x17e>
 800ac02:	2a45      	cmp	r2, #69	; 0x45
 800ac04:	d118      	bne.n	800ac38 <_strtod_l+0x1b0>
 800ac06:	b91d      	cbnz	r5, 800ac10 <_strtod_l+0x188>
 800ac08:	9a04      	ldr	r2, [sp, #16]
 800ac0a:	4302      	orrs	r2, r0
 800ac0c:	d09e      	beq.n	800ab4c <_strtod_l+0xc4>
 800ac0e:	2500      	movs	r5, #0
 800ac10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ac14:	f108 0201 	add.w	r2, r8, #1
 800ac18:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ac1e:	2a2b      	cmp	r2, #43	; 0x2b
 800ac20:	d075      	beq.n	800ad0e <_strtod_l+0x286>
 800ac22:	2a2d      	cmp	r2, #45	; 0x2d
 800ac24:	d07b      	beq.n	800ad1e <_strtod_l+0x296>
 800ac26:	f04f 0c00 	mov.w	ip, #0
 800ac2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac2e:	2909      	cmp	r1, #9
 800ac30:	f240 8082 	bls.w	800ad38 <_strtod_l+0x2b0>
 800ac34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac38:	2600      	movs	r6, #0
 800ac3a:	e09d      	b.n	800ad78 <_strtod_l+0x2f0>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e7c4      	b.n	800abca <_strtod_l+0x142>
 800ac40:	2f08      	cmp	r7, #8
 800ac42:	bfd8      	it	le
 800ac44:	9907      	ldrle	r1, [sp, #28]
 800ac46:	f100 0001 	add.w	r0, r0, #1
 800ac4a:	bfda      	itte	le
 800ac4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac50:	9307      	strle	r3, [sp, #28]
 800ac52:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ac56:	3701      	adds	r7, #1
 800ac58:	9017      	str	r0, [sp, #92]	; 0x5c
 800ac5a:	e7bf      	b.n	800abdc <_strtod_l+0x154>
 800ac5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac5e:	195a      	adds	r2, r3, r5
 800ac60:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac62:	5d5a      	ldrb	r2, [r3, r5]
 800ac64:	2f00      	cmp	r7, #0
 800ac66:	d037      	beq.n	800acd8 <_strtod_l+0x250>
 800ac68:	9005      	str	r0, [sp, #20]
 800ac6a:	463d      	mov	r5, r7
 800ac6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac70:	2b09      	cmp	r3, #9
 800ac72:	d912      	bls.n	800ac9a <_strtod_l+0x212>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e7c2      	b.n	800abfe <_strtod_l+0x176>
 800ac78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac7e:	785a      	ldrb	r2, [r3, #1]
 800ac80:	3001      	adds	r0, #1
 800ac82:	2a30      	cmp	r2, #48	; 0x30
 800ac84:	d0f8      	beq.n	800ac78 <_strtod_l+0x1f0>
 800ac86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ac8a:	2b08      	cmp	r3, #8
 800ac8c:	f200 84d9 	bhi.w	800b642 <_strtod_l+0xbba>
 800ac90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac92:	9005      	str	r0, [sp, #20]
 800ac94:	2000      	movs	r0, #0
 800ac96:	9308      	str	r3, [sp, #32]
 800ac98:	4605      	mov	r5, r0
 800ac9a:	3a30      	subs	r2, #48	; 0x30
 800ac9c:	f100 0301 	add.w	r3, r0, #1
 800aca0:	d014      	beq.n	800accc <_strtod_l+0x244>
 800aca2:	9905      	ldr	r1, [sp, #20]
 800aca4:	4419      	add	r1, r3
 800aca6:	9105      	str	r1, [sp, #20]
 800aca8:	462b      	mov	r3, r5
 800acaa:	eb00 0e05 	add.w	lr, r0, r5
 800acae:	210a      	movs	r1, #10
 800acb0:	4573      	cmp	r3, lr
 800acb2:	d113      	bne.n	800acdc <_strtod_l+0x254>
 800acb4:	182b      	adds	r3, r5, r0
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	f105 0501 	add.w	r5, r5, #1
 800acbc:	4405      	add	r5, r0
 800acbe:	dc1c      	bgt.n	800acfa <_strtod_l+0x272>
 800acc0:	9907      	ldr	r1, [sp, #28]
 800acc2:	230a      	movs	r3, #10
 800acc4:	fb03 2301 	mla	r3, r3, r1, r2
 800acc8:	9307      	str	r3, [sp, #28]
 800acca:	2300      	movs	r3, #0
 800accc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800acce:	1c51      	adds	r1, r2, #1
 800acd0:	9117      	str	r1, [sp, #92]	; 0x5c
 800acd2:	7852      	ldrb	r2, [r2, #1]
 800acd4:	4618      	mov	r0, r3
 800acd6:	e7c9      	b.n	800ac6c <_strtod_l+0x1e4>
 800acd8:	4638      	mov	r0, r7
 800acda:	e7d2      	b.n	800ac82 <_strtod_l+0x1fa>
 800acdc:	2b08      	cmp	r3, #8
 800acde:	dc04      	bgt.n	800acea <_strtod_l+0x262>
 800ace0:	9e07      	ldr	r6, [sp, #28]
 800ace2:	434e      	muls	r6, r1
 800ace4:	9607      	str	r6, [sp, #28]
 800ace6:	3301      	adds	r3, #1
 800ace8:	e7e2      	b.n	800acb0 <_strtod_l+0x228>
 800acea:	f103 0c01 	add.w	ip, r3, #1
 800acee:	f1bc 0f10 	cmp.w	ip, #16
 800acf2:	bfd8      	it	le
 800acf4:	fb01 f909 	mulle.w	r9, r1, r9
 800acf8:	e7f5      	b.n	800ace6 <_strtod_l+0x25e>
 800acfa:	2d10      	cmp	r5, #16
 800acfc:	bfdc      	itt	le
 800acfe:	230a      	movle	r3, #10
 800ad00:	fb03 2909 	mlale	r9, r3, r9, r2
 800ad04:	e7e1      	b.n	800acca <_strtod_l+0x242>
 800ad06:	2300      	movs	r3, #0
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e77c      	b.n	800ac08 <_strtod_l+0x180>
 800ad0e:	f04f 0c00 	mov.w	ip, #0
 800ad12:	f108 0202 	add.w	r2, r8, #2
 800ad16:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad18:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ad1c:	e785      	b.n	800ac2a <_strtod_l+0x1a2>
 800ad1e:	f04f 0c01 	mov.w	ip, #1
 800ad22:	e7f6      	b.n	800ad12 <_strtod_l+0x28a>
 800ad24:	0800e948 	.word	0x0800e948
 800ad28:	0800e700 	.word	0x0800e700
 800ad2c:	7ff00000 	.word	0x7ff00000
 800ad30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad32:	1c51      	adds	r1, r2, #1
 800ad34:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad36:	7852      	ldrb	r2, [r2, #1]
 800ad38:	2a30      	cmp	r2, #48	; 0x30
 800ad3a:	d0f9      	beq.n	800ad30 <_strtod_l+0x2a8>
 800ad3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad40:	2908      	cmp	r1, #8
 800ad42:	f63f af79 	bhi.w	800ac38 <_strtod_l+0x1b0>
 800ad46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad4c:	9206      	str	r2, [sp, #24]
 800ad4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad50:	1c51      	adds	r1, r2, #1
 800ad52:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad54:	7852      	ldrb	r2, [r2, #1]
 800ad56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ad5a:	2e09      	cmp	r6, #9
 800ad5c:	d937      	bls.n	800adce <_strtod_l+0x346>
 800ad5e:	9e06      	ldr	r6, [sp, #24]
 800ad60:	1b89      	subs	r1, r1, r6
 800ad62:	2908      	cmp	r1, #8
 800ad64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ad68:	dc02      	bgt.n	800ad70 <_strtod_l+0x2e8>
 800ad6a:	4576      	cmp	r6, lr
 800ad6c:	bfa8      	it	ge
 800ad6e:	4676      	movge	r6, lr
 800ad70:	f1bc 0f00 	cmp.w	ip, #0
 800ad74:	d000      	beq.n	800ad78 <_strtod_l+0x2f0>
 800ad76:	4276      	negs	r6, r6
 800ad78:	2d00      	cmp	r5, #0
 800ad7a:	d14d      	bne.n	800ae18 <_strtod_l+0x390>
 800ad7c:	9904      	ldr	r1, [sp, #16]
 800ad7e:	4301      	orrs	r1, r0
 800ad80:	f47f aec6 	bne.w	800ab10 <_strtod_l+0x88>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f47f aee1 	bne.w	800ab4c <_strtod_l+0xc4>
 800ad8a:	2a69      	cmp	r2, #105	; 0x69
 800ad8c:	d027      	beq.n	800adde <_strtod_l+0x356>
 800ad8e:	dc24      	bgt.n	800adda <_strtod_l+0x352>
 800ad90:	2a49      	cmp	r2, #73	; 0x49
 800ad92:	d024      	beq.n	800adde <_strtod_l+0x356>
 800ad94:	2a4e      	cmp	r2, #78	; 0x4e
 800ad96:	f47f aed9 	bne.w	800ab4c <_strtod_l+0xc4>
 800ad9a:	499f      	ldr	r1, [pc, #636]	; (800b018 <_strtod_l+0x590>)
 800ad9c:	a817      	add	r0, sp, #92	; 0x5c
 800ad9e:	f001 fe5d 	bl	800ca5c <__match>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f43f aed2 	beq.w	800ab4c <_strtod_l+0xc4>
 800ada8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b28      	cmp	r3, #40	; 0x28
 800adae:	d12d      	bne.n	800ae0c <_strtod_l+0x384>
 800adb0:	499a      	ldr	r1, [pc, #616]	; (800b01c <_strtod_l+0x594>)
 800adb2:	aa1a      	add	r2, sp, #104	; 0x68
 800adb4:	a817      	add	r0, sp, #92	; 0x5c
 800adb6:	f001 fe65 	bl	800ca84 <__hexnan>
 800adba:	2805      	cmp	r0, #5
 800adbc:	d126      	bne.n	800ae0c <_strtod_l+0x384>
 800adbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800adc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800adc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800adcc:	e6a0      	b.n	800ab10 <_strtod_l+0x88>
 800adce:	210a      	movs	r1, #10
 800add0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800add4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800add8:	e7b9      	b.n	800ad4e <_strtod_l+0x2c6>
 800adda:	2a6e      	cmp	r2, #110	; 0x6e
 800addc:	e7db      	b.n	800ad96 <_strtod_l+0x30e>
 800adde:	4990      	ldr	r1, [pc, #576]	; (800b020 <_strtod_l+0x598>)
 800ade0:	a817      	add	r0, sp, #92	; 0x5c
 800ade2:	f001 fe3b 	bl	800ca5c <__match>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f aeb0 	beq.w	800ab4c <_strtod_l+0xc4>
 800adec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adee:	498d      	ldr	r1, [pc, #564]	; (800b024 <_strtod_l+0x59c>)
 800adf0:	3b01      	subs	r3, #1
 800adf2:	a817      	add	r0, sp, #92	; 0x5c
 800adf4:	9317      	str	r3, [sp, #92]	; 0x5c
 800adf6:	f001 fe31 	bl	800ca5c <__match>
 800adfa:	b910      	cbnz	r0, 800ae02 <_strtod_l+0x37a>
 800adfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adfe:	3301      	adds	r3, #1
 800ae00:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae02:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b034 <_strtod_l+0x5ac>
 800ae06:	f04f 0a00 	mov.w	sl, #0
 800ae0a:	e681      	b.n	800ab10 <_strtod_l+0x88>
 800ae0c:	4886      	ldr	r0, [pc, #536]	; (800b028 <_strtod_l+0x5a0>)
 800ae0e:	f002 fe07 	bl	800da20 <nan>
 800ae12:	ec5b ab10 	vmov	sl, fp, d0
 800ae16:	e67b      	b.n	800ab10 <_strtod_l+0x88>
 800ae18:	9b05      	ldr	r3, [sp, #20]
 800ae1a:	9807      	ldr	r0, [sp, #28]
 800ae1c:	1af3      	subs	r3, r6, r3
 800ae1e:	2f00      	cmp	r7, #0
 800ae20:	bf08      	it	eq
 800ae22:	462f      	moveq	r7, r5
 800ae24:	2d10      	cmp	r5, #16
 800ae26:	9306      	str	r3, [sp, #24]
 800ae28:	46a8      	mov	r8, r5
 800ae2a:	bfa8      	it	ge
 800ae2c:	f04f 0810 	movge.w	r8, #16
 800ae30:	f7f5 fb78 	bl	8000524 <__aeabi_ui2d>
 800ae34:	2d09      	cmp	r5, #9
 800ae36:	4682      	mov	sl, r0
 800ae38:	468b      	mov	fp, r1
 800ae3a:	dd13      	ble.n	800ae64 <_strtod_l+0x3dc>
 800ae3c:	4b7b      	ldr	r3, [pc, #492]	; (800b02c <_strtod_l+0x5a4>)
 800ae3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae46:	f7f5 fbe7 	bl	8000618 <__aeabi_dmul>
 800ae4a:	4682      	mov	sl, r0
 800ae4c:	4648      	mov	r0, r9
 800ae4e:	468b      	mov	fp, r1
 800ae50:	f7f5 fb68 	bl	8000524 <__aeabi_ui2d>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4650      	mov	r0, sl
 800ae5a:	4659      	mov	r1, fp
 800ae5c:	f7f5 fa26 	bl	80002ac <__adddf3>
 800ae60:	4682      	mov	sl, r0
 800ae62:	468b      	mov	fp, r1
 800ae64:	2d0f      	cmp	r5, #15
 800ae66:	dc38      	bgt.n	800aeda <_strtod_l+0x452>
 800ae68:	9b06      	ldr	r3, [sp, #24]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f43f ae50 	beq.w	800ab10 <_strtod_l+0x88>
 800ae70:	dd24      	ble.n	800aebc <_strtod_l+0x434>
 800ae72:	2b16      	cmp	r3, #22
 800ae74:	dc0b      	bgt.n	800ae8e <_strtod_l+0x406>
 800ae76:	496d      	ldr	r1, [pc, #436]	; (800b02c <_strtod_l+0x5a4>)
 800ae78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae80:	4652      	mov	r2, sl
 800ae82:	465b      	mov	r3, fp
 800ae84:	f7f5 fbc8 	bl	8000618 <__aeabi_dmul>
 800ae88:	4682      	mov	sl, r0
 800ae8a:	468b      	mov	fp, r1
 800ae8c:	e640      	b.n	800ab10 <_strtod_l+0x88>
 800ae8e:	9a06      	ldr	r2, [sp, #24]
 800ae90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ae94:	4293      	cmp	r3, r2
 800ae96:	db20      	blt.n	800aeda <_strtod_l+0x452>
 800ae98:	4c64      	ldr	r4, [pc, #400]	; (800b02c <_strtod_l+0x5a4>)
 800ae9a:	f1c5 050f 	rsb	r5, r5, #15
 800ae9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aea2:	4652      	mov	r2, sl
 800aea4:	465b      	mov	r3, fp
 800aea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeaa:	f7f5 fbb5 	bl	8000618 <__aeabi_dmul>
 800aeae:	9b06      	ldr	r3, [sp, #24]
 800aeb0:	1b5d      	subs	r5, r3, r5
 800aeb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aeb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aeba:	e7e3      	b.n	800ae84 <_strtod_l+0x3fc>
 800aebc:	9b06      	ldr	r3, [sp, #24]
 800aebe:	3316      	adds	r3, #22
 800aec0:	db0b      	blt.n	800aeda <_strtod_l+0x452>
 800aec2:	9b05      	ldr	r3, [sp, #20]
 800aec4:	1b9e      	subs	r6, r3, r6
 800aec6:	4b59      	ldr	r3, [pc, #356]	; (800b02c <_strtod_l+0x5a4>)
 800aec8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800aecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aed0:	4650      	mov	r0, sl
 800aed2:	4659      	mov	r1, fp
 800aed4:	f7f5 fcca 	bl	800086c <__aeabi_ddiv>
 800aed8:	e7d6      	b.n	800ae88 <_strtod_l+0x400>
 800aeda:	9b06      	ldr	r3, [sp, #24]
 800aedc:	eba5 0808 	sub.w	r8, r5, r8
 800aee0:	4498      	add	r8, r3
 800aee2:	f1b8 0f00 	cmp.w	r8, #0
 800aee6:	dd74      	ble.n	800afd2 <_strtod_l+0x54a>
 800aee8:	f018 030f 	ands.w	r3, r8, #15
 800aeec:	d00a      	beq.n	800af04 <_strtod_l+0x47c>
 800aeee:	494f      	ldr	r1, [pc, #316]	; (800b02c <_strtod_l+0x5a4>)
 800aef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aef4:	4652      	mov	r2, sl
 800aef6:	465b      	mov	r3, fp
 800aef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aefc:	f7f5 fb8c 	bl	8000618 <__aeabi_dmul>
 800af00:	4682      	mov	sl, r0
 800af02:	468b      	mov	fp, r1
 800af04:	f038 080f 	bics.w	r8, r8, #15
 800af08:	d04f      	beq.n	800afaa <_strtod_l+0x522>
 800af0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800af0e:	dd22      	ble.n	800af56 <_strtod_l+0x4ce>
 800af10:	2500      	movs	r5, #0
 800af12:	462e      	mov	r6, r5
 800af14:	9507      	str	r5, [sp, #28]
 800af16:	9505      	str	r5, [sp, #20]
 800af18:	2322      	movs	r3, #34	; 0x22
 800af1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b034 <_strtod_l+0x5ac>
 800af1e:	6023      	str	r3, [r4, #0]
 800af20:	f04f 0a00 	mov.w	sl, #0
 800af24:	9b07      	ldr	r3, [sp, #28]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f43f adf2 	beq.w	800ab10 <_strtod_l+0x88>
 800af2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af2e:	4620      	mov	r0, r4
 800af30:	f001 fea2 	bl	800cc78 <_Bfree>
 800af34:	9905      	ldr	r1, [sp, #20]
 800af36:	4620      	mov	r0, r4
 800af38:	f001 fe9e 	bl	800cc78 <_Bfree>
 800af3c:	4631      	mov	r1, r6
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 fe9a 	bl	800cc78 <_Bfree>
 800af44:	9907      	ldr	r1, [sp, #28]
 800af46:	4620      	mov	r0, r4
 800af48:	f001 fe96 	bl	800cc78 <_Bfree>
 800af4c:	4629      	mov	r1, r5
 800af4e:	4620      	mov	r0, r4
 800af50:	f001 fe92 	bl	800cc78 <_Bfree>
 800af54:	e5dc      	b.n	800ab10 <_strtod_l+0x88>
 800af56:	4b36      	ldr	r3, [pc, #216]	; (800b030 <_strtod_l+0x5a8>)
 800af58:	9304      	str	r3, [sp, #16]
 800af5a:	2300      	movs	r3, #0
 800af5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	4699      	mov	r9, r3
 800af66:	f1b8 0f01 	cmp.w	r8, #1
 800af6a:	dc21      	bgt.n	800afb0 <_strtod_l+0x528>
 800af6c:	b10b      	cbz	r3, 800af72 <_strtod_l+0x4ea>
 800af6e:	4682      	mov	sl, r0
 800af70:	468b      	mov	fp, r1
 800af72:	4b2f      	ldr	r3, [pc, #188]	; (800b030 <_strtod_l+0x5a8>)
 800af74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800af78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800af7c:	4652      	mov	r2, sl
 800af7e:	465b      	mov	r3, fp
 800af80:	e9d9 0100 	ldrd	r0, r1, [r9]
 800af84:	f7f5 fb48 	bl	8000618 <__aeabi_dmul>
 800af88:	4b2a      	ldr	r3, [pc, #168]	; (800b034 <_strtod_l+0x5ac>)
 800af8a:	460a      	mov	r2, r1
 800af8c:	400b      	ands	r3, r1
 800af8e:	492a      	ldr	r1, [pc, #168]	; (800b038 <_strtod_l+0x5b0>)
 800af90:	428b      	cmp	r3, r1
 800af92:	4682      	mov	sl, r0
 800af94:	d8bc      	bhi.n	800af10 <_strtod_l+0x488>
 800af96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800af9a:	428b      	cmp	r3, r1
 800af9c:	bf86      	itte	hi
 800af9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b03c <_strtod_l+0x5b4>
 800afa2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800afa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800afaa:	2300      	movs	r3, #0
 800afac:	9304      	str	r3, [sp, #16]
 800afae:	e084      	b.n	800b0ba <_strtod_l+0x632>
 800afb0:	f018 0f01 	tst.w	r8, #1
 800afb4:	d005      	beq.n	800afc2 <_strtod_l+0x53a>
 800afb6:	9b04      	ldr	r3, [sp, #16]
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f7f5 fb2c 	bl	8000618 <__aeabi_dmul>
 800afc0:	2301      	movs	r3, #1
 800afc2:	9a04      	ldr	r2, [sp, #16]
 800afc4:	3208      	adds	r2, #8
 800afc6:	f109 0901 	add.w	r9, r9, #1
 800afca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800afce:	9204      	str	r2, [sp, #16]
 800afd0:	e7c9      	b.n	800af66 <_strtod_l+0x4de>
 800afd2:	d0ea      	beq.n	800afaa <_strtod_l+0x522>
 800afd4:	f1c8 0800 	rsb	r8, r8, #0
 800afd8:	f018 020f 	ands.w	r2, r8, #15
 800afdc:	d00a      	beq.n	800aff4 <_strtod_l+0x56c>
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <_strtod_l+0x5a4>)
 800afe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afe4:	4650      	mov	r0, sl
 800afe6:	4659      	mov	r1, fp
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f7f5 fc3e 	bl	800086c <__aeabi_ddiv>
 800aff0:	4682      	mov	sl, r0
 800aff2:	468b      	mov	fp, r1
 800aff4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aff8:	d0d7      	beq.n	800afaa <_strtod_l+0x522>
 800affa:	f1b8 0f1f 	cmp.w	r8, #31
 800affe:	dd1f      	ble.n	800b040 <_strtod_l+0x5b8>
 800b000:	2500      	movs	r5, #0
 800b002:	462e      	mov	r6, r5
 800b004:	9507      	str	r5, [sp, #28]
 800b006:	9505      	str	r5, [sp, #20]
 800b008:	2322      	movs	r3, #34	; 0x22
 800b00a:	f04f 0a00 	mov.w	sl, #0
 800b00e:	f04f 0b00 	mov.w	fp, #0
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	e786      	b.n	800af24 <_strtod_l+0x49c>
 800b016:	bf00      	nop
 800b018:	0800e6d1 	.word	0x0800e6d1
 800b01c:	0800e714 	.word	0x0800e714
 800b020:	0800e6c9 	.word	0x0800e6c9
 800b024:	0800e854 	.word	0x0800e854
 800b028:	0800eb00 	.word	0x0800eb00
 800b02c:	0800e9e0 	.word	0x0800e9e0
 800b030:	0800e9b8 	.word	0x0800e9b8
 800b034:	7ff00000 	.word	0x7ff00000
 800b038:	7ca00000 	.word	0x7ca00000
 800b03c:	7fefffff 	.word	0x7fefffff
 800b040:	f018 0310 	ands.w	r3, r8, #16
 800b044:	bf18      	it	ne
 800b046:	236a      	movne	r3, #106	; 0x6a
 800b048:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b3f8 <_strtod_l+0x970>
 800b04c:	9304      	str	r3, [sp, #16]
 800b04e:	4650      	mov	r0, sl
 800b050:	4659      	mov	r1, fp
 800b052:	2300      	movs	r3, #0
 800b054:	f018 0f01 	tst.w	r8, #1
 800b058:	d004      	beq.n	800b064 <_strtod_l+0x5dc>
 800b05a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b05e:	f7f5 fadb 	bl	8000618 <__aeabi_dmul>
 800b062:	2301      	movs	r3, #1
 800b064:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b068:	f109 0908 	add.w	r9, r9, #8
 800b06c:	d1f2      	bne.n	800b054 <_strtod_l+0x5cc>
 800b06e:	b10b      	cbz	r3, 800b074 <_strtod_l+0x5ec>
 800b070:	4682      	mov	sl, r0
 800b072:	468b      	mov	fp, r1
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	b1c3      	cbz	r3, 800b0aa <_strtod_l+0x622>
 800b078:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b07c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b080:	2b00      	cmp	r3, #0
 800b082:	4659      	mov	r1, fp
 800b084:	dd11      	ble.n	800b0aa <_strtod_l+0x622>
 800b086:	2b1f      	cmp	r3, #31
 800b088:	f340 8124 	ble.w	800b2d4 <_strtod_l+0x84c>
 800b08c:	2b34      	cmp	r3, #52	; 0x34
 800b08e:	bfde      	ittt	le
 800b090:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b094:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b098:	fa03 f202 	lslle.w	r2, r3, r2
 800b09c:	f04f 0a00 	mov.w	sl, #0
 800b0a0:	bfcc      	ite	gt
 800b0a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b0a6:	ea02 0b01 	andle.w	fp, r2, r1
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4650      	mov	r0, sl
 800b0b0:	4659      	mov	r1, fp
 800b0b2:	f7f5 fd19 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d1a2      	bne.n	800b000 <_strtod_l+0x578>
 800b0ba:	9b07      	ldr	r3, [sp, #28]
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	9908      	ldr	r1, [sp, #32]
 800b0c0:	462b      	mov	r3, r5
 800b0c2:	463a      	mov	r2, r7
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f001 fe3f 	bl	800cd48 <__s2b>
 800b0ca:	9007      	str	r0, [sp, #28]
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	f43f af1f 	beq.w	800af10 <_strtod_l+0x488>
 800b0d2:	9b05      	ldr	r3, [sp, #20]
 800b0d4:	1b9e      	subs	r6, r3, r6
 800b0d6:	9b06      	ldr	r3, [sp, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	bfb4      	ite	lt
 800b0dc:	4633      	movlt	r3, r6
 800b0de:	2300      	movge	r3, #0
 800b0e0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0e2:	9b06      	ldr	r3, [sp, #24]
 800b0e4:	2500      	movs	r5, #0
 800b0e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b0ea:	9312      	str	r3, [sp, #72]	; 0x48
 800b0ec:	462e      	mov	r6, r5
 800b0ee:	9b07      	ldr	r3, [sp, #28]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	6859      	ldr	r1, [r3, #4]
 800b0f4:	f001 fd80 	bl	800cbf8 <_Balloc>
 800b0f8:	9005      	str	r0, [sp, #20]
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	f43f af0c 	beq.w	800af18 <_strtod_l+0x490>
 800b100:	9b07      	ldr	r3, [sp, #28]
 800b102:	691a      	ldr	r2, [r3, #16]
 800b104:	3202      	adds	r2, #2
 800b106:	f103 010c 	add.w	r1, r3, #12
 800b10a:	0092      	lsls	r2, r2, #2
 800b10c:	300c      	adds	r0, #12
 800b10e:	f7fe fde7 	bl	8009ce0 <memcpy>
 800b112:	ec4b ab10 	vmov	d0, sl, fp
 800b116:	aa1a      	add	r2, sp, #104	; 0x68
 800b118:	a919      	add	r1, sp, #100	; 0x64
 800b11a:	4620      	mov	r0, r4
 800b11c:	f002 f95a 	bl	800d3d4 <__d2b>
 800b120:	ec4b ab18 	vmov	d8, sl, fp
 800b124:	9018      	str	r0, [sp, #96]	; 0x60
 800b126:	2800      	cmp	r0, #0
 800b128:	f43f aef6 	beq.w	800af18 <_strtod_l+0x490>
 800b12c:	2101      	movs	r1, #1
 800b12e:	4620      	mov	r0, r4
 800b130:	f001 fea4 	bl	800ce7c <__i2b>
 800b134:	4606      	mov	r6, r0
 800b136:	2800      	cmp	r0, #0
 800b138:	f43f aeee 	beq.w	800af18 <_strtod_l+0x490>
 800b13c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b13e:	9904      	ldr	r1, [sp, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	bfab      	itete	ge
 800b144:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b146:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b148:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b14a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b14e:	bfac      	ite	ge
 800b150:	eb03 0902 	addge.w	r9, r3, r2
 800b154:	1ad7      	sublt	r7, r2, r3
 800b156:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b158:	eba3 0801 	sub.w	r8, r3, r1
 800b15c:	4490      	add	r8, r2
 800b15e:	4ba1      	ldr	r3, [pc, #644]	; (800b3e4 <_strtod_l+0x95c>)
 800b160:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b164:	4598      	cmp	r8, r3
 800b166:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b16a:	f280 80c7 	bge.w	800b2fc <_strtod_l+0x874>
 800b16e:	eba3 0308 	sub.w	r3, r3, r8
 800b172:	2b1f      	cmp	r3, #31
 800b174:	eba2 0203 	sub.w	r2, r2, r3
 800b178:	f04f 0101 	mov.w	r1, #1
 800b17c:	f300 80b1 	bgt.w	800b2e2 <_strtod_l+0x85a>
 800b180:	fa01 f303 	lsl.w	r3, r1, r3
 800b184:	930d      	str	r3, [sp, #52]	; 0x34
 800b186:	2300      	movs	r3, #0
 800b188:	9308      	str	r3, [sp, #32]
 800b18a:	eb09 0802 	add.w	r8, r9, r2
 800b18e:	9b04      	ldr	r3, [sp, #16]
 800b190:	45c1      	cmp	r9, r8
 800b192:	4417      	add	r7, r2
 800b194:	441f      	add	r7, r3
 800b196:	464b      	mov	r3, r9
 800b198:	bfa8      	it	ge
 800b19a:	4643      	movge	r3, r8
 800b19c:	42bb      	cmp	r3, r7
 800b19e:	bfa8      	it	ge
 800b1a0:	463b      	movge	r3, r7
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bfc2      	ittt	gt
 800b1a6:	eba8 0803 	subgt.w	r8, r8, r3
 800b1aa:	1aff      	subgt	r7, r7, r3
 800b1ac:	eba9 0903 	subgt.w	r9, r9, r3
 800b1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dd17      	ble.n	800b1e6 <_strtod_l+0x75e>
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f001 ff1e 	bl	800cffc <__pow5mult>
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f43f aea8 	beq.w	800af18 <_strtod_l+0x490>
 800b1c8:	4601      	mov	r1, r0
 800b1ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f001 fe6b 	bl	800cea8 <__multiply>
 800b1d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f43f ae9f 	beq.w	800af18 <_strtod_l+0x490>
 800b1da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f001 fd4b 	bl	800cc78 <_Bfree>
 800b1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e4:	9318      	str	r3, [sp, #96]	; 0x60
 800b1e6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ea:	f300 808c 	bgt.w	800b306 <_strtod_l+0x87e>
 800b1ee:	9b06      	ldr	r3, [sp, #24]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dd08      	ble.n	800b206 <_strtod_l+0x77e>
 800b1f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1f6:	9905      	ldr	r1, [sp, #20]
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f001 feff 	bl	800cffc <__pow5mult>
 800b1fe:	9005      	str	r0, [sp, #20]
 800b200:	2800      	cmp	r0, #0
 800b202:	f43f ae89 	beq.w	800af18 <_strtod_l+0x490>
 800b206:	2f00      	cmp	r7, #0
 800b208:	dd08      	ble.n	800b21c <_strtod_l+0x794>
 800b20a:	9905      	ldr	r1, [sp, #20]
 800b20c:	463a      	mov	r2, r7
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 ff4e 	bl	800d0b0 <__lshift>
 800b214:	9005      	str	r0, [sp, #20]
 800b216:	2800      	cmp	r0, #0
 800b218:	f43f ae7e 	beq.w	800af18 <_strtod_l+0x490>
 800b21c:	f1b9 0f00 	cmp.w	r9, #0
 800b220:	dd08      	ble.n	800b234 <_strtod_l+0x7ac>
 800b222:	4631      	mov	r1, r6
 800b224:	464a      	mov	r2, r9
 800b226:	4620      	mov	r0, r4
 800b228:	f001 ff42 	bl	800d0b0 <__lshift>
 800b22c:	4606      	mov	r6, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	f43f ae72 	beq.w	800af18 <_strtod_l+0x490>
 800b234:	9a05      	ldr	r2, [sp, #20]
 800b236:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b238:	4620      	mov	r0, r4
 800b23a:	f001 ffc5 	bl	800d1c8 <__mdiff>
 800b23e:	4605      	mov	r5, r0
 800b240:	2800      	cmp	r0, #0
 800b242:	f43f ae69 	beq.w	800af18 <_strtod_l+0x490>
 800b246:	68c3      	ldr	r3, [r0, #12]
 800b248:	930b      	str	r3, [sp, #44]	; 0x2c
 800b24a:	2300      	movs	r3, #0
 800b24c:	60c3      	str	r3, [r0, #12]
 800b24e:	4631      	mov	r1, r6
 800b250:	f001 ff9e 	bl	800d190 <__mcmp>
 800b254:	2800      	cmp	r0, #0
 800b256:	da60      	bge.n	800b31a <_strtod_l+0x892>
 800b258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b25a:	ea53 030a 	orrs.w	r3, r3, sl
 800b25e:	f040 8082 	bne.w	800b366 <_strtod_l+0x8de>
 800b262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b266:	2b00      	cmp	r3, #0
 800b268:	d17d      	bne.n	800b366 <_strtod_l+0x8de>
 800b26a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b26e:	0d1b      	lsrs	r3, r3, #20
 800b270:	051b      	lsls	r3, r3, #20
 800b272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b276:	d976      	bls.n	800b366 <_strtod_l+0x8de>
 800b278:	696b      	ldr	r3, [r5, #20]
 800b27a:	b913      	cbnz	r3, 800b282 <_strtod_l+0x7fa>
 800b27c:	692b      	ldr	r3, [r5, #16]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	dd71      	ble.n	800b366 <_strtod_l+0x8de>
 800b282:	4629      	mov	r1, r5
 800b284:	2201      	movs	r2, #1
 800b286:	4620      	mov	r0, r4
 800b288:	f001 ff12 	bl	800d0b0 <__lshift>
 800b28c:	4631      	mov	r1, r6
 800b28e:	4605      	mov	r5, r0
 800b290:	f001 ff7e 	bl	800d190 <__mcmp>
 800b294:	2800      	cmp	r0, #0
 800b296:	dd66      	ble.n	800b366 <_strtod_l+0x8de>
 800b298:	9904      	ldr	r1, [sp, #16]
 800b29a:	4a53      	ldr	r2, [pc, #332]	; (800b3e8 <_strtod_l+0x960>)
 800b29c:	465b      	mov	r3, fp
 800b29e:	2900      	cmp	r1, #0
 800b2a0:	f000 8081 	beq.w	800b3a6 <_strtod_l+0x91e>
 800b2a4:	ea02 010b 	and.w	r1, r2, fp
 800b2a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2ac:	dc7b      	bgt.n	800b3a6 <_strtod_l+0x91e>
 800b2ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2b2:	f77f aea9 	ble.w	800b008 <_strtod_l+0x580>
 800b2b6:	4b4d      	ldr	r3, [pc, #308]	; (800b3ec <_strtod_l+0x964>)
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	4659      	mov	r1, fp
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f7f5 f9ab 	bl	8000618 <__aeabi_dmul>
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4303      	orrs	r3, r0
 800b2c6:	bf08      	it	eq
 800b2c8:	2322      	moveq	r3, #34	; 0x22
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	bf08      	it	eq
 800b2d0:	6023      	streq	r3, [r4, #0]
 800b2d2:	e62b      	b.n	800af2c <_strtod_l+0x4a4>
 800b2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2dc:	ea03 0a0a 	and.w	sl, r3, sl
 800b2e0:	e6e3      	b.n	800b0aa <_strtod_l+0x622>
 800b2e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b2e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b2ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b2ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b2f2:	fa01 f308 	lsl.w	r3, r1, r8
 800b2f6:	9308      	str	r3, [sp, #32]
 800b2f8:	910d      	str	r1, [sp, #52]	; 0x34
 800b2fa:	e746      	b.n	800b18a <_strtod_l+0x702>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	9308      	str	r3, [sp, #32]
 800b300:	2301      	movs	r3, #1
 800b302:	930d      	str	r3, [sp, #52]	; 0x34
 800b304:	e741      	b.n	800b18a <_strtod_l+0x702>
 800b306:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b308:	4642      	mov	r2, r8
 800b30a:	4620      	mov	r0, r4
 800b30c:	f001 fed0 	bl	800d0b0 <__lshift>
 800b310:	9018      	str	r0, [sp, #96]	; 0x60
 800b312:	2800      	cmp	r0, #0
 800b314:	f47f af6b 	bne.w	800b1ee <_strtod_l+0x766>
 800b318:	e5fe      	b.n	800af18 <_strtod_l+0x490>
 800b31a:	465f      	mov	r7, fp
 800b31c:	d16e      	bne.n	800b3fc <_strtod_l+0x974>
 800b31e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b324:	b342      	cbz	r2, 800b378 <_strtod_l+0x8f0>
 800b326:	4a32      	ldr	r2, [pc, #200]	; (800b3f0 <_strtod_l+0x968>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d128      	bne.n	800b37e <_strtod_l+0x8f6>
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	4651      	mov	r1, sl
 800b330:	b1eb      	cbz	r3, 800b36e <_strtod_l+0x8e6>
 800b332:	4b2d      	ldr	r3, [pc, #180]	; (800b3e8 <_strtod_l+0x960>)
 800b334:	403b      	ands	r3, r7
 800b336:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b33e:	d819      	bhi.n	800b374 <_strtod_l+0x8ec>
 800b340:	0d1b      	lsrs	r3, r3, #20
 800b342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b346:	fa02 f303 	lsl.w	r3, r2, r3
 800b34a:	4299      	cmp	r1, r3
 800b34c:	d117      	bne.n	800b37e <_strtod_l+0x8f6>
 800b34e:	4b29      	ldr	r3, [pc, #164]	; (800b3f4 <_strtod_l+0x96c>)
 800b350:	429f      	cmp	r7, r3
 800b352:	d102      	bne.n	800b35a <_strtod_l+0x8d2>
 800b354:	3101      	adds	r1, #1
 800b356:	f43f addf 	beq.w	800af18 <_strtod_l+0x490>
 800b35a:	4b23      	ldr	r3, [pc, #140]	; (800b3e8 <_strtod_l+0x960>)
 800b35c:	403b      	ands	r3, r7
 800b35e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b362:	f04f 0a00 	mov.w	sl, #0
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1a4      	bne.n	800b2b6 <_strtod_l+0x82e>
 800b36c:	e5de      	b.n	800af2c <_strtod_l+0x4a4>
 800b36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b372:	e7ea      	b.n	800b34a <_strtod_l+0x8c2>
 800b374:	4613      	mov	r3, r2
 800b376:	e7e8      	b.n	800b34a <_strtod_l+0x8c2>
 800b378:	ea53 030a 	orrs.w	r3, r3, sl
 800b37c:	d08c      	beq.n	800b298 <_strtod_l+0x810>
 800b37e:	9b08      	ldr	r3, [sp, #32]
 800b380:	b1db      	cbz	r3, 800b3ba <_strtod_l+0x932>
 800b382:	423b      	tst	r3, r7
 800b384:	d0ef      	beq.n	800b366 <_strtod_l+0x8de>
 800b386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b388:	9a04      	ldr	r2, [sp, #16]
 800b38a:	4650      	mov	r0, sl
 800b38c:	4659      	mov	r1, fp
 800b38e:	b1c3      	cbz	r3, 800b3c2 <_strtod_l+0x93a>
 800b390:	f7ff fb5c 	bl	800aa4c <sulp>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	ec51 0b18 	vmov	r0, r1, d8
 800b39c:	f7f4 ff86 	bl	80002ac <__adddf3>
 800b3a0:	4682      	mov	sl, r0
 800b3a2:	468b      	mov	fp, r1
 800b3a4:	e7df      	b.n	800b366 <_strtod_l+0x8de>
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b3b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b3b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b3b8:	e7d5      	b.n	800b366 <_strtod_l+0x8de>
 800b3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3bc:	ea13 0f0a 	tst.w	r3, sl
 800b3c0:	e7e0      	b.n	800b384 <_strtod_l+0x8fc>
 800b3c2:	f7ff fb43 	bl	800aa4c <sulp>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	ec51 0b18 	vmov	r0, r1, d8
 800b3ce:	f7f4 ff6b 	bl	80002a8 <__aeabi_dsub>
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4682      	mov	sl, r0
 800b3d8:	468b      	mov	fp, r1
 800b3da:	f7f5 fb85 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d0c1      	beq.n	800b366 <_strtod_l+0x8de>
 800b3e2:	e611      	b.n	800b008 <_strtod_l+0x580>
 800b3e4:	fffffc02 	.word	0xfffffc02
 800b3e8:	7ff00000 	.word	0x7ff00000
 800b3ec:	39500000 	.word	0x39500000
 800b3f0:	000fffff 	.word	0x000fffff
 800b3f4:	7fefffff 	.word	0x7fefffff
 800b3f8:	0800e728 	.word	0x0800e728
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4628      	mov	r0, r5
 800b400:	f002 f844 	bl	800d48c <__ratio>
 800b404:	ec59 8b10 	vmov	r8, r9, d0
 800b408:	ee10 0a10 	vmov	r0, s0
 800b40c:	2200      	movs	r2, #0
 800b40e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b412:	4649      	mov	r1, r9
 800b414:	f7f5 fb7c 	bl	8000b10 <__aeabi_dcmple>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d07a      	beq.n	800b512 <_strtod_l+0xa8a>
 800b41c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d04a      	beq.n	800b4b8 <_strtod_l+0xa30>
 800b422:	4b95      	ldr	r3, [pc, #596]	; (800b678 <_strtod_l+0xbf0>)
 800b424:	2200      	movs	r2, #0
 800b426:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b42a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b678 <_strtod_l+0xbf0>
 800b42e:	f04f 0800 	mov.w	r8, #0
 800b432:	4b92      	ldr	r3, [pc, #584]	; (800b67c <_strtod_l+0xbf4>)
 800b434:	403b      	ands	r3, r7
 800b436:	930d      	str	r3, [sp, #52]	; 0x34
 800b438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b43a:	4b91      	ldr	r3, [pc, #580]	; (800b680 <_strtod_l+0xbf8>)
 800b43c:	429a      	cmp	r2, r3
 800b43e:	f040 80b0 	bne.w	800b5a2 <_strtod_l+0xb1a>
 800b442:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b446:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b44a:	ec4b ab10 	vmov	d0, sl, fp
 800b44e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b452:	f001 ff43 	bl	800d2dc <__ulp>
 800b456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b45a:	ec53 2b10 	vmov	r2, r3, d0
 800b45e:	f7f5 f8db 	bl	8000618 <__aeabi_dmul>
 800b462:	4652      	mov	r2, sl
 800b464:	465b      	mov	r3, fp
 800b466:	f7f4 ff21 	bl	80002ac <__adddf3>
 800b46a:	460b      	mov	r3, r1
 800b46c:	4983      	ldr	r1, [pc, #524]	; (800b67c <_strtod_l+0xbf4>)
 800b46e:	4a85      	ldr	r2, [pc, #532]	; (800b684 <_strtod_l+0xbfc>)
 800b470:	4019      	ands	r1, r3
 800b472:	4291      	cmp	r1, r2
 800b474:	4682      	mov	sl, r0
 800b476:	d960      	bls.n	800b53a <_strtod_l+0xab2>
 800b478:	ee18 3a90 	vmov	r3, s17
 800b47c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b480:	4293      	cmp	r3, r2
 800b482:	d104      	bne.n	800b48e <_strtod_l+0xa06>
 800b484:	ee18 3a10 	vmov	r3, s16
 800b488:	3301      	adds	r3, #1
 800b48a:	f43f ad45 	beq.w	800af18 <_strtod_l+0x490>
 800b48e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b690 <_strtod_l+0xc08>
 800b492:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b496:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b498:	4620      	mov	r0, r4
 800b49a:	f001 fbed 	bl	800cc78 <_Bfree>
 800b49e:	9905      	ldr	r1, [sp, #20]
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f001 fbe9 	bl	800cc78 <_Bfree>
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f001 fbe5 	bl	800cc78 <_Bfree>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f001 fbe1 	bl	800cc78 <_Bfree>
 800b4b6:	e61a      	b.n	800b0ee <_strtod_l+0x666>
 800b4b8:	f1ba 0f00 	cmp.w	sl, #0
 800b4bc:	d11b      	bne.n	800b4f6 <_strtod_l+0xa6e>
 800b4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4c2:	b9f3      	cbnz	r3, 800b502 <_strtod_l+0xa7a>
 800b4c4:	4b6c      	ldr	r3, [pc, #432]	; (800b678 <_strtod_l+0xbf0>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	f7f5 fb16 	bl	8000afc <__aeabi_dcmplt>
 800b4d0:	b9d0      	cbnz	r0, 800b508 <_strtod_l+0xa80>
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	4b6c      	ldr	r3, [pc, #432]	; (800b688 <_strtod_l+0xc00>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f7f5 f89d 	bl	8000618 <__aeabi_dmul>
 800b4de:	4680      	mov	r8, r0
 800b4e0:	4689      	mov	r9, r1
 800b4e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b4e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b4ea:	9315      	str	r3, [sp, #84]	; 0x54
 800b4ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b4f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4f4:	e79d      	b.n	800b432 <_strtod_l+0x9aa>
 800b4f6:	f1ba 0f01 	cmp.w	sl, #1
 800b4fa:	d102      	bne.n	800b502 <_strtod_l+0xa7a>
 800b4fc:	2f00      	cmp	r7, #0
 800b4fe:	f43f ad83 	beq.w	800b008 <_strtod_l+0x580>
 800b502:	4b62      	ldr	r3, [pc, #392]	; (800b68c <_strtod_l+0xc04>)
 800b504:	2200      	movs	r2, #0
 800b506:	e78e      	b.n	800b426 <_strtod_l+0x99e>
 800b508:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b688 <_strtod_l+0xc00>
 800b50c:	f04f 0800 	mov.w	r8, #0
 800b510:	e7e7      	b.n	800b4e2 <_strtod_l+0xa5a>
 800b512:	4b5d      	ldr	r3, [pc, #372]	; (800b688 <_strtod_l+0xc00>)
 800b514:	4640      	mov	r0, r8
 800b516:	4649      	mov	r1, r9
 800b518:	2200      	movs	r2, #0
 800b51a:	f7f5 f87d 	bl	8000618 <__aeabi_dmul>
 800b51e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b520:	4680      	mov	r8, r0
 800b522:	4689      	mov	r9, r1
 800b524:	b933      	cbnz	r3, 800b534 <_strtod_l+0xaac>
 800b526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b52a:	900e      	str	r0, [sp, #56]	; 0x38
 800b52c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b52e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b532:	e7dd      	b.n	800b4f0 <_strtod_l+0xa68>
 800b534:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b538:	e7f9      	b.n	800b52e <_strtod_l+0xaa6>
 800b53a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b53e:	9b04      	ldr	r3, [sp, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1a8      	bne.n	800b496 <_strtod_l+0xa0e>
 800b544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b54a:	0d1b      	lsrs	r3, r3, #20
 800b54c:	051b      	lsls	r3, r3, #20
 800b54e:	429a      	cmp	r2, r3
 800b550:	d1a1      	bne.n	800b496 <_strtod_l+0xa0e>
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	f7f5 fbbf 	bl	8000cd8 <__aeabi_d2lz>
 800b55a:	f7f5 f82f 	bl	80005bc <__aeabi_l2d>
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	4640      	mov	r0, r8
 800b564:	4649      	mov	r1, r9
 800b566:	f7f4 fe9f 	bl	80002a8 <__aeabi_dsub>
 800b56a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b56c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b570:	ea43 030a 	orr.w	r3, r3, sl
 800b574:	4313      	orrs	r3, r2
 800b576:	4680      	mov	r8, r0
 800b578:	4689      	mov	r9, r1
 800b57a:	d055      	beq.n	800b628 <_strtod_l+0xba0>
 800b57c:	a336      	add	r3, pc, #216	; (adr r3, 800b658 <_strtod_l+0xbd0>)
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	f7f5 fabb 	bl	8000afc <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	f47f acd0 	bne.w	800af2c <_strtod_l+0x4a4>
 800b58c:	a334      	add	r3, pc, #208	; (adr r3, 800b660 <_strtod_l+0xbd8>)
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f5 facf 	bl	8000b38 <__aeabi_dcmpgt>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f43f af7b 	beq.w	800b496 <_strtod_l+0xa0e>
 800b5a0:	e4c4      	b.n	800af2c <_strtod_l+0x4a4>
 800b5a2:	9b04      	ldr	r3, [sp, #16]
 800b5a4:	b333      	cbz	r3, 800b5f4 <_strtod_l+0xb6c>
 800b5a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5ac:	d822      	bhi.n	800b5f4 <_strtod_l+0xb6c>
 800b5ae:	a32e      	add	r3, pc, #184	; (adr r3, 800b668 <_strtod_l+0xbe0>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	4649      	mov	r1, r9
 800b5b8:	f7f5 faaa 	bl	8000b10 <__aeabi_dcmple>
 800b5bc:	b1a0      	cbz	r0, 800b5e8 <_strtod_l+0xb60>
 800b5be:	4649      	mov	r1, r9
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	f7f5 fb01 	bl	8000bc8 <__aeabi_d2uiz>
 800b5c6:	2801      	cmp	r0, #1
 800b5c8:	bf38      	it	cc
 800b5ca:	2001      	movcc	r0, #1
 800b5cc:	f7f4 ffaa 	bl	8000524 <__aeabi_ui2d>
 800b5d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	4689      	mov	r9, r1
 800b5d6:	bb23      	cbnz	r3, 800b622 <_strtod_l+0xb9a>
 800b5d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5dc:	9010      	str	r0, [sp, #64]	; 0x40
 800b5de:	9311      	str	r3, [sp, #68]	; 0x44
 800b5e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5f8:	eeb0 0a48 	vmov.f32	s0, s16
 800b5fc:	eef0 0a68 	vmov.f32	s1, s17
 800b600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b604:	f001 fe6a 	bl	800d2dc <__ulp>
 800b608:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b60c:	ec53 2b10 	vmov	r2, r3, d0
 800b610:	f7f5 f802 	bl	8000618 <__aeabi_dmul>
 800b614:	ec53 2b18 	vmov	r2, r3, d8
 800b618:	f7f4 fe48 	bl	80002ac <__adddf3>
 800b61c:	4682      	mov	sl, r0
 800b61e:	468b      	mov	fp, r1
 800b620:	e78d      	b.n	800b53e <_strtod_l+0xab6>
 800b622:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b626:	e7db      	b.n	800b5e0 <_strtod_l+0xb58>
 800b628:	a311      	add	r3, pc, #68	; (adr r3, 800b670 <_strtod_l+0xbe8>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f5 fa65 	bl	8000afc <__aeabi_dcmplt>
 800b632:	e7b2      	b.n	800b59a <_strtod_l+0xb12>
 800b634:	2300      	movs	r3, #0
 800b636:	930a      	str	r3, [sp, #40]	; 0x28
 800b638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b63a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	f7ff ba6b 	b.w	800ab18 <_strtod_l+0x90>
 800b642:	2a65      	cmp	r2, #101	; 0x65
 800b644:	f43f ab5f 	beq.w	800ad06 <_strtod_l+0x27e>
 800b648:	2a45      	cmp	r2, #69	; 0x45
 800b64a:	f43f ab5c 	beq.w	800ad06 <_strtod_l+0x27e>
 800b64e:	2301      	movs	r3, #1
 800b650:	f7ff bb94 	b.w	800ad7c <_strtod_l+0x2f4>
 800b654:	f3af 8000 	nop.w
 800b658:	94a03595 	.word	0x94a03595
 800b65c:	3fdfffff 	.word	0x3fdfffff
 800b660:	35afe535 	.word	0x35afe535
 800b664:	3fe00000 	.word	0x3fe00000
 800b668:	ffc00000 	.word	0xffc00000
 800b66c:	41dfffff 	.word	0x41dfffff
 800b670:	94a03595 	.word	0x94a03595
 800b674:	3fcfffff 	.word	0x3fcfffff
 800b678:	3ff00000 	.word	0x3ff00000
 800b67c:	7ff00000 	.word	0x7ff00000
 800b680:	7fe00000 	.word	0x7fe00000
 800b684:	7c9fffff 	.word	0x7c9fffff
 800b688:	3fe00000 	.word	0x3fe00000
 800b68c:	bff00000 	.word	0xbff00000
 800b690:	7fefffff 	.word	0x7fefffff

0800b694 <_strtod_r>:
 800b694:	4b01      	ldr	r3, [pc, #4]	; (800b69c <_strtod_r+0x8>)
 800b696:	f7ff b9f7 	b.w	800aa88 <_strtod_l>
 800b69a:	bf00      	nop
 800b69c:	20000120 	.word	0x20000120

0800b6a0 <_strtol_l.constprop.0>:
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a6:	d001      	beq.n	800b6ac <_strtol_l.constprop.0+0xc>
 800b6a8:	2b24      	cmp	r3, #36	; 0x24
 800b6aa:	d906      	bls.n	800b6ba <_strtol_l.constprop.0+0x1a>
 800b6ac:	f7fe faee 	bl	8009c8c <__errno>
 800b6b0:	2316      	movs	r3, #22
 800b6b2:	6003      	str	r3, [r0, #0]
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b7a0 <_strtol_l.constprop.0+0x100>
 800b6be:	460d      	mov	r5, r1
 800b6c0:	462e      	mov	r6, r5
 800b6c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b6ca:	f017 0708 	ands.w	r7, r7, #8
 800b6ce:	d1f7      	bne.n	800b6c0 <_strtol_l.constprop.0+0x20>
 800b6d0:	2c2d      	cmp	r4, #45	; 0x2d
 800b6d2:	d132      	bne.n	800b73a <_strtol_l.constprop.0+0x9a>
 800b6d4:	782c      	ldrb	r4, [r5, #0]
 800b6d6:	2701      	movs	r7, #1
 800b6d8:	1cb5      	adds	r5, r6, #2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d05b      	beq.n	800b796 <_strtol_l.constprop.0+0xf6>
 800b6de:	2b10      	cmp	r3, #16
 800b6e0:	d109      	bne.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b6e2:	2c30      	cmp	r4, #48	; 0x30
 800b6e4:	d107      	bne.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b6e6:	782c      	ldrb	r4, [r5, #0]
 800b6e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b6ec:	2c58      	cmp	r4, #88	; 0x58
 800b6ee:	d14d      	bne.n	800b78c <_strtol_l.constprop.0+0xec>
 800b6f0:	786c      	ldrb	r4, [r5, #1]
 800b6f2:	2310      	movs	r3, #16
 800b6f4:	3502      	adds	r5, #2
 800b6f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b6fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b6fe:	f04f 0c00 	mov.w	ip, #0
 800b702:	fbb8 f9f3 	udiv	r9, r8, r3
 800b706:	4666      	mov	r6, ip
 800b708:	fb03 8a19 	mls	sl, r3, r9, r8
 800b70c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b710:	f1be 0f09 	cmp.w	lr, #9
 800b714:	d816      	bhi.n	800b744 <_strtol_l.constprop.0+0xa4>
 800b716:	4674      	mov	r4, lr
 800b718:	42a3      	cmp	r3, r4
 800b71a:	dd24      	ble.n	800b766 <_strtol_l.constprop.0+0xc6>
 800b71c:	f1bc 0f00 	cmp.w	ip, #0
 800b720:	db1e      	blt.n	800b760 <_strtol_l.constprop.0+0xc0>
 800b722:	45b1      	cmp	r9, r6
 800b724:	d31c      	bcc.n	800b760 <_strtol_l.constprop.0+0xc0>
 800b726:	d101      	bne.n	800b72c <_strtol_l.constprop.0+0x8c>
 800b728:	45a2      	cmp	sl, r4
 800b72a:	db19      	blt.n	800b760 <_strtol_l.constprop.0+0xc0>
 800b72c:	fb06 4603 	mla	r6, r6, r3, r4
 800b730:	f04f 0c01 	mov.w	ip, #1
 800b734:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b738:	e7e8      	b.n	800b70c <_strtol_l.constprop.0+0x6c>
 800b73a:	2c2b      	cmp	r4, #43	; 0x2b
 800b73c:	bf04      	itt	eq
 800b73e:	782c      	ldrbeq	r4, [r5, #0]
 800b740:	1cb5      	addeq	r5, r6, #2
 800b742:	e7ca      	b.n	800b6da <_strtol_l.constprop.0+0x3a>
 800b744:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b748:	f1be 0f19 	cmp.w	lr, #25
 800b74c:	d801      	bhi.n	800b752 <_strtol_l.constprop.0+0xb2>
 800b74e:	3c37      	subs	r4, #55	; 0x37
 800b750:	e7e2      	b.n	800b718 <_strtol_l.constprop.0+0x78>
 800b752:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b756:	f1be 0f19 	cmp.w	lr, #25
 800b75a:	d804      	bhi.n	800b766 <_strtol_l.constprop.0+0xc6>
 800b75c:	3c57      	subs	r4, #87	; 0x57
 800b75e:	e7db      	b.n	800b718 <_strtol_l.constprop.0+0x78>
 800b760:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b764:	e7e6      	b.n	800b734 <_strtol_l.constprop.0+0x94>
 800b766:	f1bc 0f00 	cmp.w	ip, #0
 800b76a:	da05      	bge.n	800b778 <_strtol_l.constprop.0+0xd8>
 800b76c:	2322      	movs	r3, #34	; 0x22
 800b76e:	6003      	str	r3, [r0, #0]
 800b770:	4646      	mov	r6, r8
 800b772:	b942      	cbnz	r2, 800b786 <_strtol_l.constprop.0+0xe6>
 800b774:	4630      	mov	r0, r6
 800b776:	e79e      	b.n	800b6b6 <_strtol_l.constprop.0+0x16>
 800b778:	b107      	cbz	r7, 800b77c <_strtol_l.constprop.0+0xdc>
 800b77a:	4276      	negs	r6, r6
 800b77c:	2a00      	cmp	r2, #0
 800b77e:	d0f9      	beq.n	800b774 <_strtol_l.constprop.0+0xd4>
 800b780:	f1bc 0f00 	cmp.w	ip, #0
 800b784:	d000      	beq.n	800b788 <_strtol_l.constprop.0+0xe8>
 800b786:	1e69      	subs	r1, r5, #1
 800b788:	6011      	str	r1, [r2, #0]
 800b78a:	e7f3      	b.n	800b774 <_strtol_l.constprop.0+0xd4>
 800b78c:	2430      	movs	r4, #48	; 0x30
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1b1      	bne.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b792:	2308      	movs	r3, #8
 800b794:	e7af      	b.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b796:	2c30      	cmp	r4, #48	; 0x30
 800b798:	d0a5      	beq.n	800b6e6 <_strtol_l.constprop.0+0x46>
 800b79a:	230a      	movs	r3, #10
 800b79c:	e7ab      	b.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b79e:	bf00      	nop
 800b7a0:	0800e751 	.word	0x0800e751

0800b7a4 <_strtol_r>:
 800b7a4:	f7ff bf7c 	b.w	800b6a0 <_strtol_l.constprop.0>

0800b7a8 <_vsiprintf_r>:
 800b7a8:	b500      	push	{lr}
 800b7aa:	b09b      	sub	sp, #108	; 0x6c
 800b7ac:	9100      	str	r1, [sp, #0]
 800b7ae:	9104      	str	r1, [sp, #16]
 800b7b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7b4:	9105      	str	r1, [sp, #20]
 800b7b6:	9102      	str	r1, [sp, #8]
 800b7b8:	4905      	ldr	r1, [pc, #20]	; (800b7d0 <_vsiprintf_r+0x28>)
 800b7ba:	9103      	str	r1, [sp, #12]
 800b7bc:	4669      	mov	r1, sp
 800b7be:	f002 f82f 	bl	800d820 <_svfiprintf_r>
 800b7c2:	9b00      	ldr	r3, [sp, #0]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	701a      	strb	r2, [r3, #0]
 800b7c8:	b01b      	add	sp, #108	; 0x6c
 800b7ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7ce:	bf00      	nop
 800b7d0:	ffff0208 	.word	0xffff0208

0800b7d4 <vsiprintf>:
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	460a      	mov	r2, r1
 800b7d8:	4601      	mov	r1, r0
 800b7da:	4802      	ldr	r0, [pc, #8]	; (800b7e4 <vsiprintf+0x10>)
 800b7dc:	6800      	ldr	r0, [r0, #0]
 800b7de:	f7ff bfe3 	b.w	800b7a8 <_vsiprintf_r>
 800b7e2:	bf00      	nop
 800b7e4:	200000b8 	.word	0x200000b8

0800b7e8 <quorem>:
 800b7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	6903      	ldr	r3, [r0, #16]
 800b7ee:	690c      	ldr	r4, [r1, #16]
 800b7f0:	42a3      	cmp	r3, r4
 800b7f2:	4607      	mov	r7, r0
 800b7f4:	f2c0 8081 	blt.w	800b8fa <quorem+0x112>
 800b7f8:	3c01      	subs	r4, #1
 800b7fa:	f101 0814 	add.w	r8, r1, #20
 800b7fe:	f100 0514 	add.w	r5, r0, #20
 800b802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b80c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b810:	3301      	adds	r3, #1
 800b812:	429a      	cmp	r2, r3
 800b814:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b81c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b820:	d331      	bcc.n	800b886 <quorem+0x9e>
 800b822:	f04f 0e00 	mov.w	lr, #0
 800b826:	4640      	mov	r0, r8
 800b828:	46ac      	mov	ip, r5
 800b82a:	46f2      	mov	sl, lr
 800b82c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b830:	b293      	uxth	r3, r2
 800b832:	fb06 e303 	mla	r3, r6, r3, lr
 800b836:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	ebaa 0303 	sub.w	r3, sl, r3
 800b840:	f8dc a000 	ldr.w	sl, [ip]
 800b844:	0c12      	lsrs	r2, r2, #16
 800b846:	fa13 f38a 	uxtah	r3, r3, sl
 800b84a:	fb06 e202 	mla	r2, r6, r2, lr
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	9b00      	ldr	r3, [sp, #0]
 800b852:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b856:	b292      	uxth	r2, r2
 800b858:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b85c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b860:	f8bd 3000 	ldrh.w	r3, [sp]
 800b864:	4581      	cmp	r9, r0
 800b866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b86a:	f84c 3b04 	str.w	r3, [ip], #4
 800b86e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b872:	d2db      	bcs.n	800b82c <quorem+0x44>
 800b874:	f855 300b 	ldr.w	r3, [r5, fp]
 800b878:	b92b      	cbnz	r3, 800b886 <quorem+0x9e>
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	3b04      	subs	r3, #4
 800b87e:	429d      	cmp	r5, r3
 800b880:	461a      	mov	r2, r3
 800b882:	d32e      	bcc.n	800b8e2 <quorem+0xfa>
 800b884:	613c      	str	r4, [r7, #16]
 800b886:	4638      	mov	r0, r7
 800b888:	f001 fc82 	bl	800d190 <__mcmp>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	db24      	blt.n	800b8da <quorem+0xf2>
 800b890:	3601      	adds	r6, #1
 800b892:	4628      	mov	r0, r5
 800b894:	f04f 0c00 	mov.w	ip, #0
 800b898:	f858 2b04 	ldr.w	r2, [r8], #4
 800b89c:	f8d0 e000 	ldr.w	lr, [r0]
 800b8a0:	b293      	uxth	r3, r2
 800b8a2:	ebac 0303 	sub.w	r3, ip, r3
 800b8a6:	0c12      	lsrs	r2, r2, #16
 800b8a8:	fa13 f38e 	uxtah	r3, r3, lr
 800b8ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8ba:	45c1      	cmp	r9, r8
 800b8bc:	f840 3b04 	str.w	r3, [r0], #4
 800b8c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8c4:	d2e8      	bcs.n	800b898 <quorem+0xb0>
 800b8c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8ce:	b922      	cbnz	r2, 800b8da <quorem+0xf2>
 800b8d0:	3b04      	subs	r3, #4
 800b8d2:	429d      	cmp	r5, r3
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	d30a      	bcc.n	800b8ee <quorem+0x106>
 800b8d8:	613c      	str	r4, [r7, #16]
 800b8da:	4630      	mov	r0, r6
 800b8dc:	b003      	add	sp, #12
 800b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e2:	6812      	ldr	r2, [r2, #0]
 800b8e4:	3b04      	subs	r3, #4
 800b8e6:	2a00      	cmp	r2, #0
 800b8e8:	d1cc      	bne.n	800b884 <quorem+0x9c>
 800b8ea:	3c01      	subs	r4, #1
 800b8ec:	e7c7      	b.n	800b87e <quorem+0x96>
 800b8ee:	6812      	ldr	r2, [r2, #0]
 800b8f0:	3b04      	subs	r3, #4
 800b8f2:	2a00      	cmp	r2, #0
 800b8f4:	d1f0      	bne.n	800b8d8 <quorem+0xf0>
 800b8f6:	3c01      	subs	r4, #1
 800b8f8:	e7eb      	b.n	800b8d2 <quorem+0xea>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	e7ee      	b.n	800b8dc <quorem+0xf4>
	...

0800b900 <_dtoa_r>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	ed2d 8b04 	vpush	{d8-d9}
 800b908:	ec57 6b10 	vmov	r6, r7, d0
 800b90c:	b093      	sub	sp, #76	; 0x4c
 800b90e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b910:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b914:	9106      	str	r1, [sp, #24]
 800b916:	ee10 aa10 	vmov	sl, s0
 800b91a:	4604      	mov	r4, r0
 800b91c:	9209      	str	r2, [sp, #36]	; 0x24
 800b91e:	930c      	str	r3, [sp, #48]	; 0x30
 800b920:	46bb      	mov	fp, r7
 800b922:	b975      	cbnz	r5, 800b942 <_dtoa_r+0x42>
 800b924:	2010      	movs	r0, #16
 800b926:	f001 f94d 	bl	800cbc4 <malloc>
 800b92a:	4602      	mov	r2, r0
 800b92c:	6260      	str	r0, [r4, #36]	; 0x24
 800b92e:	b920      	cbnz	r0, 800b93a <_dtoa_r+0x3a>
 800b930:	4ba7      	ldr	r3, [pc, #668]	; (800bbd0 <_dtoa_r+0x2d0>)
 800b932:	21ea      	movs	r1, #234	; 0xea
 800b934:	48a7      	ldr	r0, [pc, #668]	; (800bbd4 <_dtoa_r+0x2d4>)
 800b936:	f002 f8ad 	bl	800da94 <__assert_func>
 800b93a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b93e:	6005      	str	r5, [r0, #0]
 800b940:	60c5      	str	r5, [r0, #12]
 800b942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b944:	6819      	ldr	r1, [r3, #0]
 800b946:	b151      	cbz	r1, 800b95e <_dtoa_r+0x5e>
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	604a      	str	r2, [r1, #4]
 800b94c:	2301      	movs	r3, #1
 800b94e:	4093      	lsls	r3, r2
 800b950:	608b      	str	r3, [r1, #8]
 800b952:	4620      	mov	r0, r4
 800b954:	f001 f990 	bl	800cc78 <_Bfree>
 800b958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	1e3b      	subs	r3, r7, #0
 800b960:	bfaa      	itet	ge
 800b962:	2300      	movge	r3, #0
 800b964:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b968:	f8c8 3000 	strge.w	r3, [r8]
 800b96c:	4b9a      	ldr	r3, [pc, #616]	; (800bbd8 <_dtoa_r+0x2d8>)
 800b96e:	bfbc      	itt	lt
 800b970:	2201      	movlt	r2, #1
 800b972:	f8c8 2000 	strlt.w	r2, [r8]
 800b976:	ea33 030b 	bics.w	r3, r3, fp
 800b97a:	d11b      	bne.n	800b9b4 <_dtoa_r+0xb4>
 800b97c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b97e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b988:	4333      	orrs	r3, r6
 800b98a:	f000 8592 	beq.w	800c4b2 <_dtoa_r+0xbb2>
 800b98e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b990:	b963      	cbnz	r3, 800b9ac <_dtoa_r+0xac>
 800b992:	4b92      	ldr	r3, [pc, #584]	; (800bbdc <_dtoa_r+0x2dc>)
 800b994:	e022      	b.n	800b9dc <_dtoa_r+0xdc>
 800b996:	4b92      	ldr	r3, [pc, #584]	; (800bbe0 <_dtoa_r+0x2e0>)
 800b998:	9301      	str	r3, [sp, #4]
 800b99a:	3308      	adds	r3, #8
 800b99c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	9801      	ldr	r0, [sp, #4]
 800b9a2:	b013      	add	sp, #76	; 0x4c
 800b9a4:	ecbd 8b04 	vpop	{d8-d9}
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	4b8b      	ldr	r3, [pc, #556]	; (800bbdc <_dtoa_r+0x2dc>)
 800b9ae:	9301      	str	r3, [sp, #4]
 800b9b0:	3303      	adds	r3, #3
 800b9b2:	e7f3      	b.n	800b99c <_dtoa_r+0x9c>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4650      	mov	r0, sl
 800b9ba:	4659      	mov	r1, fp
 800b9bc:	f7f5 f894 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9c0:	ec4b ab19 	vmov	d9, sl, fp
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	b158      	cbz	r0, 800b9e0 <_dtoa_r+0xe0>
 800b9c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f000 856b 	beq.w	800c4ac <_dtoa_r+0xbac>
 800b9d6:	4883      	ldr	r0, [pc, #524]	; (800bbe4 <_dtoa_r+0x2e4>)
 800b9d8:	6018      	str	r0, [r3, #0]
 800b9da:	1e43      	subs	r3, r0, #1
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	e7df      	b.n	800b9a0 <_dtoa_r+0xa0>
 800b9e0:	ec4b ab10 	vmov	d0, sl, fp
 800b9e4:	aa10      	add	r2, sp, #64	; 0x40
 800b9e6:	a911      	add	r1, sp, #68	; 0x44
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f001 fcf3 	bl	800d3d4 <__d2b>
 800b9ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b9f2:	ee08 0a10 	vmov	s16, r0
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	f000 8084 	beq.w	800bb04 <_dtoa_r+0x204>
 800b9fc:	ee19 3a90 	vmov	r3, s19
 800ba00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba08:	4656      	mov	r6, sl
 800ba0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ba16:	4b74      	ldr	r3, [pc, #464]	; (800bbe8 <_dtoa_r+0x2e8>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 fc43 	bl	80002a8 <__aeabi_dsub>
 800ba22:	a365      	add	r3, pc, #404	; (adr r3, 800bbb8 <_dtoa_r+0x2b8>)
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f7f4 fdf6 	bl	8000618 <__aeabi_dmul>
 800ba2c:	a364      	add	r3, pc, #400	; (adr r3, 800bbc0 <_dtoa_r+0x2c0>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	f7f4 fc3b 	bl	80002ac <__adddf3>
 800ba36:	4606      	mov	r6, r0
 800ba38:	4628      	mov	r0, r5
 800ba3a:	460f      	mov	r7, r1
 800ba3c:	f7f4 fd82 	bl	8000544 <__aeabi_i2d>
 800ba40:	a361      	add	r3, pc, #388	; (adr r3, 800bbc8 <_dtoa_r+0x2c8>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fde7 	bl	8000618 <__aeabi_dmul>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f4 fc2b 	bl	80002ac <__adddf3>
 800ba56:	4606      	mov	r6, r0
 800ba58:	460f      	mov	r7, r1
 800ba5a:	f7f5 f88d 	bl	8000b78 <__aeabi_d2iz>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	9000      	str	r0, [sp, #0]
 800ba62:	2300      	movs	r3, #0
 800ba64:	4630      	mov	r0, r6
 800ba66:	4639      	mov	r1, r7
 800ba68:	f7f5 f848 	bl	8000afc <__aeabi_dcmplt>
 800ba6c:	b150      	cbz	r0, 800ba84 <_dtoa_r+0x184>
 800ba6e:	9800      	ldr	r0, [sp, #0]
 800ba70:	f7f4 fd68 	bl	8000544 <__aeabi_i2d>
 800ba74:	4632      	mov	r2, r6
 800ba76:	463b      	mov	r3, r7
 800ba78:	f7f5 f836 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba7c:	b910      	cbnz	r0, 800ba84 <_dtoa_r+0x184>
 800ba7e:	9b00      	ldr	r3, [sp, #0]
 800ba80:	3b01      	subs	r3, #1
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	9b00      	ldr	r3, [sp, #0]
 800ba86:	2b16      	cmp	r3, #22
 800ba88:	d85a      	bhi.n	800bb40 <_dtoa_r+0x240>
 800ba8a:	9a00      	ldr	r2, [sp, #0]
 800ba8c:	4b57      	ldr	r3, [pc, #348]	; (800bbec <_dtoa_r+0x2ec>)
 800ba8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	ec51 0b19 	vmov	r0, r1, d9
 800ba9a:	f7f5 f82f 	bl	8000afc <__aeabi_dcmplt>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d050      	beq.n	800bb44 <_dtoa_r+0x244>
 800baa2:	9b00      	ldr	r3, [sp, #0]
 800baa4:	3b01      	subs	r3, #1
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	2300      	movs	r3, #0
 800baaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800baac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baae:	1b5d      	subs	r5, r3, r5
 800bab0:	1e6b      	subs	r3, r5, #1
 800bab2:	9305      	str	r3, [sp, #20]
 800bab4:	bf45      	ittet	mi
 800bab6:	f1c5 0301 	rsbmi	r3, r5, #1
 800baba:	9304      	strmi	r3, [sp, #16]
 800babc:	2300      	movpl	r3, #0
 800babe:	2300      	movmi	r3, #0
 800bac0:	bf4c      	ite	mi
 800bac2:	9305      	strmi	r3, [sp, #20]
 800bac4:	9304      	strpl	r3, [sp, #16]
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	db3d      	blt.n	800bb48 <_dtoa_r+0x248>
 800bacc:	9b05      	ldr	r3, [sp, #20]
 800bace:	9a00      	ldr	r2, [sp, #0]
 800bad0:	920a      	str	r2, [sp, #40]	; 0x28
 800bad2:	4413      	add	r3, r2
 800bad4:	9305      	str	r3, [sp, #20]
 800bad6:	2300      	movs	r3, #0
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2b09      	cmp	r3, #9
 800bade:	f200 8089 	bhi.w	800bbf4 <_dtoa_r+0x2f4>
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	bfc4      	itt	gt
 800bae6:	3b04      	subgt	r3, #4
 800bae8:	9306      	strgt	r3, [sp, #24]
 800baea:	9b06      	ldr	r3, [sp, #24]
 800baec:	f1a3 0302 	sub.w	r3, r3, #2
 800baf0:	bfcc      	ite	gt
 800baf2:	2500      	movgt	r5, #0
 800baf4:	2501      	movle	r5, #1
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	f200 8087 	bhi.w	800bc0a <_dtoa_r+0x30a>
 800bafc:	e8df f003 	tbb	[pc, r3]
 800bb00:	59383a2d 	.word	0x59383a2d
 800bb04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb08:	441d      	add	r5, r3
 800bb0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb0e:	2b20      	cmp	r3, #32
 800bb10:	bfc1      	itttt	gt
 800bb12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb1a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bb1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb22:	bfda      	itte	le
 800bb24:	f1c3 0320 	rsble	r3, r3, #32
 800bb28:	fa06 f003 	lslle.w	r0, r6, r3
 800bb2c:	4318      	orrgt	r0, r3
 800bb2e:	f7f4 fcf9 	bl	8000524 <__aeabi_ui2d>
 800bb32:	2301      	movs	r3, #1
 800bb34:	4606      	mov	r6, r0
 800bb36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb3a:	3d01      	subs	r5, #1
 800bb3c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb3e:	e76a      	b.n	800ba16 <_dtoa_r+0x116>
 800bb40:	2301      	movs	r3, #1
 800bb42:	e7b2      	b.n	800baaa <_dtoa_r+0x1aa>
 800bb44:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb46:	e7b1      	b.n	800baac <_dtoa_r+0x1ac>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	9a00      	ldr	r2, [sp, #0]
 800bb4c:	1a9b      	subs	r3, r3, r2
 800bb4e:	9304      	str	r3, [sp, #16]
 800bb50:	4253      	negs	r3, r2
 800bb52:	9307      	str	r3, [sp, #28]
 800bb54:	2300      	movs	r3, #0
 800bb56:	930a      	str	r3, [sp, #40]	; 0x28
 800bb58:	e7bf      	b.n	800bada <_dtoa_r+0x1da>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9308      	str	r3, [sp, #32]
 800bb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dc55      	bgt.n	800bc10 <_dtoa_r+0x310>
 800bb64:	2301      	movs	r3, #1
 800bb66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb6e:	e00c      	b.n	800bb8a <_dtoa_r+0x28a>
 800bb70:	2301      	movs	r3, #1
 800bb72:	e7f3      	b.n	800bb5c <_dtoa_r+0x25c>
 800bb74:	2300      	movs	r3, #0
 800bb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb78:	9308      	str	r3, [sp, #32]
 800bb7a:	9b00      	ldr	r3, [sp, #0]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	9302      	str	r3, [sp, #8]
 800bb80:	3301      	adds	r3, #1
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	9303      	str	r3, [sp, #12]
 800bb86:	bfb8      	it	lt
 800bb88:	2301      	movlt	r3, #1
 800bb8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	6042      	str	r2, [r0, #4]
 800bb90:	2204      	movs	r2, #4
 800bb92:	f102 0614 	add.w	r6, r2, #20
 800bb96:	429e      	cmp	r6, r3
 800bb98:	6841      	ldr	r1, [r0, #4]
 800bb9a:	d93d      	bls.n	800bc18 <_dtoa_r+0x318>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f001 f82b 	bl	800cbf8 <_Balloc>
 800bba2:	9001      	str	r0, [sp, #4]
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d13b      	bne.n	800bc20 <_dtoa_r+0x320>
 800bba8:	4b11      	ldr	r3, [pc, #68]	; (800bbf0 <_dtoa_r+0x2f0>)
 800bbaa:	4602      	mov	r2, r0
 800bbac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbb0:	e6c0      	b.n	800b934 <_dtoa_r+0x34>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e7df      	b.n	800bb76 <_dtoa_r+0x276>
 800bbb6:	bf00      	nop
 800bbb8:	636f4361 	.word	0x636f4361
 800bbbc:	3fd287a7 	.word	0x3fd287a7
 800bbc0:	8b60c8b3 	.word	0x8b60c8b3
 800bbc4:	3fc68a28 	.word	0x3fc68a28
 800bbc8:	509f79fb 	.word	0x509f79fb
 800bbcc:	3fd34413 	.word	0x3fd34413
 800bbd0:	0800e85e 	.word	0x0800e85e
 800bbd4:	0800e875 	.word	0x0800e875
 800bbd8:	7ff00000 	.word	0x7ff00000
 800bbdc:	0800e85a 	.word	0x0800e85a
 800bbe0:	0800e851 	.word	0x0800e851
 800bbe4:	0800e6d5 	.word	0x0800e6d5
 800bbe8:	3ff80000 	.word	0x3ff80000
 800bbec:	0800e9e0 	.word	0x0800e9e0
 800bbf0:	0800e8d0 	.word	0x0800e8d0
 800bbf4:	2501      	movs	r5, #1
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	9306      	str	r3, [sp, #24]
 800bbfa:	9508      	str	r5, [sp, #32]
 800bbfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc04:	2200      	movs	r2, #0
 800bc06:	2312      	movs	r3, #18
 800bc08:	e7b0      	b.n	800bb6c <_dtoa_r+0x26c>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	9308      	str	r3, [sp, #32]
 800bc0e:	e7f5      	b.n	800bbfc <_dtoa_r+0x2fc>
 800bc10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc16:	e7b8      	b.n	800bb8a <_dtoa_r+0x28a>
 800bc18:	3101      	adds	r1, #1
 800bc1a:	6041      	str	r1, [r0, #4]
 800bc1c:	0052      	lsls	r2, r2, #1
 800bc1e:	e7b8      	b.n	800bb92 <_dtoa_r+0x292>
 800bc20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc22:	9a01      	ldr	r2, [sp, #4]
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	2b0e      	cmp	r3, #14
 800bc2a:	f200 809d 	bhi.w	800bd68 <_dtoa_r+0x468>
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	f000 809a 	beq.w	800bd68 <_dtoa_r+0x468>
 800bc34:	9b00      	ldr	r3, [sp, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	dd32      	ble.n	800bca0 <_dtoa_r+0x3a0>
 800bc3a:	4ab7      	ldr	r2, [pc, #732]	; (800bf18 <_dtoa_r+0x618>)
 800bc3c:	f003 030f 	and.w	r3, r3, #15
 800bc40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc48:	9b00      	ldr	r3, [sp, #0]
 800bc4a:	05d8      	lsls	r0, r3, #23
 800bc4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bc50:	d516      	bpl.n	800bc80 <_dtoa_r+0x380>
 800bc52:	4bb2      	ldr	r3, [pc, #712]	; (800bf1c <_dtoa_r+0x61c>)
 800bc54:	ec51 0b19 	vmov	r0, r1, d9
 800bc58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc5c:	f7f4 fe06 	bl	800086c <__aeabi_ddiv>
 800bc60:	f007 070f 	and.w	r7, r7, #15
 800bc64:	4682      	mov	sl, r0
 800bc66:	468b      	mov	fp, r1
 800bc68:	2503      	movs	r5, #3
 800bc6a:	4eac      	ldr	r6, [pc, #688]	; (800bf1c <_dtoa_r+0x61c>)
 800bc6c:	b957      	cbnz	r7, 800bc84 <_dtoa_r+0x384>
 800bc6e:	4642      	mov	r2, r8
 800bc70:	464b      	mov	r3, r9
 800bc72:	4650      	mov	r0, sl
 800bc74:	4659      	mov	r1, fp
 800bc76:	f7f4 fdf9 	bl	800086c <__aeabi_ddiv>
 800bc7a:	4682      	mov	sl, r0
 800bc7c:	468b      	mov	fp, r1
 800bc7e:	e028      	b.n	800bcd2 <_dtoa_r+0x3d2>
 800bc80:	2502      	movs	r5, #2
 800bc82:	e7f2      	b.n	800bc6a <_dtoa_r+0x36a>
 800bc84:	07f9      	lsls	r1, r7, #31
 800bc86:	d508      	bpl.n	800bc9a <_dtoa_r+0x39a>
 800bc88:	4640      	mov	r0, r8
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc90:	f7f4 fcc2 	bl	8000618 <__aeabi_dmul>
 800bc94:	3501      	adds	r5, #1
 800bc96:	4680      	mov	r8, r0
 800bc98:	4689      	mov	r9, r1
 800bc9a:	107f      	asrs	r7, r7, #1
 800bc9c:	3608      	adds	r6, #8
 800bc9e:	e7e5      	b.n	800bc6c <_dtoa_r+0x36c>
 800bca0:	f000 809b 	beq.w	800bdda <_dtoa_r+0x4da>
 800bca4:	9b00      	ldr	r3, [sp, #0]
 800bca6:	4f9d      	ldr	r7, [pc, #628]	; (800bf1c <_dtoa_r+0x61c>)
 800bca8:	425e      	negs	r6, r3
 800bcaa:	4b9b      	ldr	r3, [pc, #620]	; (800bf18 <_dtoa_r+0x618>)
 800bcac:	f006 020f 	and.w	r2, r6, #15
 800bcb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	ec51 0b19 	vmov	r0, r1, d9
 800bcbc:	f7f4 fcac 	bl	8000618 <__aeabi_dmul>
 800bcc0:	1136      	asrs	r6, r6, #4
 800bcc2:	4682      	mov	sl, r0
 800bcc4:	468b      	mov	fp, r1
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	2502      	movs	r5, #2
 800bcca:	2e00      	cmp	r6, #0
 800bccc:	d17a      	bne.n	800bdc4 <_dtoa_r+0x4c4>
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1d3      	bne.n	800bc7a <_dtoa_r+0x37a>
 800bcd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 8082 	beq.w	800bdde <_dtoa_r+0x4de>
 800bcda:	4b91      	ldr	r3, [pc, #580]	; (800bf20 <_dtoa_r+0x620>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	4650      	mov	r0, sl
 800bce0:	4659      	mov	r1, fp
 800bce2:	f7f4 ff0b 	bl	8000afc <__aeabi_dcmplt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d079      	beq.n	800bdde <_dtoa_r+0x4de>
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d076      	beq.n	800bdde <_dtoa_r+0x4de>
 800bcf0:	9b02      	ldr	r3, [sp, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dd36      	ble.n	800bd64 <_dtoa_r+0x464>
 800bcf6:	9b00      	ldr	r3, [sp, #0]
 800bcf8:	4650      	mov	r0, sl
 800bcfa:	4659      	mov	r1, fp
 800bcfc:	1e5f      	subs	r7, r3, #1
 800bcfe:	2200      	movs	r2, #0
 800bd00:	4b88      	ldr	r3, [pc, #544]	; (800bf24 <_dtoa_r+0x624>)
 800bd02:	f7f4 fc89 	bl	8000618 <__aeabi_dmul>
 800bd06:	9e02      	ldr	r6, [sp, #8]
 800bd08:	4682      	mov	sl, r0
 800bd0a:	468b      	mov	fp, r1
 800bd0c:	3501      	adds	r5, #1
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7f4 fc18 	bl	8000544 <__aeabi_i2d>
 800bd14:	4652      	mov	r2, sl
 800bd16:	465b      	mov	r3, fp
 800bd18:	f7f4 fc7e 	bl	8000618 <__aeabi_dmul>
 800bd1c:	4b82      	ldr	r3, [pc, #520]	; (800bf28 <_dtoa_r+0x628>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f7f4 fac4 	bl	80002ac <__adddf3>
 800bd24:	46d0      	mov	r8, sl
 800bd26:	46d9      	mov	r9, fp
 800bd28:	4682      	mov	sl, r0
 800bd2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bd2e:	2e00      	cmp	r6, #0
 800bd30:	d158      	bne.n	800bde4 <_dtoa_r+0x4e4>
 800bd32:	4b7e      	ldr	r3, [pc, #504]	; (800bf2c <_dtoa_r+0x62c>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	4640      	mov	r0, r8
 800bd38:	4649      	mov	r1, r9
 800bd3a:	f7f4 fab5 	bl	80002a8 <__aeabi_dsub>
 800bd3e:	4652      	mov	r2, sl
 800bd40:	465b      	mov	r3, fp
 800bd42:	4680      	mov	r8, r0
 800bd44:	4689      	mov	r9, r1
 800bd46:	f7f4 fef7 	bl	8000b38 <__aeabi_dcmpgt>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	f040 8295 	bne.w	800c27a <_dtoa_r+0x97a>
 800bd50:	4652      	mov	r2, sl
 800bd52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 fecf 	bl	8000afc <__aeabi_dcmplt>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f040 8289 	bne.w	800c276 <_dtoa_r+0x976>
 800bd64:	ec5b ab19 	vmov	sl, fp, d9
 800bd68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f2c0 8148 	blt.w	800c000 <_dtoa_r+0x700>
 800bd70:	9a00      	ldr	r2, [sp, #0]
 800bd72:	2a0e      	cmp	r2, #14
 800bd74:	f300 8144 	bgt.w	800c000 <_dtoa_r+0x700>
 800bd78:	4b67      	ldr	r3, [pc, #412]	; (800bf18 <_dtoa_r+0x618>)
 800bd7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f280 80d5 	bge.w	800bf34 <_dtoa_r+0x634>
 800bd8a:	9b03      	ldr	r3, [sp, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f300 80d1 	bgt.w	800bf34 <_dtoa_r+0x634>
 800bd92:	f040 826f 	bne.w	800c274 <_dtoa_r+0x974>
 800bd96:	4b65      	ldr	r3, [pc, #404]	; (800bf2c <_dtoa_r+0x62c>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f7f4 fc3b 	bl	8000618 <__aeabi_dmul>
 800bda2:	4652      	mov	r2, sl
 800bda4:	465b      	mov	r3, fp
 800bda6:	f7f4 febd 	bl	8000b24 <__aeabi_dcmpge>
 800bdaa:	9e03      	ldr	r6, [sp, #12]
 800bdac:	4637      	mov	r7, r6
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f040 8245 	bne.w	800c23e <_dtoa_r+0x93e>
 800bdb4:	9d01      	ldr	r5, [sp, #4]
 800bdb6:	2331      	movs	r3, #49	; 0x31
 800bdb8:	f805 3b01 	strb.w	r3, [r5], #1
 800bdbc:	9b00      	ldr	r3, [sp, #0]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	e240      	b.n	800c246 <_dtoa_r+0x946>
 800bdc4:	07f2      	lsls	r2, r6, #31
 800bdc6:	d505      	bpl.n	800bdd4 <_dtoa_r+0x4d4>
 800bdc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdcc:	f7f4 fc24 	bl	8000618 <__aeabi_dmul>
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	1076      	asrs	r6, r6, #1
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	e777      	b.n	800bcca <_dtoa_r+0x3ca>
 800bdda:	2502      	movs	r5, #2
 800bddc:	e779      	b.n	800bcd2 <_dtoa_r+0x3d2>
 800bdde:	9f00      	ldr	r7, [sp, #0]
 800bde0:	9e03      	ldr	r6, [sp, #12]
 800bde2:	e794      	b.n	800bd0e <_dtoa_r+0x40e>
 800bde4:	9901      	ldr	r1, [sp, #4]
 800bde6:	4b4c      	ldr	r3, [pc, #304]	; (800bf18 <_dtoa_r+0x618>)
 800bde8:	4431      	add	r1, r6
 800bdea:	910d      	str	r1, [sp, #52]	; 0x34
 800bdec:	9908      	ldr	r1, [sp, #32]
 800bdee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdf6:	2900      	cmp	r1, #0
 800bdf8:	d043      	beq.n	800be82 <_dtoa_r+0x582>
 800bdfa:	494d      	ldr	r1, [pc, #308]	; (800bf30 <_dtoa_r+0x630>)
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	f7f4 fd35 	bl	800086c <__aeabi_ddiv>
 800be02:	4652      	mov	r2, sl
 800be04:	465b      	mov	r3, fp
 800be06:	f7f4 fa4f 	bl	80002a8 <__aeabi_dsub>
 800be0a:	9d01      	ldr	r5, [sp, #4]
 800be0c:	4682      	mov	sl, r0
 800be0e:	468b      	mov	fp, r1
 800be10:	4649      	mov	r1, r9
 800be12:	4640      	mov	r0, r8
 800be14:	f7f4 feb0 	bl	8000b78 <__aeabi_d2iz>
 800be18:	4606      	mov	r6, r0
 800be1a:	f7f4 fb93 	bl	8000544 <__aeabi_i2d>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4640      	mov	r0, r8
 800be24:	4649      	mov	r1, r9
 800be26:	f7f4 fa3f 	bl	80002a8 <__aeabi_dsub>
 800be2a:	3630      	adds	r6, #48	; 0x30
 800be2c:	f805 6b01 	strb.w	r6, [r5], #1
 800be30:	4652      	mov	r2, sl
 800be32:	465b      	mov	r3, fp
 800be34:	4680      	mov	r8, r0
 800be36:	4689      	mov	r9, r1
 800be38:	f7f4 fe60 	bl	8000afc <__aeabi_dcmplt>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d163      	bne.n	800bf08 <_dtoa_r+0x608>
 800be40:	4642      	mov	r2, r8
 800be42:	464b      	mov	r3, r9
 800be44:	4936      	ldr	r1, [pc, #216]	; (800bf20 <_dtoa_r+0x620>)
 800be46:	2000      	movs	r0, #0
 800be48:	f7f4 fa2e 	bl	80002a8 <__aeabi_dsub>
 800be4c:	4652      	mov	r2, sl
 800be4e:	465b      	mov	r3, fp
 800be50:	f7f4 fe54 	bl	8000afc <__aeabi_dcmplt>
 800be54:	2800      	cmp	r0, #0
 800be56:	f040 80b5 	bne.w	800bfc4 <_dtoa_r+0x6c4>
 800be5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be5c:	429d      	cmp	r5, r3
 800be5e:	d081      	beq.n	800bd64 <_dtoa_r+0x464>
 800be60:	4b30      	ldr	r3, [pc, #192]	; (800bf24 <_dtoa_r+0x624>)
 800be62:	2200      	movs	r2, #0
 800be64:	4650      	mov	r0, sl
 800be66:	4659      	mov	r1, fp
 800be68:	f7f4 fbd6 	bl	8000618 <__aeabi_dmul>
 800be6c:	4b2d      	ldr	r3, [pc, #180]	; (800bf24 <_dtoa_r+0x624>)
 800be6e:	4682      	mov	sl, r0
 800be70:	468b      	mov	fp, r1
 800be72:	4640      	mov	r0, r8
 800be74:	4649      	mov	r1, r9
 800be76:	2200      	movs	r2, #0
 800be78:	f7f4 fbce 	bl	8000618 <__aeabi_dmul>
 800be7c:	4680      	mov	r8, r0
 800be7e:	4689      	mov	r9, r1
 800be80:	e7c6      	b.n	800be10 <_dtoa_r+0x510>
 800be82:	4650      	mov	r0, sl
 800be84:	4659      	mov	r1, fp
 800be86:	f7f4 fbc7 	bl	8000618 <__aeabi_dmul>
 800be8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be8c:	9d01      	ldr	r5, [sp, #4]
 800be8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be90:	4682      	mov	sl, r0
 800be92:	468b      	mov	fp, r1
 800be94:	4649      	mov	r1, r9
 800be96:	4640      	mov	r0, r8
 800be98:	f7f4 fe6e 	bl	8000b78 <__aeabi_d2iz>
 800be9c:	4606      	mov	r6, r0
 800be9e:	f7f4 fb51 	bl	8000544 <__aeabi_i2d>
 800bea2:	3630      	adds	r6, #48	; 0x30
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4640      	mov	r0, r8
 800beaa:	4649      	mov	r1, r9
 800beac:	f7f4 f9fc 	bl	80002a8 <__aeabi_dsub>
 800beb0:	f805 6b01 	strb.w	r6, [r5], #1
 800beb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beb6:	429d      	cmp	r5, r3
 800beb8:	4680      	mov	r8, r0
 800beba:	4689      	mov	r9, r1
 800bebc:	f04f 0200 	mov.w	r2, #0
 800bec0:	d124      	bne.n	800bf0c <_dtoa_r+0x60c>
 800bec2:	4b1b      	ldr	r3, [pc, #108]	; (800bf30 <_dtoa_r+0x630>)
 800bec4:	4650      	mov	r0, sl
 800bec6:	4659      	mov	r1, fp
 800bec8:	f7f4 f9f0 	bl	80002ac <__adddf3>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4640      	mov	r0, r8
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7f4 fe30 	bl	8000b38 <__aeabi_dcmpgt>
 800bed8:	2800      	cmp	r0, #0
 800beda:	d173      	bne.n	800bfc4 <_dtoa_r+0x6c4>
 800bedc:	4652      	mov	r2, sl
 800bede:	465b      	mov	r3, fp
 800bee0:	4913      	ldr	r1, [pc, #76]	; (800bf30 <_dtoa_r+0x630>)
 800bee2:	2000      	movs	r0, #0
 800bee4:	f7f4 f9e0 	bl	80002a8 <__aeabi_dsub>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4640      	mov	r0, r8
 800beee:	4649      	mov	r1, r9
 800bef0:	f7f4 fe04 	bl	8000afc <__aeabi_dcmplt>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	f43f af35 	beq.w	800bd64 <_dtoa_r+0x464>
 800befa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800befc:	1e6b      	subs	r3, r5, #1
 800befe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf04:	2b30      	cmp	r3, #48	; 0x30
 800bf06:	d0f8      	beq.n	800befa <_dtoa_r+0x5fa>
 800bf08:	9700      	str	r7, [sp, #0]
 800bf0a:	e049      	b.n	800bfa0 <_dtoa_r+0x6a0>
 800bf0c:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <_dtoa_r+0x624>)
 800bf0e:	f7f4 fb83 	bl	8000618 <__aeabi_dmul>
 800bf12:	4680      	mov	r8, r0
 800bf14:	4689      	mov	r9, r1
 800bf16:	e7bd      	b.n	800be94 <_dtoa_r+0x594>
 800bf18:	0800e9e0 	.word	0x0800e9e0
 800bf1c:	0800e9b8 	.word	0x0800e9b8
 800bf20:	3ff00000 	.word	0x3ff00000
 800bf24:	40240000 	.word	0x40240000
 800bf28:	401c0000 	.word	0x401c0000
 800bf2c:	40140000 	.word	0x40140000
 800bf30:	3fe00000 	.word	0x3fe00000
 800bf34:	9d01      	ldr	r5, [sp, #4]
 800bf36:	4656      	mov	r6, sl
 800bf38:	465f      	mov	r7, fp
 800bf3a:	4642      	mov	r2, r8
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7f4 fc93 	bl	800086c <__aeabi_ddiv>
 800bf46:	f7f4 fe17 	bl	8000b78 <__aeabi_d2iz>
 800bf4a:	4682      	mov	sl, r0
 800bf4c:	f7f4 fafa 	bl	8000544 <__aeabi_i2d>
 800bf50:	4642      	mov	r2, r8
 800bf52:	464b      	mov	r3, r9
 800bf54:	f7f4 fb60 	bl	8000618 <__aeabi_dmul>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bf64:	f7f4 f9a0 	bl	80002a8 <__aeabi_dsub>
 800bf68:	f805 6b01 	strb.w	r6, [r5], #1
 800bf6c:	9e01      	ldr	r6, [sp, #4]
 800bf6e:	9f03      	ldr	r7, [sp, #12]
 800bf70:	1bae      	subs	r6, r5, r6
 800bf72:	42b7      	cmp	r7, r6
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	d135      	bne.n	800bfe6 <_dtoa_r+0x6e6>
 800bf7a:	f7f4 f997 	bl	80002ac <__adddf3>
 800bf7e:	4642      	mov	r2, r8
 800bf80:	464b      	mov	r3, r9
 800bf82:	4606      	mov	r6, r0
 800bf84:	460f      	mov	r7, r1
 800bf86:	f7f4 fdd7 	bl	8000b38 <__aeabi_dcmpgt>
 800bf8a:	b9d0      	cbnz	r0, 800bfc2 <_dtoa_r+0x6c2>
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	464b      	mov	r3, r9
 800bf90:	4630      	mov	r0, r6
 800bf92:	4639      	mov	r1, r7
 800bf94:	f7f4 fda8 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf98:	b110      	cbz	r0, 800bfa0 <_dtoa_r+0x6a0>
 800bf9a:	f01a 0f01 	tst.w	sl, #1
 800bf9e:	d110      	bne.n	800bfc2 <_dtoa_r+0x6c2>
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	ee18 1a10 	vmov	r1, s16
 800bfa6:	f000 fe67 	bl	800cc78 <_Bfree>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	9800      	ldr	r0, [sp, #0]
 800bfae:	702b      	strb	r3, [r5, #0]
 800bfb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	6018      	str	r0, [r3, #0]
 800bfb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f43f acf1 	beq.w	800b9a0 <_dtoa_r+0xa0>
 800bfbe:	601d      	str	r5, [r3, #0]
 800bfc0:	e4ee      	b.n	800b9a0 <_dtoa_r+0xa0>
 800bfc2:	9f00      	ldr	r7, [sp, #0]
 800bfc4:	462b      	mov	r3, r5
 800bfc6:	461d      	mov	r5, r3
 800bfc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfcc:	2a39      	cmp	r2, #57	; 0x39
 800bfce:	d106      	bne.n	800bfde <_dtoa_r+0x6de>
 800bfd0:	9a01      	ldr	r2, [sp, #4]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d1f7      	bne.n	800bfc6 <_dtoa_r+0x6c6>
 800bfd6:	9901      	ldr	r1, [sp, #4]
 800bfd8:	2230      	movs	r2, #48	; 0x30
 800bfda:	3701      	adds	r7, #1
 800bfdc:	700a      	strb	r2, [r1, #0]
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	3201      	adds	r2, #1
 800bfe2:	701a      	strb	r2, [r3, #0]
 800bfe4:	e790      	b.n	800bf08 <_dtoa_r+0x608>
 800bfe6:	4ba6      	ldr	r3, [pc, #664]	; (800c280 <_dtoa_r+0x980>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f7f4 fb15 	bl	8000618 <__aeabi_dmul>
 800bfee:	2200      	movs	r2, #0
 800bff0:	2300      	movs	r3, #0
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	f7f4 fd77 	bl	8000ae8 <__aeabi_dcmpeq>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d09d      	beq.n	800bf3a <_dtoa_r+0x63a>
 800bffe:	e7cf      	b.n	800bfa0 <_dtoa_r+0x6a0>
 800c000:	9a08      	ldr	r2, [sp, #32]
 800c002:	2a00      	cmp	r2, #0
 800c004:	f000 80d7 	beq.w	800c1b6 <_dtoa_r+0x8b6>
 800c008:	9a06      	ldr	r2, [sp, #24]
 800c00a:	2a01      	cmp	r2, #1
 800c00c:	f300 80ba 	bgt.w	800c184 <_dtoa_r+0x884>
 800c010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c012:	2a00      	cmp	r2, #0
 800c014:	f000 80b2 	beq.w	800c17c <_dtoa_r+0x87c>
 800c018:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c01c:	9e07      	ldr	r6, [sp, #28]
 800c01e:	9d04      	ldr	r5, [sp, #16]
 800c020:	9a04      	ldr	r2, [sp, #16]
 800c022:	441a      	add	r2, r3
 800c024:	9204      	str	r2, [sp, #16]
 800c026:	9a05      	ldr	r2, [sp, #20]
 800c028:	2101      	movs	r1, #1
 800c02a:	441a      	add	r2, r3
 800c02c:	4620      	mov	r0, r4
 800c02e:	9205      	str	r2, [sp, #20]
 800c030:	f000 ff24 	bl	800ce7c <__i2b>
 800c034:	4607      	mov	r7, r0
 800c036:	2d00      	cmp	r5, #0
 800c038:	dd0c      	ble.n	800c054 <_dtoa_r+0x754>
 800c03a:	9b05      	ldr	r3, [sp, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dd09      	ble.n	800c054 <_dtoa_r+0x754>
 800c040:	42ab      	cmp	r3, r5
 800c042:	9a04      	ldr	r2, [sp, #16]
 800c044:	bfa8      	it	ge
 800c046:	462b      	movge	r3, r5
 800c048:	1ad2      	subs	r2, r2, r3
 800c04a:	9204      	str	r2, [sp, #16]
 800c04c:	9a05      	ldr	r2, [sp, #20]
 800c04e:	1aed      	subs	r5, r5, r3
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	9305      	str	r3, [sp, #20]
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	b31b      	cbz	r3, 800c0a0 <_dtoa_r+0x7a0>
 800c058:	9b08      	ldr	r3, [sp, #32]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 80af 	beq.w	800c1be <_dtoa_r+0x8be>
 800c060:	2e00      	cmp	r6, #0
 800c062:	dd13      	ble.n	800c08c <_dtoa_r+0x78c>
 800c064:	4639      	mov	r1, r7
 800c066:	4632      	mov	r2, r6
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 ffc7 	bl	800cffc <__pow5mult>
 800c06e:	ee18 2a10 	vmov	r2, s16
 800c072:	4601      	mov	r1, r0
 800c074:	4607      	mov	r7, r0
 800c076:	4620      	mov	r0, r4
 800c078:	f000 ff16 	bl	800cea8 <__multiply>
 800c07c:	ee18 1a10 	vmov	r1, s16
 800c080:	4680      	mov	r8, r0
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fdf8 	bl	800cc78 <_Bfree>
 800c088:	ee08 8a10 	vmov	s16, r8
 800c08c:	9b07      	ldr	r3, [sp, #28]
 800c08e:	1b9a      	subs	r2, r3, r6
 800c090:	d006      	beq.n	800c0a0 <_dtoa_r+0x7a0>
 800c092:	ee18 1a10 	vmov	r1, s16
 800c096:	4620      	mov	r0, r4
 800c098:	f000 ffb0 	bl	800cffc <__pow5mult>
 800c09c:	ee08 0a10 	vmov	s16, r0
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 feea 	bl	800ce7c <__i2b>
 800c0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	f340 8088 	ble.w	800c1c2 <_dtoa_r+0x8c2>
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	4601      	mov	r1, r0
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 ffa0 	bl	800cffc <__pow5mult>
 800c0bc:	9b06      	ldr	r3, [sp, #24]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	f340 8081 	ble.w	800c1c8 <_dtoa_r+0x8c8>
 800c0c6:	f04f 0800 	mov.w	r8, #0
 800c0ca:	6933      	ldr	r3, [r6, #16]
 800c0cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0d0:	6918      	ldr	r0, [r3, #16]
 800c0d2:	f000 fe83 	bl	800cddc <__hi0bits>
 800c0d6:	f1c0 0020 	rsb	r0, r0, #32
 800c0da:	9b05      	ldr	r3, [sp, #20]
 800c0dc:	4418      	add	r0, r3
 800c0de:	f010 001f 	ands.w	r0, r0, #31
 800c0e2:	f000 8092 	beq.w	800c20a <_dtoa_r+0x90a>
 800c0e6:	f1c0 0320 	rsb	r3, r0, #32
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	f340 808a 	ble.w	800c204 <_dtoa_r+0x904>
 800c0f0:	f1c0 001c 	rsb	r0, r0, #28
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	4403      	add	r3, r0
 800c0f8:	9304      	str	r3, [sp, #16]
 800c0fa:	9b05      	ldr	r3, [sp, #20]
 800c0fc:	4403      	add	r3, r0
 800c0fe:	4405      	add	r5, r0
 800c100:	9305      	str	r3, [sp, #20]
 800c102:	9b04      	ldr	r3, [sp, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	dd07      	ble.n	800c118 <_dtoa_r+0x818>
 800c108:	ee18 1a10 	vmov	r1, s16
 800c10c:	461a      	mov	r2, r3
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 ffce 	bl	800d0b0 <__lshift>
 800c114:	ee08 0a10 	vmov	s16, r0
 800c118:	9b05      	ldr	r3, [sp, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dd05      	ble.n	800c12a <_dtoa_r+0x82a>
 800c11e:	4631      	mov	r1, r6
 800c120:	461a      	mov	r2, r3
 800c122:	4620      	mov	r0, r4
 800c124:	f000 ffc4 	bl	800d0b0 <__lshift>
 800c128:	4606      	mov	r6, r0
 800c12a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d06e      	beq.n	800c20e <_dtoa_r+0x90e>
 800c130:	ee18 0a10 	vmov	r0, s16
 800c134:	4631      	mov	r1, r6
 800c136:	f001 f82b 	bl	800d190 <__mcmp>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	da67      	bge.n	800c20e <_dtoa_r+0x90e>
 800c13e:	9b00      	ldr	r3, [sp, #0]
 800c140:	3b01      	subs	r3, #1
 800c142:	ee18 1a10 	vmov	r1, s16
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	220a      	movs	r2, #10
 800c14a:	2300      	movs	r3, #0
 800c14c:	4620      	mov	r0, r4
 800c14e:	f000 fdb5 	bl	800ccbc <__multadd>
 800c152:	9b08      	ldr	r3, [sp, #32]
 800c154:	ee08 0a10 	vmov	s16, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 81b1 	beq.w	800c4c0 <_dtoa_r+0xbc0>
 800c15e:	2300      	movs	r3, #0
 800c160:	4639      	mov	r1, r7
 800c162:	220a      	movs	r2, #10
 800c164:	4620      	mov	r0, r4
 800c166:	f000 fda9 	bl	800ccbc <__multadd>
 800c16a:	9b02      	ldr	r3, [sp, #8]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	4607      	mov	r7, r0
 800c170:	f300 808e 	bgt.w	800c290 <_dtoa_r+0x990>
 800c174:	9b06      	ldr	r3, [sp, #24]
 800c176:	2b02      	cmp	r3, #2
 800c178:	dc51      	bgt.n	800c21e <_dtoa_r+0x91e>
 800c17a:	e089      	b.n	800c290 <_dtoa_r+0x990>
 800c17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c17e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c182:	e74b      	b.n	800c01c <_dtoa_r+0x71c>
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	1e5e      	subs	r6, r3, #1
 800c188:	9b07      	ldr	r3, [sp, #28]
 800c18a:	42b3      	cmp	r3, r6
 800c18c:	bfbf      	itttt	lt
 800c18e:	9b07      	ldrlt	r3, [sp, #28]
 800c190:	9607      	strlt	r6, [sp, #28]
 800c192:	1af2      	sublt	r2, r6, r3
 800c194:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c196:	bfb6      	itet	lt
 800c198:	189b      	addlt	r3, r3, r2
 800c19a:	1b9e      	subge	r6, r3, r6
 800c19c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c19e:	9b03      	ldr	r3, [sp, #12]
 800c1a0:	bfb8      	it	lt
 800c1a2:	2600      	movlt	r6, #0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	bfb7      	itett	lt
 800c1a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c1ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c1b0:	1a9d      	sublt	r5, r3, r2
 800c1b2:	2300      	movlt	r3, #0
 800c1b4:	e734      	b.n	800c020 <_dtoa_r+0x720>
 800c1b6:	9e07      	ldr	r6, [sp, #28]
 800c1b8:	9d04      	ldr	r5, [sp, #16]
 800c1ba:	9f08      	ldr	r7, [sp, #32]
 800c1bc:	e73b      	b.n	800c036 <_dtoa_r+0x736>
 800c1be:	9a07      	ldr	r2, [sp, #28]
 800c1c0:	e767      	b.n	800c092 <_dtoa_r+0x792>
 800c1c2:	9b06      	ldr	r3, [sp, #24]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	dc18      	bgt.n	800c1fa <_dtoa_r+0x8fa>
 800c1c8:	f1ba 0f00 	cmp.w	sl, #0
 800c1cc:	d115      	bne.n	800c1fa <_dtoa_r+0x8fa>
 800c1ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1d2:	b993      	cbnz	r3, 800c1fa <_dtoa_r+0x8fa>
 800c1d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c1d8:	0d1b      	lsrs	r3, r3, #20
 800c1da:	051b      	lsls	r3, r3, #20
 800c1dc:	b183      	cbz	r3, 800c200 <_dtoa_r+0x900>
 800c1de:	9b04      	ldr	r3, [sp, #16]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	9b05      	ldr	r3, [sp, #20]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	9305      	str	r3, [sp, #20]
 800c1ea:	f04f 0801 	mov.w	r8, #1
 800c1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f47f af6a 	bne.w	800c0ca <_dtoa_r+0x7ca>
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	e76f      	b.n	800c0da <_dtoa_r+0x7da>
 800c1fa:	f04f 0800 	mov.w	r8, #0
 800c1fe:	e7f6      	b.n	800c1ee <_dtoa_r+0x8ee>
 800c200:	4698      	mov	r8, r3
 800c202:	e7f4      	b.n	800c1ee <_dtoa_r+0x8ee>
 800c204:	f43f af7d 	beq.w	800c102 <_dtoa_r+0x802>
 800c208:	4618      	mov	r0, r3
 800c20a:	301c      	adds	r0, #28
 800c20c:	e772      	b.n	800c0f4 <_dtoa_r+0x7f4>
 800c20e:	9b03      	ldr	r3, [sp, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	dc37      	bgt.n	800c284 <_dtoa_r+0x984>
 800c214:	9b06      	ldr	r3, [sp, #24]
 800c216:	2b02      	cmp	r3, #2
 800c218:	dd34      	ble.n	800c284 <_dtoa_r+0x984>
 800c21a:	9b03      	ldr	r3, [sp, #12]
 800c21c:	9302      	str	r3, [sp, #8]
 800c21e:	9b02      	ldr	r3, [sp, #8]
 800c220:	b96b      	cbnz	r3, 800c23e <_dtoa_r+0x93e>
 800c222:	4631      	mov	r1, r6
 800c224:	2205      	movs	r2, #5
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fd48 	bl	800ccbc <__multadd>
 800c22c:	4601      	mov	r1, r0
 800c22e:	4606      	mov	r6, r0
 800c230:	ee18 0a10 	vmov	r0, s16
 800c234:	f000 ffac 	bl	800d190 <__mcmp>
 800c238:	2800      	cmp	r0, #0
 800c23a:	f73f adbb 	bgt.w	800bdb4 <_dtoa_r+0x4b4>
 800c23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c240:	9d01      	ldr	r5, [sp, #4]
 800c242:	43db      	mvns	r3, r3
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	f04f 0800 	mov.w	r8, #0
 800c24a:	4631      	mov	r1, r6
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 fd13 	bl	800cc78 <_Bfree>
 800c252:	2f00      	cmp	r7, #0
 800c254:	f43f aea4 	beq.w	800bfa0 <_dtoa_r+0x6a0>
 800c258:	f1b8 0f00 	cmp.w	r8, #0
 800c25c:	d005      	beq.n	800c26a <_dtoa_r+0x96a>
 800c25e:	45b8      	cmp	r8, r7
 800c260:	d003      	beq.n	800c26a <_dtoa_r+0x96a>
 800c262:	4641      	mov	r1, r8
 800c264:	4620      	mov	r0, r4
 800c266:	f000 fd07 	bl	800cc78 <_Bfree>
 800c26a:	4639      	mov	r1, r7
 800c26c:	4620      	mov	r0, r4
 800c26e:	f000 fd03 	bl	800cc78 <_Bfree>
 800c272:	e695      	b.n	800bfa0 <_dtoa_r+0x6a0>
 800c274:	2600      	movs	r6, #0
 800c276:	4637      	mov	r7, r6
 800c278:	e7e1      	b.n	800c23e <_dtoa_r+0x93e>
 800c27a:	9700      	str	r7, [sp, #0]
 800c27c:	4637      	mov	r7, r6
 800c27e:	e599      	b.n	800bdb4 <_dtoa_r+0x4b4>
 800c280:	40240000 	.word	0x40240000
 800c284:	9b08      	ldr	r3, [sp, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 80ca 	beq.w	800c420 <_dtoa_r+0xb20>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	9302      	str	r3, [sp, #8]
 800c290:	2d00      	cmp	r5, #0
 800c292:	dd05      	ble.n	800c2a0 <_dtoa_r+0x9a0>
 800c294:	4639      	mov	r1, r7
 800c296:	462a      	mov	r2, r5
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 ff09 	bl	800d0b0 <__lshift>
 800c29e:	4607      	mov	r7, r0
 800c2a0:	f1b8 0f00 	cmp.w	r8, #0
 800c2a4:	d05b      	beq.n	800c35e <_dtoa_r+0xa5e>
 800c2a6:	6879      	ldr	r1, [r7, #4]
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f000 fca5 	bl	800cbf8 <_Balloc>
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	b928      	cbnz	r0, 800c2be <_dtoa_r+0x9be>
 800c2b2:	4b87      	ldr	r3, [pc, #540]	; (800c4d0 <_dtoa_r+0xbd0>)
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2ba:	f7ff bb3b 	b.w	800b934 <_dtoa_r+0x34>
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	3202      	adds	r2, #2
 800c2c2:	0092      	lsls	r2, r2, #2
 800c2c4:	f107 010c 	add.w	r1, r7, #12
 800c2c8:	300c      	adds	r0, #12
 800c2ca:	f7fd fd09 	bl	8009ce0 <memcpy>
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 feec 	bl	800d0b0 <__lshift>
 800c2d8:	9b01      	ldr	r3, [sp, #4]
 800c2da:	f103 0901 	add.w	r9, r3, #1
 800c2de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	f00a 0301 	and.w	r3, sl, #1
 800c2ea:	46b8      	mov	r8, r7
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	4607      	mov	r7, r0
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	ee18 0a10 	vmov	r0, s16
 800c2f6:	f7ff fa77 	bl	800b7e8 <quorem>
 800c2fa:	4641      	mov	r1, r8
 800c2fc:	9002      	str	r0, [sp, #8]
 800c2fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c302:	ee18 0a10 	vmov	r0, s16
 800c306:	f000 ff43 	bl	800d190 <__mcmp>
 800c30a:	463a      	mov	r2, r7
 800c30c:	9003      	str	r0, [sp, #12]
 800c30e:	4631      	mov	r1, r6
 800c310:	4620      	mov	r0, r4
 800c312:	f000 ff59 	bl	800d1c8 <__mdiff>
 800c316:	68c2      	ldr	r2, [r0, #12]
 800c318:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c31c:	4605      	mov	r5, r0
 800c31e:	bb02      	cbnz	r2, 800c362 <_dtoa_r+0xa62>
 800c320:	4601      	mov	r1, r0
 800c322:	ee18 0a10 	vmov	r0, s16
 800c326:	f000 ff33 	bl	800d190 <__mcmp>
 800c32a:	4602      	mov	r2, r0
 800c32c:	4629      	mov	r1, r5
 800c32e:	4620      	mov	r0, r4
 800c330:	9207      	str	r2, [sp, #28]
 800c332:	f000 fca1 	bl	800cc78 <_Bfree>
 800c336:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c33a:	ea43 0102 	orr.w	r1, r3, r2
 800c33e:	9b04      	ldr	r3, [sp, #16]
 800c340:	430b      	orrs	r3, r1
 800c342:	464d      	mov	r5, r9
 800c344:	d10f      	bne.n	800c366 <_dtoa_r+0xa66>
 800c346:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c34a:	d02a      	beq.n	800c3a2 <_dtoa_r+0xaa2>
 800c34c:	9b03      	ldr	r3, [sp, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd02      	ble.n	800c358 <_dtoa_r+0xa58>
 800c352:	9b02      	ldr	r3, [sp, #8]
 800c354:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c358:	f88b a000 	strb.w	sl, [fp]
 800c35c:	e775      	b.n	800c24a <_dtoa_r+0x94a>
 800c35e:	4638      	mov	r0, r7
 800c360:	e7ba      	b.n	800c2d8 <_dtoa_r+0x9d8>
 800c362:	2201      	movs	r2, #1
 800c364:	e7e2      	b.n	800c32c <_dtoa_r+0xa2c>
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	db04      	blt.n	800c376 <_dtoa_r+0xa76>
 800c36c:	9906      	ldr	r1, [sp, #24]
 800c36e:	430b      	orrs	r3, r1
 800c370:	9904      	ldr	r1, [sp, #16]
 800c372:	430b      	orrs	r3, r1
 800c374:	d122      	bne.n	800c3bc <_dtoa_r+0xabc>
 800c376:	2a00      	cmp	r2, #0
 800c378:	ddee      	ble.n	800c358 <_dtoa_r+0xa58>
 800c37a:	ee18 1a10 	vmov	r1, s16
 800c37e:	2201      	movs	r2, #1
 800c380:	4620      	mov	r0, r4
 800c382:	f000 fe95 	bl	800d0b0 <__lshift>
 800c386:	4631      	mov	r1, r6
 800c388:	ee08 0a10 	vmov	s16, r0
 800c38c:	f000 ff00 	bl	800d190 <__mcmp>
 800c390:	2800      	cmp	r0, #0
 800c392:	dc03      	bgt.n	800c39c <_dtoa_r+0xa9c>
 800c394:	d1e0      	bne.n	800c358 <_dtoa_r+0xa58>
 800c396:	f01a 0f01 	tst.w	sl, #1
 800c39a:	d0dd      	beq.n	800c358 <_dtoa_r+0xa58>
 800c39c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3a0:	d1d7      	bne.n	800c352 <_dtoa_r+0xa52>
 800c3a2:	2339      	movs	r3, #57	; 0x39
 800c3a4:	f88b 3000 	strb.w	r3, [fp]
 800c3a8:	462b      	mov	r3, r5
 800c3aa:	461d      	mov	r5, r3
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3b2:	2a39      	cmp	r2, #57	; 0x39
 800c3b4:	d071      	beq.n	800c49a <_dtoa_r+0xb9a>
 800c3b6:	3201      	adds	r2, #1
 800c3b8:	701a      	strb	r2, [r3, #0]
 800c3ba:	e746      	b.n	800c24a <_dtoa_r+0x94a>
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	dd07      	ble.n	800c3d0 <_dtoa_r+0xad0>
 800c3c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3c4:	d0ed      	beq.n	800c3a2 <_dtoa_r+0xaa2>
 800c3c6:	f10a 0301 	add.w	r3, sl, #1
 800c3ca:	f88b 3000 	strb.w	r3, [fp]
 800c3ce:	e73c      	b.n	800c24a <_dtoa_r+0x94a>
 800c3d0:	9b05      	ldr	r3, [sp, #20]
 800c3d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c3d6:	4599      	cmp	r9, r3
 800c3d8:	d047      	beq.n	800c46a <_dtoa_r+0xb6a>
 800c3da:	ee18 1a10 	vmov	r1, s16
 800c3de:	2300      	movs	r3, #0
 800c3e0:	220a      	movs	r2, #10
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f000 fc6a 	bl	800ccbc <__multadd>
 800c3e8:	45b8      	cmp	r8, r7
 800c3ea:	ee08 0a10 	vmov	s16, r0
 800c3ee:	f04f 0300 	mov.w	r3, #0
 800c3f2:	f04f 020a 	mov.w	r2, #10
 800c3f6:	4641      	mov	r1, r8
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	d106      	bne.n	800c40a <_dtoa_r+0xb0a>
 800c3fc:	f000 fc5e 	bl	800ccbc <__multadd>
 800c400:	4680      	mov	r8, r0
 800c402:	4607      	mov	r7, r0
 800c404:	f109 0901 	add.w	r9, r9, #1
 800c408:	e772      	b.n	800c2f0 <_dtoa_r+0x9f0>
 800c40a:	f000 fc57 	bl	800ccbc <__multadd>
 800c40e:	4639      	mov	r1, r7
 800c410:	4680      	mov	r8, r0
 800c412:	2300      	movs	r3, #0
 800c414:	220a      	movs	r2, #10
 800c416:	4620      	mov	r0, r4
 800c418:	f000 fc50 	bl	800ccbc <__multadd>
 800c41c:	4607      	mov	r7, r0
 800c41e:	e7f1      	b.n	800c404 <_dtoa_r+0xb04>
 800c420:	9b03      	ldr	r3, [sp, #12]
 800c422:	9302      	str	r3, [sp, #8]
 800c424:	9d01      	ldr	r5, [sp, #4]
 800c426:	ee18 0a10 	vmov	r0, s16
 800c42a:	4631      	mov	r1, r6
 800c42c:	f7ff f9dc 	bl	800b7e8 <quorem>
 800c430:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c434:	9b01      	ldr	r3, [sp, #4]
 800c436:	f805 ab01 	strb.w	sl, [r5], #1
 800c43a:	1aea      	subs	r2, r5, r3
 800c43c:	9b02      	ldr	r3, [sp, #8]
 800c43e:	4293      	cmp	r3, r2
 800c440:	dd09      	ble.n	800c456 <_dtoa_r+0xb56>
 800c442:	ee18 1a10 	vmov	r1, s16
 800c446:	2300      	movs	r3, #0
 800c448:	220a      	movs	r2, #10
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 fc36 	bl	800ccbc <__multadd>
 800c450:	ee08 0a10 	vmov	s16, r0
 800c454:	e7e7      	b.n	800c426 <_dtoa_r+0xb26>
 800c456:	9b02      	ldr	r3, [sp, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	bfc8      	it	gt
 800c45c:	461d      	movgt	r5, r3
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	bfd8      	it	le
 800c462:	2501      	movle	r5, #1
 800c464:	441d      	add	r5, r3
 800c466:	f04f 0800 	mov.w	r8, #0
 800c46a:	ee18 1a10 	vmov	r1, s16
 800c46e:	2201      	movs	r2, #1
 800c470:	4620      	mov	r0, r4
 800c472:	f000 fe1d 	bl	800d0b0 <__lshift>
 800c476:	4631      	mov	r1, r6
 800c478:	ee08 0a10 	vmov	s16, r0
 800c47c:	f000 fe88 	bl	800d190 <__mcmp>
 800c480:	2800      	cmp	r0, #0
 800c482:	dc91      	bgt.n	800c3a8 <_dtoa_r+0xaa8>
 800c484:	d102      	bne.n	800c48c <_dtoa_r+0xb8c>
 800c486:	f01a 0f01 	tst.w	sl, #1
 800c48a:	d18d      	bne.n	800c3a8 <_dtoa_r+0xaa8>
 800c48c:	462b      	mov	r3, r5
 800c48e:	461d      	mov	r5, r3
 800c490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c494:	2a30      	cmp	r2, #48	; 0x30
 800c496:	d0fa      	beq.n	800c48e <_dtoa_r+0xb8e>
 800c498:	e6d7      	b.n	800c24a <_dtoa_r+0x94a>
 800c49a:	9a01      	ldr	r2, [sp, #4]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d184      	bne.n	800c3aa <_dtoa_r+0xaaa>
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	2331      	movs	r3, #49	; 0x31
 800c4a8:	7013      	strb	r3, [r2, #0]
 800c4aa:	e6ce      	b.n	800c24a <_dtoa_r+0x94a>
 800c4ac:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <_dtoa_r+0xbd4>)
 800c4ae:	f7ff ba95 	b.w	800b9dc <_dtoa_r+0xdc>
 800c4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f47f aa6e 	bne.w	800b996 <_dtoa_r+0x96>
 800c4ba:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <_dtoa_r+0xbd8>)
 800c4bc:	f7ff ba8e 	b.w	800b9dc <_dtoa_r+0xdc>
 800c4c0:	9b02      	ldr	r3, [sp, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dcae      	bgt.n	800c424 <_dtoa_r+0xb24>
 800c4c6:	9b06      	ldr	r3, [sp, #24]
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	f73f aea8 	bgt.w	800c21e <_dtoa_r+0x91e>
 800c4ce:	e7a9      	b.n	800c424 <_dtoa_r+0xb24>
 800c4d0:	0800e8d0 	.word	0x0800e8d0
 800c4d4:	0800e6d4 	.word	0x0800e6d4
 800c4d8:	0800e851 	.word	0x0800e851

0800c4dc <rshift>:
 800c4dc:	6903      	ldr	r3, [r0, #16]
 800c4de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4ea:	f100 0414 	add.w	r4, r0, #20
 800c4ee:	dd45      	ble.n	800c57c <rshift+0xa0>
 800c4f0:	f011 011f 	ands.w	r1, r1, #31
 800c4f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4fc:	d10c      	bne.n	800c518 <rshift+0x3c>
 800c4fe:	f100 0710 	add.w	r7, r0, #16
 800c502:	4629      	mov	r1, r5
 800c504:	42b1      	cmp	r1, r6
 800c506:	d334      	bcc.n	800c572 <rshift+0x96>
 800c508:	1a9b      	subs	r3, r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	1eea      	subs	r2, r5, #3
 800c50e:	4296      	cmp	r6, r2
 800c510:	bf38      	it	cc
 800c512:	2300      	movcc	r3, #0
 800c514:	4423      	add	r3, r4
 800c516:	e015      	b.n	800c544 <rshift+0x68>
 800c518:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c51c:	f1c1 0820 	rsb	r8, r1, #32
 800c520:	40cf      	lsrs	r7, r1
 800c522:	f105 0e04 	add.w	lr, r5, #4
 800c526:	46a1      	mov	r9, r4
 800c528:	4576      	cmp	r6, lr
 800c52a:	46f4      	mov	ip, lr
 800c52c:	d815      	bhi.n	800c55a <rshift+0x7e>
 800c52e:	1a9a      	subs	r2, r3, r2
 800c530:	0092      	lsls	r2, r2, #2
 800c532:	3a04      	subs	r2, #4
 800c534:	3501      	adds	r5, #1
 800c536:	42ae      	cmp	r6, r5
 800c538:	bf38      	it	cc
 800c53a:	2200      	movcc	r2, #0
 800c53c:	18a3      	adds	r3, r4, r2
 800c53e:	50a7      	str	r7, [r4, r2]
 800c540:	b107      	cbz	r7, 800c544 <rshift+0x68>
 800c542:	3304      	adds	r3, #4
 800c544:	1b1a      	subs	r2, r3, r4
 800c546:	42a3      	cmp	r3, r4
 800c548:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c54c:	bf08      	it	eq
 800c54e:	2300      	moveq	r3, #0
 800c550:	6102      	str	r2, [r0, #16]
 800c552:	bf08      	it	eq
 800c554:	6143      	streq	r3, [r0, #20]
 800c556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c55a:	f8dc c000 	ldr.w	ip, [ip]
 800c55e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c562:	ea4c 0707 	orr.w	r7, ip, r7
 800c566:	f849 7b04 	str.w	r7, [r9], #4
 800c56a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c56e:	40cf      	lsrs	r7, r1
 800c570:	e7da      	b.n	800c528 <rshift+0x4c>
 800c572:	f851 cb04 	ldr.w	ip, [r1], #4
 800c576:	f847 cf04 	str.w	ip, [r7, #4]!
 800c57a:	e7c3      	b.n	800c504 <rshift+0x28>
 800c57c:	4623      	mov	r3, r4
 800c57e:	e7e1      	b.n	800c544 <rshift+0x68>

0800c580 <__hexdig_fun>:
 800c580:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c584:	2b09      	cmp	r3, #9
 800c586:	d802      	bhi.n	800c58e <__hexdig_fun+0xe>
 800c588:	3820      	subs	r0, #32
 800c58a:	b2c0      	uxtb	r0, r0
 800c58c:	4770      	bx	lr
 800c58e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c592:	2b05      	cmp	r3, #5
 800c594:	d801      	bhi.n	800c59a <__hexdig_fun+0x1a>
 800c596:	3847      	subs	r0, #71	; 0x47
 800c598:	e7f7      	b.n	800c58a <__hexdig_fun+0xa>
 800c59a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c59e:	2b05      	cmp	r3, #5
 800c5a0:	d801      	bhi.n	800c5a6 <__hexdig_fun+0x26>
 800c5a2:	3827      	subs	r0, #39	; 0x27
 800c5a4:	e7f1      	b.n	800c58a <__hexdig_fun+0xa>
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	4770      	bx	lr
	...

0800c5ac <__gethex>:
 800c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b0:	ed2d 8b02 	vpush	{d8}
 800c5b4:	b089      	sub	sp, #36	; 0x24
 800c5b6:	ee08 0a10 	vmov	s16, r0
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	4bb4      	ldr	r3, [pc, #720]	; (800c890 <__gethex+0x2e4>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	468b      	mov	fp, r1
 800c5c6:	4690      	mov	r8, r2
 800c5c8:	f7f3 fe12 	bl	80001f0 <strlen>
 800c5cc:	9b01      	ldr	r3, [sp, #4]
 800c5ce:	f8db 2000 	ldr.w	r2, [fp]
 800c5d2:	4403      	add	r3, r0
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c5da:	9305      	str	r3, [sp, #20]
 800c5dc:	1c93      	adds	r3, r2, #2
 800c5de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c5e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c5e6:	32fe      	adds	r2, #254	; 0xfe
 800c5e8:	18d1      	adds	r1, r2, r3
 800c5ea:	461f      	mov	r7, r3
 800c5ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5f0:	9100      	str	r1, [sp, #0]
 800c5f2:	2830      	cmp	r0, #48	; 0x30
 800c5f4:	d0f8      	beq.n	800c5e8 <__gethex+0x3c>
 800c5f6:	f7ff ffc3 	bl	800c580 <__hexdig_fun>
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d13a      	bne.n	800c676 <__gethex+0xca>
 800c600:	9901      	ldr	r1, [sp, #4]
 800c602:	4652      	mov	r2, sl
 800c604:	4638      	mov	r0, r7
 800c606:	f001 fa23 	bl	800da50 <strncmp>
 800c60a:	4605      	mov	r5, r0
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d168      	bne.n	800c6e2 <__gethex+0x136>
 800c610:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c614:	eb07 060a 	add.w	r6, r7, sl
 800c618:	f7ff ffb2 	bl	800c580 <__hexdig_fun>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d062      	beq.n	800c6e6 <__gethex+0x13a>
 800c620:	4633      	mov	r3, r6
 800c622:	7818      	ldrb	r0, [r3, #0]
 800c624:	2830      	cmp	r0, #48	; 0x30
 800c626:	461f      	mov	r7, r3
 800c628:	f103 0301 	add.w	r3, r3, #1
 800c62c:	d0f9      	beq.n	800c622 <__gethex+0x76>
 800c62e:	f7ff ffa7 	bl	800c580 <__hexdig_fun>
 800c632:	2301      	movs	r3, #1
 800c634:	fab0 f480 	clz	r4, r0
 800c638:	0964      	lsrs	r4, r4, #5
 800c63a:	4635      	mov	r5, r6
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	463a      	mov	r2, r7
 800c640:	4616      	mov	r6, r2
 800c642:	3201      	adds	r2, #1
 800c644:	7830      	ldrb	r0, [r6, #0]
 800c646:	f7ff ff9b 	bl	800c580 <__hexdig_fun>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d1f8      	bne.n	800c640 <__gethex+0x94>
 800c64e:	9901      	ldr	r1, [sp, #4]
 800c650:	4652      	mov	r2, sl
 800c652:	4630      	mov	r0, r6
 800c654:	f001 f9fc 	bl	800da50 <strncmp>
 800c658:	b980      	cbnz	r0, 800c67c <__gethex+0xd0>
 800c65a:	b94d      	cbnz	r5, 800c670 <__gethex+0xc4>
 800c65c:	eb06 050a 	add.w	r5, r6, sl
 800c660:	462a      	mov	r2, r5
 800c662:	4616      	mov	r6, r2
 800c664:	3201      	adds	r2, #1
 800c666:	7830      	ldrb	r0, [r6, #0]
 800c668:	f7ff ff8a 	bl	800c580 <__hexdig_fun>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d1f8      	bne.n	800c662 <__gethex+0xb6>
 800c670:	1bad      	subs	r5, r5, r6
 800c672:	00ad      	lsls	r5, r5, #2
 800c674:	e004      	b.n	800c680 <__gethex+0xd4>
 800c676:	2400      	movs	r4, #0
 800c678:	4625      	mov	r5, r4
 800c67a:	e7e0      	b.n	800c63e <__gethex+0x92>
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	d1f7      	bne.n	800c670 <__gethex+0xc4>
 800c680:	7833      	ldrb	r3, [r6, #0]
 800c682:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c686:	2b50      	cmp	r3, #80	; 0x50
 800c688:	d13b      	bne.n	800c702 <__gethex+0x156>
 800c68a:	7873      	ldrb	r3, [r6, #1]
 800c68c:	2b2b      	cmp	r3, #43	; 0x2b
 800c68e:	d02c      	beq.n	800c6ea <__gethex+0x13e>
 800c690:	2b2d      	cmp	r3, #45	; 0x2d
 800c692:	d02e      	beq.n	800c6f2 <__gethex+0x146>
 800c694:	1c71      	adds	r1, r6, #1
 800c696:	f04f 0900 	mov.w	r9, #0
 800c69a:	7808      	ldrb	r0, [r1, #0]
 800c69c:	f7ff ff70 	bl	800c580 <__hexdig_fun>
 800c6a0:	1e43      	subs	r3, r0, #1
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b18      	cmp	r3, #24
 800c6a6:	d82c      	bhi.n	800c702 <__gethex+0x156>
 800c6a8:	f1a0 0210 	sub.w	r2, r0, #16
 800c6ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6b0:	f7ff ff66 	bl	800c580 <__hexdig_fun>
 800c6b4:	1e43      	subs	r3, r0, #1
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b18      	cmp	r3, #24
 800c6ba:	d91d      	bls.n	800c6f8 <__gethex+0x14c>
 800c6bc:	f1b9 0f00 	cmp.w	r9, #0
 800c6c0:	d000      	beq.n	800c6c4 <__gethex+0x118>
 800c6c2:	4252      	negs	r2, r2
 800c6c4:	4415      	add	r5, r2
 800c6c6:	f8cb 1000 	str.w	r1, [fp]
 800c6ca:	b1e4      	cbz	r4, 800c706 <__gethex+0x15a>
 800c6cc:	9b00      	ldr	r3, [sp, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bf14      	ite	ne
 800c6d2:	2700      	movne	r7, #0
 800c6d4:	2706      	moveq	r7, #6
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	b009      	add	sp, #36	; 0x24
 800c6da:	ecbd 8b02 	vpop	{d8}
 800c6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e2:	463e      	mov	r6, r7
 800c6e4:	4625      	mov	r5, r4
 800c6e6:	2401      	movs	r4, #1
 800c6e8:	e7ca      	b.n	800c680 <__gethex+0xd4>
 800c6ea:	f04f 0900 	mov.w	r9, #0
 800c6ee:	1cb1      	adds	r1, r6, #2
 800c6f0:	e7d3      	b.n	800c69a <__gethex+0xee>
 800c6f2:	f04f 0901 	mov.w	r9, #1
 800c6f6:	e7fa      	b.n	800c6ee <__gethex+0x142>
 800c6f8:	230a      	movs	r3, #10
 800c6fa:	fb03 0202 	mla	r2, r3, r2, r0
 800c6fe:	3a10      	subs	r2, #16
 800c700:	e7d4      	b.n	800c6ac <__gethex+0x100>
 800c702:	4631      	mov	r1, r6
 800c704:	e7df      	b.n	800c6c6 <__gethex+0x11a>
 800c706:	1bf3      	subs	r3, r6, r7
 800c708:	3b01      	subs	r3, #1
 800c70a:	4621      	mov	r1, r4
 800c70c:	2b07      	cmp	r3, #7
 800c70e:	dc0b      	bgt.n	800c728 <__gethex+0x17c>
 800c710:	ee18 0a10 	vmov	r0, s16
 800c714:	f000 fa70 	bl	800cbf8 <_Balloc>
 800c718:	4604      	mov	r4, r0
 800c71a:	b940      	cbnz	r0, 800c72e <__gethex+0x182>
 800c71c:	4b5d      	ldr	r3, [pc, #372]	; (800c894 <__gethex+0x2e8>)
 800c71e:	4602      	mov	r2, r0
 800c720:	21de      	movs	r1, #222	; 0xde
 800c722:	485d      	ldr	r0, [pc, #372]	; (800c898 <__gethex+0x2ec>)
 800c724:	f001 f9b6 	bl	800da94 <__assert_func>
 800c728:	3101      	adds	r1, #1
 800c72a:	105b      	asrs	r3, r3, #1
 800c72c:	e7ee      	b.n	800c70c <__gethex+0x160>
 800c72e:	f100 0914 	add.w	r9, r0, #20
 800c732:	f04f 0b00 	mov.w	fp, #0
 800c736:	f1ca 0301 	rsb	r3, sl, #1
 800c73a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c73e:	f8cd b000 	str.w	fp, [sp]
 800c742:	9306      	str	r3, [sp, #24]
 800c744:	42b7      	cmp	r7, r6
 800c746:	d340      	bcc.n	800c7ca <__gethex+0x21e>
 800c748:	9802      	ldr	r0, [sp, #8]
 800c74a:	9b00      	ldr	r3, [sp, #0]
 800c74c:	f840 3b04 	str.w	r3, [r0], #4
 800c750:	eba0 0009 	sub.w	r0, r0, r9
 800c754:	1080      	asrs	r0, r0, #2
 800c756:	0146      	lsls	r6, r0, #5
 800c758:	6120      	str	r0, [r4, #16]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fb3e 	bl	800cddc <__hi0bits>
 800c760:	1a30      	subs	r0, r6, r0
 800c762:	f8d8 6000 	ldr.w	r6, [r8]
 800c766:	42b0      	cmp	r0, r6
 800c768:	dd63      	ble.n	800c832 <__gethex+0x286>
 800c76a:	1b87      	subs	r7, r0, r6
 800c76c:	4639      	mov	r1, r7
 800c76e:	4620      	mov	r0, r4
 800c770:	f000 fee2 	bl	800d538 <__any_on>
 800c774:	4682      	mov	sl, r0
 800c776:	b1a8      	cbz	r0, 800c7a4 <__gethex+0x1f8>
 800c778:	1e7b      	subs	r3, r7, #1
 800c77a:	1159      	asrs	r1, r3, #5
 800c77c:	f003 021f 	and.w	r2, r3, #31
 800c780:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c784:	f04f 0a01 	mov.w	sl, #1
 800c788:	fa0a f202 	lsl.w	r2, sl, r2
 800c78c:	420a      	tst	r2, r1
 800c78e:	d009      	beq.n	800c7a4 <__gethex+0x1f8>
 800c790:	4553      	cmp	r3, sl
 800c792:	dd05      	ble.n	800c7a0 <__gethex+0x1f4>
 800c794:	1eb9      	subs	r1, r7, #2
 800c796:	4620      	mov	r0, r4
 800c798:	f000 fece 	bl	800d538 <__any_on>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d145      	bne.n	800c82c <__gethex+0x280>
 800c7a0:	f04f 0a02 	mov.w	sl, #2
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f7ff fe98 	bl	800c4dc <rshift>
 800c7ac:	443d      	add	r5, r7
 800c7ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7b2:	42ab      	cmp	r3, r5
 800c7b4:	da4c      	bge.n	800c850 <__gethex+0x2a4>
 800c7b6:	ee18 0a10 	vmov	r0, s16
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	f000 fa5c 	bl	800cc78 <_Bfree>
 800c7c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	27a3      	movs	r7, #163	; 0xa3
 800c7c8:	e785      	b.n	800c6d6 <__gethex+0x12a>
 800c7ca:	1e73      	subs	r3, r6, #1
 800c7cc:	9a05      	ldr	r2, [sp, #20]
 800c7ce:	9303      	str	r3, [sp, #12]
 800c7d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d019      	beq.n	800c80c <__gethex+0x260>
 800c7d8:	f1bb 0f20 	cmp.w	fp, #32
 800c7dc:	d107      	bne.n	800c7ee <__gethex+0x242>
 800c7de:	9b02      	ldr	r3, [sp, #8]
 800c7e0:	9a00      	ldr	r2, [sp, #0]
 800c7e2:	f843 2b04 	str.w	r2, [r3], #4
 800c7e6:	9302      	str	r3, [sp, #8]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	469b      	mov	fp, r3
 800c7ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c7f2:	f7ff fec5 	bl	800c580 <__hexdig_fun>
 800c7f6:	9b00      	ldr	r3, [sp, #0]
 800c7f8:	f000 000f 	and.w	r0, r0, #15
 800c7fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c800:	4303      	orrs	r3, r0
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	f10b 0b04 	add.w	fp, fp, #4
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	e00d      	b.n	800c828 <__gethex+0x27c>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	9a06      	ldr	r2, [sp, #24]
 800c810:	4413      	add	r3, r2
 800c812:	42bb      	cmp	r3, r7
 800c814:	d3e0      	bcc.n	800c7d8 <__gethex+0x22c>
 800c816:	4618      	mov	r0, r3
 800c818:	9901      	ldr	r1, [sp, #4]
 800c81a:	9307      	str	r3, [sp, #28]
 800c81c:	4652      	mov	r2, sl
 800c81e:	f001 f917 	bl	800da50 <strncmp>
 800c822:	9b07      	ldr	r3, [sp, #28]
 800c824:	2800      	cmp	r0, #0
 800c826:	d1d7      	bne.n	800c7d8 <__gethex+0x22c>
 800c828:	461e      	mov	r6, r3
 800c82a:	e78b      	b.n	800c744 <__gethex+0x198>
 800c82c:	f04f 0a03 	mov.w	sl, #3
 800c830:	e7b8      	b.n	800c7a4 <__gethex+0x1f8>
 800c832:	da0a      	bge.n	800c84a <__gethex+0x29e>
 800c834:	1a37      	subs	r7, r6, r0
 800c836:	4621      	mov	r1, r4
 800c838:	ee18 0a10 	vmov	r0, s16
 800c83c:	463a      	mov	r2, r7
 800c83e:	f000 fc37 	bl	800d0b0 <__lshift>
 800c842:	1bed      	subs	r5, r5, r7
 800c844:	4604      	mov	r4, r0
 800c846:	f100 0914 	add.w	r9, r0, #20
 800c84a:	f04f 0a00 	mov.w	sl, #0
 800c84e:	e7ae      	b.n	800c7ae <__gethex+0x202>
 800c850:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c854:	42a8      	cmp	r0, r5
 800c856:	dd72      	ble.n	800c93e <__gethex+0x392>
 800c858:	1b45      	subs	r5, r0, r5
 800c85a:	42ae      	cmp	r6, r5
 800c85c:	dc36      	bgt.n	800c8cc <__gethex+0x320>
 800c85e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c862:	2b02      	cmp	r3, #2
 800c864:	d02a      	beq.n	800c8bc <__gethex+0x310>
 800c866:	2b03      	cmp	r3, #3
 800c868:	d02c      	beq.n	800c8c4 <__gethex+0x318>
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d11c      	bne.n	800c8a8 <__gethex+0x2fc>
 800c86e:	42ae      	cmp	r6, r5
 800c870:	d11a      	bne.n	800c8a8 <__gethex+0x2fc>
 800c872:	2e01      	cmp	r6, #1
 800c874:	d112      	bne.n	800c89c <__gethex+0x2f0>
 800c876:	9a04      	ldr	r2, [sp, #16]
 800c878:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c87c:	6013      	str	r3, [r2, #0]
 800c87e:	2301      	movs	r3, #1
 800c880:	6123      	str	r3, [r4, #16]
 800c882:	f8c9 3000 	str.w	r3, [r9]
 800c886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c888:	2762      	movs	r7, #98	; 0x62
 800c88a:	601c      	str	r4, [r3, #0]
 800c88c:	e723      	b.n	800c6d6 <__gethex+0x12a>
 800c88e:	bf00      	nop
 800c890:	0800e948 	.word	0x0800e948
 800c894:	0800e8d0 	.word	0x0800e8d0
 800c898:	0800e8e1 	.word	0x0800e8e1
 800c89c:	1e71      	subs	r1, r6, #1
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f000 fe4a 	bl	800d538 <__any_on>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d1e6      	bne.n	800c876 <__gethex+0x2ca>
 800c8a8:	ee18 0a10 	vmov	r0, s16
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	f000 f9e3 	bl	800cc78 <_Bfree>
 800c8b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	2750      	movs	r7, #80	; 0x50
 800c8ba:	e70c      	b.n	800c6d6 <__gethex+0x12a>
 800c8bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1f2      	bne.n	800c8a8 <__gethex+0x2fc>
 800c8c2:	e7d8      	b.n	800c876 <__gethex+0x2ca>
 800c8c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1d5      	bne.n	800c876 <__gethex+0x2ca>
 800c8ca:	e7ed      	b.n	800c8a8 <__gethex+0x2fc>
 800c8cc:	1e6f      	subs	r7, r5, #1
 800c8ce:	f1ba 0f00 	cmp.w	sl, #0
 800c8d2:	d131      	bne.n	800c938 <__gethex+0x38c>
 800c8d4:	b127      	cbz	r7, 800c8e0 <__gethex+0x334>
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fe2d 	bl	800d538 <__any_on>
 800c8de:	4682      	mov	sl, r0
 800c8e0:	117b      	asrs	r3, r7, #5
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c8e8:	f007 071f 	and.w	r7, r7, #31
 800c8ec:	fa01 f707 	lsl.w	r7, r1, r7
 800c8f0:	421f      	tst	r7, r3
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	bf18      	it	ne
 800c8f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c8fc:	1b76      	subs	r6, r6, r5
 800c8fe:	f7ff fded 	bl	800c4dc <rshift>
 800c902:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c906:	2702      	movs	r7, #2
 800c908:	f1ba 0f00 	cmp.w	sl, #0
 800c90c:	d048      	beq.n	800c9a0 <__gethex+0x3f4>
 800c90e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c912:	2b02      	cmp	r3, #2
 800c914:	d015      	beq.n	800c942 <__gethex+0x396>
 800c916:	2b03      	cmp	r3, #3
 800c918:	d017      	beq.n	800c94a <__gethex+0x39e>
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d109      	bne.n	800c932 <__gethex+0x386>
 800c91e:	f01a 0f02 	tst.w	sl, #2
 800c922:	d006      	beq.n	800c932 <__gethex+0x386>
 800c924:	f8d9 0000 	ldr.w	r0, [r9]
 800c928:	ea4a 0a00 	orr.w	sl, sl, r0
 800c92c:	f01a 0f01 	tst.w	sl, #1
 800c930:	d10e      	bne.n	800c950 <__gethex+0x3a4>
 800c932:	f047 0710 	orr.w	r7, r7, #16
 800c936:	e033      	b.n	800c9a0 <__gethex+0x3f4>
 800c938:	f04f 0a01 	mov.w	sl, #1
 800c93c:	e7d0      	b.n	800c8e0 <__gethex+0x334>
 800c93e:	2701      	movs	r7, #1
 800c940:	e7e2      	b.n	800c908 <__gethex+0x35c>
 800c942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c944:	f1c3 0301 	rsb	r3, r3, #1
 800c948:	9315      	str	r3, [sp, #84]	; 0x54
 800c94a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d0f0      	beq.n	800c932 <__gethex+0x386>
 800c950:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c954:	f104 0314 	add.w	r3, r4, #20
 800c958:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c95c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c960:	f04f 0c00 	mov.w	ip, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f853 2b04 	ldr.w	r2, [r3], #4
 800c96a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c96e:	d01c      	beq.n	800c9aa <__gethex+0x3fe>
 800c970:	3201      	adds	r2, #1
 800c972:	6002      	str	r2, [r0, #0]
 800c974:	2f02      	cmp	r7, #2
 800c976:	f104 0314 	add.w	r3, r4, #20
 800c97a:	d13f      	bne.n	800c9fc <__gethex+0x450>
 800c97c:	f8d8 2000 	ldr.w	r2, [r8]
 800c980:	3a01      	subs	r2, #1
 800c982:	42b2      	cmp	r2, r6
 800c984:	d10a      	bne.n	800c99c <__gethex+0x3f0>
 800c986:	1171      	asrs	r1, r6, #5
 800c988:	2201      	movs	r2, #1
 800c98a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c98e:	f006 061f 	and.w	r6, r6, #31
 800c992:	fa02 f606 	lsl.w	r6, r2, r6
 800c996:	421e      	tst	r6, r3
 800c998:	bf18      	it	ne
 800c99a:	4617      	movne	r7, r2
 800c99c:	f047 0720 	orr.w	r7, r7, #32
 800c9a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9a2:	601c      	str	r4, [r3, #0]
 800c9a4:	9b04      	ldr	r3, [sp, #16]
 800c9a6:	601d      	str	r5, [r3, #0]
 800c9a8:	e695      	b.n	800c6d6 <__gethex+0x12a>
 800c9aa:	4299      	cmp	r1, r3
 800c9ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9b0:	d8d8      	bhi.n	800c964 <__gethex+0x3b8>
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	459b      	cmp	fp, r3
 800c9b6:	db19      	blt.n	800c9ec <__gethex+0x440>
 800c9b8:	6861      	ldr	r1, [r4, #4]
 800c9ba:	ee18 0a10 	vmov	r0, s16
 800c9be:	3101      	adds	r1, #1
 800c9c0:	f000 f91a 	bl	800cbf8 <_Balloc>
 800c9c4:	4681      	mov	r9, r0
 800c9c6:	b918      	cbnz	r0, 800c9d0 <__gethex+0x424>
 800c9c8:	4b1a      	ldr	r3, [pc, #104]	; (800ca34 <__gethex+0x488>)
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	2184      	movs	r1, #132	; 0x84
 800c9ce:	e6a8      	b.n	800c722 <__gethex+0x176>
 800c9d0:	6922      	ldr	r2, [r4, #16]
 800c9d2:	3202      	adds	r2, #2
 800c9d4:	f104 010c 	add.w	r1, r4, #12
 800c9d8:	0092      	lsls	r2, r2, #2
 800c9da:	300c      	adds	r0, #12
 800c9dc:	f7fd f980 	bl	8009ce0 <memcpy>
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	ee18 0a10 	vmov	r0, s16
 800c9e6:	f000 f947 	bl	800cc78 <_Bfree>
 800c9ea:	464c      	mov	r4, r9
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9f4:	6122      	str	r2, [r4, #16]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	615a      	str	r2, [r3, #20]
 800c9fa:	e7bb      	b.n	800c974 <__gethex+0x3c8>
 800c9fc:	6922      	ldr	r2, [r4, #16]
 800c9fe:	455a      	cmp	r2, fp
 800ca00:	dd0b      	ble.n	800ca1a <__gethex+0x46e>
 800ca02:	2101      	movs	r1, #1
 800ca04:	4620      	mov	r0, r4
 800ca06:	f7ff fd69 	bl	800c4dc <rshift>
 800ca0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca0e:	3501      	adds	r5, #1
 800ca10:	42ab      	cmp	r3, r5
 800ca12:	f6ff aed0 	blt.w	800c7b6 <__gethex+0x20a>
 800ca16:	2701      	movs	r7, #1
 800ca18:	e7c0      	b.n	800c99c <__gethex+0x3f0>
 800ca1a:	f016 061f 	ands.w	r6, r6, #31
 800ca1e:	d0fa      	beq.n	800ca16 <__gethex+0x46a>
 800ca20:	4453      	add	r3, sl
 800ca22:	f1c6 0620 	rsb	r6, r6, #32
 800ca26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca2a:	f000 f9d7 	bl	800cddc <__hi0bits>
 800ca2e:	42b0      	cmp	r0, r6
 800ca30:	dbe7      	blt.n	800ca02 <__gethex+0x456>
 800ca32:	e7f0      	b.n	800ca16 <__gethex+0x46a>
 800ca34:	0800e8d0 	.word	0x0800e8d0

0800ca38 <L_shift>:
 800ca38:	f1c2 0208 	rsb	r2, r2, #8
 800ca3c:	0092      	lsls	r2, r2, #2
 800ca3e:	b570      	push	{r4, r5, r6, lr}
 800ca40:	f1c2 0620 	rsb	r6, r2, #32
 800ca44:	6843      	ldr	r3, [r0, #4]
 800ca46:	6804      	ldr	r4, [r0, #0]
 800ca48:	fa03 f506 	lsl.w	r5, r3, r6
 800ca4c:	432c      	orrs	r4, r5
 800ca4e:	40d3      	lsrs	r3, r2
 800ca50:	6004      	str	r4, [r0, #0]
 800ca52:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca56:	4288      	cmp	r0, r1
 800ca58:	d3f4      	bcc.n	800ca44 <L_shift+0xc>
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}

0800ca5c <__match>:
 800ca5c:	b530      	push	{r4, r5, lr}
 800ca5e:	6803      	ldr	r3, [r0, #0]
 800ca60:	3301      	adds	r3, #1
 800ca62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca66:	b914      	cbnz	r4, 800ca6e <__match+0x12>
 800ca68:	6003      	str	r3, [r0, #0]
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	bd30      	pop	{r4, r5, pc}
 800ca6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ca76:	2d19      	cmp	r5, #25
 800ca78:	bf98      	it	ls
 800ca7a:	3220      	addls	r2, #32
 800ca7c:	42a2      	cmp	r2, r4
 800ca7e:	d0f0      	beq.n	800ca62 <__match+0x6>
 800ca80:	2000      	movs	r0, #0
 800ca82:	e7f3      	b.n	800ca6c <__match+0x10>

0800ca84 <__hexnan>:
 800ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca88:	680b      	ldr	r3, [r1, #0]
 800ca8a:	115e      	asrs	r6, r3, #5
 800ca8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca90:	f013 031f 	ands.w	r3, r3, #31
 800ca94:	b087      	sub	sp, #28
 800ca96:	bf18      	it	ne
 800ca98:	3604      	addne	r6, #4
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	1f37      	subs	r7, r6, #4
 800ca9e:	4690      	mov	r8, r2
 800caa0:	6802      	ldr	r2, [r0, #0]
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	4682      	mov	sl, r0
 800caa6:	f846 5c04 	str.w	r5, [r6, #-4]
 800caaa:	46b9      	mov	r9, r7
 800caac:	463c      	mov	r4, r7
 800caae:	9502      	str	r5, [sp, #8]
 800cab0:	46ab      	mov	fp, r5
 800cab2:	7851      	ldrb	r1, [r2, #1]
 800cab4:	1c53      	adds	r3, r2, #1
 800cab6:	9303      	str	r3, [sp, #12]
 800cab8:	b341      	cbz	r1, 800cb0c <__hexnan+0x88>
 800caba:	4608      	mov	r0, r1
 800cabc:	9205      	str	r2, [sp, #20]
 800cabe:	9104      	str	r1, [sp, #16]
 800cac0:	f7ff fd5e 	bl	800c580 <__hexdig_fun>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d14f      	bne.n	800cb68 <__hexnan+0xe4>
 800cac8:	9904      	ldr	r1, [sp, #16]
 800caca:	9a05      	ldr	r2, [sp, #20]
 800cacc:	2920      	cmp	r1, #32
 800cace:	d818      	bhi.n	800cb02 <__hexnan+0x7e>
 800cad0:	9b02      	ldr	r3, [sp, #8]
 800cad2:	459b      	cmp	fp, r3
 800cad4:	dd13      	ble.n	800cafe <__hexnan+0x7a>
 800cad6:	454c      	cmp	r4, r9
 800cad8:	d206      	bcs.n	800cae8 <__hexnan+0x64>
 800cada:	2d07      	cmp	r5, #7
 800cadc:	dc04      	bgt.n	800cae8 <__hexnan+0x64>
 800cade:	462a      	mov	r2, r5
 800cae0:	4649      	mov	r1, r9
 800cae2:	4620      	mov	r0, r4
 800cae4:	f7ff ffa8 	bl	800ca38 <L_shift>
 800cae8:	4544      	cmp	r4, r8
 800caea:	d950      	bls.n	800cb8e <__hexnan+0x10a>
 800caec:	2300      	movs	r3, #0
 800caee:	f1a4 0904 	sub.w	r9, r4, #4
 800caf2:	f844 3c04 	str.w	r3, [r4, #-4]
 800caf6:	f8cd b008 	str.w	fp, [sp, #8]
 800cafa:	464c      	mov	r4, r9
 800cafc:	461d      	mov	r5, r3
 800cafe:	9a03      	ldr	r2, [sp, #12]
 800cb00:	e7d7      	b.n	800cab2 <__hexnan+0x2e>
 800cb02:	2929      	cmp	r1, #41	; 0x29
 800cb04:	d156      	bne.n	800cbb4 <__hexnan+0x130>
 800cb06:	3202      	adds	r2, #2
 800cb08:	f8ca 2000 	str.w	r2, [sl]
 800cb0c:	f1bb 0f00 	cmp.w	fp, #0
 800cb10:	d050      	beq.n	800cbb4 <__hexnan+0x130>
 800cb12:	454c      	cmp	r4, r9
 800cb14:	d206      	bcs.n	800cb24 <__hexnan+0xa0>
 800cb16:	2d07      	cmp	r5, #7
 800cb18:	dc04      	bgt.n	800cb24 <__hexnan+0xa0>
 800cb1a:	462a      	mov	r2, r5
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7ff ff8a 	bl	800ca38 <L_shift>
 800cb24:	4544      	cmp	r4, r8
 800cb26:	d934      	bls.n	800cb92 <__hexnan+0x10e>
 800cb28:	f1a8 0204 	sub.w	r2, r8, #4
 800cb2c:	4623      	mov	r3, r4
 800cb2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb32:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb36:	429f      	cmp	r7, r3
 800cb38:	d2f9      	bcs.n	800cb2e <__hexnan+0xaa>
 800cb3a:	1b3b      	subs	r3, r7, r4
 800cb3c:	f023 0303 	bic.w	r3, r3, #3
 800cb40:	3304      	adds	r3, #4
 800cb42:	3401      	adds	r4, #1
 800cb44:	3e03      	subs	r6, #3
 800cb46:	42b4      	cmp	r4, r6
 800cb48:	bf88      	it	hi
 800cb4a:	2304      	movhi	r3, #4
 800cb4c:	4443      	add	r3, r8
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f843 2b04 	str.w	r2, [r3], #4
 800cb54:	429f      	cmp	r7, r3
 800cb56:	d2fb      	bcs.n	800cb50 <__hexnan+0xcc>
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	b91b      	cbnz	r3, 800cb64 <__hexnan+0xe0>
 800cb5c:	4547      	cmp	r7, r8
 800cb5e:	d127      	bne.n	800cbb0 <__hexnan+0x12c>
 800cb60:	2301      	movs	r3, #1
 800cb62:	603b      	str	r3, [r7, #0]
 800cb64:	2005      	movs	r0, #5
 800cb66:	e026      	b.n	800cbb6 <__hexnan+0x132>
 800cb68:	3501      	adds	r5, #1
 800cb6a:	2d08      	cmp	r5, #8
 800cb6c:	f10b 0b01 	add.w	fp, fp, #1
 800cb70:	dd06      	ble.n	800cb80 <__hexnan+0xfc>
 800cb72:	4544      	cmp	r4, r8
 800cb74:	d9c3      	bls.n	800cafe <__hexnan+0x7a>
 800cb76:	2300      	movs	r3, #0
 800cb78:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb7c:	2501      	movs	r5, #1
 800cb7e:	3c04      	subs	r4, #4
 800cb80:	6822      	ldr	r2, [r4, #0]
 800cb82:	f000 000f 	and.w	r0, r0, #15
 800cb86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cb8a:	6022      	str	r2, [r4, #0]
 800cb8c:	e7b7      	b.n	800cafe <__hexnan+0x7a>
 800cb8e:	2508      	movs	r5, #8
 800cb90:	e7b5      	b.n	800cafe <__hexnan+0x7a>
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0df      	beq.n	800cb58 <__hexnan+0xd4>
 800cb98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb9c:	f1c3 0320 	rsb	r3, r3, #32
 800cba0:	fa22 f303 	lsr.w	r3, r2, r3
 800cba4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cba8:	401a      	ands	r2, r3
 800cbaa:	f846 2c04 	str.w	r2, [r6, #-4]
 800cbae:	e7d3      	b.n	800cb58 <__hexnan+0xd4>
 800cbb0:	3f04      	subs	r7, #4
 800cbb2:	e7d1      	b.n	800cb58 <__hexnan+0xd4>
 800cbb4:	2004      	movs	r0, #4
 800cbb6:	b007      	add	sp, #28
 800cbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbbc <_localeconv_r>:
 800cbbc:	4800      	ldr	r0, [pc, #0]	; (800cbc0 <_localeconv_r+0x4>)
 800cbbe:	4770      	bx	lr
 800cbc0:	20000210 	.word	0x20000210

0800cbc4 <malloc>:
 800cbc4:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <malloc+0xc>)
 800cbc6:	4601      	mov	r1, r0
 800cbc8:	6818      	ldr	r0, [r3, #0]
 800cbca:	f000 bd59 	b.w	800d680 <_malloc_r>
 800cbce:	bf00      	nop
 800cbd0:	200000b8 	.word	0x200000b8

0800cbd4 <__ascii_mbtowc>:
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	b901      	cbnz	r1, 800cbda <__ascii_mbtowc+0x6>
 800cbd8:	a901      	add	r1, sp, #4
 800cbda:	b142      	cbz	r2, 800cbee <__ascii_mbtowc+0x1a>
 800cbdc:	b14b      	cbz	r3, 800cbf2 <__ascii_mbtowc+0x1e>
 800cbde:	7813      	ldrb	r3, [r2, #0]
 800cbe0:	600b      	str	r3, [r1, #0]
 800cbe2:	7812      	ldrb	r2, [r2, #0]
 800cbe4:	1e10      	subs	r0, r2, #0
 800cbe6:	bf18      	it	ne
 800cbe8:	2001      	movne	r0, #1
 800cbea:	b002      	add	sp, #8
 800cbec:	4770      	bx	lr
 800cbee:	4610      	mov	r0, r2
 800cbf0:	e7fb      	b.n	800cbea <__ascii_mbtowc+0x16>
 800cbf2:	f06f 0001 	mvn.w	r0, #1
 800cbf6:	e7f8      	b.n	800cbea <__ascii_mbtowc+0x16>

0800cbf8 <_Balloc>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	460d      	mov	r5, r1
 800cc00:	b976      	cbnz	r6, 800cc20 <_Balloc+0x28>
 800cc02:	2010      	movs	r0, #16
 800cc04:	f7ff ffde 	bl	800cbc4 <malloc>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6260      	str	r0, [r4, #36]	; 0x24
 800cc0c:	b920      	cbnz	r0, 800cc18 <_Balloc+0x20>
 800cc0e:	4b18      	ldr	r3, [pc, #96]	; (800cc70 <_Balloc+0x78>)
 800cc10:	4818      	ldr	r0, [pc, #96]	; (800cc74 <_Balloc+0x7c>)
 800cc12:	2166      	movs	r1, #102	; 0x66
 800cc14:	f000 ff3e 	bl	800da94 <__assert_func>
 800cc18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc1c:	6006      	str	r6, [r0, #0]
 800cc1e:	60c6      	str	r6, [r0, #12]
 800cc20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc22:	68f3      	ldr	r3, [r6, #12]
 800cc24:	b183      	cbz	r3, 800cc48 <_Balloc+0x50>
 800cc26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc2e:	b9b8      	cbnz	r0, 800cc60 <_Balloc+0x68>
 800cc30:	2101      	movs	r1, #1
 800cc32:	fa01 f605 	lsl.w	r6, r1, r5
 800cc36:	1d72      	adds	r2, r6, #5
 800cc38:	0092      	lsls	r2, r2, #2
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 fc9d 	bl	800d57a <_calloc_r>
 800cc40:	b160      	cbz	r0, 800cc5c <_Balloc+0x64>
 800cc42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc46:	e00e      	b.n	800cc66 <_Balloc+0x6e>
 800cc48:	2221      	movs	r2, #33	; 0x21
 800cc4a:	2104      	movs	r1, #4
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f000 fc94 	bl	800d57a <_calloc_r>
 800cc52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc54:	60f0      	str	r0, [r6, #12]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1e4      	bne.n	800cc26 <_Balloc+0x2e>
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}
 800cc60:	6802      	ldr	r2, [r0, #0]
 800cc62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc66:	2300      	movs	r3, #0
 800cc68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc6c:	e7f7      	b.n	800cc5e <_Balloc+0x66>
 800cc6e:	bf00      	nop
 800cc70:	0800e85e 	.word	0x0800e85e
 800cc74:	0800e95c 	.word	0x0800e95c

0800cc78 <_Bfree>:
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	b976      	cbnz	r6, 800cca0 <_Bfree+0x28>
 800cc82:	2010      	movs	r0, #16
 800cc84:	f7ff ff9e 	bl	800cbc4 <malloc>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	6268      	str	r0, [r5, #36]	; 0x24
 800cc8c:	b920      	cbnz	r0, 800cc98 <_Bfree+0x20>
 800cc8e:	4b09      	ldr	r3, [pc, #36]	; (800ccb4 <_Bfree+0x3c>)
 800cc90:	4809      	ldr	r0, [pc, #36]	; (800ccb8 <_Bfree+0x40>)
 800cc92:	218a      	movs	r1, #138	; 0x8a
 800cc94:	f000 fefe 	bl	800da94 <__assert_func>
 800cc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc9c:	6006      	str	r6, [r0, #0]
 800cc9e:	60c6      	str	r6, [r0, #12]
 800cca0:	b13c      	cbz	r4, 800ccb2 <_Bfree+0x3a>
 800cca2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cca4:	6862      	ldr	r2, [r4, #4]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccac:	6021      	str	r1, [r4, #0]
 800ccae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
 800ccb4:	0800e85e 	.word	0x0800e85e
 800ccb8:	0800e95c 	.word	0x0800e95c

0800ccbc <__multadd>:
 800ccbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc0:	690d      	ldr	r5, [r1, #16]
 800ccc2:	4607      	mov	r7, r0
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	461e      	mov	r6, r3
 800ccc8:	f101 0c14 	add.w	ip, r1, #20
 800cccc:	2000      	movs	r0, #0
 800ccce:	f8dc 3000 	ldr.w	r3, [ip]
 800ccd2:	b299      	uxth	r1, r3
 800ccd4:	fb02 6101 	mla	r1, r2, r1, r6
 800ccd8:	0c1e      	lsrs	r6, r3, #16
 800ccda:	0c0b      	lsrs	r3, r1, #16
 800ccdc:	fb02 3306 	mla	r3, r2, r6, r3
 800cce0:	b289      	uxth	r1, r1
 800cce2:	3001      	adds	r0, #1
 800cce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cce8:	4285      	cmp	r5, r0
 800ccea:	f84c 1b04 	str.w	r1, [ip], #4
 800ccee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccf2:	dcec      	bgt.n	800ccce <__multadd+0x12>
 800ccf4:	b30e      	cbz	r6, 800cd3a <__multadd+0x7e>
 800ccf6:	68a3      	ldr	r3, [r4, #8]
 800ccf8:	42ab      	cmp	r3, r5
 800ccfa:	dc19      	bgt.n	800cd30 <__multadd+0x74>
 800ccfc:	6861      	ldr	r1, [r4, #4]
 800ccfe:	4638      	mov	r0, r7
 800cd00:	3101      	adds	r1, #1
 800cd02:	f7ff ff79 	bl	800cbf8 <_Balloc>
 800cd06:	4680      	mov	r8, r0
 800cd08:	b928      	cbnz	r0, 800cd16 <__multadd+0x5a>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	4b0c      	ldr	r3, [pc, #48]	; (800cd40 <__multadd+0x84>)
 800cd0e:	480d      	ldr	r0, [pc, #52]	; (800cd44 <__multadd+0x88>)
 800cd10:	21b5      	movs	r1, #181	; 0xb5
 800cd12:	f000 febf 	bl	800da94 <__assert_func>
 800cd16:	6922      	ldr	r2, [r4, #16]
 800cd18:	3202      	adds	r2, #2
 800cd1a:	f104 010c 	add.w	r1, r4, #12
 800cd1e:	0092      	lsls	r2, r2, #2
 800cd20:	300c      	adds	r0, #12
 800cd22:	f7fc ffdd 	bl	8009ce0 <memcpy>
 800cd26:	4621      	mov	r1, r4
 800cd28:	4638      	mov	r0, r7
 800cd2a:	f7ff ffa5 	bl	800cc78 <_Bfree>
 800cd2e:	4644      	mov	r4, r8
 800cd30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd34:	3501      	adds	r5, #1
 800cd36:	615e      	str	r6, [r3, #20]
 800cd38:	6125      	str	r5, [r4, #16]
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd40:	0800e8d0 	.word	0x0800e8d0
 800cd44:	0800e95c 	.word	0x0800e95c

0800cd48 <__s2b>:
 800cd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	4615      	mov	r5, r2
 800cd50:	461f      	mov	r7, r3
 800cd52:	2209      	movs	r2, #9
 800cd54:	3308      	adds	r3, #8
 800cd56:	4606      	mov	r6, r0
 800cd58:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	2201      	movs	r2, #1
 800cd60:	429a      	cmp	r2, r3
 800cd62:	db09      	blt.n	800cd78 <__s2b+0x30>
 800cd64:	4630      	mov	r0, r6
 800cd66:	f7ff ff47 	bl	800cbf8 <_Balloc>
 800cd6a:	b940      	cbnz	r0, 800cd7e <__s2b+0x36>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	4b19      	ldr	r3, [pc, #100]	; (800cdd4 <__s2b+0x8c>)
 800cd70:	4819      	ldr	r0, [pc, #100]	; (800cdd8 <__s2b+0x90>)
 800cd72:	21ce      	movs	r1, #206	; 0xce
 800cd74:	f000 fe8e 	bl	800da94 <__assert_func>
 800cd78:	0052      	lsls	r2, r2, #1
 800cd7a:	3101      	adds	r1, #1
 800cd7c:	e7f0      	b.n	800cd60 <__s2b+0x18>
 800cd7e:	9b08      	ldr	r3, [sp, #32]
 800cd80:	6143      	str	r3, [r0, #20]
 800cd82:	2d09      	cmp	r5, #9
 800cd84:	f04f 0301 	mov.w	r3, #1
 800cd88:	6103      	str	r3, [r0, #16]
 800cd8a:	dd16      	ble.n	800cdba <__s2b+0x72>
 800cd8c:	f104 0909 	add.w	r9, r4, #9
 800cd90:	46c8      	mov	r8, r9
 800cd92:	442c      	add	r4, r5
 800cd94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd98:	4601      	mov	r1, r0
 800cd9a:	3b30      	subs	r3, #48	; 0x30
 800cd9c:	220a      	movs	r2, #10
 800cd9e:	4630      	mov	r0, r6
 800cda0:	f7ff ff8c 	bl	800ccbc <__multadd>
 800cda4:	45a0      	cmp	r8, r4
 800cda6:	d1f5      	bne.n	800cd94 <__s2b+0x4c>
 800cda8:	f1a5 0408 	sub.w	r4, r5, #8
 800cdac:	444c      	add	r4, r9
 800cdae:	1b2d      	subs	r5, r5, r4
 800cdb0:	1963      	adds	r3, r4, r5
 800cdb2:	42bb      	cmp	r3, r7
 800cdb4:	db04      	blt.n	800cdc0 <__s2b+0x78>
 800cdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdba:	340a      	adds	r4, #10
 800cdbc:	2509      	movs	r5, #9
 800cdbe:	e7f6      	b.n	800cdae <__s2b+0x66>
 800cdc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cdc4:	4601      	mov	r1, r0
 800cdc6:	3b30      	subs	r3, #48	; 0x30
 800cdc8:	220a      	movs	r2, #10
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7ff ff76 	bl	800ccbc <__multadd>
 800cdd0:	e7ee      	b.n	800cdb0 <__s2b+0x68>
 800cdd2:	bf00      	nop
 800cdd4:	0800e8d0 	.word	0x0800e8d0
 800cdd8:	0800e95c 	.word	0x0800e95c

0800cddc <__hi0bits>:
 800cddc:	0c03      	lsrs	r3, r0, #16
 800cdde:	041b      	lsls	r3, r3, #16
 800cde0:	b9d3      	cbnz	r3, 800ce18 <__hi0bits+0x3c>
 800cde2:	0400      	lsls	r0, r0, #16
 800cde4:	2310      	movs	r3, #16
 800cde6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cdea:	bf04      	itt	eq
 800cdec:	0200      	lsleq	r0, r0, #8
 800cdee:	3308      	addeq	r3, #8
 800cdf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cdf4:	bf04      	itt	eq
 800cdf6:	0100      	lsleq	r0, r0, #4
 800cdf8:	3304      	addeq	r3, #4
 800cdfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cdfe:	bf04      	itt	eq
 800ce00:	0080      	lsleq	r0, r0, #2
 800ce02:	3302      	addeq	r3, #2
 800ce04:	2800      	cmp	r0, #0
 800ce06:	db05      	blt.n	800ce14 <__hi0bits+0x38>
 800ce08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce0c:	f103 0301 	add.w	r3, r3, #1
 800ce10:	bf08      	it	eq
 800ce12:	2320      	moveq	r3, #32
 800ce14:	4618      	mov	r0, r3
 800ce16:	4770      	bx	lr
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e7e4      	b.n	800cde6 <__hi0bits+0xa>

0800ce1c <__lo0bits>:
 800ce1c:	6803      	ldr	r3, [r0, #0]
 800ce1e:	f013 0207 	ands.w	r2, r3, #7
 800ce22:	4601      	mov	r1, r0
 800ce24:	d00b      	beq.n	800ce3e <__lo0bits+0x22>
 800ce26:	07da      	lsls	r2, r3, #31
 800ce28:	d423      	bmi.n	800ce72 <__lo0bits+0x56>
 800ce2a:	0798      	lsls	r0, r3, #30
 800ce2c:	bf49      	itett	mi
 800ce2e:	085b      	lsrmi	r3, r3, #1
 800ce30:	089b      	lsrpl	r3, r3, #2
 800ce32:	2001      	movmi	r0, #1
 800ce34:	600b      	strmi	r3, [r1, #0]
 800ce36:	bf5c      	itt	pl
 800ce38:	600b      	strpl	r3, [r1, #0]
 800ce3a:	2002      	movpl	r0, #2
 800ce3c:	4770      	bx	lr
 800ce3e:	b298      	uxth	r0, r3
 800ce40:	b9a8      	cbnz	r0, 800ce6e <__lo0bits+0x52>
 800ce42:	0c1b      	lsrs	r3, r3, #16
 800ce44:	2010      	movs	r0, #16
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	b90a      	cbnz	r2, 800ce4e <__lo0bits+0x32>
 800ce4a:	3008      	adds	r0, #8
 800ce4c:	0a1b      	lsrs	r3, r3, #8
 800ce4e:	071a      	lsls	r2, r3, #28
 800ce50:	bf04      	itt	eq
 800ce52:	091b      	lsreq	r3, r3, #4
 800ce54:	3004      	addeq	r0, #4
 800ce56:	079a      	lsls	r2, r3, #30
 800ce58:	bf04      	itt	eq
 800ce5a:	089b      	lsreq	r3, r3, #2
 800ce5c:	3002      	addeq	r0, #2
 800ce5e:	07da      	lsls	r2, r3, #31
 800ce60:	d403      	bmi.n	800ce6a <__lo0bits+0x4e>
 800ce62:	085b      	lsrs	r3, r3, #1
 800ce64:	f100 0001 	add.w	r0, r0, #1
 800ce68:	d005      	beq.n	800ce76 <__lo0bits+0x5a>
 800ce6a:	600b      	str	r3, [r1, #0]
 800ce6c:	4770      	bx	lr
 800ce6e:	4610      	mov	r0, r2
 800ce70:	e7e9      	b.n	800ce46 <__lo0bits+0x2a>
 800ce72:	2000      	movs	r0, #0
 800ce74:	4770      	bx	lr
 800ce76:	2020      	movs	r0, #32
 800ce78:	4770      	bx	lr
	...

0800ce7c <__i2b>:
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	460c      	mov	r4, r1
 800ce80:	2101      	movs	r1, #1
 800ce82:	f7ff feb9 	bl	800cbf8 <_Balloc>
 800ce86:	4602      	mov	r2, r0
 800ce88:	b928      	cbnz	r0, 800ce96 <__i2b+0x1a>
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <__i2b+0x24>)
 800ce8c:	4805      	ldr	r0, [pc, #20]	; (800cea4 <__i2b+0x28>)
 800ce8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce92:	f000 fdff 	bl	800da94 <__assert_func>
 800ce96:	2301      	movs	r3, #1
 800ce98:	6144      	str	r4, [r0, #20]
 800ce9a:	6103      	str	r3, [r0, #16]
 800ce9c:	bd10      	pop	{r4, pc}
 800ce9e:	bf00      	nop
 800cea0:	0800e8d0 	.word	0x0800e8d0
 800cea4:	0800e95c 	.word	0x0800e95c

0800cea8 <__multiply>:
 800cea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceac:	4691      	mov	r9, r2
 800ceae:	690a      	ldr	r2, [r1, #16]
 800ceb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	bfb8      	it	lt
 800ceb8:	460b      	movlt	r3, r1
 800ceba:	460c      	mov	r4, r1
 800cebc:	bfbc      	itt	lt
 800cebe:	464c      	movlt	r4, r9
 800cec0:	4699      	movlt	r9, r3
 800cec2:	6927      	ldr	r7, [r4, #16]
 800cec4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cec8:	68a3      	ldr	r3, [r4, #8]
 800ceca:	6861      	ldr	r1, [r4, #4]
 800cecc:	eb07 060a 	add.w	r6, r7, sl
 800ced0:	42b3      	cmp	r3, r6
 800ced2:	b085      	sub	sp, #20
 800ced4:	bfb8      	it	lt
 800ced6:	3101      	addlt	r1, #1
 800ced8:	f7ff fe8e 	bl	800cbf8 <_Balloc>
 800cedc:	b930      	cbnz	r0, 800ceec <__multiply+0x44>
 800cede:	4602      	mov	r2, r0
 800cee0:	4b44      	ldr	r3, [pc, #272]	; (800cff4 <__multiply+0x14c>)
 800cee2:	4845      	ldr	r0, [pc, #276]	; (800cff8 <__multiply+0x150>)
 800cee4:	f240 115d 	movw	r1, #349	; 0x15d
 800cee8:	f000 fdd4 	bl	800da94 <__assert_func>
 800ceec:	f100 0514 	add.w	r5, r0, #20
 800cef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cef4:	462b      	mov	r3, r5
 800cef6:	2200      	movs	r2, #0
 800cef8:	4543      	cmp	r3, r8
 800cefa:	d321      	bcc.n	800cf40 <__multiply+0x98>
 800cefc:	f104 0314 	add.w	r3, r4, #20
 800cf00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf04:	f109 0314 	add.w	r3, r9, #20
 800cf08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf0c:	9202      	str	r2, [sp, #8]
 800cf0e:	1b3a      	subs	r2, r7, r4
 800cf10:	3a15      	subs	r2, #21
 800cf12:	f022 0203 	bic.w	r2, r2, #3
 800cf16:	3204      	adds	r2, #4
 800cf18:	f104 0115 	add.w	r1, r4, #21
 800cf1c:	428f      	cmp	r7, r1
 800cf1e:	bf38      	it	cc
 800cf20:	2204      	movcc	r2, #4
 800cf22:	9201      	str	r2, [sp, #4]
 800cf24:	9a02      	ldr	r2, [sp, #8]
 800cf26:	9303      	str	r3, [sp, #12]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d80c      	bhi.n	800cf46 <__multiply+0x9e>
 800cf2c:	2e00      	cmp	r6, #0
 800cf2e:	dd03      	ble.n	800cf38 <__multiply+0x90>
 800cf30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d05a      	beq.n	800cfee <__multiply+0x146>
 800cf38:	6106      	str	r6, [r0, #16]
 800cf3a:	b005      	add	sp, #20
 800cf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf40:	f843 2b04 	str.w	r2, [r3], #4
 800cf44:	e7d8      	b.n	800cef8 <__multiply+0x50>
 800cf46:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf4a:	f1ba 0f00 	cmp.w	sl, #0
 800cf4e:	d024      	beq.n	800cf9a <__multiply+0xf2>
 800cf50:	f104 0e14 	add.w	lr, r4, #20
 800cf54:	46a9      	mov	r9, r5
 800cf56:	f04f 0c00 	mov.w	ip, #0
 800cf5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf5e:	f8d9 1000 	ldr.w	r1, [r9]
 800cf62:	fa1f fb82 	uxth.w	fp, r2
 800cf66:	b289      	uxth	r1, r1
 800cf68:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cf70:	f8d9 2000 	ldr.w	r2, [r9]
 800cf74:	4461      	add	r1, ip
 800cf76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800cf7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf82:	b289      	uxth	r1, r1
 800cf84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf88:	4577      	cmp	r7, lr
 800cf8a:	f849 1b04 	str.w	r1, [r9], #4
 800cf8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf92:	d8e2      	bhi.n	800cf5a <__multiply+0xb2>
 800cf94:	9a01      	ldr	r2, [sp, #4]
 800cf96:	f845 c002 	str.w	ip, [r5, r2]
 800cf9a:	9a03      	ldr	r2, [sp, #12]
 800cf9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	f1b9 0f00 	cmp.w	r9, #0
 800cfa6:	d020      	beq.n	800cfea <__multiply+0x142>
 800cfa8:	6829      	ldr	r1, [r5, #0]
 800cfaa:	f104 0c14 	add.w	ip, r4, #20
 800cfae:	46ae      	mov	lr, r5
 800cfb0:	f04f 0a00 	mov.w	sl, #0
 800cfb4:	f8bc b000 	ldrh.w	fp, [ip]
 800cfb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cfbc:	fb09 220b 	mla	r2, r9, fp, r2
 800cfc0:	4492      	add	sl, r2
 800cfc2:	b289      	uxth	r1, r1
 800cfc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cfc8:	f84e 1b04 	str.w	r1, [lr], #4
 800cfcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cfd0:	f8be 1000 	ldrh.w	r1, [lr]
 800cfd4:	0c12      	lsrs	r2, r2, #16
 800cfd6:	fb09 1102 	mla	r1, r9, r2, r1
 800cfda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cfde:	4567      	cmp	r7, ip
 800cfe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfe4:	d8e6      	bhi.n	800cfb4 <__multiply+0x10c>
 800cfe6:	9a01      	ldr	r2, [sp, #4]
 800cfe8:	50a9      	str	r1, [r5, r2]
 800cfea:	3504      	adds	r5, #4
 800cfec:	e79a      	b.n	800cf24 <__multiply+0x7c>
 800cfee:	3e01      	subs	r6, #1
 800cff0:	e79c      	b.n	800cf2c <__multiply+0x84>
 800cff2:	bf00      	nop
 800cff4:	0800e8d0 	.word	0x0800e8d0
 800cff8:	0800e95c 	.word	0x0800e95c

0800cffc <__pow5mult>:
 800cffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d000:	4615      	mov	r5, r2
 800d002:	f012 0203 	ands.w	r2, r2, #3
 800d006:	4606      	mov	r6, r0
 800d008:	460f      	mov	r7, r1
 800d00a:	d007      	beq.n	800d01c <__pow5mult+0x20>
 800d00c:	4c25      	ldr	r4, [pc, #148]	; (800d0a4 <__pow5mult+0xa8>)
 800d00e:	3a01      	subs	r2, #1
 800d010:	2300      	movs	r3, #0
 800d012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d016:	f7ff fe51 	bl	800ccbc <__multadd>
 800d01a:	4607      	mov	r7, r0
 800d01c:	10ad      	asrs	r5, r5, #2
 800d01e:	d03d      	beq.n	800d09c <__pow5mult+0xa0>
 800d020:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d022:	b97c      	cbnz	r4, 800d044 <__pow5mult+0x48>
 800d024:	2010      	movs	r0, #16
 800d026:	f7ff fdcd 	bl	800cbc4 <malloc>
 800d02a:	4602      	mov	r2, r0
 800d02c:	6270      	str	r0, [r6, #36]	; 0x24
 800d02e:	b928      	cbnz	r0, 800d03c <__pow5mult+0x40>
 800d030:	4b1d      	ldr	r3, [pc, #116]	; (800d0a8 <__pow5mult+0xac>)
 800d032:	481e      	ldr	r0, [pc, #120]	; (800d0ac <__pow5mult+0xb0>)
 800d034:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d038:	f000 fd2c 	bl	800da94 <__assert_func>
 800d03c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d040:	6004      	str	r4, [r0, #0]
 800d042:	60c4      	str	r4, [r0, #12]
 800d044:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d04c:	b94c      	cbnz	r4, 800d062 <__pow5mult+0x66>
 800d04e:	f240 2171 	movw	r1, #625	; 0x271
 800d052:	4630      	mov	r0, r6
 800d054:	f7ff ff12 	bl	800ce7c <__i2b>
 800d058:	2300      	movs	r3, #0
 800d05a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d05e:	4604      	mov	r4, r0
 800d060:	6003      	str	r3, [r0, #0]
 800d062:	f04f 0900 	mov.w	r9, #0
 800d066:	07eb      	lsls	r3, r5, #31
 800d068:	d50a      	bpl.n	800d080 <__pow5mult+0x84>
 800d06a:	4639      	mov	r1, r7
 800d06c:	4622      	mov	r2, r4
 800d06e:	4630      	mov	r0, r6
 800d070:	f7ff ff1a 	bl	800cea8 <__multiply>
 800d074:	4639      	mov	r1, r7
 800d076:	4680      	mov	r8, r0
 800d078:	4630      	mov	r0, r6
 800d07a:	f7ff fdfd 	bl	800cc78 <_Bfree>
 800d07e:	4647      	mov	r7, r8
 800d080:	106d      	asrs	r5, r5, #1
 800d082:	d00b      	beq.n	800d09c <__pow5mult+0xa0>
 800d084:	6820      	ldr	r0, [r4, #0]
 800d086:	b938      	cbnz	r0, 800d098 <__pow5mult+0x9c>
 800d088:	4622      	mov	r2, r4
 800d08a:	4621      	mov	r1, r4
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7ff ff0b 	bl	800cea8 <__multiply>
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	f8c0 9000 	str.w	r9, [r0]
 800d098:	4604      	mov	r4, r0
 800d09a:	e7e4      	b.n	800d066 <__pow5mult+0x6a>
 800d09c:	4638      	mov	r0, r7
 800d09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a2:	bf00      	nop
 800d0a4:	0800eaa8 	.word	0x0800eaa8
 800d0a8:	0800e85e 	.word	0x0800e85e
 800d0ac:	0800e95c 	.word	0x0800e95c

0800d0b0 <__lshift>:
 800d0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b4:	460c      	mov	r4, r1
 800d0b6:	6849      	ldr	r1, [r1, #4]
 800d0b8:	6923      	ldr	r3, [r4, #16]
 800d0ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0be:	68a3      	ldr	r3, [r4, #8]
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	4691      	mov	r9, r2
 800d0c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0c8:	f108 0601 	add.w	r6, r8, #1
 800d0cc:	42b3      	cmp	r3, r6
 800d0ce:	db0b      	blt.n	800d0e8 <__lshift+0x38>
 800d0d0:	4638      	mov	r0, r7
 800d0d2:	f7ff fd91 	bl	800cbf8 <_Balloc>
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	b948      	cbnz	r0, 800d0ee <__lshift+0x3e>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	4b2a      	ldr	r3, [pc, #168]	; (800d188 <__lshift+0xd8>)
 800d0de:	482b      	ldr	r0, [pc, #172]	; (800d18c <__lshift+0xdc>)
 800d0e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d0e4:	f000 fcd6 	bl	800da94 <__assert_func>
 800d0e8:	3101      	adds	r1, #1
 800d0ea:	005b      	lsls	r3, r3, #1
 800d0ec:	e7ee      	b.n	800d0cc <__lshift+0x1c>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f100 0114 	add.w	r1, r0, #20
 800d0f4:	f100 0210 	add.w	r2, r0, #16
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	4553      	cmp	r3, sl
 800d0fc:	db37      	blt.n	800d16e <__lshift+0xbe>
 800d0fe:	6920      	ldr	r0, [r4, #16]
 800d100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d104:	f104 0314 	add.w	r3, r4, #20
 800d108:	f019 091f 	ands.w	r9, r9, #31
 800d10c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d110:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d114:	d02f      	beq.n	800d176 <__lshift+0xc6>
 800d116:	f1c9 0e20 	rsb	lr, r9, #32
 800d11a:	468a      	mov	sl, r1
 800d11c:	f04f 0c00 	mov.w	ip, #0
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	fa02 f209 	lsl.w	r2, r2, r9
 800d126:	ea42 020c 	orr.w	r2, r2, ip
 800d12a:	f84a 2b04 	str.w	r2, [sl], #4
 800d12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d132:	4298      	cmp	r0, r3
 800d134:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d138:	d8f2      	bhi.n	800d120 <__lshift+0x70>
 800d13a:	1b03      	subs	r3, r0, r4
 800d13c:	3b15      	subs	r3, #21
 800d13e:	f023 0303 	bic.w	r3, r3, #3
 800d142:	3304      	adds	r3, #4
 800d144:	f104 0215 	add.w	r2, r4, #21
 800d148:	4290      	cmp	r0, r2
 800d14a:	bf38      	it	cc
 800d14c:	2304      	movcc	r3, #4
 800d14e:	f841 c003 	str.w	ip, [r1, r3]
 800d152:	f1bc 0f00 	cmp.w	ip, #0
 800d156:	d001      	beq.n	800d15c <__lshift+0xac>
 800d158:	f108 0602 	add.w	r6, r8, #2
 800d15c:	3e01      	subs	r6, #1
 800d15e:	4638      	mov	r0, r7
 800d160:	612e      	str	r6, [r5, #16]
 800d162:	4621      	mov	r1, r4
 800d164:	f7ff fd88 	bl	800cc78 <_Bfree>
 800d168:	4628      	mov	r0, r5
 800d16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d16e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d172:	3301      	adds	r3, #1
 800d174:	e7c1      	b.n	800d0fa <__lshift+0x4a>
 800d176:	3904      	subs	r1, #4
 800d178:	f853 2b04 	ldr.w	r2, [r3], #4
 800d17c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d180:	4298      	cmp	r0, r3
 800d182:	d8f9      	bhi.n	800d178 <__lshift+0xc8>
 800d184:	e7ea      	b.n	800d15c <__lshift+0xac>
 800d186:	bf00      	nop
 800d188:	0800e8d0 	.word	0x0800e8d0
 800d18c:	0800e95c 	.word	0x0800e95c

0800d190 <__mcmp>:
 800d190:	b530      	push	{r4, r5, lr}
 800d192:	6902      	ldr	r2, [r0, #16]
 800d194:	690c      	ldr	r4, [r1, #16]
 800d196:	1b12      	subs	r2, r2, r4
 800d198:	d10e      	bne.n	800d1b8 <__mcmp+0x28>
 800d19a:	f100 0314 	add.w	r3, r0, #20
 800d19e:	3114      	adds	r1, #20
 800d1a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d1a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d1a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d1ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d1b0:	42a5      	cmp	r5, r4
 800d1b2:	d003      	beq.n	800d1bc <__mcmp+0x2c>
 800d1b4:	d305      	bcc.n	800d1c2 <__mcmp+0x32>
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	bd30      	pop	{r4, r5, pc}
 800d1bc:	4283      	cmp	r3, r0
 800d1be:	d3f3      	bcc.n	800d1a8 <__mcmp+0x18>
 800d1c0:	e7fa      	b.n	800d1b8 <__mcmp+0x28>
 800d1c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1c6:	e7f7      	b.n	800d1b8 <__mcmp+0x28>

0800d1c8 <__mdiff>:
 800d1c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1cc:	460c      	mov	r4, r1
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4690      	mov	r8, r2
 800d1d6:	f7ff ffdb 	bl	800d190 <__mcmp>
 800d1da:	1e05      	subs	r5, r0, #0
 800d1dc:	d110      	bne.n	800d200 <__mdiff+0x38>
 800d1de:	4629      	mov	r1, r5
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f7ff fd09 	bl	800cbf8 <_Balloc>
 800d1e6:	b930      	cbnz	r0, 800d1f6 <__mdiff+0x2e>
 800d1e8:	4b3a      	ldr	r3, [pc, #232]	; (800d2d4 <__mdiff+0x10c>)
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	f240 2132 	movw	r1, #562	; 0x232
 800d1f0:	4839      	ldr	r0, [pc, #228]	; (800d2d8 <__mdiff+0x110>)
 800d1f2:	f000 fc4f 	bl	800da94 <__assert_func>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d200:	bfa4      	itt	ge
 800d202:	4643      	movge	r3, r8
 800d204:	46a0      	movge	r8, r4
 800d206:	4630      	mov	r0, r6
 800d208:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d20c:	bfa6      	itte	ge
 800d20e:	461c      	movge	r4, r3
 800d210:	2500      	movge	r5, #0
 800d212:	2501      	movlt	r5, #1
 800d214:	f7ff fcf0 	bl	800cbf8 <_Balloc>
 800d218:	b920      	cbnz	r0, 800d224 <__mdiff+0x5c>
 800d21a:	4b2e      	ldr	r3, [pc, #184]	; (800d2d4 <__mdiff+0x10c>)
 800d21c:	4602      	mov	r2, r0
 800d21e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d222:	e7e5      	b.n	800d1f0 <__mdiff+0x28>
 800d224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d228:	6926      	ldr	r6, [r4, #16]
 800d22a:	60c5      	str	r5, [r0, #12]
 800d22c:	f104 0914 	add.w	r9, r4, #20
 800d230:	f108 0514 	add.w	r5, r8, #20
 800d234:	f100 0e14 	add.w	lr, r0, #20
 800d238:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d23c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d240:	f108 0210 	add.w	r2, r8, #16
 800d244:	46f2      	mov	sl, lr
 800d246:	2100      	movs	r1, #0
 800d248:	f859 3b04 	ldr.w	r3, [r9], #4
 800d24c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d250:	fa1f f883 	uxth.w	r8, r3
 800d254:	fa11 f18b 	uxtah	r1, r1, fp
 800d258:	0c1b      	lsrs	r3, r3, #16
 800d25a:	eba1 0808 	sub.w	r8, r1, r8
 800d25e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d262:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d266:	fa1f f888 	uxth.w	r8, r8
 800d26a:	1419      	asrs	r1, r3, #16
 800d26c:	454e      	cmp	r6, r9
 800d26e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d272:	f84a 3b04 	str.w	r3, [sl], #4
 800d276:	d8e7      	bhi.n	800d248 <__mdiff+0x80>
 800d278:	1b33      	subs	r3, r6, r4
 800d27a:	3b15      	subs	r3, #21
 800d27c:	f023 0303 	bic.w	r3, r3, #3
 800d280:	3304      	adds	r3, #4
 800d282:	3415      	adds	r4, #21
 800d284:	42a6      	cmp	r6, r4
 800d286:	bf38      	it	cc
 800d288:	2304      	movcc	r3, #4
 800d28a:	441d      	add	r5, r3
 800d28c:	4473      	add	r3, lr
 800d28e:	469e      	mov	lr, r3
 800d290:	462e      	mov	r6, r5
 800d292:	4566      	cmp	r6, ip
 800d294:	d30e      	bcc.n	800d2b4 <__mdiff+0xec>
 800d296:	f10c 0203 	add.w	r2, ip, #3
 800d29a:	1b52      	subs	r2, r2, r5
 800d29c:	f022 0203 	bic.w	r2, r2, #3
 800d2a0:	3d03      	subs	r5, #3
 800d2a2:	45ac      	cmp	ip, r5
 800d2a4:	bf38      	it	cc
 800d2a6:	2200      	movcc	r2, #0
 800d2a8:	441a      	add	r2, r3
 800d2aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d2ae:	b17b      	cbz	r3, 800d2d0 <__mdiff+0x108>
 800d2b0:	6107      	str	r7, [r0, #16]
 800d2b2:	e7a3      	b.n	800d1fc <__mdiff+0x34>
 800d2b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d2b8:	fa11 f288 	uxtah	r2, r1, r8
 800d2bc:	1414      	asrs	r4, r2, #16
 800d2be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d2c2:	b292      	uxth	r2, r2
 800d2c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d2c8:	f84e 2b04 	str.w	r2, [lr], #4
 800d2cc:	1421      	asrs	r1, r4, #16
 800d2ce:	e7e0      	b.n	800d292 <__mdiff+0xca>
 800d2d0:	3f01      	subs	r7, #1
 800d2d2:	e7ea      	b.n	800d2aa <__mdiff+0xe2>
 800d2d4:	0800e8d0 	.word	0x0800e8d0
 800d2d8:	0800e95c 	.word	0x0800e95c

0800d2dc <__ulp>:
 800d2dc:	b082      	sub	sp, #8
 800d2de:	ed8d 0b00 	vstr	d0, [sp]
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	4912      	ldr	r1, [pc, #72]	; (800d330 <__ulp+0x54>)
 800d2e6:	4019      	ands	r1, r3
 800d2e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	dd05      	ble.n	800d2fc <__ulp+0x20>
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	ec43 2b10 	vmov	d0, r2, r3
 800d2f8:	b002      	add	sp, #8
 800d2fa:	4770      	bx	lr
 800d2fc:	4249      	negs	r1, r1
 800d2fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d302:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d306:	f04f 0200 	mov.w	r2, #0
 800d30a:	f04f 0300 	mov.w	r3, #0
 800d30e:	da04      	bge.n	800d31a <__ulp+0x3e>
 800d310:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d314:	fa41 f300 	asr.w	r3, r1, r0
 800d318:	e7ec      	b.n	800d2f4 <__ulp+0x18>
 800d31a:	f1a0 0114 	sub.w	r1, r0, #20
 800d31e:	291e      	cmp	r1, #30
 800d320:	bfda      	itte	le
 800d322:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d326:	fa20 f101 	lsrle.w	r1, r0, r1
 800d32a:	2101      	movgt	r1, #1
 800d32c:	460a      	mov	r2, r1
 800d32e:	e7e1      	b.n	800d2f4 <__ulp+0x18>
 800d330:	7ff00000 	.word	0x7ff00000

0800d334 <__b2d>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	6905      	ldr	r5, [r0, #16]
 800d338:	f100 0714 	add.w	r7, r0, #20
 800d33c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d340:	1f2e      	subs	r6, r5, #4
 800d342:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d346:	4620      	mov	r0, r4
 800d348:	f7ff fd48 	bl	800cddc <__hi0bits>
 800d34c:	f1c0 0320 	rsb	r3, r0, #32
 800d350:	280a      	cmp	r0, #10
 800d352:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d3d0 <__b2d+0x9c>
 800d356:	600b      	str	r3, [r1, #0]
 800d358:	dc14      	bgt.n	800d384 <__b2d+0x50>
 800d35a:	f1c0 0e0b 	rsb	lr, r0, #11
 800d35e:	fa24 f10e 	lsr.w	r1, r4, lr
 800d362:	42b7      	cmp	r7, r6
 800d364:	ea41 030c 	orr.w	r3, r1, ip
 800d368:	bf34      	ite	cc
 800d36a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d36e:	2100      	movcs	r1, #0
 800d370:	3015      	adds	r0, #21
 800d372:	fa04 f000 	lsl.w	r0, r4, r0
 800d376:	fa21 f10e 	lsr.w	r1, r1, lr
 800d37a:	ea40 0201 	orr.w	r2, r0, r1
 800d37e:	ec43 2b10 	vmov	d0, r2, r3
 800d382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d384:	42b7      	cmp	r7, r6
 800d386:	bf3a      	itte	cc
 800d388:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d38c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d390:	2100      	movcs	r1, #0
 800d392:	380b      	subs	r0, #11
 800d394:	d017      	beq.n	800d3c6 <__b2d+0x92>
 800d396:	f1c0 0c20 	rsb	ip, r0, #32
 800d39a:	fa04 f500 	lsl.w	r5, r4, r0
 800d39e:	42be      	cmp	r6, r7
 800d3a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800d3a4:	ea45 0504 	orr.w	r5, r5, r4
 800d3a8:	bf8c      	ite	hi
 800d3aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d3ae:	2400      	movls	r4, #0
 800d3b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d3b4:	fa01 f000 	lsl.w	r0, r1, r0
 800d3b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800d3bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3c0:	ea40 0204 	orr.w	r2, r0, r4
 800d3c4:	e7db      	b.n	800d37e <__b2d+0x4a>
 800d3c6:	ea44 030c 	orr.w	r3, r4, ip
 800d3ca:	460a      	mov	r2, r1
 800d3cc:	e7d7      	b.n	800d37e <__b2d+0x4a>
 800d3ce:	bf00      	nop
 800d3d0:	3ff00000 	.word	0x3ff00000

0800d3d4 <__d2b>:
 800d3d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3d8:	4689      	mov	r9, r1
 800d3da:	2101      	movs	r1, #1
 800d3dc:	ec57 6b10 	vmov	r6, r7, d0
 800d3e0:	4690      	mov	r8, r2
 800d3e2:	f7ff fc09 	bl	800cbf8 <_Balloc>
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	b930      	cbnz	r0, 800d3f8 <__d2b+0x24>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	4b25      	ldr	r3, [pc, #148]	; (800d484 <__d2b+0xb0>)
 800d3ee:	4826      	ldr	r0, [pc, #152]	; (800d488 <__d2b+0xb4>)
 800d3f0:	f240 310a 	movw	r1, #778	; 0x30a
 800d3f4:	f000 fb4e 	bl	800da94 <__assert_func>
 800d3f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d3fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d400:	bb35      	cbnz	r5, 800d450 <__d2b+0x7c>
 800d402:	2e00      	cmp	r6, #0
 800d404:	9301      	str	r3, [sp, #4]
 800d406:	d028      	beq.n	800d45a <__d2b+0x86>
 800d408:	4668      	mov	r0, sp
 800d40a:	9600      	str	r6, [sp, #0]
 800d40c:	f7ff fd06 	bl	800ce1c <__lo0bits>
 800d410:	9900      	ldr	r1, [sp, #0]
 800d412:	b300      	cbz	r0, 800d456 <__d2b+0x82>
 800d414:	9a01      	ldr	r2, [sp, #4]
 800d416:	f1c0 0320 	rsb	r3, r0, #32
 800d41a:	fa02 f303 	lsl.w	r3, r2, r3
 800d41e:	430b      	orrs	r3, r1
 800d420:	40c2      	lsrs	r2, r0
 800d422:	6163      	str	r3, [r4, #20]
 800d424:	9201      	str	r2, [sp, #4]
 800d426:	9b01      	ldr	r3, [sp, #4]
 800d428:	61a3      	str	r3, [r4, #24]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	bf14      	ite	ne
 800d42e:	2202      	movne	r2, #2
 800d430:	2201      	moveq	r2, #1
 800d432:	6122      	str	r2, [r4, #16]
 800d434:	b1d5      	cbz	r5, 800d46c <__d2b+0x98>
 800d436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d43a:	4405      	add	r5, r0
 800d43c:	f8c9 5000 	str.w	r5, [r9]
 800d440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d444:	f8c8 0000 	str.w	r0, [r8]
 800d448:	4620      	mov	r0, r4
 800d44a:	b003      	add	sp, #12
 800d44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d454:	e7d5      	b.n	800d402 <__d2b+0x2e>
 800d456:	6161      	str	r1, [r4, #20]
 800d458:	e7e5      	b.n	800d426 <__d2b+0x52>
 800d45a:	a801      	add	r0, sp, #4
 800d45c:	f7ff fcde 	bl	800ce1c <__lo0bits>
 800d460:	9b01      	ldr	r3, [sp, #4]
 800d462:	6163      	str	r3, [r4, #20]
 800d464:	2201      	movs	r2, #1
 800d466:	6122      	str	r2, [r4, #16]
 800d468:	3020      	adds	r0, #32
 800d46a:	e7e3      	b.n	800d434 <__d2b+0x60>
 800d46c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d474:	f8c9 0000 	str.w	r0, [r9]
 800d478:	6918      	ldr	r0, [r3, #16]
 800d47a:	f7ff fcaf 	bl	800cddc <__hi0bits>
 800d47e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d482:	e7df      	b.n	800d444 <__d2b+0x70>
 800d484:	0800e8d0 	.word	0x0800e8d0
 800d488:	0800e95c 	.word	0x0800e95c

0800d48c <__ratio>:
 800d48c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	4688      	mov	r8, r1
 800d492:	4669      	mov	r1, sp
 800d494:	4681      	mov	r9, r0
 800d496:	f7ff ff4d 	bl	800d334 <__b2d>
 800d49a:	a901      	add	r1, sp, #4
 800d49c:	4640      	mov	r0, r8
 800d49e:	ec55 4b10 	vmov	r4, r5, d0
 800d4a2:	f7ff ff47 	bl	800d334 <__b2d>
 800d4a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d4ae:	eba3 0c02 	sub.w	ip, r3, r2
 800d4b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4b6:	1a9b      	subs	r3, r3, r2
 800d4b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d4bc:	ec51 0b10 	vmov	r0, r1, d0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	bfd6      	itet	le
 800d4c4:	460a      	movle	r2, r1
 800d4c6:	462a      	movgt	r2, r5
 800d4c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d4cc:	468b      	mov	fp, r1
 800d4ce:	462f      	mov	r7, r5
 800d4d0:	bfd4      	ite	le
 800d4d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d4d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d4da:	4620      	mov	r0, r4
 800d4dc:	ee10 2a10 	vmov	r2, s0
 800d4e0:	465b      	mov	r3, fp
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	f7f3 f9c2 	bl	800086c <__aeabi_ddiv>
 800d4e8:	ec41 0b10 	vmov	d0, r0, r1
 800d4ec:	b003      	add	sp, #12
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4f2 <__copybits>:
 800d4f2:	3901      	subs	r1, #1
 800d4f4:	b570      	push	{r4, r5, r6, lr}
 800d4f6:	1149      	asrs	r1, r1, #5
 800d4f8:	6914      	ldr	r4, [r2, #16]
 800d4fa:	3101      	adds	r1, #1
 800d4fc:	f102 0314 	add.w	r3, r2, #20
 800d500:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d504:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d508:	1f05      	subs	r5, r0, #4
 800d50a:	42a3      	cmp	r3, r4
 800d50c:	d30c      	bcc.n	800d528 <__copybits+0x36>
 800d50e:	1aa3      	subs	r3, r4, r2
 800d510:	3b11      	subs	r3, #17
 800d512:	f023 0303 	bic.w	r3, r3, #3
 800d516:	3211      	adds	r2, #17
 800d518:	42a2      	cmp	r2, r4
 800d51a:	bf88      	it	hi
 800d51c:	2300      	movhi	r3, #0
 800d51e:	4418      	add	r0, r3
 800d520:	2300      	movs	r3, #0
 800d522:	4288      	cmp	r0, r1
 800d524:	d305      	bcc.n	800d532 <__copybits+0x40>
 800d526:	bd70      	pop	{r4, r5, r6, pc}
 800d528:	f853 6b04 	ldr.w	r6, [r3], #4
 800d52c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d530:	e7eb      	b.n	800d50a <__copybits+0x18>
 800d532:	f840 3b04 	str.w	r3, [r0], #4
 800d536:	e7f4      	b.n	800d522 <__copybits+0x30>

0800d538 <__any_on>:
 800d538:	f100 0214 	add.w	r2, r0, #20
 800d53c:	6900      	ldr	r0, [r0, #16]
 800d53e:	114b      	asrs	r3, r1, #5
 800d540:	4298      	cmp	r0, r3
 800d542:	b510      	push	{r4, lr}
 800d544:	db11      	blt.n	800d56a <__any_on+0x32>
 800d546:	dd0a      	ble.n	800d55e <__any_on+0x26>
 800d548:	f011 011f 	ands.w	r1, r1, #31
 800d54c:	d007      	beq.n	800d55e <__any_on+0x26>
 800d54e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d552:	fa24 f001 	lsr.w	r0, r4, r1
 800d556:	fa00 f101 	lsl.w	r1, r0, r1
 800d55a:	428c      	cmp	r4, r1
 800d55c:	d10b      	bne.n	800d576 <__any_on+0x3e>
 800d55e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d562:	4293      	cmp	r3, r2
 800d564:	d803      	bhi.n	800d56e <__any_on+0x36>
 800d566:	2000      	movs	r0, #0
 800d568:	bd10      	pop	{r4, pc}
 800d56a:	4603      	mov	r3, r0
 800d56c:	e7f7      	b.n	800d55e <__any_on+0x26>
 800d56e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d572:	2900      	cmp	r1, #0
 800d574:	d0f5      	beq.n	800d562 <__any_on+0x2a>
 800d576:	2001      	movs	r0, #1
 800d578:	e7f6      	b.n	800d568 <__any_on+0x30>

0800d57a <_calloc_r>:
 800d57a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d57c:	fba1 2402 	umull	r2, r4, r1, r2
 800d580:	b94c      	cbnz	r4, 800d596 <_calloc_r+0x1c>
 800d582:	4611      	mov	r1, r2
 800d584:	9201      	str	r2, [sp, #4]
 800d586:	f000 f87b 	bl	800d680 <_malloc_r>
 800d58a:	9a01      	ldr	r2, [sp, #4]
 800d58c:	4605      	mov	r5, r0
 800d58e:	b930      	cbnz	r0, 800d59e <_calloc_r+0x24>
 800d590:	4628      	mov	r0, r5
 800d592:	b003      	add	sp, #12
 800d594:	bd30      	pop	{r4, r5, pc}
 800d596:	220c      	movs	r2, #12
 800d598:	6002      	str	r2, [r0, #0]
 800d59a:	2500      	movs	r5, #0
 800d59c:	e7f8      	b.n	800d590 <_calloc_r+0x16>
 800d59e:	4621      	mov	r1, r4
 800d5a0:	f7fc fbac 	bl	8009cfc <memset>
 800d5a4:	e7f4      	b.n	800d590 <_calloc_r+0x16>
	...

0800d5a8 <_free_r>:
 800d5a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5aa:	2900      	cmp	r1, #0
 800d5ac:	d044      	beq.n	800d638 <_free_r+0x90>
 800d5ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5b2:	9001      	str	r0, [sp, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d5ba:	bfb8      	it	lt
 800d5bc:	18e4      	addlt	r4, r4, r3
 800d5be:	f000 fab3 	bl	800db28 <__malloc_lock>
 800d5c2:	4a1e      	ldr	r2, [pc, #120]	; (800d63c <_free_r+0x94>)
 800d5c4:	9801      	ldr	r0, [sp, #4]
 800d5c6:	6813      	ldr	r3, [r2, #0]
 800d5c8:	b933      	cbnz	r3, 800d5d8 <_free_r+0x30>
 800d5ca:	6063      	str	r3, [r4, #4]
 800d5cc:	6014      	str	r4, [r2, #0]
 800d5ce:	b003      	add	sp, #12
 800d5d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5d4:	f000 baae 	b.w	800db34 <__malloc_unlock>
 800d5d8:	42a3      	cmp	r3, r4
 800d5da:	d908      	bls.n	800d5ee <_free_r+0x46>
 800d5dc:	6825      	ldr	r5, [r4, #0]
 800d5de:	1961      	adds	r1, r4, r5
 800d5e0:	428b      	cmp	r3, r1
 800d5e2:	bf01      	itttt	eq
 800d5e4:	6819      	ldreq	r1, [r3, #0]
 800d5e6:	685b      	ldreq	r3, [r3, #4]
 800d5e8:	1949      	addeq	r1, r1, r5
 800d5ea:	6021      	streq	r1, [r4, #0]
 800d5ec:	e7ed      	b.n	800d5ca <_free_r+0x22>
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	b10b      	cbz	r3, 800d5f8 <_free_r+0x50>
 800d5f4:	42a3      	cmp	r3, r4
 800d5f6:	d9fa      	bls.n	800d5ee <_free_r+0x46>
 800d5f8:	6811      	ldr	r1, [r2, #0]
 800d5fa:	1855      	adds	r5, r2, r1
 800d5fc:	42a5      	cmp	r5, r4
 800d5fe:	d10b      	bne.n	800d618 <_free_r+0x70>
 800d600:	6824      	ldr	r4, [r4, #0]
 800d602:	4421      	add	r1, r4
 800d604:	1854      	adds	r4, r2, r1
 800d606:	42a3      	cmp	r3, r4
 800d608:	6011      	str	r1, [r2, #0]
 800d60a:	d1e0      	bne.n	800d5ce <_free_r+0x26>
 800d60c:	681c      	ldr	r4, [r3, #0]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	6053      	str	r3, [r2, #4]
 800d612:	4421      	add	r1, r4
 800d614:	6011      	str	r1, [r2, #0]
 800d616:	e7da      	b.n	800d5ce <_free_r+0x26>
 800d618:	d902      	bls.n	800d620 <_free_r+0x78>
 800d61a:	230c      	movs	r3, #12
 800d61c:	6003      	str	r3, [r0, #0]
 800d61e:	e7d6      	b.n	800d5ce <_free_r+0x26>
 800d620:	6825      	ldr	r5, [r4, #0]
 800d622:	1961      	adds	r1, r4, r5
 800d624:	428b      	cmp	r3, r1
 800d626:	bf04      	itt	eq
 800d628:	6819      	ldreq	r1, [r3, #0]
 800d62a:	685b      	ldreq	r3, [r3, #4]
 800d62c:	6063      	str	r3, [r4, #4]
 800d62e:	bf04      	itt	eq
 800d630:	1949      	addeq	r1, r1, r5
 800d632:	6021      	streq	r1, [r4, #0]
 800d634:	6054      	str	r4, [r2, #4]
 800d636:	e7ca      	b.n	800d5ce <_free_r+0x26>
 800d638:	b003      	add	sp, #12
 800d63a:	bd30      	pop	{r4, r5, pc}
 800d63c:	2000470c 	.word	0x2000470c

0800d640 <sbrk_aligned>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	4e0e      	ldr	r6, [pc, #56]	; (800d67c <sbrk_aligned+0x3c>)
 800d644:	460c      	mov	r4, r1
 800d646:	6831      	ldr	r1, [r6, #0]
 800d648:	4605      	mov	r5, r0
 800d64a:	b911      	cbnz	r1, 800d652 <sbrk_aligned+0x12>
 800d64c:	f000 f9f0 	bl	800da30 <_sbrk_r>
 800d650:	6030      	str	r0, [r6, #0]
 800d652:	4621      	mov	r1, r4
 800d654:	4628      	mov	r0, r5
 800d656:	f000 f9eb 	bl	800da30 <_sbrk_r>
 800d65a:	1c43      	adds	r3, r0, #1
 800d65c:	d00a      	beq.n	800d674 <sbrk_aligned+0x34>
 800d65e:	1cc4      	adds	r4, r0, #3
 800d660:	f024 0403 	bic.w	r4, r4, #3
 800d664:	42a0      	cmp	r0, r4
 800d666:	d007      	beq.n	800d678 <sbrk_aligned+0x38>
 800d668:	1a21      	subs	r1, r4, r0
 800d66a:	4628      	mov	r0, r5
 800d66c:	f000 f9e0 	bl	800da30 <_sbrk_r>
 800d670:	3001      	adds	r0, #1
 800d672:	d101      	bne.n	800d678 <sbrk_aligned+0x38>
 800d674:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d678:	4620      	mov	r0, r4
 800d67a:	bd70      	pop	{r4, r5, r6, pc}
 800d67c:	20004710 	.word	0x20004710

0800d680 <_malloc_r>:
 800d680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d684:	1ccd      	adds	r5, r1, #3
 800d686:	f025 0503 	bic.w	r5, r5, #3
 800d68a:	3508      	adds	r5, #8
 800d68c:	2d0c      	cmp	r5, #12
 800d68e:	bf38      	it	cc
 800d690:	250c      	movcc	r5, #12
 800d692:	2d00      	cmp	r5, #0
 800d694:	4607      	mov	r7, r0
 800d696:	db01      	blt.n	800d69c <_malloc_r+0x1c>
 800d698:	42a9      	cmp	r1, r5
 800d69a:	d905      	bls.n	800d6a8 <_malloc_r+0x28>
 800d69c:	230c      	movs	r3, #12
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	2600      	movs	r6, #0
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a8:	4e2e      	ldr	r6, [pc, #184]	; (800d764 <_malloc_r+0xe4>)
 800d6aa:	f000 fa3d 	bl	800db28 <__malloc_lock>
 800d6ae:	6833      	ldr	r3, [r6, #0]
 800d6b0:	461c      	mov	r4, r3
 800d6b2:	bb34      	cbnz	r4, 800d702 <_malloc_r+0x82>
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	f7ff ffc2 	bl	800d640 <sbrk_aligned>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	4604      	mov	r4, r0
 800d6c0:	d14d      	bne.n	800d75e <_malloc_r+0xde>
 800d6c2:	6834      	ldr	r4, [r6, #0]
 800d6c4:	4626      	mov	r6, r4
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	d140      	bne.n	800d74c <_malloc_r+0xcc>
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	eb04 0803 	add.w	r8, r4, r3
 800d6d4:	f000 f9ac 	bl	800da30 <_sbrk_r>
 800d6d8:	4580      	cmp	r8, r0
 800d6da:	d13a      	bne.n	800d752 <_malloc_r+0xd2>
 800d6dc:	6821      	ldr	r1, [r4, #0]
 800d6de:	3503      	adds	r5, #3
 800d6e0:	1a6d      	subs	r5, r5, r1
 800d6e2:	f025 0503 	bic.w	r5, r5, #3
 800d6e6:	3508      	adds	r5, #8
 800d6e8:	2d0c      	cmp	r5, #12
 800d6ea:	bf38      	it	cc
 800d6ec:	250c      	movcc	r5, #12
 800d6ee:	4629      	mov	r1, r5
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7ff ffa5 	bl	800d640 <sbrk_aligned>
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	d02b      	beq.n	800d752 <_malloc_r+0xd2>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	442b      	add	r3, r5
 800d6fe:	6023      	str	r3, [r4, #0]
 800d700:	e00e      	b.n	800d720 <_malloc_r+0xa0>
 800d702:	6822      	ldr	r2, [r4, #0]
 800d704:	1b52      	subs	r2, r2, r5
 800d706:	d41e      	bmi.n	800d746 <_malloc_r+0xc6>
 800d708:	2a0b      	cmp	r2, #11
 800d70a:	d916      	bls.n	800d73a <_malloc_r+0xba>
 800d70c:	1961      	adds	r1, r4, r5
 800d70e:	42a3      	cmp	r3, r4
 800d710:	6025      	str	r5, [r4, #0]
 800d712:	bf18      	it	ne
 800d714:	6059      	strne	r1, [r3, #4]
 800d716:	6863      	ldr	r3, [r4, #4]
 800d718:	bf08      	it	eq
 800d71a:	6031      	streq	r1, [r6, #0]
 800d71c:	5162      	str	r2, [r4, r5]
 800d71e:	604b      	str	r3, [r1, #4]
 800d720:	4638      	mov	r0, r7
 800d722:	f104 060b 	add.w	r6, r4, #11
 800d726:	f000 fa05 	bl	800db34 <__malloc_unlock>
 800d72a:	f026 0607 	bic.w	r6, r6, #7
 800d72e:	1d23      	adds	r3, r4, #4
 800d730:	1af2      	subs	r2, r6, r3
 800d732:	d0b6      	beq.n	800d6a2 <_malloc_r+0x22>
 800d734:	1b9b      	subs	r3, r3, r6
 800d736:	50a3      	str	r3, [r4, r2]
 800d738:	e7b3      	b.n	800d6a2 <_malloc_r+0x22>
 800d73a:	6862      	ldr	r2, [r4, #4]
 800d73c:	42a3      	cmp	r3, r4
 800d73e:	bf0c      	ite	eq
 800d740:	6032      	streq	r2, [r6, #0]
 800d742:	605a      	strne	r2, [r3, #4]
 800d744:	e7ec      	b.n	800d720 <_malloc_r+0xa0>
 800d746:	4623      	mov	r3, r4
 800d748:	6864      	ldr	r4, [r4, #4]
 800d74a:	e7b2      	b.n	800d6b2 <_malloc_r+0x32>
 800d74c:	4634      	mov	r4, r6
 800d74e:	6876      	ldr	r6, [r6, #4]
 800d750:	e7b9      	b.n	800d6c6 <_malloc_r+0x46>
 800d752:	230c      	movs	r3, #12
 800d754:	603b      	str	r3, [r7, #0]
 800d756:	4638      	mov	r0, r7
 800d758:	f000 f9ec 	bl	800db34 <__malloc_unlock>
 800d75c:	e7a1      	b.n	800d6a2 <_malloc_r+0x22>
 800d75e:	6025      	str	r5, [r4, #0]
 800d760:	e7de      	b.n	800d720 <_malloc_r+0xa0>
 800d762:	bf00      	nop
 800d764:	2000470c 	.word	0x2000470c

0800d768 <__ssputs_r>:
 800d768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d76c:	688e      	ldr	r6, [r1, #8]
 800d76e:	429e      	cmp	r6, r3
 800d770:	4682      	mov	sl, r0
 800d772:	460c      	mov	r4, r1
 800d774:	4690      	mov	r8, r2
 800d776:	461f      	mov	r7, r3
 800d778:	d838      	bhi.n	800d7ec <__ssputs_r+0x84>
 800d77a:	898a      	ldrh	r2, [r1, #12]
 800d77c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d780:	d032      	beq.n	800d7e8 <__ssputs_r+0x80>
 800d782:	6825      	ldr	r5, [r4, #0]
 800d784:	6909      	ldr	r1, [r1, #16]
 800d786:	eba5 0901 	sub.w	r9, r5, r1
 800d78a:	6965      	ldr	r5, [r4, #20]
 800d78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d794:	3301      	adds	r3, #1
 800d796:	444b      	add	r3, r9
 800d798:	106d      	asrs	r5, r5, #1
 800d79a:	429d      	cmp	r5, r3
 800d79c:	bf38      	it	cc
 800d79e:	461d      	movcc	r5, r3
 800d7a0:	0553      	lsls	r3, r2, #21
 800d7a2:	d531      	bpl.n	800d808 <__ssputs_r+0xa0>
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	f7ff ff6b 	bl	800d680 <_malloc_r>
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	b950      	cbnz	r0, 800d7c4 <__ssputs_r+0x5c>
 800d7ae:	230c      	movs	r3, #12
 800d7b0:	f8ca 3000 	str.w	r3, [sl]
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ba:	81a3      	strh	r3, [r4, #12]
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c4:	6921      	ldr	r1, [r4, #16]
 800d7c6:	464a      	mov	r2, r9
 800d7c8:	f7fc fa8a 	bl	8009ce0 <memcpy>
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7d6:	81a3      	strh	r3, [r4, #12]
 800d7d8:	6126      	str	r6, [r4, #16]
 800d7da:	6165      	str	r5, [r4, #20]
 800d7dc:	444e      	add	r6, r9
 800d7de:	eba5 0509 	sub.w	r5, r5, r9
 800d7e2:	6026      	str	r6, [r4, #0]
 800d7e4:	60a5      	str	r5, [r4, #8]
 800d7e6:	463e      	mov	r6, r7
 800d7e8:	42be      	cmp	r6, r7
 800d7ea:	d900      	bls.n	800d7ee <__ssputs_r+0x86>
 800d7ec:	463e      	mov	r6, r7
 800d7ee:	6820      	ldr	r0, [r4, #0]
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	4641      	mov	r1, r8
 800d7f4:	f000 f97e 	bl	800daf4 <memmove>
 800d7f8:	68a3      	ldr	r3, [r4, #8]
 800d7fa:	1b9b      	subs	r3, r3, r6
 800d7fc:	60a3      	str	r3, [r4, #8]
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	4433      	add	r3, r6
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	2000      	movs	r0, #0
 800d806:	e7db      	b.n	800d7c0 <__ssputs_r+0x58>
 800d808:	462a      	mov	r2, r5
 800d80a:	f000 f999 	bl	800db40 <_realloc_r>
 800d80e:	4606      	mov	r6, r0
 800d810:	2800      	cmp	r0, #0
 800d812:	d1e1      	bne.n	800d7d8 <__ssputs_r+0x70>
 800d814:	6921      	ldr	r1, [r4, #16]
 800d816:	4650      	mov	r0, sl
 800d818:	f7ff fec6 	bl	800d5a8 <_free_r>
 800d81c:	e7c7      	b.n	800d7ae <__ssputs_r+0x46>
	...

0800d820 <_svfiprintf_r>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4698      	mov	r8, r3
 800d826:	898b      	ldrh	r3, [r1, #12]
 800d828:	061b      	lsls	r3, r3, #24
 800d82a:	b09d      	sub	sp, #116	; 0x74
 800d82c:	4607      	mov	r7, r0
 800d82e:	460d      	mov	r5, r1
 800d830:	4614      	mov	r4, r2
 800d832:	d50e      	bpl.n	800d852 <_svfiprintf_r+0x32>
 800d834:	690b      	ldr	r3, [r1, #16]
 800d836:	b963      	cbnz	r3, 800d852 <_svfiprintf_r+0x32>
 800d838:	2140      	movs	r1, #64	; 0x40
 800d83a:	f7ff ff21 	bl	800d680 <_malloc_r>
 800d83e:	6028      	str	r0, [r5, #0]
 800d840:	6128      	str	r0, [r5, #16]
 800d842:	b920      	cbnz	r0, 800d84e <_svfiprintf_r+0x2e>
 800d844:	230c      	movs	r3, #12
 800d846:	603b      	str	r3, [r7, #0]
 800d848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d84c:	e0d1      	b.n	800d9f2 <_svfiprintf_r+0x1d2>
 800d84e:	2340      	movs	r3, #64	; 0x40
 800d850:	616b      	str	r3, [r5, #20]
 800d852:	2300      	movs	r3, #0
 800d854:	9309      	str	r3, [sp, #36]	; 0x24
 800d856:	2320      	movs	r3, #32
 800d858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d85c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d860:	2330      	movs	r3, #48	; 0x30
 800d862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800da0c <_svfiprintf_r+0x1ec>
 800d866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d86a:	f04f 0901 	mov.w	r9, #1
 800d86e:	4623      	mov	r3, r4
 800d870:	469a      	mov	sl, r3
 800d872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d876:	b10a      	cbz	r2, 800d87c <_svfiprintf_r+0x5c>
 800d878:	2a25      	cmp	r2, #37	; 0x25
 800d87a:	d1f9      	bne.n	800d870 <_svfiprintf_r+0x50>
 800d87c:	ebba 0b04 	subs.w	fp, sl, r4
 800d880:	d00b      	beq.n	800d89a <_svfiprintf_r+0x7a>
 800d882:	465b      	mov	r3, fp
 800d884:	4622      	mov	r2, r4
 800d886:	4629      	mov	r1, r5
 800d888:	4638      	mov	r0, r7
 800d88a:	f7ff ff6d 	bl	800d768 <__ssputs_r>
 800d88e:	3001      	adds	r0, #1
 800d890:	f000 80aa 	beq.w	800d9e8 <_svfiprintf_r+0x1c8>
 800d894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d896:	445a      	add	r2, fp
 800d898:	9209      	str	r2, [sp, #36]	; 0x24
 800d89a:	f89a 3000 	ldrb.w	r3, [sl]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 80a2 	beq.w	800d9e8 <_svfiprintf_r+0x1c8>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8ae:	f10a 0a01 	add.w	sl, sl, #1
 800d8b2:	9304      	str	r3, [sp, #16]
 800d8b4:	9307      	str	r3, [sp, #28]
 800d8b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8ba:	931a      	str	r3, [sp, #104]	; 0x68
 800d8bc:	4654      	mov	r4, sl
 800d8be:	2205      	movs	r2, #5
 800d8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c4:	4851      	ldr	r0, [pc, #324]	; (800da0c <_svfiprintf_r+0x1ec>)
 800d8c6:	f7f2 fc9b 	bl	8000200 <memchr>
 800d8ca:	9a04      	ldr	r2, [sp, #16]
 800d8cc:	b9d8      	cbnz	r0, 800d906 <_svfiprintf_r+0xe6>
 800d8ce:	06d0      	lsls	r0, r2, #27
 800d8d0:	bf44      	itt	mi
 800d8d2:	2320      	movmi	r3, #32
 800d8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8d8:	0711      	lsls	r1, r2, #28
 800d8da:	bf44      	itt	mi
 800d8dc:	232b      	movmi	r3, #43	; 0x2b
 800d8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e8:	d015      	beq.n	800d916 <_svfiprintf_r+0xf6>
 800d8ea:	9a07      	ldr	r2, [sp, #28]
 800d8ec:	4654      	mov	r4, sl
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	f04f 0c0a 	mov.w	ip, #10
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8fa:	3b30      	subs	r3, #48	; 0x30
 800d8fc:	2b09      	cmp	r3, #9
 800d8fe:	d94e      	bls.n	800d99e <_svfiprintf_r+0x17e>
 800d900:	b1b0      	cbz	r0, 800d930 <_svfiprintf_r+0x110>
 800d902:	9207      	str	r2, [sp, #28]
 800d904:	e014      	b.n	800d930 <_svfiprintf_r+0x110>
 800d906:	eba0 0308 	sub.w	r3, r0, r8
 800d90a:	fa09 f303 	lsl.w	r3, r9, r3
 800d90e:	4313      	orrs	r3, r2
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	46a2      	mov	sl, r4
 800d914:	e7d2      	b.n	800d8bc <_svfiprintf_r+0x9c>
 800d916:	9b03      	ldr	r3, [sp, #12]
 800d918:	1d19      	adds	r1, r3, #4
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	9103      	str	r1, [sp, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	bfbb      	ittet	lt
 800d922:	425b      	neglt	r3, r3
 800d924:	f042 0202 	orrlt.w	r2, r2, #2
 800d928:	9307      	strge	r3, [sp, #28]
 800d92a:	9307      	strlt	r3, [sp, #28]
 800d92c:	bfb8      	it	lt
 800d92e:	9204      	strlt	r2, [sp, #16]
 800d930:	7823      	ldrb	r3, [r4, #0]
 800d932:	2b2e      	cmp	r3, #46	; 0x2e
 800d934:	d10c      	bne.n	800d950 <_svfiprintf_r+0x130>
 800d936:	7863      	ldrb	r3, [r4, #1]
 800d938:	2b2a      	cmp	r3, #42	; 0x2a
 800d93a:	d135      	bne.n	800d9a8 <_svfiprintf_r+0x188>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	1d1a      	adds	r2, r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	9203      	str	r2, [sp, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	bfb8      	it	lt
 800d948:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d94c:	3402      	adds	r4, #2
 800d94e:	9305      	str	r3, [sp, #20]
 800d950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800da1c <_svfiprintf_r+0x1fc>
 800d954:	7821      	ldrb	r1, [r4, #0]
 800d956:	2203      	movs	r2, #3
 800d958:	4650      	mov	r0, sl
 800d95a:	f7f2 fc51 	bl	8000200 <memchr>
 800d95e:	b140      	cbz	r0, 800d972 <_svfiprintf_r+0x152>
 800d960:	2340      	movs	r3, #64	; 0x40
 800d962:	eba0 000a 	sub.w	r0, r0, sl
 800d966:	fa03 f000 	lsl.w	r0, r3, r0
 800d96a:	9b04      	ldr	r3, [sp, #16]
 800d96c:	4303      	orrs	r3, r0
 800d96e:	3401      	adds	r4, #1
 800d970:	9304      	str	r3, [sp, #16]
 800d972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d976:	4826      	ldr	r0, [pc, #152]	; (800da10 <_svfiprintf_r+0x1f0>)
 800d978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d97c:	2206      	movs	r2, #6
 800d97e:	f7f2 fc3f 	bl	8000200 <memchr>
 800d982:	2800      	cmp	r0, #0
 800d984:	d038      	beq.n	800d9f8 <_svfiprintf_r+0x1d8>
 800d986:	4b23      	ldr	r3, [pc, #140]	; (800da14 <_svfiprintf_r+0x1f4>)
 800d988:	bb1b      	cbnz	r3, 800d9d2 <_svfiprintf_r+0x1b2>
 800d98a:	9b03      	ldr	r3, [sp, #12]
 800d98c:	3307      	adds	r3, #7
 800d98e:	f023 0307 	bic.w	r3, r3, #7
 800d992:	3308      	adds	r3, #8
 800d994:	9303      	str	r3, [sp, #12]
 800d996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d998:	4433      	add	r3, r6
 800d99a:	9309      	str	r3, [sp, #36]	; 0x24
 800d99c:	e767      	b.n	800d86e <_svfiprintf_r+0x4e>
 800d99e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	2001      	movs	r0, #1
 800d9a6:	e7a5      	b.n	800d8f4 <_svfiprintf_r+0xd4>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	3401      	adds	r4, #1
 800d9ac:	9305      	str	r3, [sp, #20]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f04f 0c0a 	mov.w	ip, #10
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9ba:	3a30      	subs	r2, #48	; 0x30
 800d9bc:	2a09      	cmp	r2, #9
 800d9be:	d903      	bls.n	800d9c8 <_svfiprintf_r+0x1a8>
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d0c5      	beq.n	800d950 <_svfiprintf_r+0x130>
 800d9c4:	9105      	str	r1, [sp, #20]
 800d9c6:	e7c3      	b.n	800d950 <_svfiprintf_r+0x130>
 800d9c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e7f0      	b.n	800d9b4 <_svfiprintf_r+0x194>
 800d9d2:	ab03      	add	r3, sp, #12
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	462a      	mov	r2, r5
 800d9d8:	4b0f      	ldr	r3, [pc, #60]	; (800da18 <_svfiprintf_r+0x1f8>)
 800d9da:	a904      	add	r1, sp, #16
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7fc fa35 	bl	8009e4c <_printf_float>
 800d9e2:	1c42      	adds	r2, r0, #1
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	d1d6      	bne.n	800d996 <_svfiprintf_r+0x176>
 800d9e8:	89ab      	ldrh	r3, [r5, #12]
 800d9ea:	065b      	lsls	r3, r3, #25
 800d9ec:	f53f af2c 	bmi.w	800d848 <_svfiprintf_r+0x28>
 800d9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9f2:	b01d      	add	sp, #116	; 0x74
 800d9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f8:	ab03      	add	r3, sp, #12
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	462a      	mov	r2, r5
 800d9fe:	4b06      	ldr	r3, [pc, #24]	; (800da18 <_svfiprintf_r+0x1f8>)
 800da00:	a904      	add	r1, sp, #16
 800da02:	4638      	mov	r0, r7
 800da04:	f7fc fcc6 	bl	800a394 <_printf_i>
 800da08:	e7eb      	b.n	800d9e2 <_svfiprintf_r+0x1c2>
 800da0a:	bf00      	nop
 800da0c:	0800eab4 	.word	0x0800eab4
 800da10:	0800eabe 	.word	0x0800eabe
 800da14:	08009e4d 	.word	0x08009e4d
 800da18:	0800d769 	.word	0x0800d769
 800da1c:	0800eaba 	.word	0x0800eaba

0800da20 <nan>:
 800da20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da28 <nan+0x8>
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	00000000 	.word	0x00000000
 800da2c:	7ff80000 	.word	0x7ff80000

0800da30 <_sbrk_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	4d06      	ldr	r5, [pc, #24]	; (800da4c <_sbrk_r+0x1c>)
 800da34:	2300      	movs	r3, #0
 800da36:	4604      	mov	r4, r0
 800da38:	4608      	mov	r0, r1
 800da3a:	602b      	str	r3, [r5, #0]
 800da3c:	f7f5 fc46 	bl	80032cc <_sbrk>
 800da40:	1c43      	adds	r3, r0, #1
 800da42:	d102      	bne.n	800da4a <_sbrk_r+0x1a>
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	b103      	cbz	r3, 800da4a <_sbrk_r+0x1a>
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	bd38      	pop	{r3, r4, r5, pc}
 800da4c:	20004714 	.word	0x20004714

0800da50 <strncmp>:
 800da50:	b510      	push	{r4, lr}
 800da52:	b17a      	cbz	r2, 800da74 <strncmp+0x24>
 800da54:	4603      	mov	r3, r0
 800da56:	3901      	subs	r1, #1
 800da58:	1884      	adds	r4, r0, r2
 800da5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da62:	4290      	cmp	r0, r2
 800da64:	d101      	bne.n	800da6a <strncmp+0x1a>
 800da66:	42a3      	cmp	r3, r4
 800da68:	d101      	bne.n	800da6e <strncmp+0x1e>
 800da6a:	1a80      	subs	r0, r0, r2
 800da6c:	bd10      	pop	{r4, pc}
 800da6e:	2800      	cmp	r0, #0
 800da70:	d1f3      	bne.n	800da5a <strncmp+0xa>
 800da72:	e7fa      	b.n	800da6a <strncmp+0x1a>
 800da74:	4610      	mov	r0, r2
 800da76:	e7f9      	b.n	800da6c <strncmp+0x1c>

0800da78 <__ascii_wctomb>:
 800da78:	b149      	cbz	r1, 800da8e <__ascii_wctomb+0x16>
 800da7a:	2aff      	cmp	r2, #255	; 0xff
 800da7c:	bf85      	ittet	hi
 800da7e:	238a      	movhi	r3, #138	; 0x8a
 800da80:	6003      	strhi	r3, [r0, #0]
 800da82:	700a      	strbls	r2, [r1, #0]
 800da84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800da88:	bf98      	it	ls
 800da8a:	2001      	movls	r0, #1
 800da8c:	4770      	bx	lr
 800da8e:	4608      	mov	r0, r1
 800da90:	4770      	bx	lr
	...

0800da94 <__assert_func>:
 800da94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da96:	4614      	mov	r4, r2
 800da98:	461a      	mov	r2, r3
 800da9a:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <__assert_func+0x2c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4605      	mov	r5, r0
 800daa0:	68d8      	ldr	r0, [r3, #12]
 800daa2:	b14c      	cbz	r4, 800dab8 <__assert_func+0x24>
 800daa4:	4b07      	ldr	r3, [pc, #28]	; (800dac4 <__assert_func+0x30>)
 800daa6:	9100      	str	r1, [sp, #0]
 800daa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800daac:	4906      	ldr	r1, [pc, #24]	; (800dac8 <__assert_func+0x34>)
 800daae:	462b      	mov	r3, r5
 800dab0:	f000 f80e 	bl	800dad0 <fiprintf>
 800dab4:	f000 fa8c 	bl	800dfd0 <abort>
 800dab8:	4b04      	ldr	r3, [pc, #16]	; (800dacc <__assert_func+0x38>)
 800daba:	461c      	mov	r4, r3
 800dabc:	e7f3      	b.n	800daa6 <__assert_func+0x12>
 800dabe:	bf00      	nop
 800dac0:	200000b8 	.word	0x200000b8
 800dac4:	0800eac5 	.word	0x0800eac5
 800dac8:	0800ead2 	.word	0x0800ead2
 800dacc:	0800eb00 	.word	0x0800eb00

0800dad0 <fiprintf>:
 800dad0:	b40e      	push	{r1, r2, r3}
 800dad2:	b503      	push	{r0, r1, lr}
 800dad4:	4601      	mov	r1, r0
 800dad6:	ab03      	add	r3, sp, #12
 800dad8:	4805      	ldr	r0, [pc, #20]	; (800daf0 <fiprintf+0x20>)
 800dada:	f853 2b04 	ldr.w	r2, [r3], #4
 800dade:	6800      	ldr	r0, [r0, #0]
 800dae0:	9301      	str	r3, [sp, #4]
 800dae2:	f000 f885 	bl	800dbf0 <_vfiprintf_r>
 800dae6:	b002      	add	sp, #8
 800dae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800daec:	b003      	add	sp, #12
 800daee:	4770      	bx	lr
 800daf0:	200000b8 	.word	0x200000b8

0800daf4 <memmove>:
 800daf4:	4288      	cmp	r0, r1
 800daf6:	b510      	push	{r4, lr}
 800daf8:	eb01 0402 	add.w	r4, r1, r2
 800dafc:	d902      	bls.n	800db04 <memmove+0x10>
 800dafe:	4284      	cmp	r4, r0
 800db00:	4623      	mov	r3, r4
 800db02:	d807      	bhi.n	800db14 <memmove+0x20>
 800db04:	1e43      	subs	r3, r0, #1
 800db06:	42a1      	cmp	r1, r4
 800db08:	d008      	beq.n	800db1c <memmove+0x28>
 800db0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db12:	e7f8      	b.n	800db06 <memmove+0x12>
 800db14:	4402      	add	r2, r0
 800db16:	4601      	mov	r1, r0
 800db18:	428a      	cmp	r2, r1
 800db1a:	d100      	bne.n	800db1e <memmove+0x2a>
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db26:	e7f7      	b.n	800db18 <memmove+0x24>

0800db28 <__malloc_lock>:
 800db28:	4801      	ldr	r0, [pc, #4]	; (800db30 <__malloc_lock+0x8>)
 800db2a:	f000 bc11 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800db2e:	bf00      	nop
 800db30:	20004718 	.word	0x20004718

0800db34 <__malloc_unlock>:
 800db34:	4801      	ldr	r0, [pc, #4]	; (800db3c <__malloc_unlock+0x8>)
 800db36:	f000 bc0c 	b.w	800e352 <__retarget_lock_release_recursive>
 800db3a:	bf00      	nop
 800db3c:	20004718 	.word	0x20004718

0800db40 <_realloc_r>:
 800db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db44:	4680      	mov	r8, r0
 800db46:	4614      	mov	r4, r2
 800db48:	460e      	mov	r6, r1
 800db4a:	b921      	cbnz	r1, 800db56 <_realloc_r+0x16>
 800db4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	4611      	mov	r1, r2
 800db52:	f7ff bd95 	b.w	800d680 <_malloc_r>
 800db56:	b92a      	cbnz	r2, 800db64 <_realloc_r+0x24>
 800db58:	f7ff fd26 	bl	800d5a8 <_free_r>
 800db5c:	4625      	mov	r5, r4
 800db5e:	4628      	mov	r0, r5
 800db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db64:	f000 fc5c 	bl	800e420 <_malloc_usable_size_r>
 800db68:	4284      	cmp	r4, r0
 800db6a:	4607      	mov	r7, r0
 800db6c:	d802      	bhi.n	800db74 <_realloc_r+0x34>
 800db6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db72:	d812      	bhi.n	800db9a <_realloc_r+0x5a>
 800db74:	4621      	mov	r1, r4
 800db76:	4640      	mov	r0, r8
 800db78:	f7ff fd82 	bl	800d680 <_malloc_r>
 800db7c:	4605      	mov	r5, r0
 800db7e:	2800      	cmp	r0, #0
 800db80:	d0ed      	beq.n	800db5e <_realloc_r+0x1e>
 800db82:	42bc      	cmp	r4, r7
 800db84:	4622      	mov	r2, r4
 800db86:	4631      	mov	r1, r6
 800db88:	bf28      	it	cs
 800db8a:	463a      	movcs	r2, r7
 800db8c:	f7fc f8a8 	bl	8009ce0 <memcpy>
 800db90:	4631      	mov	r1, r6
 800db92:	4640      	mov	r0, r8
 800db94:	f7ff fd08 	bl	800d5a8 <_free_r>
 800db98:	e7e1      	b.n	800db5e <_realloc_r+0x1e>
 800db9a:	4635      	mov	r5, r6
 800db9c:	e7df      	b.n	800db5e <_realloc_r+0x1e>

0800db9e <__sfputc_r>:
 800db9e:	6893      	ldr	r3, [r2, #8]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	b410      	push	{r4}
 800dba6:	6093      	str	r3, [r2, #8]
 800dba8:	da08      	bge.n	800dbbc <__sfputc_r+0x1e>
 800dbaa:	6994      	ldr	r4, [r2, #24]
 800dbac:	42a3      	cmp	r3, r4
 800dbae:	db01      	blt.n	800dbb4 <__sfputc_r+0x16>
 800dbb0:	290a      	cmp	r1, #10
 800dbb2:	d103      	bne.n	800dbbc <__sfputc_r+0x1e>
 800dbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbb8:	f000 b94a 	b.w	800de50 <__swbuf_r>
 800dbbc:	6813      	ldr	r3, [r2, #0]
 800dbbe:	1c58      	adds	r0, r3, #1
 800dbc0:	6010      	str	r0, [r2, #0]
 800dbc2:	7019      	strb	r1, [r3, #0]
 800dbc4:	4608      	mov	r0, r1
 800dbc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <__sfputs_r>:
 800dbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbce:	4606      	mov	r6, r0
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	4614      	mov	r4, r2
 800dbd4:	18d5      	adds	r5, r2, r3
 800dbd6:	42ac      	cmp	r4, r5
 800dbd8:	d101      	bne.n	800dbde <__sfputs_r+0x12>
 800dbda:	2000      	movs	r0, #0
 800dbdc:	e007      	b.n	800dbee <__sfputs_r+0x22>
 800dbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f7ff ffda 	bl	800db9e <__sfputc_r>
 800dbea:	1c43      	adds	r3, r0, #1
 800dbec:	d1f3      	bne.n	800dbd6 <__sfputs_r+0xa>
 800dbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dbf0 <_vfiprintf_r>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	460d      	mov	r5, r1
 800dbf6:	b09d      	sub	sp, #116	; 0x74
 800dbf8:	4614      	mov	r4, r2
 800dbfa:	4698      	mov	r8, r3
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	b118      	cbz	r0, 800dc08 <_vfiprintf_r+0x18>
 800dc00:	6983      	ldr	r3, [r0, #24]
 800dc02:	b90b      	cbnz	r3, 800dc08 <_vfiprintf_r+0x18>
 800dc04:	f000 fb06 	bl	800e214 <__sinit>
 800dc08:	4b89      	ldr	r3, [pc, #548]	; (800de30 <_vfiprintf_r+0x240>)
 800dc0a:	429d      	cmp	r5, r3
 800dc0c:	d11b      	bne.n	800dc46 <_vfiprintf_r+0x56>
 800dc0e:	6875      	ldr	r5, [r6, #4]
 800dc10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc12:	07d9      	lsls	r1, r3, #31
 800dc14:	d405      	bmi.n	800dc22 <_vfiprintf_r+0x32>
 800dc16:	89ab      	ldrh	r3, [r5, #12]
 800dc18:	059a      	lsls	r2, r3, #22
 800dc1a:	d402      	bmi.n	800dc22 <_vfiprintf_r+0x32>
 800dc1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc1e:	f000 fb97 	bl	800e350 <__retarget_lock_acquire_recursive>
 800dc22:	89ab      	ldrh	r3, [r5, #12]
 800dc24:	071b      	lsls	r3, r3, #28
 800dc26:	d501      	bpl.n	800dc2c <_vfiprintf_r+0x3c>
 800dc28:	692b      	ldr	r3, [r5, #16]
 800dc2a:	b9eb      	cbnz	r3, 800dc68 <_vfiprintf_r+0x78>
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f000 f960 	bl	800def4 <__swsetup_r>
 800dc34:	b1c0      	cbz	r0, 800dc68 <_vfiprintf_r+0x78>
 800dc36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc38:	07dc      	lsls	r4, r3, #31
 800dc3a:	d50e      	bpl.n	800dc5a <_vfiprintf_r+0x6a>
 800dc3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc40:	b01d      	add	sp, #116	; 0x74
 800dc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc46:	4b7b      	ldr	r3, [pc, #492]	; (800de34 <_vfiprintf_r+0x244>)
 800dc48:	429d      	cmp	r5, r3
 800dc4a:	d101      	bne.n	800dc50 <_vfiprintf_r+0x60>
 800dc4c:	68b5      	ldr	r5, [r6, #8]
 800dc4e:	e7df      	b.n	800dc10 <_vfiprintf_r+0x20>
 800dc50:	4b79      	ldr	r3, [pc, #484]	; (800de38 <_vfiprintf_r+0x248>)
 800dc52:	429d      	cmp	r5, r3
 800dc54:	bf08      	it	eq
 800dc56:	68f5      	ldreq	r5, [r6, #12]
 800dc58:	e7da      	b.n	800dc10 <_vfiprintf_r+0x20>
 800dc5a:	89ab      	ldrh	r3, [r5, #12]
 800dc5c:	0598      	lsls	r0, r3, #22
 800dc5e:	d4ed      	bmi.n	800dc3c <_vfiprintf_r+0x4c>
 800dc60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc62:	f000 fb76 	bl	800e352 <__retarget_lock_release_recursive>
 800dc66:	e7e9      	b.n	800dc3c <_vfiprintf_r+0x4c>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc6c:	2320      	movs	r3, #32
 800dc6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc72:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc76:	2330      	movs	r3, #48	; 0x30
 800dc78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800de3c <_vfiprintf_r+0x24c>
 800dc7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc80:	f04f 0901 	mov.w	r9, #1
 800dc84:	4623      	mov	r3, r4
 800dc86:	469a      	mov	sl, r3
 800dc88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc8c:	b10a      	cbz	r2, 800dc92 <_vfiprintf_r+0xa2>
 800dc8e:	2a25      	cmp	r2, #37	; 0x25
 800dc90:	d1f9      	bne.n	800dc86 <_vfiprintf_r+0x96>
 800dc92:	ebba 0b04 	subs.w	fp, sl, r4
 800dc96:	d00b      	beq.n	800dcb0 <_vfiprintf_r+0xc0>
 800dc98:	465b      	mov	r3, fp
 800dc9a:	4622      	mov	r2, r4
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7ff ff94 	bl	800dbcc <__sfputs_r>
 800dca4:	3001      	adds	r0, #1
 800dca6:	f000 80aa 	beq.w	800ddfe <_vfiprintf_r+0x20e>
 800dcaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcac:	445a      	add	r2, fp
 800dcae:	9209      	str	r2, [sp, #36]	; 0x24
 800dcb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 80a2 	beq.w	800ddfe <_vfiprintf_r+0x20e>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcc4:	f10a 0a01 	add.w	sl, sl, #1
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcd0:	931a      	str	r3, [sp, #104]	; 0x68
 800dcd2:	4654      	mov	r4, sl
 800dcd4:	2205      	movs	r2, #5
 800dcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcda:	4858      	ldr	r0, [pc, #352]	; (800de3c <_vfiprintf_r+0x24c>)
 800dcdc:	f7f2 fa90 	bl	8000200 <memchr>
 800dce0:	9a04      	ldr	r2, [sp, #16]
 800dce2:	b9d8      	cbnz	r0, 800dd1c <_vfiprintf_r+0x12c>
 800dce4:	06d1      	lsls	r1, r2, #27
 800dce6:	bf44      	itt	mi
 800dce8:	2320      	movmi	r3, #32
 800dcea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcee:	0713      	lsls	r3, r2, #28
 800dcf0:	bf44      	itt	mi
 800dcf2:	232b      	movmi	r3, #43	; 0x2b
 800dcf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcfc:	2b2a      	cmp	r3, #42	; 0x2a
 800dcfe:	d015      	beq.n	800dd2c <_vfiprintf_r+0x13c>
 800dd00:	9a07      	ldr	r2, [sp, #28]
 800dd02:	4654      	mov	r4, sl
 800dd04:	2000      	movs	r0, #0
 800dd06:	f04f 0c0a 	mov.w	ip, #10
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd10:	3b30      	subs	r3, #48	; 0x30
 800dd12:	2b09      	cmp	r3, #9
 800dd14:	d94e      	bls.n	800ddb4 <_vfiprintf_r+0x1c4>
 800dd16:	b1b0      	cbz	r0, 800dd46 <_vfiprintf_r+0x156>
 800dd18:	9207      	str	r2, [sp, #28]
 800dd1a:	e014      	b.n	800dd46 <_vfiprintf_r+0x156>
 800dd1c:	eba0 0308 	sub.w	r3, r0, r8
 800dd20:	fa09 f303 	lsl.w	r3, r9, r3
 800dd24:	4313      	orrs	r3, r2
 800dd26:	9304      	str	r3, [sp, #16]
 800dd28:	46a2      	mov	sl, r4
 800dd2a:	e7d2      	b.n	800dcd2 <_vfiprintf_r+0xe2>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	1d19      	adds	r1, r3, #4
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	9103      	str	r1, [sp, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfbb      	ittet	lt
 800dd38:	425b      	neglt	r3, r3
 800dd3a:	f042 0202 	orrlt.w	r2, r2, #2
 800dd3e:	9307      	strge	r3, [sp, #28]
 800dd40:	9307      	strlt	r3, [sp, #28]
 800dd42:	bfb8      	it	lt
 800dd44:	9204      	strlt	r2, [sp, #16]
 800dd46:	7823      	ldrb	r3, [r4, #0]
 800dd48:	2b2e      	cmp	r3, #46	; 0x2e
 800dd4a:	d10c      	bne.n	800dd66 <_vfiprintf_r+0x176>
 800dd4c:	7863      	ldrb	r3, [r4, #1]
 800dd4e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd50:	d135      	bne.n	800ddbe <_vfiprintf_r+0x1ce>
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	1d1a      	adds	r2, r3, #4
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	9203      	str	r2, [sp, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	bfb8      	it	lt
 800dd5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd62:	3402      	adds	r4, #2
 800dd64:	9305      	str	r3, [sp, #20]
 800dd66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800de4c <_vfiprintf_r+0x25c>
 800dd6a:	7821      	ldrb	r1, [r4, #0]
 800dd6c:	2203      	movs	r2, #3
 800dd6e:	4650      	mov	r0, sl
 800dd70:	f7f2 fa46 	bl	8000200 <memchr>
 800dd74:	b140      	cbz	r0, 800dd88 <_vfiprintf_r+0x198>
 800dd76:	2340      	movs	r3, #64	; 0x40
 800dd78:	eba0 000a 	sub.w	r0, r0, sl
 800dd7c:	fa03 f000 	lsl.w	r0, r3, r0
 800dd80:	9b04      	ldr	r3, [sp, #16]
 800dd82:	4303      	orrs	r3, r0
 800dd84:	3401      	adds	r4, #1
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8c:	482c      	ldr	r0, [pc, #176]	; (800de40 <_vfiprintf_r+0x250>)
 800dd8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd92:	2206      	movs	r2, #6
 800dd94:	f7f2 fa34 	bl	8000200 <memchr>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d03f      	beq.n	800de1c <_vfiprintf_r+0x22c>
 800dd9c:	4b29      	ldr	r3, [pc, #164]	; (800de44 <_vfiprintf_r+0x254>)
 800dd9e:	bb1b      	cbnz	r3, 800dde8 <_vfiprintf_r+0x1f8>
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	3307      	adds	r3, #7
 800dda4:	f023 0307 	bic.w	r3, r3, #7
 800dda8:	3308      	adds	r3, #8
 800ddaa:	9303      	str	r3, [sp, #12]
 800ddac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddae:	443b      	add	r3, r7
 800ddb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ddb2:	e767      	b.n	800dc84 <_vfiprintf_r+0x94>
 800ddb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddb8:	460c      	mov	r4, r1
 800ddba:	2001      	movs	r0, #1
 800ddbc:	e7a5      	b.n	800dd0a <_vfiprintf_r+0x11a>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	3401      	adds	r4, #1
 800ddc2:	9305      	str	r3, [sp, #20]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f04f 0c0a 	mov.w	ip, #10
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddd0:	3a30      	subs	r2, #48	; 0x30
 800ddd2:	2a09      	cmp	r2, #9
 800ddd4:	d903      	bls.n	800ddde <_vfiprintf_r+0x1ee>
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0c5      	beq.n	800dd66 <_vfiprintf_r+0x176>
 800ddda:	9105      	str	r1, [sp, #20]
 800dddc:	e7c3      	b.n	800dd66 <_vfiprintf_r+0x176>
 800ddde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dde2:	4604      	mov	r4, r0
 800dde4:	2301      	movs	r3, #1
 800dde6:	e7f0      	b.n	800ddca <_vfiprintf_r+0x1da>
 800dde8:	ab03      	add	r3, sp, #12
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	462a      	mov	r2, r5
 800ddee:	4b16      	ldr	r3, [pc, #88]	; (800de48 <_vfiprintf_r+0x258>)
 800ddf0:	a904      	add	r1, sp, #16
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7fc f82a 	bl	8009e4c <_printf_float>
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	1c78      	adds	r0, r7, #1
 800ddfc:	d1d6      	bne.n	800ddac <_vfiprintf_r+0x1bc>
 800ddfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de00:	07d9      	lsls	r1, r3, #31
 800de02:	d405      	bmi.n	800de10 <_vfiprintf_r+0x220>
 800de04:	89ab      	ldrh	r3, [r5, #12]
 800de06:	059a      	lsls	r2, r3, #22
 800de08:	d402      	bmi.n	800de10 <_vfiprintf_r+0x220>
 800de0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de0c:	f000 faa1 	bl	800e352 <__retarget_lock_release_recursive>
 800de10:	89ab      	ldrh	r3, [r5, #12]
 800de12:	065b      	lsls	r3, r3, #25
 800de14:	f53f af12 	bmi.w	800dc3c <_vfiprintf_r+0x4c>
 800de18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de1a:	e711      	b.n	800dc40 <_vfiprintf_r+0x50>
 800de1c:	ab03      	add	r3, sp, #12
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	462a      	mov	r2, r5
 800de22:	4b09      	ldr	r3, [pc, #36]	; (800de48 <_vfiprintf_r+0x258>)
 800de24:	a904      	add	r1, sp, #16
 800de26:	4630      	mov	r0, r6
 800de28:	f7fc fab4 	bl	800a394 <_printf_i>
 800de2c:	e7e4      	b.n	800ddf8 <_vfiprintf_r+0x208>
 800de2e:	bf00      	nop
 800de30:	0800eb24 	.word	0x0800eb24
 800de34:	0800eb44 	.word	0x0800eb44
 800de38:	0800eb04 	.word	0x0800eb04
 800de3c:	0800eab4 	.word	0x0800eab4
 800de40:	0800eabe 	.word	0x0800eabe
 800de44:	08009e4d 	.word	0x08009e4d
 800de48:	0800dbcd 	.word	0x0800dbcd
 800de4c:	0800eaba 	.word	0x0800eaba

0800de50 <__swbuf_r>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	460e      	mov	r6, r1
 800de54:	4614      	mov	r4, r2
 800de56:	4605      	mov	r5, r0
 800de58:	b118      	cbz	r0, 800de62 <__swbuf_r+0x12>
 800de5a:	6983      	ldr	r3, [r0, #24]
 800de5c:	b90b      	cbnz	r3, 800de62 <__swbuf_r+0x12>
 800de5e:	f000 f9d9 	bl	800e214 <__sinit>
 800de62:	4b21      	ldr	r3, [pc, #132]	; (800dee8 <__swbuf_r+0x98>)
 800de64:	429c      	cmp	r4, r3
 800de66:	d12b      	bne.n	800dec0 <__swbuf_r+0x70>
 800de68:	686c      	ldr	r4, [r5, #4]
 800de6a:	69a3      	ldr	r3, [r4, #24]
 800de6c:	60a3      	str	r3, [r4, #8]
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	071a      	lsls	r2, r3, #28
 800de72:	d52f      	bpl.n	800ded4 <__swbuf_r+0x84>
 800de74:	6923      	ldr	r3, [r4, #16]
 800de76:	b36b      	cbz	r3, 800ded4 <__swbuf_r+0x84>
 800de78:	6923      	ldr	r3, [r4, #16]
 800de7a:	6820      	ldr	r0, [r4, #0]
 800de7c:	1ac0      	subs	r0, r0, r3
 800de7e:	6963      	ldr	r3, [r4, #20]
 800de80:	b2f6      	uxtb	r6, r6
 800de82:	4283      	cmp	r3, r0
 800de84:	4637      	mov	r7, r6
 800de86:	dc04      	bgt.n	800de92 <__swbuf_r+0x42>
 800de88:	4621      	mov	r1, r4
 800de8a:	4628      	mov	r0, r5
 800de8c:	f000 f92e 	bl	800e0ec <_fflush_r>
 800de90:	bb30      	cbnz	r0, 800dee0 <__swbuf_r+0x90>
 800de92:	68a3      	ldr	r3, [r4, #8]
 800de94:	3b01      	subs	r3, #1
 800de96:	60a3      	str	r3, [r4, #8]
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	1c5a      	adds	r2, r3, #1
 800de9c:	6022      	str	r2, [r4, #0]
 800de9e:	701e      	strb	r6, [r3, #0]
 800dea0:	6963      	ldr	r3, [r4, #20]
 800dea2:	3001      	adds	r0, #1
 800dea4:	4283      	cmp	r3, r0
 800dea6:	d004      	beq.n	800deb2 <__swbuf_r+0x62>
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	07db      	lsls	r3, r3, #31
 800deac:	d506      	bpl.n	800debc <__swbuf_r+0x6c>
 800deae:	2e0a      	cmp	r6, #10
 800deb0:	d104      	bne.n	800debc <__swbuf_r+0x6c>
 800deb2:	4621      	mov	r1, r4
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 f919 	bl	800e0ec <_fflush_r>
 800deba:	b988      	cbnz	r0, 800dee0 <__swbuf_r+0x90>
 800debc:	4638      	mov	r0, r7
 800debe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec0:	4b0a      	ldr	r3, [pc, #40]	; (800deec <__swbuf_r+0x9c>)
 800dec2:	429c      	cmp	r4, r3
 800dec4:	d101      	bne.n	800deca <__swbuf_r+0x7a>
 800dec6:	68ac      	ldr	r4, [r5, #8]
 800dec8:	e7cf      	b.n	800de6a <__swbuf_r+0x1a>
 800deca:	4b09      	ldr	r3, [pc, #36]	; (800def0 <__swbuf_r+0xa0>)
 800decc:	429c      	cmp	r4, r3
 800dece:	bf08      	it	eq
 800ded0:	68ec      	ldreq	r4, [r5, #12]
 800ded2:	e7ca      	b.n	800de6a <__swbuf_r+0x1a>
 800ded4:	4621      	mov	r1, r4
 800ded6:	4628      	mov	r0, r5
 800ded8:	f000 f80c 	bl	800def4 <__swsetup_r>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d0cb      	beq.n	800de78 <__swbuf_r+0x28>
 800dee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dee4:	e7ea      	b.n	800debc <__swbuf_r+0x6c>
 800dee6:	bf00      	nop
 800dee8:	0800eb24 	.word	0x0800eb24
 800deec:	0800eb44 	.word	0x0800eb44
 800def0:	0800eb04 	.word	0x0800eb04

0800def4 <__swsetup_r>:
 800def4:	4b32      	ldr	r3, [pc, #200]	; (800dfc0 <__swsetup_r+0xcc>)
 800def6:	b570      	push	{r4, r5, r6, lr}
 800def8:	681d      	ldr	r5, [r3, #0]
 800defa:	4606      	mov	r6, r0
 800defc:	460c      	mov	r4, r1
 800defe:	b125      	cbz	r5, 800df0a <__swsetup_r+0x16>
 800df00:	69ab      	ldr	r3, [r5, #24]
 800df02:	b913      	cbnz	r3, 800df0a <__swsetup_r+0x16>
 800df04:	4628      	mov	r0, r5
 800df06:	f000 f985 	bl	800e214 <__sinit>
 800df0a:	4b2e      	ldr	r3, [pc, #184]	; (800dfc4 <__swsetup_r+0xd0>)
 800df0c:	429c      	cmp	r4, r3
 800df0e:	d10f      	bne.n	800df30 <__swsetup_r+0x3c>
 800df10:	686c      	ldr	r4, [r5, #4]
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df18:	0719      	lsls	r1, r3, #28
 800df1a:	d42c      	bmi.n	800df76 <__swsetup_r+0x82>
 800df1c:	06dd      	lsls	r5, r3, #27
 800df1e:	d411      	bmi.n	800df44 <__swsetup_r+0x50>
 800df20:	2309      	movs	r3, #9
 800df22:	6033      	str	r3, [r6, #0]
 800df24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df28:	81a3      	strh	r3, [r4, #12]
 800df2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df2e:	e03e      	b.n	800dfae <__swsetup_r+0xba>
 800df30:	4b25      	ldr	r3, [pc, #148]	; (800dfc8 <__swsetup_r+0xd4>)
 800df32:	429c      	cmp	r4, r3
 800df34:	d101      	bne.n	800df3a <__swsetup_r+0x46>
 800df36:	68ac      	ldr	r4, [r5, #8]
 800df38:	e7eb      	b.n	800df12 <__swsetup_r+0x1e>
 800df3a:	4b24      	ldr	r3, [pc, #144]	; (800dfcc <__swsetup_r+0xd8>)
 800df3c:	429c      	cmp	r4, r3
 800df3e:	bf08      	it	eq
 800df40:	68ec      	ldreq	r4, [r5, #12]
 800df42:	e7e6      	b.n	800df12 <__swsetup_r+0x1e>
 800df44:	0758      	lsls	r0, r3, #29
 800df46:	d512      	bpl.n	800df6e <__swsetup_r+0x7a>
 800df48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df4a:	b141      	cbz	r1, 800df5e <__swsetup_r+0x6a>
 800df4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df50:	4299      	cmp	r1, r3
 800df52:	d002      	beq.n	800df5a <__swsetup_r+0x66>
 800df54:	4630      	mov	r0, r6
 800df56:	f7ff fb27 	bl	800d5a8 <_free_r>
 800df5a:	2300      	movs	r3, #0
 800df5c:	6363      	str	r3, [r4, #52]	; 0x34
 800df5e:	89a3      	ldrh	r3, [r4, #12]
 800df60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df64:	81a3      	strh	r3, [r4, #12]
 800df66:	2300      	movs	r3, #0
 800df68:	6063      	str	r3, [r4, #4]
 800df6a:	6923      	ldr	r3, [r4, #16]
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	89a3      	ldrh	r3, [r4, #12]
 800df70:	f043 0308 	orr.w	r3, r3, #8
 800df74:	81a3      	strh	r3, [r4, #12]
 800df76:	6923      	ldr	r3, [r4, #16]
 800df78:	b94b      	cbnz	r3, 800df8e <__swsetup_r+0x9a>
 800df7a:	89a3      	ldrh	r3, [r4, #12]
 800df7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df84:	d003      	beq.n	800df8e <__swsetup_r+0x9a>
 800df86:	4621      	mov	r1, r4
 800df88:	4630      	mov	r0, r6
 800df8a:	f000 fa09 	bl	800e3a0 <__smakebuf_r>
 800df8e:	89a0      	ldrh	r0, [r4, #12]
 800df90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df94:	f010 0301 	ands.w	r3, r0, #1
 800df98:	d00a      	beq.n	800dfb0 <__swsetup_r+0xbc>
 800df9a:	2300      	movs	r3, #0
 800df9c:	60a3      	str	r3, [r4, #8]
 800df9e:	6963      	ldr	r3, [r4, #20]
 800dfa0:	425b      	negs	r3, r3
 800dfa2:	61a3      	str	r3, [r4, #24]
 800dfa4:	6923      	ldr	r3, [r4, #16]
 800dfa6:	b943      	cbnz	r3, 800dfba <__swsetup_r+0xc6>
 800dfa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfac:	d1ba      	bne.n	800df24 <__swsetup_r+0x30>
 800dfae:	bd70      	pop	{r4, r5, r6, pc}
 800dfb0:	0781      	lsls	r1, r0, #30
 800dfb2:	bf58      	it	pl
 800dfb4:	6963      	ldrpl	r3, [r4, #20]
 800dfb6:	60a3      	str	r3, [r4, #8]
 800dfb8:	e7f4      	b.n	800dfa4 <__swsetup_r+0xb0>
 800dfba:	2000      	movs	r0, #0
 800dfbc:	e7f7      	b.n	800dfae <__swsetup_r+0xba>
 800dfbe:	bf00      	nop
 800dfc0:	200000b8 	.word	0x200000b8
 800dfc4:	0800eb24 	.word	0x0800eb24
 800dfc8:	0800eb44 	.word	0x0800eb44
 800dfcc:	0800eb04 	.word	0x0800eb04

0800dfd0 <abort>:
 800dfd0:	b508      	push	{r3, lr}
 800dfd2:	2006      	movs	r0, #6
 800dfd4:	f000 fa54 	bl	800e480 <raise>
 800dfd8:	2001      	movs	r0, #1
 800dfda:	f7f5 f8ff 	bl	80031dc <_exit>
	...

0800dfe0 <__sflush_r>:
 800dfe0:	898a      	ldrh	r2, [r1, #12]
 800dfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	0710      	lsls	r0, r2, #28
 800dfea:	460c      	mov	r4, r1
 800dfec:	d458      	bmi.n	800e0a0 <__sflush_r+0xc0>
 800dfee:	684b      	ldr	r3, [r1, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dc05      	bgt.n	800e000 <__sflush_r+0x20>
 800dff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	dc02      	bgt.n	800e000 <__sflush_r+0x20>
 800dffa:	2000      	movs	r0, #0
 800dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e002:	2e00      	cmp	r6, #0
 800e004:	d0f9      	beq.n	800dffa <__sflush_r+0x1a>
 800e006:	2300      	movs	r3, #0
 800e008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e00c:	682f      	ldr	r7, [r5, #0]
 800e00e:	602b      	str	r3, [r5, #0]
 800e010:	d032      	beq.n	800e078 <__sflush_r+0x98>
 800e012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e014:	89a3      	ldrh	r3, [r4, #12]
 800e016:	075a      	lsls	r2, r3, #29
 800e018:	d505      	bpl.n	800e026 <__sflush_r+0x46>
 800e01a:	6863      	ldr	r3, [r4, #4]
 800e01c:	1ac0      	subs	r0, r0, r3
 800e01e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e020:	b10b      	cbz	r3, 800e026 <__sflush_r+0x46>
 800e022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e024:	1ac0      	subs	r0, r0, r3
 800e026:	2300      	movs	r3, #0
 800e028:	4602      	mov	r2, r0
 800e02a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e02c:	6a21      	ldr	r1, [r4, #32]
 800e02e:	4628      	mov	r0, r5
 800e030:	47b0      	blx	r6
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	d106      	bne.n	800e046 <__sflush_r+0x66>
 800e038:	6829      	ldr	r1, [r5, #0]
 800e03a:	291d      	cmp	r1, #29
 800e03c:	d82c      	bhi.n	800e098 <__sflush_r+0xb8>
 800e03e:	4a2a      	ldr	r2, [pc, #168]	; (800e0e8 <__sflush_r+0x108>)
 800e040:	40ca      	lsrs	r2, r1
 800e042:	07d6      	lsls	r6, r2, #31
 800e044:	d528      	bpl.n	800e098 <__sflush_r+0xb8>
 800e046:	2200      	movs	r2, #0
 800e048:	6062      	str	r2, [r4, #4]
 800e04a:	04d9      	lsls	r1, r3, #19
 800e04c:	6922      	ldr	r2, [r4, #16]
 800e04e:	6022      	str	r2, [r4, #0]
 800e050:	d504      	bpl.n	800e05c <__sflush_r+0x7c>
 800e052:	1c42      	adds	r2, r0, #1
 800e054:	d101      	bne.n	800e05a <__sflush_r+0x7a>
 800e056:	682b      	ldr	r3, [r5, #0]
 800e058:	b903      	cbnz	r3, 800e05c <__sflush_r+0x7c>
 800e05a:	6560      	str	r0, [r4, #84]	; 0x54
 800e05c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e05e:	602f      	str	r7, [r5, #0]
 800e060:	2900      	cmp	r1, #0
 800e062:	d0ca      	beq.n	800dffa <__sflush_r+0x1a>
 800e064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e068:	4299      	cmp	r1, r3
 800e06a:	d002      	beq.n	800e072 <__sflush_r+0x92>
 800e06c:	4628      	mov	r0, r5
 800e06e:	f7ff fa9b 	bl	800d5a8 <_free_r>
 800e072:	2000      	movs	r0, #0
 800e074:	6360      	str	r0, [r4, #52]	; 0x34
 800e076:	e7c1      	b.n	800dffc <__sflush_r+0x1c>
 800e078:	6a21      	ldr	r1, [r4, #32]
 800e07a:	2301      	movs	r3, #1
 800e07c:	4628      	mov	r0, r5
 800e07e:	47b0      	blx	r6
 800e080:	1c41      	adds	r1, r0, #1
 800e082:	d1c7      	bne.n	800e014 <__sflush_r+0x34>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d0c4      	beq.n	800e014 <__sflush_r+0x34>
 800e08a:	2b1d      	cmp	r3, #29
 800e08c:	d001      	beq.n	800e092 <__sflush_r+0xb2>
 800e08e:	2b16      	cmp	r3, #22
 800e090:	d101      	bne.n	800e096 <__sflush_r+0xb6>
 800e092:	602f      	str	r7, [r5, #0]
 800e094:	e7b1      	b.n	800dffa <__sflush_r+0x1a>
 800e096:	89a3      	ldrh	r3, [r4, #12]
 800e098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	e7ad      	b.n	800dffc <__sflush_r+0x1c>
 800e0a0:	690f      	ldr	r7, [r1, #16]
 800e0a2:	2f00      	cmp	r7, #0
 800e0a4:	d0a9      	beq.n	800dffa <__sflush_r+0x1a>
 800e0a6:	0793      	lsls	r3, r2, #30
 800e0a8:	680e      	ldr	r6, [r1, #0]
 800e0aa:	bf08      	it	eq
 800e0ac:	694b      	ldreq	r3, [r1, #20]
 800e0ae:	600f      	str	r7, [r1, #0]
 800e0b0:	bf18      	it	ne
 800e0b2:	2300      	movne	r3, #0
 800e0b4:	eba6 0807 	sub.w	r8, r6, r7
 800e0b8:	608b      	str	r3, [r1, #8]
 800e0ba:	f1b8 0f00 	cmp.w	r8, #0
 800e0be:	dd9c      	ble.n	800dffa <__sflush_r+0x1a>
 800e0c0:	6a21      	ldr	r1, [r4, #32]
 800e0c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0c4:	4643      	mov	r3, r8
 800e0c6:	463a      	mov	r2, r7
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	47b0      	blx	r6
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	dc06      	bgt.n	800e0de <__sflush_r+0xfe>
 800e0d0:	89a3      	ldrh	r3, [r4, #12]
 800e0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0d6:	81a3      	strh	r3, [r4, #12]
 800e0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0dc:	e78e      	b.n	800dffc <__sflush_r+0x1c>
 800e0de:	4407      	add	r7, r0
 800e0e0:	eba8 0800 	sub.w	r8, r8, r0
 800e0e4:	e7e9      	b.n	800e0ba <__sflush_r+0xda>
 800e0e6:	bf00      	nop
 800e0e8:	20400001 	.word	0x20400001

0800e0ec <_fflush_r>:
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	690b      	ldr	r3, [r1, #16]
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	460c      	mov	r4, r1
 800e0f4:	b913      	cbnz	r3, 800e0fc <_fflush_r+0x10>
 800e0f6:	2500      	movs	r5, #0
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	bd38      	pop	{r3, r4, r5, pc}
 800e0fc:	b118      	cbz	r0, 800e106 <_fflush_r+0x1a>
 800e0fe:	6983      	ldr	r3, [r0, #24]
 800e100:	b90b      	cbnz	r3, 800e106 <_fflush_r+0x1a>
 800e102:	f000 f887 	bl	800e214 <__sinit>
 800e106:	4b14      	ldr	r3, [pc, #80]	; (800e158 <_fflush_r+0x6c>)
 800e108:	429c      	cmp	r4, r3
 800e10a:	d11b      	bne.n	800e144 <_fflush_r+0x58>
 800e10c:	686c      	ldr	r4, [r5, #4]
 800e10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d0ef      	beq.n	800e0f6 <_fflush_r+0xa>
 800e116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e118:	07d0      	lsls	r0, r2, #31
 800e11a:	d404      	bmi.n	800e126 <_fflush_r+0x3a>
 800e11c:	0599      	lsls	r1, r3, #22
 800e11e:	d402      	bmi.n	800e126 <_fflush_r+0x3a>
 800e120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e122:	f000 f915 	bl	800e350 <__retarget_lock_acquire_recursive>
 800e126:	4628      	mov	r0, r5
 800e128:	4621      	mov	r1, r4
 800e12a:	f7ff ff59 	bl	800dfe0 <__sflush_r>
 800e12e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e130:	07da      	lsls	r2, r3, #31
 800e132:	4605      	mov	r5, r0
 800e134:	d4e0      	bmi.n	800e0f8 <_fflush_r+0xc>
 800e136:	89a3      	ldrh	r3, [r4, #12]
 800e138:	059b      	lsls	r3, r3, #22
 800e13a:	d4dd      	bmi.n	800e0f8 <_fflush_r+0xc>
 800e13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e13e:	f000 f908 	bl	800e352 <__retarget_lock_release_recursive>
 800e142:	e7d9      	b.n	800e0f8 <_fflush_r+0xc>
 800e144:	4b05      	ldr	r3, [pc, #20]	; (800e15c <_fflush_r+0x70>)
 800e146:	429c      	cmp	r4, r3
 800e148:	d101      	bne.n	800e14e <_fflush_r+0x62>
 800e14a:	68ac      	ldr	r4, [r5, #8]
 800e14c:	e7df      	b.n	800e10e <_fflush_r+0x22>
 800e14e:	4b04      	ldr	r3, [pc, #16]	; (800e160 <_fflush_r+0x74>)
 800e150:	429c      	cmp	r4, r3
 800e152:	bf08      	it	eq
 800e154:	68ec      	ldreq	r4, [r5, #12]
 800e156:	e7da      	b.n	800e10e <_fflush_r+0x22>
 800e158:	0800eb24 	.word	0x0800eb24
 800e15c:	0800eb44 	.word	0x0800eb44
 800e160:	0800eb04 	.word	0x0800eb04

0800e164 <std>:
 800e164:	2300      	movs	r3, #0
 800e166:	b510      	push	{r4, lr}
 800e168:	4604      	mov	r4, r0
 800e16a:	e9c0 3300 	strd	r3, r3, [r0]
 800e16e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e172:	6083      	str	r3, [r0, #8]
 800e174:	8181      	strh	r1, [r0, #12]
 800e176:	6643      	str	r3, [r0, #100]	; 0x64
 800e178:	81c2      	strh	r2, [r0, #14]
 800e17a:	6183      	str	r3, [r0, #24]
 800e17c:	4619      	mov	r1, r3
 800e17e:	2208      	movs	r2, #8
 800e180:	305c      	adds	r0, #92	; 0x5c
 800e182:	f7fb fdbb 	bl	8009cfc <memset>
 800e186:	4b05      	ldr	r3, [pc, #20]	; (800e19c <std+0x38>)
 800e188:	6263      	str	r3, [r4, #36]	; 0x24
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <std+0x3c>)
 800e18c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e18e:	4b05      	ldr	r3, [pc, #20]	; (800e1a4 <std+0x40>)
 800e190:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e192:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <std+0x44>)
 800e194:	6224      	str	r4, [r4, #32]
 800e196:	6323      	str	r3, [r4, #48]	; 0x30
 800e198:	bd10      	pop	{r4, pc}
 800e19a:	bf00      	nop
 800e19c:	0800e4b9 	.word	0x0800e4b9
 800e1a0:	0800e4db 	.word	0x0800e4db
 800e1a4:	0800e513 	.word	0x0800e513
 800e1a8:	0800e537 	.word	0x0800e537

0800e1ac <_cleanup_r>:
 800e1ac:	4901      	ldr	r1, [pc, #4]	; (800e1b4 <_cleanup_r+0x8>)
 800e1ae:	f000 b8af 	b.w	800e310 <_fwalk_reent>
 800e1b2:	bf00      	nop
 800e1b4:	0800e0ed 	.word	0x0800e0ed

0800e1b8 <__sfmoreglue>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	2268      	movs	r2, #104	; 0x68
 800e1bc:	1e4d      	subs	r5, r1, #1
 800e1be:	4355      	muls	r5, r2
 800e1c0:	460e      	mov	r6, r1
 800e1c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1c6:	f7ff fa5b 	bl	800d680 <_malloc_r>
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	b140      	cbz	r0, 800e1e0 <__sfmoreglue+0x28>
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	e9c0 1600 	strd	r1, r6, [r0]
 800e1d4:	300c      	adds	r0, #12
 800e1d6:	60a0      	str	r0, [r4, #8]
 800e1d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1dc:	f7fb fd8e 	bl	8009cfc <memset>
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}

0800e1e4 <__sfp_lock_acquire>:
 800e1e4:	4801      	ldr	r0, [pc, #4]	; (800e1ec <__sfp_lock_acquire+0x8>)
 800e1e6:	f000 b8b3 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800e1ea:	bf00      	nop
 800e1ec:	20004719 	.word	0x20004719

0800e1f0 <__sfp_lock_release>:
 800e1f0:	4801      	ldr	r0, [pc, #4]	; (800e1f8 <__sfp_lock_release+0x8>)
 800e1f2:	f000 b8ae 	b.w	800e352 <__retarget_lock_release_recursive>
 800e1f6:	bf00      	nop
 800e1f8:	20004719 	.word	0x20004719

0800e1fc <__sinit_lock_acquire>:
 800e1fc:	4801      	ldr	r0, [pc, #4]	; (800e204 <__sinit_lock_acquire+0x8>)
 800e1fe:	f000 b8a7 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800e202:	bf00      	nop
 800e204:	2000471a 	.word	0x2000471a

0800e208 <__sinit_lock_release>:
 800e208:	4801      	ldr	r0, [pc, #4]	; (800e210 <__sinit_lock_release+0x8>)
 800e20a:	f000 b8a2 	b.w	800e352 <__retarget_lock_release_recursive>
 800e20e:	bf00      	nop
 800e210:	2000471a 	.word	0x2000471a

0800e214 <__sinit>:
 800e214:	b510      	push	{r4, lr}
 800e216:	4604      	mov	r4, r0
 800e218:	f7ff fff0 	bl	800e1fc <__sinit_lock_acquire>
 800e21c:	69a3      	ldr	r3, [r4, #24]
 800e21e:	b11b      	cbz	r3, 800e228 <__sinit+0x14>
 800e220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e224:	f7ff bff0 	b.w	800e208 <__sinit_lock_release>
 800e228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e22c:	6523      	str	r3, [r4, #80]	; 0x50
 800e22e:	4b13      	ldr	r3, [pc, #76]	; (800e27c <__sinit+0x68>)
 800e230:	4a13      	ldr	r2, [pc, #76]	; (800e280 <__sinit+0x6c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	62a2      	str	r2, [r4, #40]	; 0x28
 800e236:	42a3      	cmp	r3, r4
 800e238:	bf04      	itt	eq
 800e23a:	2301      	moveq	r3, #1
 800e23c:	61a3      	streq	r3, [r4, #24]
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 f820 	bl	800e284 <__sfp>
 800e244:	6060      	str	r0, [r4, #4]
 800e246:	4620      	mov	r0, r4
 800e248:	f000 f81c 	bl	800e284 <__sfp>
 800e24c:	60a0      	str	r0, [r4, #8]
 800e24e:	4620      	mov	r0, r4
 800e250:	f000 f818 	bl	800e284 <__sfp>
 800e254:	2200      	movs	r2, #0
 800e256:	60e0      	str	r0, [r4, #12]
 800e258:	2104      	movs	r1, #4
 800e25a:	6860      	ldr	r0, [r4, #4]
 800e25c:	f7ff ff82 	bl	800e164 <std>
 800e260:	68a0      	ldr	r0, [r4, #8]
 800e262:	2201      	movs	r2, #1
 800e264:	2109      	movs	r1, #9
 800e266:	f7ff ff7d 	bl	800e164 <std>
 800e26a:	68e0      	ldr	r0, [r4, #12]
 800e26c:	2202      	movs	r2, #2
 800e26e:	2112      	movs	r1, #18
 800e270:	f7ff ff78 	bl	800e164 <std>
 800e274:	2301      	movs	r3, #1
 800e276:	61a3      	str	r3, [r4, #24]
 800e278:	e7d2      	b.n	800e220 <__sinit+0xc>
 800e27a:	bf00      	nop
 800e27c:	0800e6c0 	.word	0x0800e6c0
 800e280:	0800e1ad 	.word	0x0800e1ad

0800e284 <__sfp>:
 800e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e286:	4607      	mov	r7, r0
 800e288:	f7ff ffac 	bl	800e1e4 <__sfp_lock_acquire>
 800e28c:	4b1e      	ldr	r3, [pc, #120]	; (800e308 <__sfp+0x84>)
 800e28e:	681e      	ldr	r6, [r3, #0]
 800e290:	69b3      	ldr	r3, [r6, #24]
 800e292:	b913      	cbnz	r3, 800e29a <__sfp+0x16>
 800e294:	4630      	mov	r0, r6
 800e296:	f7ff ffbd 	bl	800e214 <__sinit>
 800e29a:	3648      	adds	r6, #72	; 0x48
 800e29c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	d503      	bpl.n	800e2ac <__sfp+0x28>
 800e2a4:	6833      	ldr	r3, [r6, #0]
 800e2a6:	b30b      	cbz	r3, 800e2ec <__sfp+0x68>
 800e2a8:	6836      	ldr	r6, [r6, #0]
 800e2aa:	e7f7      	b.n	800e29c <__sfp+0x18>
 800e2ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2b0:	b9d5      	cbnz	r5, 800e2e8 <__sfp+0x64>
 800e2b2:	4b16      	ldr	r3, [pc, #88]	; (800e30c <__sfp+0x88>)
 800e2b4:	60e3      	str	r3, [r4, #12]
 800e2b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2ba:	6665      	str	r5, [r4, #100]	; 0x64
 800e2bc:	f000 f847 	bl	800e34e <__retarget_lock_init_recursive>
 800e2c0:	f7ff ff96 	bl	800e1f0 <__sfp_lock_release>
 800e2c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2cc:	6025      	str	r5, [r4, #0]
 800e2ce:	61a5      	str	r5, [r4, #24]
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2d8:	f7fb fd10 	bl	8009cfc <memset>
 800e2dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e8:	3468      	adds	r4, #104	; 0x68
 800e2ea:	e7d9      	b.n	800e2a0 <__sfp+0x1c>
 800e2ec:	2104      	movs	r1, #4
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f7ff ff62 	bl	800e1b8 <__sfmoreglue>
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	6030      	str	r0, [r6, #0]
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d1d5      	bne.n	800e2a8 <__sfp+0x24>
 800e2fc:	f7ff ff78 	bl	800e1f0 <__sfp_lock_release>
 800e300:	230c      	movs	r3, #12
 800e302:	603b      	str	r3, [r7, #0]
 800e304:	e7ee      	b.n	800e2e4 <__sfp+0x60>
 800e306:	bf00      	nop
 800e308:	0800e6c0 	.word	0x0800e6c0
 800e30c:	ffff0001 	.word	0xffff0001

0800e310 <_fwalk_reent>:
 800e310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e314:	4606      	mov	r6, r0
 800e316:	4688      	mov	r8, r1
 800e318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e31c:	2700      	movs	r7, #0
 800e31e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e322:	f1b9 0901 	subs.w	r9, r9, #1
 800e326:	d505      	bpl.n	800e334 <_fwalk_reent+0x24>
 800e328:	6824      	ldr	r4, [r4, #0]
 800e32a:	2c00      	cmp	r4, #0
 800e32c:	d1f7      	bne.n	800e31e <_fwalk_reent+0xe>
 800e32e:	4638      	mov	r0, r7
 800e330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e334:	89ab      	ldrh	r3, [r5, #12]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d907      	bls.n	800e34a <_fwalk_reent+0x3a>
 800e33a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e33e:	3301      	adds	r3, #1
 800e340:	d003      	beq.n	800e34a <_fwalk_reent+0x3a>
 800e342:	4629      	mov	r1, r5
 800e344:	4630      	mov	r0, r6
 800e346:	47c0      	blx	r8
 800e348:	4307      	orrs	r7, r0
 800e34a:	3568      	adds	r5, #104	; 0x68
 800e34c:	e7e9      	b.n	800e322 <_fwalk_reent+0x12>

0800e34e <__retarget_lock_init_recursive>:
 800e34e:	4770      	bx	lr

0800e350 <__retarget_lock_acquire_recursive>:
 800e350:	4770      	bx	lr

0800e352 <__retarget_lock_release_recursive>:
 800e352:	4770      	bx	lr

0800e354 <__swhatbuf_r>:
 800e354:	b570      	push	{r4, r5, r6, lr}
 800e356:	460e      	mov	r6, r1
 800e358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e35c:	2900      	cmp	r1, #0
 800e35e:	b096      	sub	sp, #88	; 0x58
 800e360:	4614      	mov	r4, r2
 800e362:	461d      	mov	r5, r3
 800e364:	da08      	bge.n	800e378 <__swhatbuf_r+0x24>
 800e366:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e36a:	2200      	movs	r2, #0
 800e36c:	602a      	str	r2, [r5, #0]
 800e36e:	061a      	lsls	r2, r3, #24
 800e370:	d410      	bmi.n	800e394 <__swhatbuf_r+0x40>
 800e372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e376:	e00e      	b.n	800e396 <__swhatbuf_r+0x42>
 800e378:	466a      	mov	r2, sp
 800e37a:	f000 f903 	bl	800e584 <_fstat_r>
 800e37e:	2800      	cmp	r0, #0
 800e380:	dbf1      	blt.n	800e366 <__swhatbuf_r+0x12>
 800e382:	9a01      	ldr	r2, [sp, #4]
 800e384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e38c:	425a      	negs	r2, r3
 800e38e:	415a      	adcs	r2, r3
 800e390:	602a      	str	r2, [r5, #0]
 800e392:	e7ee      	b.n	800e372 <__swhatbuf_r+0x1e>
 800e394:	2340      	movs	r3, #64	; 0x40
 800e396:	2000      	movs	r0, #0
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	b016      	add	sp, #88	; 0x58
 800e39c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3a0 <__smakebuf_r>:
 800e3a0:	898b      	ldrh	r3, [r1, #12]
 800e3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3a4:	079d      	lsls	r5, r3, #30
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	460c      	mov	r4, r1
 800e3aa:	d507      	bpl.n	800e3bc <__smakebuf_r+0x1c>
 800e3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	6123      	str	r3, [r4, #16]
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	6163      	str	r3, [r4, #20]
 800e3b8:	b002      	add	sp, #8
 800e3ba:	bd70      	pop	{r4, r5, r6, pc}
 800e3bc:	ab01      	add	r3, sp, #4
 800e3be:	466a      	mov	r2, sp
 800e3c0:	f7ff ffc8 	bl	800e354 <__swhatbuf_r>
 800e3c4:	9900      	ldr	r1, [sp, #0]
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f7ff f959 	bl	800d680 <_malloc_r>
 800e3ce:	b948      	cbnz	r0, 800e3e4 <__smakebuf_r+0x44>
 800e3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3d4:	059a      	lsls	r2, r3, #22
 800e3d6:	d4ef      	bmi.n	800e3b8 <__smakebuf_r+0x18>
 800e3d8:	f023 0303 	bic.w	r3, r3, #3
 800e3dc:	f043 0302 	orr.w	r3, r3, #2
 800e3e0:	81a3      	strh	r3, [r4, #12]
 800e3e2:	e7e3      	b.n	800e3ac <__smakebuf_r+0xc>
 800e3e4:	4b0d      	ldr	r3, [pc, #52]	; (800e41c <__smakebuf_r+0x7c>)
 800e3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e3e8:	89a3      	ldrh	r3, [r4, #12]
 800e3ea:	6020      	str	r0, [r4, #0]
 800e3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3f0:	81a3      	strh	r3, [r4, #12]
 800e3f2:	9b00      	ldr	r3, [sp, #0]
 800e3f4:	6163      	str	r3, [r4, #20]
 800e3f6:	9b01      	ldr	r3, [sp, #4]
 800e3f8:	6120      	str	r0, [r4, #16]
 800e3fa:	b15b      	cbz	r3, 800e414 <__smakebuf_r+0x74>
 800e3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e400:	4630      	mov	r0, r6
 800e402:	f000 f8d1 	bl	800e5a8 <_isatty_r>
 800e406:	b128      	cbz	r0, 800e414 <__smakebuf_r+0x74>
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	f023 0303 	bic.w	r3, r3, #3
 800e40e:	f043 0301 	orr.w	r3, r3, #1
 800e412:	81a3      	strh	r3, [r4, #12]
 800e414:	89a0      	ldrh	r0, [r4, #12]
 800e416:	4305      	orrs	r5, r0
 800e418:	81a5      	strh	r5, [r4, #12]
 800e41a:	e7cd      	b.n	800e3b8 <__smakebuf_r+0x18>
 800e41c:	0800e1ad 	.word	0x0800e1ad

0800e420 <_malloc_usable_size_r>:
 800e420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e424:	1f18      	subs	r0, r3, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	bfbc      	itt	lt
 800e42a:	580b      	ldrlt	r3, [r1, r0]
 800e42c:	18c0      	addlt	r0, r0, r3
 800e42e:	4770      	bx	lr

0800e430 <_raise_r>:
 800e430:	291f      	cmp	r1, #31
 800e432:	b538      	push	{r3, r4, r5, lr}
 800e434:	4604      	mov	r4, r0
 800e436:	460d      	mov	r5, r1
 800e438:	d904      	bls.n	800e444 <_raise_r+0x14>
 800e43a:	2316      	movs	r3, #22
 800e43c:	6003      	str	r3, [r0, #0]
 800e43e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e442:	bd38      	pop	{r3, r4, r5, pc}
 800e444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e446:	b112      	cbz	r2, 800e44e <_raise_r+0x1e>
 800e448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e44c:	b94b      	cbnz	r3, 800e462 <_raise_r+0x32>
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 f830 	bl	800e4b4 <_getpid_r>
 800e454:	462a      	mov	r2, r5
 800e456:	4601      	mov	r1, r0
 800e458:	4620      	mov	r0, r4
 800e45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e45e:	f000 b817 	b.w	800e490 <_kill_r>
 800e462:	2b01      	cmp	r3, #1
 800e464:	d00a      	beq.n	800e47c <_raise_r+0x4c>
 800e466:	1c59      	adds	r1, r3, #1
 800e468:	d103      	bne.n	800e472 <_raise_r+0x42>
 800e46a:	2316      	movs	r3, #22
 800e46c:	6003      	str	r3, [r0, #0]
 800e46e:	2001      	movs	r0, #1
 800e470:	e7e7      	b.n	800e442 <_raise_r+0x12>
 800e472:	2400      	movs	r4, #0
 800e474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e478:	4628      	mov	r0, r5
 800e47a:	4798      	blx	r3
 800e47c:	2000      	movs	r0, #0
 800e47e:	e7e0      	b.n	800e442 <_raise_r+0x12>

0800e480 <raise>:
 800e480:	4b02      	ldr	r3, [pc, #8]	; (800e48c <raise+0xc>)
 800e482:	4601      	mov	r1, r0
 800e484:	6818      	ldr	r0, [r3, #0]
 800e486:	f7ff bfd3 	b.w	800e430 <_raise_r>
 800e48a:	bf00      	nop
 800e48c:	200000b8 	.word	0x200000b8

0800e490 <_kill_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4d07      	ldr	r5, [pc, #28]	; (800e4b0 <_kill_r+0x20>)
 800e494:	2300      	movs	r3, #0
 800e496:	4604      	mov	r4, r0
 800e498:	4608      	mov	r0, r1
 800e49a:	4611      	mov	r1, r2
 800e49c:	602b      	str	r3, [r5, #0]
 800e49e:	f7f4 fe8d 	bl	80031bc <_kill>
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	d102      	bne.n	800e4ac <_kill_r+0x1c>
 800e4a6:	682b      	ldr	r3, [r5, #0]
 800e4a8:	b103      	cbz	r3, 800e4ac <_kill_r+0x1c>
 800e4aa:	6023      	str	r3, [r4, #0]
 800e4ac:	bd38      	pop	{r3, r4, r5, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20004714 	.word	0x20004714

0800e4b4 <_getpid_r>:
 800e4b4:	f7f4 be7a 	b.w	80031ac <_getpid>

0800e4b8 <__sread>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c0:	f000 f894 	bl	800e5ec <_read_r>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	bfab      	itete	ge
 800e4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e4cc:	181b      	addge	r3, r3, r0
 800e4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4d2:	bfac      	ite	ge
 800e4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4d6:	81a3      	strhlt	r3, [r4, #12]
 800e4d8:	bd10      	pop	{r4, pc}

0800e4da <__swrite>:
 800e4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4de:	461f      	mov	r7, r3
 800e4e0:	898b      	ldrh	r3, [r1, #12]
 800e4e2:	05db      	lsls	r3, r3, #23
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	4616      	mov	r6, r2
 800e4ea:	d505      	bpl.n	800e4f8 <__swrite+0x1e>
 800e4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f000 f868 	bl	800e5c8 <_lseek_r>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	4632      	mov	r2, r6
 800e506:	463b      	mov	r3, r7
 800e508:	4628      	mov	r0, r5
 800e50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e50e:	f000 b817 	b.w	800e540 <_write_r>

0800e512 <__sseek>:
 800e512:	b510      	push	{r4, lr}
 800e514:	460c      	mov	r4, r1
 800e516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51a:	f000 f855 	bl	800e5c8 <_lseek_r>
 800e51e:	1c43      	adds	r3, r0, #1
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	bf15      	itete	ne
 800e524:	6560      	strne	r0, [r4, #84]	; 0x54
 800e526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e52e:	81a3      	strheq	r3, [r4, #12]
 800e530:	bf18      	it	ne
 800e532:	81a3      	strhne	r3, [r4, #12]
 800e534:	bd10      	pop	{r4, pc}

0800e536 <__sclose>:
 800e536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e53a:	f000 b813 	b.w	800e564 <_close_r>
	...

0800e540 <_write_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4d07      	ldr	r5, [pc, #28]	; (800e560 <_write_r+0x20>)
 800e544:	4604      	mov	r4, r0
 800e546:	4608      	mov	r0, r1
 800e548:	4611      	mov	r1, r2
 800e54a:	2200      	movs	r2, #0
 800e54c:	602a      	str	r2, [r5, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	f7f4 fe6b 	bl	800322a <_write>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	d102      	bne.n	800e55e <_write_r+0x1e>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	b103      	cbz	r3, 800e55e <_write_r+0x1e>
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	20004714 	.word	0x20004714

0800e564 <_close_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4d06      	ldr	r5, [pc, #24]	; (800e580 <_close_r+0x1c>)
 800e568:	2300      	movs	r3, #0
 800e56a:	4604      	mov	r4, r0
 800e56c:	4608      	mov	r0, r1
 800e56e:	602b      	str	r3, [r5, #0]
 800e570:	f7f4 fe77 	bl	8003262 <_close>
 800e574:	1c43      	adds	r3, r0, #1
 800e576:	d102      	bne.n	800e57e <_close_r+0x1a>
 800e578:	682b      	ldr	r3, [r5, #0]
 800e57a:	b103      	cbz	r3, 800e57e <_close_r+0x1a>
 800e57c:	6023      	str	r3, [r4, #0]
 800e57e:	bd38      	pop	{r3, r4, r5, pc}
 800e580:	20004714 	.word	0x20004714

0800e584 <_fstat_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d07      	ldr	r5, [pc, #28]	; (800e5a4 <_fstat_r+0x20>)
 800e588:	2300      	movs	r3, #0
 800e58a:	4604      	mov	r4, r0
 800e58c:	4608      	mov	r0, r1
 800e58e:	4611      	mov	r1, r2
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	f7f4 fe72 	bl	800327a <_fstat>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	d102      	bne.n	800e5a0 <_fstat_r+0x1c>
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	b103      	cbz	r3, 800e5a0 <_fstat_r+0x1c>
 800e59e:	6023      	str	r3, [r4, #0]
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20004714 	.word	0x20004714

0800e5a8 <_isatty_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4d06      	ldr	r5, [pc, #24]	; (800e5c4 <_isatty_r+0x1c>)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	f7f4 fe71 	bl	800329a <_isatty>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_isatty_r+0x1a>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_isatty_r+0x1a>
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	20004714 	.word	0x20004714

0800e5c8 <_lseek_r>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	4d07      	ldr	r5, [pc, #28]	; (800e5e8 <_lseek_r+0x20>)
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	4608      	mov	r0, r1
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	602a      	str	r2, [r5, #0]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	f7f4 fe6a 	bl	80032b0 <_lseek>
 800e5dc:	1c43      	adds	r3, r0, #1
 800e5de:	d102      	bne.n	800e5e6 <_lseek_r+0x1e>
 800e5e0:	682b      	ldr	r3, [r5, #0]
 800e5e2:	b103      	cbz	r3, 800e5e6 <_lseek_r+0x1e>
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	20004714 	.word	0x20004714

0800e5ec <_read_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4d07      	ldr	r5, [pc, #28]	; (800e60c <_read_r+0x20>)
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	4608      	mov	r0, r1
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	602a      	str	r2, [r5, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	f7f4 fdf8 	bl	80031f0 <_read>
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	d102      	bne.n	800e60a <_read_r+0x1e>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	b103      	cbz	r3, 800e60a <_read_r+0x1e>
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	20004714 	.word	0x20004714

0800e610 <_init>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	bf00      	nop
 800e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e616:	bc08      	pop	{r3}
 800e618:	469e      	mov	lr, r3
 800e61a:	4770      	bx	lr

0800e61c <_fini>:
 800e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61e:	bf00      	nop
 800e620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e622:	bc08      	pop	{r3}
 800e624:	469e      	mov	lr, r3
 800e626:	4770      	bx	lr
